<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Castle.Windsor.Fakes</name>
    </assembly>
    <members>
        <member name="T:Castle.Core.Fakes.ShimBoundToAttribute">
            <summary>Shim type of Castle.Core.BoundToAttribute</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimBoundToAttribute.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimBoundToAttribute.#ctor(Castle.Core.BoundToAttribute)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimBoundToAttribute.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimBoundToAttribute.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimBoundToAttribute.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimBoundToAttribute.ConstructorType">
            <summary>Sets the shim of BoundToAttribute.BoundToAttribute(Type scopeRootBinderType)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimBoundToAttribute.ScopeRootBinderTypeGet">
            <summary>Sets the shim of BoundToAttribute.get_ScopeRootBinderType()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimBoundToAttribute.ScopeRootBinderTypeSetType">
            <summary>Sets the shim of BoundToAttribute.set_ScopeRootBinderType(Type value)</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimBoundToAttribute.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimBoundToAttribute.AllInstances.ScopeRootBinderTypeGet">
            <summary>Sets the shim of BoundToAttribute.get_ScopeRootBinderType()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimBoundToAttribute.AllInstances.ScopeRootBinderTypeSetType">
            <summary>Sets the shim of BoundToAttribute.set_ScopeRootBinderType(Type value)</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimCastleComponentAttribute">
            <summary>Shim type of Castle.Core.CastleComponentAttribute</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimCastleComponentAttribute.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimCastleComponentAttribute.#ctor(Castle.Core.CastleComponentAttribute)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimCastleComponentAttribute.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimCastleComponentAttribute.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimCastleComponentAttribute.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimCastleComponentAttribute.ConstructorString">
            <summary>Sets the shim of CastleComponentAttribute.CastleComponentAttribute(String name)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimCastleComponentAttribute.ConstructorStringLifestyleTypeTypeArray">
            <summary>Sets the shim of CastleComponentAttribute.CastleComponentAttribute(String name, LifestyleType lifestyle, Type[] services)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimCastleComponentAttribute.ConstructorStringTypeArray">
            <summary>Sets the shim of CastleComponentAttribute.CastleComponentAttribute(String name, Type[] services)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimCastleComponentAttribute.ConstructorTypeArray">
            <summary>Sets the shim of CastleComponentAttribute.CastleComponentAttribute(Type[] services)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimCastleComponentAttribute.GetDefaultsForType">
            <summary>Sets the shim of CastleComponentAttribute.GetDefaultsFor(Type type)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimCastleComponentAttribute.HasNameGet">
            <summary>Sets the shim of CastleComponentAttribute.get_HasName()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimCastleComponentAttribute.NameGet">
            <summary>Sets the shim of CastleComponentAttribute.get_Name()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimCastleComponentAttribute.NameSetString">
            <summary>Sets the shim of CastleComponentAttribute.set_Name(String value)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimCastleComponentAttribute.ServicesGet">
            <summary>Sets the shim of CastleComponentAttribute.get_Services()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimCastleComponentAttribute.ServicesSetTypeArray">
            <summary>Sets the shim of CastleComponentAttribute.set_Services(Type[] value)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimCastleComponentAttribute.ServicesSpecifiedExplicitlyGet">
            <summary>Sets the shim of CastleComponentAttribute.get_ServicesSpecifiedExplicitly()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimCastleComponentAttribute.ServicesSpecifiedExplicitlySetBoolean">
            <summary>Sets the shim of CastleComponentAttribute.set_ServicesSpecifiedExplicitly(Boolean value)</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimCastleComponentAttribute.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimCastleComponentAttribute.AllInstances.HasNameGet">
            <summary>Sets the shim of CastleComponentAttribute.get_HasName()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimCastleComponentAttribute.AllInstances.NameGet">
            <summary>Sets the shim of CastleComponentAttribute.get_Name()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimCastleComponentAttribute.AllInstances.NameSetString">
            <summary>Sets the shim of CastleComponentAttribute.set_Name(String value)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimCastleComponentAttribute.AllInstances.ServicesGet">
            <summary>Sets the shim of CastleComponentAttribute.get_Services()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimCastleComponentAttribute.AllInstances.ServicesSetTypeArray">
            <summary>Sets the shim of CastleComponentAttribute.set_Services(Type[] value)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimCastleComponentAttribute.AllInstances.ServicesSpecifiedExplicitlyGet">
            <summary>Sets the shim of CastleComponentAttribute.get_ServicesSpecifiedExplicitly()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimCastleComponentAttribute.AllInstances.ServicesSpecifiedExplicitlySetBoolean">
            <summary>Sets the shim of CastleComponentAttribute.set_ServicesSpecifiedExplicitly(Boolean value)</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimComponentActivatorAttribute">
            <summary>Shim type of Castle.Core.ComponentActivatorAttribute</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimComponentActivatorAttribute.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimComponentActivatorAttribute.#ctor(Castle.Core.ComponentActivatorAttribute)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimComponentActivatorAttribute.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimComponentActivatorAttribute.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentActivatorAttribute.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentActivatorAttribute.ComponentActivatorTypeGet">
            <summary>Sets the shim of ComponentActivatorAttribute.get_ComponentActivatorType()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentActivatorAttribute.ConstructorType">
            <summary>Sets the shim of ComponentActivatorAttribute.ComponentActivatorAttribute(Type componentActivatorType)</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimComponentActivatorAttribute.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentActivatorAttribute.AllInstances.ComponentActivatorTypeGet">
            <summary>Sets the shim of ComponentActivatorAttribute.get_ComponentActivatorType()</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimComponentDependencyModel">
            <summary>Shim type of Castle.Core.ComponentDependencyModel</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimComponentDependencyModel.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimComponentDependencyModel.#ctor(Castle.Core.ComponentDependencyModel)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimComponentDependencyModel.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimComponentDependencyModel.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentDependencyModel.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentDependencyModel.ConstructorString">
            <summary>Sets the shim of ComponentDependencyModel.ComponentDependencyModel(String referencedComponentName)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentDependencyModel.ConstructorStringType">
            <summary>Sets the shim of ComponentDependencyModel.ComponentDependencyModel(String referencedComponentName, Type serviceType)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentDependencyModel.InitParameterModelCollection">
            <summary>Sets the shim of ComponentDependencyModel.Init(ParameterModelCollection parameters)</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimComponentDependencyModel.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentDependencyModel.AllInstances.InitParameterModelCollection">
            <summary>Sets the shim of ComponentDependencyModel.Init(ParameterModelCollection parameters)</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimComponentModel">
            <summary>Shim type of Castle.Core.ComponentModel</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimComponentModel.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimComponentModel.#ctor(Castle.Core.ComponentModel)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimComponentModel.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimComponentModel.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimComponentModel.Bind(Castle.Core.Internal.IVertex)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimComponentModel.RequiresOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action)">
            <summary>Sets the shim of ComponentModel.Requires()</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimComponentModel._Requiresb__4Of1PropertySet``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.Core.PropertySet,System.Boolean})">
            <summary>Sets the shim of ComponentModel.&lt;Requires&gt;b__4(PropertySet p)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.AddConstructorConstructorCandidate">
            <summary>Sets the shim of ComponentModel.AddConstructor(ConstructorCandidate constructor)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.AddPropertyPropertySet">
            <summary>Sets the shim of ComponentModel.AddProperty(PropertySet property)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.AddServiceType">
            <summary>Sets the shim of ComponentModel.AddService(Type type)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.ComponentNameGet">
            <summary>Sets the shim of ComponentModel.get_ComponentName()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.ComponentNameSetComponentName">
            <summary>Sets the shim of ComponentModel.set_ComponentName(ComponentName value)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.ConfigurationGet">
            <summary>Sets the shim of ComponentModel.get_Configuration()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.ConfigurationSetIConfiguration">
            <summary>Sets the shim of ComponentModel.set_Configuration(IConfiguration value)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.Constructor">
            <summary>Sets the shim of ComponentModel.ComponentModel()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.ConstructorComponentNameICollectionOfTypeTypeIDictionary">
            <summary>Sets the shim of ComponentModel.ComponentModel(ComponentName name, ICollection`1&lt;Type&gt; services, Type implementation, IDictionary extendedProperties)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.ConstructorsGet">
            <summary>Sets the shim of ComponentModel.get_Constructors()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.CustomComponentActivatorGet">
            <summary>Sets the shim of ComponentModel.get_CustomComponentActivator()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.CustomComponentActivatorSetType">
            <summary>Sets the shim of ComponentModel.set_CustomComponentActivator(Type value)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.CustomDependenciesGet">
            <summary>Sets the shim of ComponentModel.get_CustomDependencies()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.CustomLifestyleGet">
            <summary>Sets the shim of ComponentModel.get_CustomLifestyle()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.CustomLifestyleSetType">
            <summary>Sets the shim of ComponentModel.set_CustomLifestyle(Type value)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.DependenciesGet">
            <summary>Sets the shim of ComponentModel.get_Dependencies()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.ExtendedPropertiesGet">
            <summary>Sets the shim of ComponentModel.get_ExtendedProperties()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.HasClassServicesGet">
            <summary>Sets the shim of ComponentModel.get_HasClassServices()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.HasCustomDependenciesGet">
            <summary>Sets the shim of ComponentModel.get_HasCustomDependencies()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.HasInterceptorsGet">
            <summary>Sets the shim of ComponentModel.get_HasInterceptors()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.HasParametersGet">
            <summary>Sets the shim of ComponentModel.get_HasParameters()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.ImplementationGet">
            <summary>Sets the shim of ComponentModel.get_Implementation()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.ImplementationSetType">
            <summary>Sets the shim of ComponentModel.set_Implementation(Type value)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.InspectionBehaviorGet">
            <summary>Sets the shim of ComponentModel.get_InspectionBehavior()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.InspectionBehaviorSetPropertiesInspectionBehavior">
            <summary>Sets the shim of ComponentModel.set_InspectionBehavior(PropertiesInspectionBehavior value)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.InterceptorsGet">
            <summary>Sets the shim of ComponentModel.get_Interceptors()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.LifecycleGet">
            <summary>Sets the shim of ComponentModel.get_Lifecycle()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.LifestyleTypeGet">
            <summary>Sets the shim of ComponentModel.get_LifestyleType()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.LifestyleTypeSetLifestyleType">
            <summary>Sets the shim of ComponentModel.set_LifestyleType(LifestyleType value)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.NameGet">
            <summary>Sets the shim of ComponentModel.get_Name()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.NameSetString">
            <summary>Sets the shim of ComponentModel.set_Name(String value)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.ParametersGet">
            <summary>Sets the shim of ComponentModel.get_Parameters()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.ParametersInternalGet">
            <summary>Sets the shim of ComponentModel.get_ParametersInternal()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.PropertiesGet">
            <summary>Sets the shim of ComponentModel.get_Properties()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.RequiresGenericArgumentsGet">
            <summary>Sets the shim of ComponentModel.get_RequiresGenericArguments()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.RequiresGenericArgumentsSetBoolean">
            <summary>Sets the shim of ComponentModel.set_RequiresGenericArguments(Boolean value)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.RequiresPredicateOfPropertySetArray">
            <summary>Sets the shim of ComponentModel.Requires(Predicate`1&lt;PropertySet&gt;[] selectors)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.ServicesGet">
            <summary>Sets the shim of ComponentModel.get_Services()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.ToString">
            <summary>Sets the shim of ComponentModel.ToString()</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimComponentModel.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimComponentModel.AllInstances.RequiresOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{Castle.Core.ComponentModel})">
            <summary>Sets the shim of ComponentModel.Requires()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.AllInstances.AddConstructorConstructorCandidate">
            <summary>Sets the shim of ComponentModel.AddConstructor(ConstructorCandidate constructor)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.AllInstances.AddPropertyPropertySet">
            <summary>Sets the shim of ComponentModel.AddProperty(PropertySet property)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.AllInstances.AddServiceType">
            <summary>Sets the shim of ComponentModel.AddService(Type type)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.AllInstances.ComponentNameGet">
            <summary>Sets the shim of ComponentModel.get_ComponentName()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.AllInstances.ComponentNameSetComponentName">
            <summary>Sets the shim of ComponentModel.set_ComponentName(ComponentName value)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.AllInstances.ConfigurationGet">
            <summary>Sets the shim of ComponentModel.get_Configuration()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.AllInstances.ConfigurationSetIConfiguration">
            <summary>Sets the shim of ComponentModel.set_Configuration(IConfiguration value)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.AllInstances.ConstructorsGet">
            <summary>Sets the shim of ComponentModel.get_Constructors()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.AllInstances.CustomComponentActivatorGet">
            <summary>Sets the shim of ComponentModel.get_CustomComponentActivator()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.AllInstances.CustomComponentActivatorSetType">
            <summary>Sets the shim of ComponentModel.set_CustomComponentActivator(Type value)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.AllInstances.CustomDependenciesGet">
            <summary>Sets the shim of ComponentModel.get_CustomDependencies()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.AllInstances.CustomLifestyleGet">
            <summary>Sets the shim of ComponentModel.get_CustomLifestyle()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.AllInstances.CustomLifestyleSetType">
            <summary>Sets the shim of ComponentModel.set_CustomLifestyle(Type value)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.AllInstances.DependenciesGet">
            <summary>Sets the shim of ComponentModel.get_Dependencies()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.AllInstances.ExtendedPropertiesGet">
            <summary>Sets the shim of ComponentModel.get_ExtendedProperties()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.AllInstances.HasClassServicesGet">
            <summary>Sets the shim of ComponentModel.get_HasClassServices()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.AllInstances.HasCustomDependenciesGet">
            <summary>Sets the shim of ComponentModel.get_HasCustomDependencies()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.AllInstances.HasInterceptorsGet">
            <summary>Sets the shim of ComponentModel.get_HasInterceptors()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.AllInstances.HasParametersGet">
            <summary>Sets the shim of ComponentModel.get_HasParameters()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.AllInstances.ImplementationGet">
            <summary>Sets the shim of ComponentModel.get_Implementation()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.AllInstances.ImplementationSetType">
            <summary>Sets the shim of ComponentModel.set_Implementation(Type value)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.AllInstances.InspectionBehaviorGet">
            <summary>Sets the shim of ComponentModel.get_InspectionBehavior()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.AllInstances.InspectionBehaviorSetPropertiesInspectionBehavior">
            <summary>Sets the shim of ComponentModel.set_InspectionBehavior(PropertiesInspectionBehavior value)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.AllInstances.InterceptorsGet">
            <summary>Sets the shim of ComponentModel.get_Interceptors()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.AllInstances.LifecycleGet">
            <summary>Sets the shim of ComponentModel.get_Lifecycle()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.AllInstances.LifestyleTypeGet">
            <summary>Sets the shim of ComponentModel.get_LifestyleType()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.AllInstances.LifestyleTypeSetLifestyleType">
            <summary>Sets the shim of ComponentModel.set_LifestyleType(LifestyleType value)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.AllInstances.NameGet">
            <summary>Sets the shim of ComponentModel.get_Name()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.AllInstances.NameSetString">
            <summary>Sets the shim of ComponentModel.set_Name(String value)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.AllInstances.ParametersGet">
            <summary>Sets the shim of ComponentModel.get_Parameters()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.AllInstances.ParametersInternalGet">
            <summary>Sets the shim of ComponentModel.get_ParametersInternal()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.AllInstances.PropertiesGet">
            <summary>Sets the shim of ComponentModel.get_Properties()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.AllInstances.RequiresGenericArgumentsGet">
            <summary>Sets the shim of ComponentModel.get_RequiresGenericArguments()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.AllInstances.RequiresGenericArgumentsSetBoolean">
            <summary>Sets the shim of ComponentModel.set_RequiresGenericArguments(Boolean value)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.AllInstances.RequiresPredicateOfPropertySetArray">
            <summary>Sets the shim of ComponentModel.Requires(Predicate`1&lt;PropertySet&gt;[] selectors)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.AllInstances.ServicesGet">
            <summary>Sets the shim of ComponentModel.get_Services()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.AllInstances.ToString01">
            <summary>Sets the shim of ComponentModel.ToString()</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimComponentName">
            <summary>Shim type of Castle.Core.ComponentName</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimComponentName.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimComponentName.#ctor(Castle.Core.ComponentName)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimComponentName.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimComponentName.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentName.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentName.ConstructorStringBoolean">
            <summary>Sets the shim of ComponentName.ComponentName(String name, Boolean setByUser)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentName.DefaultForType">
            <summary>Sets the shim of ComponentName.DefaultFor(Type componentType)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentName.DefaultNameForType">
            <summary>Sets the shim of ComponentName.DefaultNameFor(Type componentType)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentName.NameGet">
            <summary>Sets the shim of ComponentName.get_Name()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentName.NameSetString">
            <summary>Sets the shim of ComponentName.set_Name(String value)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentName.SetByUserGet">
            <summary>Sets the shim of ComponentName.get_SetByUser()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentName.SetByUserSetBoolean">
            <summary>Sets the shim of ComponentName.set_SetByUser(Boolean value)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentName.SetNameString">
            <summary>Sets the shim of ComponentName.SetName(String value)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentName.ToString">
            <summary>Sets the shim of ComponentName.ToString()</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimComponentName.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentName.AllInstances.NameGet">
            <summary>Sets the shim of ComponentName.get_Name()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentName.AllInstances.NameSetString">
            <summary>Sets the shim of ComponentName.set_Name(String value)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentName.AllInstances.SetByUserGet">
            <summary>Sets the shim of ComponentName.get_SetByUser()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentName.AllInstances.SetByUserSetBoolean">
            <summary>Sets the shim of ComponentName.set_SetByUser(Boolean value)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentName.AllInstances.SetNameString">
            <summary>Sets the shim of ComponentName.SetName(String value)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentName.AllInstances.ToString01">
            <summary>Sets the shim of ComponentName.ToString()</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimComponentProxyBehaviorAttribute">
            <summary>Shim type of Castle.Core.ComponentProxyBehaviorAttribute</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimComponentProxyBehaviorAttribute.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimComponentProxyBehaviorAttribute.#ctor(Castle.Core.ComponentProxyBehaviorAttribute)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimComponentProxyBehaviorAttribute.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimComponentProxyBehaviorAttribute.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentProxyBehaviorAttribute.AdditionalInterfacesGet">
            <summary>Sets the shim of ComponentProxyBehaviorAttribute.get_AdditionalInterfaces()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentProxyBehaviorAttribute.AdditionalInterfacesSetTypeArray">
            <summary>Sets the shim of ComponentProxyBehaviorAttribute.set_AdditionalInterfaces(Type[] value)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentProxyBehaviorAttribute.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentProxyBehaviorAttribute.Constructor">
            <summary>Sets the shim of ComponentProxyBehaviorAttribute.ComponentProxyBehaviorAttribute()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentProxyBehaviorAttribute.UseMarshalByRefProxyGet">
            <summary>Sets the shim of ComponentProxyBehaviorAttribute.get_UseMarshalByRefProxy()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentProxyBehaviorAttribute.UseMarshalByRefProxySetBoolean">
            <summary>Sets the shim of ComponentProxyBehaviorAttribute.set_UseMarshalByRefProxy(Boolean value)</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimComponentProxyBehaviorAttribute.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentProxyBehaviorAttribute.AllInstances.AdditionalInterfacesGet">
            <summary>Sets the shim of ComponentProxyBehaviorAttribute.get_AdditionalInterfaces()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentProxyBehaviorAttribute.AllInstances.AdditionalInterfacesSetTypeArray">
            <summary>Sets the shim of ComponentProxyBehaviorAttribute.set_AdditionalInterfaces(Type[] value)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentProxyBehaviorAttribute.AllInstances.UseMarshalByRefProxyGet">
            <summary>Sets the shim of ComponentProxyBehaviorAttribute.get_UseMarshalByRefProxy()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentProxyBehaviorAttribute.AllInstances.UseMarshalByRefProxySetBoolean">
            <summary>Sets the shim of ComponentProxyBehaviorAttribute.set_UseMarshalByRefProxy(Boolean value)</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimConstructorCandidate">
            <summary>Shim type of Castle.Core.ConstructorCandidate</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimConstructorCandidate.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimConstructorCandidate.#ctor(Castle.Core.ConstructorCandidate)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimConstructorCandidate.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimConstructorCandidate.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimConstructorCandidate.Bind(System.IComparable{Castle.Core.ConstructorCandidate})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimConstructorCandidate.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimConstructorCandidate.ConstructorConstructorInfoConstructorDependencyModelArray">
            <summary>Sets the shim of ConstructorCandidate.ConstructorCandidate(ConstructorInfo constructorInfo, ConstructorDependencyModel[] dependencies)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimConstructorCandidate.ConstructorGet">
            <summary>Sets the shim of ConstructorCandidate.get_Constructor()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimConstructorCandidate.DependenciesGet">
            <summary>Sets the shim of ConstructorCandidate.get_Dependencies()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimConstructorCandidate.InitParameterConstructorDependencyModel">
            <summary>Sets the shim of ConstructorCandidate.InitParameter(ConstructorDependencyModel parameter)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimConstructorCandidate.SystemIComparableCastleCoreConstructorCandidateCompareToConstructorCandidate">
            <summary>Sets the shim of ConstructorCandidate.System.IComparable&lt;Castle.Core.ConstructorCandidate&gt;.CompareTo(ConstructorCandidate other)</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimConstructorCandidate.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimConstructorCandidate.AllInstances.ConstructorGet">
            <summary>Sets the shim of ConstructorCandidate.get_Constructor()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimConstructorCandidate.AllInstances.DependenciesGet">
            <summary>Sets the shim of ConstructorCandidate.get_Dependencies()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimConstructorCandidate.AllInstances.InitParameterConstructorDependencyModel">
            <summary>Sets the shim of ConstructorCandidate.InitParameter(ConstructorDependencyModel parameter)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimConstructorCandidate.AllInstances.SystemIComparableCastleCoreConstructorCandidateCompareToConstructorCandidate">
            <summary>Sets the shim of ConstructorCandidate.System.IComparable&lt;Castle.Core.ConstructorCandidate&gt;.CompareTo(ConstructorCandidate other)</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimConstructorCandidateCollection">
            <summary>Shim type of Castle.Core.ConstructorCandidateCollection</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimConstructorCandidateCollection.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimConstructorCandidateCollection.#ctor(Castle.Core.ConstructorCandidateCollection)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimConstructorCandidateCollection.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimConstructorCandidateCollection.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimConstructorCandidateCollection.Bind(Castle.Core.Internal.IMutableCollection{Castle.Core.ConstructorCandidate})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimConstructorCandidateCollection.Bind(System.Collections.IEnumerable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimConstructorCandidateCollection.Bind(System.Collections.Generic.IEnumerable{Castle.Core.ConstructorCandidate})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimConstructorCandidateCollection.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimConstructorCandidateCollection.CastleCoreInternalIMutableCollectionCastleCoreConstructorCandidateAddConstructorCandidate">
            <summary>Sets the shim of ConstructorCandidateCollection.Castle.Core.Internal.IMutableCollection&lt;Castle.Core.ConstructorCandidate&gt;.Add(ConstructorCandidate item)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimConstructorCandidateCollection.CastleCoreInternalIMutableCollectionCastleCoreConstructorCandidateRemoveConstructorCandidate">
            <summary>Sets the shim of ConstructorCandidateCollection.Castle.Core.Internal.IMutableCollection&lt;Castle.Core.ConstructorCandidate&gt;.Remove(ConstructorCandidate item)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimConstructorCandidateCollection.Constructor">
            <summary>Sets the shim of ConstructorCandidateCollection.ConstructorCandidateCollection()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimConstructorCandidateCollection.CountGet">
            <summary>Sets the shim of ConstructorCandidateCollection.get_Count()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimConstructorCandidateCollection.GetEnumerator">
            <summary>Sets the shim of ConstructorCandidateCollection.GetEnumerator()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimConstructorCandidateCollection.ItemGetInt32">
            <summary>Sets the shim of ConstructorCandidateCollection.get_Item(Int32 index)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimConstructorCandidateCollection.SystemCollectionsIEnumerableGetEnumerator">
            <summary>Sets the shim of ConstructorCandidateCollection.System.Collections.IEnumerable.GetEnumerator()</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimConstructorCandidateCollection.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimConstructorCandidateCollection.AllInstances.CastleCoreInternalIMutableCollectionCastleCoreConstructorCandidateAddConstructorCandidate">
            <summary>Sets the shim of ConstructorCandidateCollection.Castle.Core.Internal.IMutableCollection&lt;Castle.Core.ConstructorCandidate&gt;.Add(ConstructorCandidate item)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimConstructorCandidateCollection.AllInstances.CastleCoreInternalIMutableCollectionCastleCoreConstructorCandidateRemoveConstructorCandidate">
            <summary>Sets the shim of ConstructorCandidateCollection.Castle.Core.Internal.IMutableCollection&lt;Castle.Core.ConstructorCandidate&gt;.Remove(ConstructorCandidate item)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimConstructorCandidateCollection.AllInstances.CountGet">
            <summary>Sets the shim of ConstructorCandidateCollection.get_Count()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimConstructorCandidateCollection.AllInstances.GetEnumerator">
            <summary>Sets the shim of ConstructorCandidateCollection.GetEnumerator()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimConstructorCandidateCollection.AllInstances.ItemGetInt32">
            <summary>Sets the shim of ConstructorCandidateCollection.get_Item(Int32 index)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimConstructorCandidateCollection.AllInstances.SystemCollectionsIEnumerableGetEnumerator">
            <summary>Sets the shim of ConstructorCandidateCollection.System.Collections.IEnumerable.GetEnumerator()</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimConstructorDependencyModel">
            <summary>Shim type of Castle.Core.ConstructorDependencyModel</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimConstructorDependencyModel.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimConstructorDependencyModel.#ctor(Castle.Core.ConstructorDependencyModel)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimConstructorDependencyModel.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimConstructorDependencyModel.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimConstructorDependencyModel.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimConstructorDependencyModel.ConstructorGet">
            <summary>Sets the shim of ConstructorDependencyModel.get_Constructor()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimConstructorDependencyModel.ConstructorParameterInfo">
            <summary>Sets the shim of ConstructorDependencyModel.ConstructorDependencyModel(ParameterInfo parameter)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimConstructorDependencyModel.SetParentConstructorConstructorCandidate">
            <summary>Sets the shim of ConstructorDependencyModel.SetParentConstructor(ConstructorCandidate ctor)</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimConstructorDependencyModel.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimConstructorDependencyModel.AllInstances.ConstructorGet">
            <summary>Sets the shim of ConstructorDependencyModel.get_Constructor()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimConstructorDependencyModel.AllInstances.SetParentConstructorConstructorCandidate">
            <summary>Sets the shim of ConstructorDependencyModel.SetParentConstructor(ConstructorCandidate ctor)</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimCustomLifestyleAttribute">
            <summary>Shim type of Castle.Core.CustomLifestyleAttribute</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimCustomLifestyleAttribute.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimCustomLifestyleAttribute.#ctor(Castle.Core.CustomLifestyleAttribute)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimCustomLifestyleAttribute.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimCustomLifestyleAttribute.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimCustomLifestyleAttribute.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimCustomLifestyleAttribute.ConstructorType">
            <summary>Sets the shim of CustomLifestyleAttribute.CustomLifestyleAttribute(Type customLifestyleType)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimCustomLifestyleAttribute.CustomLifestyleTypeGet">
            <summary>Sets the shim of CustomLifestyleAttribute.get_CustomLifestyleType()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimCustomLifestyleAttribute.LifestyleHandlerTypeGet">
            <summary>Sets the shim of CustomLifestyleAttribute.get_LifestyleHandlerType()</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimCustomLifestyleAttribute.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimCustomLifestyleAttribute.AllInstances.CustomLifestyleTypeGet">
            <summary>Sets the shim of CustomLifestyleAttribute.get_CustomLifestyleType()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimCustomLifestyleAttribute.AllInstances.LifestyleHandlerTypeGet">
            <summary>Sets the shim of CustomLifestyleAttribute.get_LifestyleHandlerType()</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimDependencyModel">
            <summary>Shim type of Castle.Core.DependencyModel</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimDependencyModel.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimDependencyModel.#ctor(Castle.Core.DependencyModel)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimDependencyModel.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimDependencyModel.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimDependencyModel.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimDependencyModel.ConstructorStringTypeBoolean">
            <summary>Sets the shim of DependencyModel.DependencyModel(String dependencyKey, Type targetType, Boolean isOptional)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimDependencyModel.ConstructorStringTypeBooleanBooleanObject">
            <summary>Sets the shim of DependencyModel.DependencyModel(String dependencyKey, Type targetType, Boolean isOptional, Boolean hasDefaultValue, Object defaultValue)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimDependencyModel.DefaultValueGet">
            <summary>Sets the shim of DependencyModel.get_DefaultValue()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimDependencyModel.DefaultValueSetObject">
            <summary>Sets the shim of DependencyModel.set_DefaultValue(Object value)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimDependencyModel.DependencyKeyGet">
            <summary>Sets the shim of DependencyModel.get_DependencyKey()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimDependencyModel.DependencyKeySetString">
            <summary>Sets the shim of DependencyModel.set_DependencyKey(String value)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimDependencyModel.EqualsObject">
            <summary>Sets the shim of DependencyModel.Equals(Object obj)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimDependencyModel.GetHashCode">
            <summary>Sets the shim of DependencyModel.GetHashCode()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimDependencyModel.GetParameterModelByTypeTypeParameterModelCollection">
            <summary>Sets the shim of DependencyModel.GetParameterModelByType(Type type, ParameterModelCollection parameters)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimDependencyModel.HasDefaultValueGet">
            <summary>Sets the shim of DependencyModel.get_HasDefaultValue()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimDependencyModel.HasDefaultValueSetBoolean">
            <summary>Sets the shim of DependencyModel.set_HasDefaultValue(Boolean value)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimDependencyModel.InitParameterModelCollection">
            <summary>Sets the shim of DependencyModel.Init(ParameterModelCollection parameters)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimDependencyModel.IsOptionalGet">
            <summary>Sets the shim of DependencyModel.get_IsOptional()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimDependencyModel.IsOptionalSetBoolean">
            <summary>Sets the shim of DependencyModel.set_IsOptional(Boolean value)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimDependencyModel.IsPrimitiveTypeDependencyGet">
            <summary>Sets the shim of DependencyModel.get_IsPrimitiveTypeDependency()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimDependencyModel.ObtainParameterModelByNameParameterModelCollection">
            <summary>Sets the shim of DependencyModel.ObtainParameterModelByName(ParameterModelCollection parameters)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimDependencyModel.ObtainParameterModelByTypeParameterModelCollection">
            <summary>Sets the shim of DependencyModel.ObtainParameterModelByType(ParameterModelCollection parameters)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimDependencyModel.ParameterGet">
            <summary>Sets the shim of DependencyModel.get_Parameter()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimDependencyModel.ParameterSetParameterModel">
            <summary>Sets the shim of DependencyModel.set_Parameter(ParameterModel value)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimDependencyModel.ReferencedComponentNameGet">
            <summary>Sets the shim of DependencyModel.get_ReferencedComponentName()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimDependencyModel.TargetItemTypeGet">
            <summary>Sets the shim of DependencyModel.get_TargetItemType()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimDependencyModel.TargetTypeGet">
            <summary>Sets the shim of DependencyModel.get_TargetType()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimDependencyModel.ToString">
            <summary>Sets the shim of DependencyModel.ToString()</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimDependencyModel.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimDependencyModel.AllInstances.DefaultValueGet">
            <summary>Sets the shim of DependencyModel.get_DefaultValue()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimDependencyModel.AllInstances.DefaultValueSetObject">
            <summary>Sets the shim of DependencyModel.set_DefaultValue(Object value)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimDependencyModel.AllInstances.DependencyKeyGet">
            <summary>Sets the shim of DependencyModel.get_DependencyKey()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimDependencyModel.AllInstances.DependencyKeySetString">
            <summary>Sets the shim of DependencyModel.set_DependencyKey(String value)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimDependencyModel.AllInstances.EqualsObject">
            <summary>Sets the shim of DependencyModel.Equals(Object obj)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimDependencyModel.AllInstances.GetHashCode01">
            <summary>Sets the shim of DependencyModel.GetHashCode()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimDependencyModel.AllInstances.GetParameterModelByTypeTypeParameterModelCollection">
            <summary>Sets the shim of DependencyModel.GetParameterModelByType(Type type, ParameterModelCollection parameters)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimDependencyModel.AllInstances.HasDefaultValueGet">
            <summary>Sets the shim of DependencyModel.get_HasDefaultValue()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimDependencyModel.AllInstances.HasDefaultValueSetBoolean">
            <summary>Sets the shim of DependencyModel.set_HasDefaultValue(Boolean value)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimDependencyModel.AllInstances.InitParameterModelCollection">
            <summary>Sets the shim of DependencyModel.Init(ParameterModelCollection parameters)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimDependencyModel.AllInstances.IsOptionalGet">
            <summary>Sets the shim of DependencyModel.get_IsOptional()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimDependencyModel.AllInstances.IsOptionalSetBoolean">
            <summary>Sets the shim of DependencyModel.set_IsOptional(Boolean value)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimDependencyModel.AllInstances.IsPrimitiveTypeDependencyGet">
            <summary>Sets the shim of DependencyModel.get_IsPrimitiveTypeDependency()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimDependencyModel.AllInstances.ObtainParameterModelByNameParameterModelCollection">
            <summary>Sets the shim of DependencyModel.ObtainParameterModelByName(ParameterModelCollection parameters)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimDependencyModel.AllInstances.ObtainParameterModelByTypeParameterModelCollection">
            <summary>Sets the shim of DependencyModel.ObtainParameterModelByType(ParameterModelCollection parameters)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimDependencyModel.AllInstances.ParameterGet">
            <summary>Sets the shim of DependencyModel.get_Parameter()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimDependencyModel.AllInstances.ParameterSetParameterModel">
            <summary>Sets the shim of DependencyModel.set_Parameter(ParameterModel value)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimDependencyModel.AllInstances.ReferencedComponentNameGet">
            <summary>Sets the shim of DependencyModel.get_ReferencedComponentName()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimDependencyModel.AllInstances.TargetItemTypeGet">
            <summary>Sets the shim of DependencyModel.get_TargetItemType()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimDependencyModel.AllInstances.TargetTypeGet">
            <summary>Sets the shim of DependencyModel.get_TargetType()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimDependencyModel.AllInstances.ToString01">
            <summary>Sets the shim of DependencyModel.ToString()</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimDependencyModelCollection">
            <summary>Shim type of Castle.Core.DependencyModelCollection</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimDependencyModelCollection.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimDependencyModelCollection.#ctor(Castle.Core.DependencyModelCollection)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimDependencyModelCollection.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimDependencyModelCollection.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimDependencyModelCollection.Bind(Castle.Core.Internal.IMutableCollection{Castle.Core.DependencyModel})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimDependencyModelCollection.Bind(System.Collections.IEnumerable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimDependencyModelCollection.Bind(System.Collections.Generic.IEnumerable{Castle.Core.DependencyModel})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimDependencyModelCollection.AddDependencyModel">
            <summary>Sets the shim of DependencyModelCollection.Add(DependencyModel dependencyModel)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimDependencyModelCollection.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimDependencyModelCollection.Constructor">
            <summary>Sets the shim of DependencyModelCollection.DependencyModelCollection()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimDependencyModelCollection.CountGet">
            <summary>Sets the shim of DependencyModelCollection.get_Count()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimDependencyModelCollection.GetEnumerator">
            <summary>Sets the shim of DependencyModelCollection.GetEnumerator()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimDependencyModelCollection.RemoveDependencyModel">
            <summary>Sets the shim of DependencyModelCollection.Remove(DependencyModel dependencyModel)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimDependencyModelCollection.SystemCollectionsIEnumerableGetEnumerator">
            <summary>Sets the shim of DependencyModelCollection.System.Collections.IEnumerable.GetEnumerator()</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimDependencyModelCollection.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimDependencyModelCollection.AllInstances.AddDependencyModel">
            <summary>Sets the shim of DependencyModelCollection.Add(DependencyModel dependencyModel)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimDependencyModelCollection.AllInstances.CountGet">
            <summary>Sets the shim of DependencyModelCollection.get_Count()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimDependencyModelCollection.AllInstances.GetEnumerator">
            <summary>Sets the shim of DependencyModelCollection.GetEnumerator()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimDependencyModelCollection.AllInstances.RemoveDependencyModel">
            <summary>Sets the shim of DependencyModelCollection.Remove(DependencyModel dependencyModel)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimDependencyModelCollection.AllInstances.SystemCollectionsIEnumerableGetEnumerator">
            <summary>Sets the shim of DependencyModelCollection.System.Collections.IEnumerable.GetEnumerator()</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimDoNotSelectAttribute">
            <summary>Shim type of Castle.Core.DoNotSelectAttribute</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimDoNotSelectAttribute.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimDoNotSelectAttribute.#ctor(Castle.Core.DoNotSelectAttribute)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimDoNotSelectAttribute.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimDoNotSelectAttribute.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimDoNotSelectAttribute.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimDoNotSelectAttribute.Constructor">
            <summary>Sets the shim of DoNotSelectAttribute.DoNotSelectAttribute()</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimDoNotSelectAttribute.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimDoNotWireAttribute">
            <summary>Shim type of Castle.Core.DoNotWireAttribute</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimDoNotWireAttribute.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimDoNotWireAttribute.#ctor(Castle.Core.DoNotWireAttribute)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimDoNotWireAttribute.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimDoNotWireAttribute.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimDoNotWireAttribute.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimDoNotWireAttribute.Constructor">
            <summary>Sets the shim of DoNotWireAttribute.DoNotWireAttribute()</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimDoNotWireAttribute.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimInterceptorAttribute">
            <summary>Shim type of Castle.Core.InterceptorAttribute</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimInterceptorAttribute.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimInterceptorAttribute.#ctor(Castle.Core.InterceptorAttribute)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimInterceptorAttribute.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimInterceptorAttribute.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimInterceptorAttribute.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimInterceptorAttribute.ConstructorString">
            <summary>Sets the shim of InterceptorAttribute.InterceptorAttribute(String componentKey)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimInterceptorAttribute.ConstructorType">
            <summary>Sets the shim of InterceptorAttribute.InterceptorAttribute(Type interceptorType)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimInterceptorAttribute.InterceptorGet">
            <summary>Sets the shim of InterceptorAttribute.get_Interceptor()</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimInterceptorAttribute.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimInterceptorAttribute.AllInstances.InterceptorGet">
            <summary>Sets the shim of InterceptorAttribute.get_Interceptor()</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimInterceptorReference">
            <summary>Shim type of Castle.Core.InterceptorReference</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimInterceptorReference.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimInterceptorReference.#ctor(Castle.Core.InterceptorReference)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimInterceptorReference.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimInterceptorReference.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimInterceptorReference.Bind(Castle.MicroKernel.IReference{Castle.DynamicProxy.IInterceptor})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimInterceptorReference.Bind(System.IEquatable{Castle.Core.InterceptorReference})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimInterceptorReference.ForTypeOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.Core.InterceptorReference})">
            <summary>Sets the shim of InterceptorReference.ForType()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimInterceptorReference.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimInterceptorReference.CastleMicroKernelIReferenceCastleDynamicProxyIInterceptorAttachComponentModel">
            <summary>Sets the shim of InterceptorReference.Castle.MicroKernel.IReference&lt;Castle.DynamicProxy.IInterceptor&gt;.Attach(ComponentModel component)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimInterceptorReference.CastleMicroKernelIReferenceCastleDynamicProxyIInterceptorDetachComponentModel">
            <summary>Sets the shim of InterceptorReference.Castle.MicroKernel.IReference&lt;Castle.DynamicProxy.IInterceptor&gt;.Detach(ComponentModel component)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimInterceptorReference.CastleMicroKernelIReferenceCastleDynamicProxyIInterceptorResolveIKernelCreationContext">
            <summary>Sets the shim of InterceptorReference.Castle.MicroKernel.IReference&lt;Castle.DynamicProxy.IInterceptor&gt;.Resolve(IKernel kernel, CreationContext context)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimInterceptorReference.ComponentType">
            <summary>Sets the shim of InterceptorReference.ComponentType()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimInterceptorReference.ConstructorString">
            <summary>Sets the shim of InterceptorReference.InterceptorReference(String referencedComponentName)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimInterceptorReference.ConstructorType">
            <summary>Sets the shim of InterceptorReference.InterceptorReference(Type componentType)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimInterceptorReference.EqualsInterceptorReference">
            <summary>Sets the shim of InterceptorReference.Equals(InterceptorReference other)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimInterceptorReference.EqualsObject">
            <summary>Sets the shim of InterceptorReference.Equals(Object obj)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimInterceptorReference.ForKeyString">
            <summary>Sets the shim of InterceptorReference.ForKey(String key)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimInterceptorReference.ForTypeType">
            <summary>Sets the shim of InterceptorReference.ForType(Type service)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimInterceptorReference.GetExceptionMessageOnHandlerNotFoundIKernel">
            <summary>Sets the shim of InterceptorReference.GetExceptionMessageOnHandlerNotFound(IKernel kernel)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimInterceptorReference.GetHashCode">
            <summary>Sets the shim of InterceptorReference.GetHashCode()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimInterceptorReference.GetInterceptorHandlerIKernel">
            <summary>Sets the shim of InterceptorReference.GetInterceptorHandler(IKernel kernel)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimInterceptorReference.RebuildContextTypeCreationContext">
            <summary>Sets the shim of InterceptorReference.RebuildContext(Type handlerType, CreationContext current)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimInterceptorReference.ToString">
            <summary>Sets the shim of InterceptorReference.ToString()</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimInterceptorReference.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimInterceptorReference.AllInstances.CastleMicroKernelIReferenceCastleDynamicProxyIInterceptorAttachComponentModel">
            <summary>Sets the shim of InterceptorReference.Castle.MicroKernel.IReference&lt;Castle.DynamicProxy.IInterceptor&gt;.Attach(ComponentModel component)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimInterceptorReference.AllInstances.CastleMicroKernelIReferenceCastleDynamicProxyIInterceptorDetachComponentModel">
            <summary>Sets the shim of InterceptorReference.Castle.MicroKernel.IReference&lt;Castle.DynamicProxy.IInterceptor&gt;.Detach(ComponentModel component)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimInterceptorReference.AllInstances.CastleMicroKernelIReferenceCastleDynamicProxyIInterceptorResolveIKernelCreationContext">
            <summary>Sets the shim of InterceptorReference.Castle.MicroKernel.IReference&lt;Castle.DynamicProxy.IInterceptor&gt;.Resolve(IKernel kernel, CreationContext context)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimInterceptorReference.AllInstances.ComponentType">
            <summary>Sets the shim of InterceptorReference.ComponentType()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimInterceptorReference.AllInstances.EqualsInterceptorReference">
            <summary>Sets the shim of InterceptorReference.Equals(InterceptorReference other)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimInterceptorReference.AllInstances.EqualsObject">
            <summary>Sets the shim of InterceptorReference.Equals(Object obj)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimInterceptorReference.AllInstances.GetExceptionMessageOnHandlerNotFoundIKernel">
            <summary>Sets the shim of InterceptorReference.GetExceptionMessageOnHandlerNotFound(IKernel kernel)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimInterceptorReference.AllInstances.GetHashCode01">
            <summary>Sets the shim of InterceptorReference.GetHashCode()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimInterceptorReference.AllInstances.GetInterceptorHandlerIKernel">
            <summary>Sets the shim of InterceptorReference.GetInterceptorHandler(IKernel kernel)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimInterceptorReference.AllInstances.RebuildContextTypeCreationContext">
            <summary>Sets the shim of InterceptorReference.RebuildContext(Type handlerType, CreationContext current)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimInterceptorReference.AllInstances.ToString01">
            <summary>Sets the shim of InterceptorReference.ToString()</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimInterceptorReferenceCollection">
            <summary>Shim type of Castle.Core.InterceptorReferenceCollection</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimInterceptorReferenceCollection.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimInterceptorReferenceCollection.#ctor(Castle.Core.InterceptorReferenceCollection)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimInterceptorReferenceCollection.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimInterceptorReferenceCollection.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimInterceptorReferenceCollection.Bind(Castle.Core.Internal.IMutableCollection{Castle.Core.InterceptorReference})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimInterceptorReferenceCollection.Bind(System.Collections.IEnumerable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimInterceptorReferenceCollection.Bind(System.Collections.Generic.IEnumerable{Castle.Core.InterceptorReference})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimInterceptorReferenceCollection.AddFirstInterceptorReference">
            <summary>Sets the shim of InterceptorReferenceCollection.AddFirst(InterceptorReference item)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimInterceptorReferenceCollection.AddIfNotInCollectionInterceptorReference">
            <summary>Sets the shim of InterceptorReferenceCollection.AddIfNotInCollection(InterceptorReference interceptorReference)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimInterceptorReferenceCollection.AddInterceptorReference">
            <summary>Sets the shim of InterceptorReferenceCollection.Add(InterceptorReference item)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimInterceptorReferenceCollection.AddLastInterceptorReference">
            <summary>Sets the shim of InterceptorReferenceCollection.AddLast(InterceptorReference item)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimInterceptorReferenceCollection.AttachIReferenceOfIInterceptor">
            <summary>Sets the shim of InterceptorReferenceCollection.Attach(IReference`1&lt;IInterceptor&gt; interceptor)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimInterceptorReferenceCollection.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimInterceptorReferenceCollection.CastleCoreInternalIMutableCollectionCastleCoreInterceptorReferenceRemoveInterceptorReference">
            <summary>Sets the shim of InterceptorReferenceCollection.Castle.Core.Internal.IMutableCollection&lt;Castle.Core.InterceptorReference&gt;.Remove(InterceptorReference item)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimInterceptorReferenceCollection.ConstructorComponentModel">
            <summary>Sets the shim of InterceptorReferenceCollection.InterceptorReferenceCollection(ComponentModel component)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimInterceptorReferenceCollection.CountGet">
            <summary>Sets the shim of InterceptorReferenceCollection.get_Count()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimInterceptorReferenceCollection.GetEnumerator">
            <summary>Sets the shim of InterceptorReferenceCollection.GetEnumerator()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimInterceptorReferenceCollection.HasInterceptorsGet">
            <summary>Sets the shim of InterceptorReferenceCollection.get_HasInterceptors()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimInterceptorReferenceCollection.InsertInt32InterceptorReference">
            <summary>Sets the shim of InterceptorReferenceCollection.Insert(Int32 index, InterceptorReference item)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimInterceptorReferenceCollection.SystemCollectionsGenericIEnumerableCastleCoreInterceptorReferenceGetEnumerator">
            <summary>Sets the shim of InterceptorReferenceCollection.System.Collections.Generic.IEnumerable&lt;Castle.Core.InterceptorReference&gt;.GetEnumerator()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimInterceptorReferenceCollection.ToArray">
            <summary>Sets the shim of InterceptorReferenceCollection.ToArray()</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimInterceptorReferenceCollection.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimInterceptorReferenceCollection.AllInstances.AddFirstInterceptorReference">
            <summary>Sets the shim of InterceptorReferenceCollection.AddFirst(InterceptorReference item)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimInterceptorReferenceCollection.AllInstances.AddIfNotInCollectionInterceptorReference">
            <summary>Sets the shim of InterceptorReferenceCollection.AddIfNotInCollection(InterceptorReference interceptorReference)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimInterceptorReferenceCollection.AllInstances.AddInterceptorReference">
            <summary>Sets the shim of InterceptorReferenceCollection.Add(InterceptorReference item)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimInterceptorReferenceCollection.AllInstances.AddLastInterceptorReference">
            <summary>Sets the shim of InterceptorReferenceCollection.AddLast(InterceptorReference item)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimInterceptorReferenceCollection.AllInstances.AttachIReferenceOfIInterceptor">
            <summary>Sets the shim of InterceptorReferenceCollection.Attach(IReference`1&lt;IInterceptor&gt; interceptor)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimInterceptorReferenceCollection.AllInstances.CastleCoreInternalIMutableCollectionCastleCoreInterceptorReferenceRemoveInterceptorReference">
            <summary>Sets the shim of InterceptorReferenceCollection.Castle.Core.Internal.IMutableCollection&lt;Castle.Core.InterceptorReference&gt;.Remove(InterceptorReference item)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimInterceptorReferenceCollection.AllInstances.CountGet">
            <summary>Sets the shim of InterceptorReferenceCollection.get_Count()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimInterceptorReferenceCollection.AllInstances.GetEnumerator">
            <summary>Sets the shim of InterceptorReferenceCollection.GetEnumerator()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimInterceptorReferenceCollection.AllInstances.HasInterceptorsGet">
            <summary>Sets the shim of InterceptorReferenceCollection.get_HasInterceptors()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimInterceptorReferenceCollection.AllInstances.InsertInt32InterceptorReference">
            <summary>Sets the shim of InterceptorReferenceCollection.Insert(Int32 index, InterceptorReference item)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimInterceptorReferenceCollection.AllInstances.SystemCollectionsGenericIEnumerableCastleCoreInterceptorReferenceGetEnumerator">
            <summary>Sets the shim of InterceptorReferenceCollection.System.Collections.Generic.IEnumerable&lt;Castle.Core.InterceptorReference&gt;.GetEnumerator()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimInterceptorReferenceCollection.AllInstances.ToArray">
            <summary>Sets the shim of InterceptorReferenceCollection.ToArray()</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimLifecycleConcernsCollection">
            <summary>Shim type of Castle.Core.LifecycleConcernsCollection</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimLifecycleConcernsCollection.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimLifecycleConcernsCollection.#ctor(Castle.Core.LifecycleConcernsCollection)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimLifecycleConcernsCollection.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimLifecycleConcernsCollection.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimLifecycleConcernsCollection.AddFirstICommissionConcern">
            <summary>Sets the shim of LifecycleConcernsCollection.AddFirst(ICommissionConcern concern)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimLifecycleConcernsCollection.AddFirstIDecommissionConcern">
            <summary>Sets the shim of LifecycleConcernsCollection.AddFirst(IDecommissionConcern concern)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimLifecycleConcernsCollection.AddICommissionConcern">
            <summary>Sets the shim of LifecycleConcernsCollection.Add(ICommissionConcern concern)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimLifecycleConcernsCollection.AddIDecommissionConcern">
            <summary>Sets the shim of LifecycleConcernsCollection.Add(IDecommissionConcern concern)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimLifecycleConcernsCollection.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimLifecycleConcernsCollection.CommissionConcernsGet">
            <summary>Sets the shim of LifecycleConcernsCollection.get_CommissionConcerns()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimLifecycleConcernsCollection.CommissionGet">
            <summary>Sets the shim of LifecycleConcernsCollection.get_Commission()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimLifecycleConcernsCollection.Constructor">
            <summary>Sets the shim of LifecycleConcernsCollection.LifecycleConcernsCollection()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimLifecycleConcernsCollection.DecommissionConcernsGet">
            <summary>Sets the shim of LifecycleConcernsCollection.get_DecommissionConcerns()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimLifecycleConcernsCollection.DecommissionGet">
            <summary>Sets the shim of LifecycleConcernsCollection.get_Decommission()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimLifecycleConcernsCollection.HasCommissionConcernsGet">
            <summary>Sets the shim of LifecycleConcernsCollection.get_HasCommissionConcerns()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimLifecycleConcernsCollection.HasDecommissionConcernsGet">
            <summary>Sets the shim of LifecycleConcernsCollection.get_HasDecommissionConcerns()</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimLifecycleConcernsCollection.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimLifecycleConcernsCollection.AllInstances.AddFirstICommissionConcern">
            <summary>Sets the shim of LifecycleConcernsCollection.AddFirst(ICommissionConcern concern)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimLifecycleConcernsCollection.AllInstances.AddFirstIDecommissionConcern">
            <summary>Sets the shim of LifecycleConcernsCollection.AddFirst(IDecommissionConcern concern)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimLifecycleConcernsCollection.AllInstances.AddICommissionConcern">
            <summary>Sets the shim of LifecycleConcernsCollection.Add(ICommissionConcern concern)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimLifecycleConcernsCollection.AllInstances.AddIDecommissionConcern">
            <summary>Sets the shim of LifecycleConcernsCollection.Add(IDecommissionConcern concern)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimLifecycleConcernsCollection.AllInstances.CommissionConcernsGet">
            <summary>Sets the shim of LifecycleConcernsCollection.get_CommissionConcerns()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimLifecycleConcernsCollection.AllInstances.CommissionGet">
            <summary>Sets the shim of LifecycleConcernsCollection.get_Commission()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimLifecycleConcernsCollection.AllInstances.DecommissionConcernsGet">
            <summary>Sets the shim of LifecycleConcernsCollection.get_DecommissionConcerns()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimLifecycleConcernsCollection.AllInstances.DecommissionGet">
            <summary>Sets the shim of LifecycleConcernsCollection.get_Decommission()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimLifecycleConcernsCollection.AllInstances.HasCommissionConcernsGet">
            <summary>Sets the shim of LifecycleConcernsCollection.get_HasCommissionConcerns()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimLifecycleConcernsCollection.AllInstances.HasDecommissionConcernsGet">
            <summary>Sets the shim of LifecycleConcernsCollection.get_HasDecommissionConcerns()</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimLifestyleAttribute">
            <summary>Shim type of Castle.Core.LifestyleAttribute</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimLifestyleAttribute.#ctor(Castle.Core.LifestyleAttribute)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimLifestyleAttribute.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimLifestyleAttribute.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimLifestyleAttribute.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimLifestyleAttribute.ConstructorLifestyleType">
            <summary>Sets the shim of LifestyleAttribute.LifestyleAttribute(LifestyleType type)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimLifestyleAttribute.LifestyleGet">
            <summary>Sets the shim of LifestyleAttribute.get_Lifestyle()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimLifestyleAttribute.LifestyleSetLifestyleType">
            <summary>Sets the shim of LifestyleAttribute.set_Lifestyle(LifestyleType value)</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimLifestyleAttribute.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimLifestyleAttribute.AllInstances.LifestyleGet">
            <summary>Sets the shim of LifestyleAttribute.get_Lifestyle()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimLifestyleAttribute.AllInstances.LifestyleSetLifestyleType">
            <summary>Sets the shim of LifestyleAttribute.set_Lifestyle(LifestyleType value)</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimMethodMetaModel">
            <summary>Shim type of Castle.Core.MethodMetaModel</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimMethodMetaModel.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimMethodMetaModel.#ctor(Castle.Core.MethodMetaModel)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimMethodMetaModel.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimMethodMetaModel.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimMethodMetaModel.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimMethodMetaModel.ConfigNodeGet">
            <summary>Sets the shim of MethodMetaModel.get_ConfigNode()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimMethodMetaModel.ConstructorIConfiguration">
            <summary>Sets the shim of MethodMetaModel.MethodMetaModel(IConfiguration configNode)</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimMethodMetaModel.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimMethodMetaModel.AllInstances.ConfigNodeGet">
            <summary>Sets the shim of MethodMetaModel.get_ConfigNode()</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimMethodMetaModelCollection">
            <summary>Shim type of Castle.Core.MethodMetaModelCollection</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimMethodMetaModelCollection.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimMethodMetaModelCollection.#ctor(Castle.Core.MethodMetaModelCollection)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimMethodMetaModelCollection.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimMethodMetaModelCollection.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimMethodMetaModelCollection.Bind(System.Collections.ICollection)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimMethodMetaModelCollection.Bind(System.Collections.IEnumerable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimMethodMetaModelCollection.Bind(System.Collections.IList)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimMethodMetaModelCollection.Bind(System.Collections.Generic.ICollection{Castle.Core.MethodMetaModel})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimMethodMetaModelCollection.Bind(System.Collections.Generic.IEnumerable{Castle.Core.MethodMetaModel})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimMethodMetaModelCollection.Bind(System.Collections.Generic.IList{Castle.Core.MethodMetaModel})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimMethodMetaModelCollection.Bind(System.Collections.Generic.IReadOnlyCollection{Castle.Core.MethodMetaModel})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimMethodMetaModelCollection.Bind(System.Collections.Generic.IReadOnlyList{Castle.Core.MethodMetaModel})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimMethodMetaModelCollection.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimMethodMetaModelCollection.Constructor">
            <summary>Sets the shim of MethodMetaModelCollection.MethodMetaModelCollection()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimMethodMetaModelCollection.MethodInfo2ModelGet">
            <summary>Sets the shim of MethodMetaModelCollection.get_MethodInfo2Model()</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimMethodMetaModelCollection.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimMethodMetaModelCollection.AllInstances.MethodInfo2ModelGet">
            <summary>Sets the shim of MethodMetaModelCollection.get_MethodInfo2Model()</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimParameterModel">
            <summary>Shim type of Castle.Core.ParameterModel</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimParameterModel.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimParameterModel.#ctor(Castle.Core.ParameterModel)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimParameterModel.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimParameterModel.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimParameterModel.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimParameterModel.ConfigValueGet">
            <summary>Sets the shim of ParameterModel.get_ConfigValue()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimParameterModel.ConstructorStringIConfiguration">
            <summary>Sets the shim of ParameterModel.ParameterModel(String name, IConfiguration value)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimParameterModel.ConstructorStringString">
            <summary>Sets the shim of ParameterModel.ParameterModel(String name, String value)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimParameterModel.NameGet">
            <summary>Sets the shim of ParameterModel.get_Name()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimParameterModel.ValueGet">
            <summary>Sets the shim of ParameterModel.get_Value()</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimParameterModel.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimParameterModel.AllInstances.ConfigValueGet">
            <summary>Sets the shim of ParameterModel.get_ConfigValue()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimParameterModel.AllInstances.NameGet">
            <summary>Sets the shim of ParameterModel.get_Name()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimParameterModel.AllInstances.ValueGet">
            <summary>Sets the shim of ParameterModel.get_Value()</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimParameterModelCollection">
            <summary>Shim type of Castle.Core.ParameterModelCollection</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimParameterModelCollection.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimParameterModelCollection.#ctor(Castle.Core.ParameterModelCollection)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimParameterModelCollection.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimParameterModelCollection.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimParameterModelCollection.Bind(System.Collections.IEnumerable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimParameterModelCollection.Bind(System.Collections.Generic.IEnumerable{Castle.Core.ParameterModel})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimParameterModelCollection.AddStringIConfiguration">
            <summary>Sets the shim of ParameterModelCollection.Add(String name, IConfiguration configNode)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimParameterModelCollection.AddStringParameterModel">
            <summary>Sets the shim of ParameterModelCollection.Add(String key, ParameterModel value)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimParameterModelCollection.AddStringString">
            <summary>Sets the shim of ParameterModelCollection.Add(String name, String value)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimParameterModelCollection.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimParameterModelCollection.Constructor">
            <summary>Sets the shim of ParameterModelCollection.ParameterModelCollection()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimParameterModelCollection.CountGet">
            <summary>Sets the shim of ParameterModelCollection.get_Count()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimParameterModelCollection.ItemGetString">
            <summary>Sets the shim of ParameterModelCollection.get_Item(String key)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimParameterModelCollection.SystemCollectionsGenericIEnumerableCastleCoreParameterModelGetEnumerator">
            <summary>Sets the shim of ParameterModelCollection.System.Collections.Generic.IEnumerable&lt;Castle.Core.ParameterModel&gt;.GetEnumerator()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimParameterModelCollection.SystemCollectionsIEnumerableGetEnumerator">
            <summary>Sets the shim of ParameterModelCollection.System.Collections.IEnumerable.GetEnumerator()</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimParameterModelCollection.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimParameterModelCollection.AllInstances.AddStringIConfiguration">
            <summary>Sets the shim of ParameterModelCollection.Add(String name, IConfiguration configNode)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimParameterModelCollection.AllInstances.AddStringParameterModel">
            <summary>Sets the shim of ParameterModelCollection.Add(String key, ParameterModel value)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimParameterModelCollection.AllInstances.AddStringString">
            <summary>Sets the shim of ParameterModelCollection.Add(String name, String value)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimParameterModelCollection.AllInstances.CountGet">
            <summary>Sets the shim of ParameterModelCollection.get_Count()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimParameterModelCollection.AllInstances.ItemGetString">
            <summary>Sets the shim of ParameterModelCollection.get_Item(String key)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimParameterModelCollection.AllInstances.SystemCollectionsGenericIEnumerableCastleCoreParameterModelGetEnumerator">
            <summary>Sets the shim of ParameterModelCollection.System.Collections.Generic.IEnumerable&lt;Castle.Core.ParameterModel&gt;.GetEnumerator()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimParameterModelCollection.AllInstances.SystemCollectionsIEnumerableGetEnumerator">
            <summary>Sets the shim of ParameterModelCollection.System.Collections.IEnumerable.GetEnumerator()</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimPerThreadAttribute">
            <summary>Shim type of Castle.Core.PerThreadAttribute</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimPerThreadAttribute.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimPerThreadAttribute.#ctor(Castle.Core.PerThreadAttribute)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimPerThreadAttribute.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimPerThreadAttribute.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimPerThreadAttribute.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimPerThreadAttribute.Constructor">
            <summary>Sets the shim of PerThreadAttribute.PerThreadAttribute()</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimPerThreadAttribute.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimPerWebRequestAttribute">
            <summary>Shim type of Castle.Core.PerWebRequestAttribute</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimPerWebRequestAttribute.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimPerWebRequestAttribute.#ctor(Castle.Core.PerWebRequestAttribute)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimPerWebRequestAttribute.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimPerWebRequestAttribute.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimPerWebRequestAttribute.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimPerWebRequestAttribute.Constructor">
            <summary>Sets the shim of PerWebRequestAttribute.PerWebRequestAttribute()</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimPerWebRequestAttribute.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimPooledAttribute">
            <summary>Shim type of Castle.Core.PooledAttribute</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimPooledAttribute.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimPooledAttribute.#ctor(Castle.Core.PooledAttribute)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimPooledAttribute.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimPooledAttribute.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimPooledAttribute.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimPooledAttribute.Constructor">
            <summary>Sets the shim of PooledAttribute.PooledAttribute()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimPooledAttribute.ConstructorInt32Int32">
            <summary>Sets the shim of PooledAttribute.PooledAttribute(Int32 initialPoolSize, Int32 maxPoolSize)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimPooledAttribute.InitialPoolSizeGet">
            <summary>Sets the shim of PooledAttribute.get_InitialPoolSize()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimPooledAttribute.MaxPoolSizeGet">
            <summary>Sets the shim of PooledAttribute.get_MaxPoolSize()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimPooledAttribute.StaticConstructor">
            <summary>Sets the shim of PooledAttribute.PooledAttribute()</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimPooledAttribute.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimPooledAttribute.AllInstances.InitialPoolSizeGet">
            <summary>Sets the shim of PooledAttribute.get_InitialPoolSize()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimPooledAttribute.AllInstances.MaxPoolSizeGet">
            <summary>Sets the shim of PooledAttribute.get_MaxPoolSize()</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimPropertyDependencyModel">
            <summary>Shim type of Castle.Core.PropertyDependencyModel</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimPropertyDependencyModel.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimPropertyDependencyModel.#ctor(Castle.Core.PropertyDependencyModel)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimPropertyDependencyModel.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimPropertyDependencyModel.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimPropertyDependencyModel.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimPropertyDependencyModel.ConstructorPropertyInfoBoolean">
            <summary>Sets the shim of PropertyDependencyModel.PropertyDependencyModel(PropertyInfo property, Boolean isOptional)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimPropertyDependencyModel.PropertyGet">
            <summary>Sets the shim of PropertyDependencyModel.get_Property()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimPropertyDependencyModel.PropertySetPropertyInfo">
            <summary>Sets the shim of PropertyDependencyModel.set_Property(PropertyInfo value)</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimPropertyDependencyModel.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimPropertyDependencyModel.AllInstances.PropertyGet">
            <summary>Sets the shim of PropertyDependencyModel.get_Property()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimPropertyDependencyModel.AllInstances.PropertySetPropertyInfo">
            <summary>Sets the shim of PropertyDependencyModel.set_Property(PropertyInfo value)</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimPropertySet">
            <summary>Shim type of Castle.Core.PropertySet</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimPropertySet.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimPropertySet.#ctor(Castle.Core.PropertySet)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimPropertySet.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimPropertySet.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimPropertySet.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimPropertySet.ConstructorPropertyInfoDependencyModel">
            <summary>Sets the shim of PropertySet.PropertySet(PropertyInfo propertyInfo, DependencyModel dependency)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimPropertySet.DependencyGet">
            <summary>Sets the shim of PropertySet.get_Dependency()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimPropertySet.PropertyGet">
            <summary>Sets the shim of PropertySet.get_Property()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimPropertySet.ToString">
            <summary>Sets the shim of PropertySet.ToString()</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimPropertySet.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimPropertySet.AllInstances.DependencyGet">
            <summary>Sets the shim of PropertySet.get_Dependency()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimPropertySet.AllInstances.PropertyGet">
            <summary>Sets the shim of PropertySet.get_Property()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimPropertySet.AllInstances.ToString01">
            <summary>Sets the shim of PropertySet.ToString()</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimPropertySetCollection">
            <summary>Shim type of Castle.Core.PropertySetCollection</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimPropertySetCollection.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimPropertySetCollection.#ctor(Castle.Core.PropertySetCollection)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimPropertySetCollection.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimPropertySetCollection.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimPropertySetCollection.Bind(Castle.Core.Internal.IMutableCollection{Castle.Core.PropertySet})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimPropertySetCollection.Bind(System.Collections.IEnumerable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimPropertySetCollection.Bind(System.Collections.Generic.IEnumerable{Castle.Core.PropertySet})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimPropertySetCollection.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimPropertySetCollection.CastleCoreInternalIMutableCollectionCastleCorePropertySetAddPropertySet">
            <summary>Sets the shim of PropertySetCollection.Castle.Core.Internal.IMutableCollection&lt;Castle.Core.PropertySet&gt;.Add(PropertySet property)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimPropertySetCollection.CastleCoreInternalIMutableCollectionCastleCorePropertySetRemovePropertySet">
            <summary>Sets the shim of PropertySetCollection.Castle.Core.Internal.IMutableCollection&lt;Castle.Core.PropertySet&gt;.Remove(PropertySet item)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimPropertySetCollection.Constructor">
            <summary>Sets the shim of PropertySetCollection.PropertySetCollection()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimPropertySetCollection.CountGet">
            <summary>Sets the shim of PropertySetCollection.get_Count()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimPropertySetCollection.FindByPropertyInfoPropertyInfo">
            <summary>Sets the shim of PropertySetCollection.FindByPropertyInfo(PropertyInfo info)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimPropertySetCollection.GetEnumerator">
            <summary>Sets the shim of PropertySetCollection.GetEnumerator()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimPropertySetCollection.SystemCollectionsIEnumerableGetEnumerator">
            <summary>Sets the shim of PropertySetCollection.System.Collections.IEnumerable.GetEnumerator()</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimPropertySetCollection.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimPropertySetCollection.AllInstances.CastleCoreInternalIMutableCollectionCastleCorePropertySetAddPropertySet">
            <summary>Sets the shim of PropertySetCollection.Castle.Core.Internal.IMutableCollection&lt;Castle.Core.PropertySet&gt;.Add(PropertySet property)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimPropertySetCollection.AllInstances.CastleCoreInternalIMutableCollectionCastleCorePropertySetRemovePropertySet">
            <summary>Sets the shim of PropertySetCollection.Castle.Core.Internal.IMutableCollection&lt;Castle.Core.PropertySet&gt;.Remove(PropertySet item)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimPropertySetCollection.AllInstances.CountGet">
            <summary>Sets the shim of PropertySetCollection.get_Count()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimPropertySetCollection.AllInstances.FindByPropertyInfoPropertyInfo">
            <summary>Sets the shim of PropertySetCollection.FindByPropertyInfo(PropertyInfo info)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimPropertySetCollection.AllInstances.GetEnumerator">
            <summary>Sets the shim of PropertySetCollection.GetEnumerator()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimPropertySetCollection.AllInstances.SystemCollectionsIEnumerableGetEnumerator">
            <summary>Sets the shim of PropertySetCollection.System.Collections.IEnumerable.GetEnumerator()</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimScopedAttribute">
            <summary>Shim type of Castle.Core.ScopedAttribute</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimScopedAttribute.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimScopedAttribute.#ctor(Castle.Core.ScopedAttribute)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimScopedAttribute.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimScopedAttribute.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimScopedAttribute.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimScopedAttribute.Constructor">
            <summary>Sets the shim of ScopedAttribute.ScopedAttribute()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimScopedAttribute.ScopeAccessorTypeGet">
            <summary>Sets the shim of ScopedAttribute.get_ScopeAccessorType()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimScopedAttribute.ScopeAccessorTypeSetType">
            <summary>Sets the shim of ScopedAttribute.set_ScopeAccessorType(Type value)</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimScopedAttribute.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimScopedAttribute.AllInstances.ScopeAccessorTypeGet">
            <summary>Sets the shim of ScopedAttribute.get_ScopeAccessorType()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimScopedAttribute.AllInstances.ScopeAccessorTypeSetType">
            <summary>Sets the shim of ScopedAttribute.set_ScopeAccessorType(Type value)</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimSingletonAttribute">
            <summary>Shim type of Castle.Core.SingletonAttribute</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimSingletonAttribute.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimSingletonAttribute.#ctor(Castle.Core.SingletonAttribute)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimSingletonAttribute.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimSingletonAttribute.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimSingletonAttribute.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimSingletonAttribute.Constructor">
            <summary>Sets the shim of SingletonAttribute.SingletonAttribute()</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimSingletonAttribute.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimStandardPropertyFilters">
            <summary>Shim type of Castle.Core.StandardPropertyFilters</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimStandardPropertyFilters.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimStandardPropertyFilters.#ctor(Castle.Core.StandardPropertyFilters)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimStandardPropertyFilters.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimStandardPropertyFilters.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimStandardPropertyFilters.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimStandardPropertyFilters.Constructor">
            <summary>Sets the shim of StandardPropertyFilters.StandardPropertyFilters()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimStandardPropertyFilters.CreatePropertyFilter">
            <summary>Sets the shim of StandardPropertyFilters.Create(PropertyFilter filter)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimStandardPropertyFilters.DefaultComponentModelICollectionOfPropertyInfoPropertySetBuilder">
            <summary>Sets the shim of StandardPropertyFilters.Default(ComponentModel model, ICollection`1&lt;PropertyInfo&gt; properties, PropertySetBuilder propertySetBuilder)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimStandardPropertyFilters.FromObsoleteFunctionFuncOfComponentModelPropertyInfoBooleanBoolean">
            <summary>Sets the shim of StandardPropertyFilters.FromObsoleteFunction(Func`3&lt;ComponentModel,PropertyInfo,Boolean&gt; filter, Boolean isRequired)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimStandardPropertyFilters.GetPropertyFiltersComponentModelBoolean">
            <summary>Sets the shim of StandardPropertyFilters.GetPropertyFilters(ComponentModel componentModel, Boolean createIfMissing)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimStandardPropertyFilters.IgnoreAllComponentModelICollectionOfPropertyInfoPropertySetBuilder">
            <summary>Sets the shim of StandardPropertyFilters.IgnoreAll(ComponentModel model, ICollection`1&lt;PropertyInfo&gt; properties, PropertySetBuilder propertySetBuilder)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimStandardPropertyFilters.IgnoreBaseComponentModelICollectionOfPropertyInfoPropertySetBuilder">
            <summary>Sets the shim of StandardPropertyFilters.IgnoreBase(ComponentModel model, ICollection`1&lt;PropertyInfo&gt; properties, PropertySetBuilder propertySetBuilder)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimStandardPropertyFilters.IgnoreSelectedFuncOfComponentModelPropertyInfoBoolean">
            <summary>Sets the shim of StandardPropertyFilters.IgnoreSelected(Func`3&lt;ComponentModel,PropertyInfo,Boolean&gt; selector)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimStandardPropertyFilters.RequireAllComponentModelICollectionOfPropertyInfoPropertySetBuilder">
            <summary>Sets the shim of StandardPropertyFilters.RequireAll(ComponentModel model, ICollection`1&lt;PropertyInfo&gt; properties, PropertySetBuilder propertySetBuilder)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimStandardPropertyFilters.RequireBaseComponentModelICollectionOfPropertyInfoPropertySetBuilder">
            <summary>Sets the shim of StandardPropertyFilters.RequireBase(ComponentModel model, ICollection`1&lt;PropertyInfo&gt; properties, PropertySetBuilder propertySetBuilder)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimStandardPropertyFilters.RequireSelectedFuncOfComponentModelPropertyInfoBoolean">
            <summary>Sets the shim of StandardPropertyFilters.RequireSelected(Func`3&lt;ComponentModel,PropertyInfo,Boolean&gt; selector)</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimStandardPropertyFilters.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimTransientAttribute">
            <summary>Shim type of Castle.Core.TransientAttribute</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimTransientAttribute.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimTransientAttribute.#ctor(Castle.Core.TransientAttribute)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimTransientAttribute.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimTransientAttribute.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimTransientAttribute.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimTransientAttribute.Constructor">
            <summary>Sets the shim of TransientAttribute.TransientAttribute()</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimTransientAttribute.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="T:Castle.Core.Fakes.StubCastleComponentAttribute">
            <summary>Stub type of Castle.Core.CastleComponentAttribute</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubCastleComponentAttribute.#ctor(System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubCastleComponentAttribute.#ctor(System.Type[])">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubCastleComponentAttribute.#ctor(System.String,System.Type[])">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubCastleComponentAttribute.#ctor(System.String,Castle.Core.LifestyleType,System.Type[])">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubCastleComponentAttribute.Equals(System.Object)">
            <summary>Sets the stub of Attribute.Equals(Object obj)</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubCastleComponentAttribute.EqualsObject">
            <summary>Sets the stub of Attribute.Equals(Object obj)</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubCastleComponentAttribute.GetHashCode">
            <summary>Sets the stub of Attribute.GetHashCode()</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubCastleComponentAttribute.GetHashCode01">
            <summary>Sets the stub of Attribute.GetHashCode()</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubCastleComponentAttribute.InitializeStub">
            <summary>Initializes a new instance of type StubCastleComponentAttribute</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubCastleComponentAttribute.IsDefaultAttribute">
            <summary>Sets the stub of Attribute.IsDefaultAttribute()</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubCastleComponentAttribute.IsDefaultAttribute01">
            <summary>Sets the stub of Attribute.IsDefaultAttribute()</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubCastleComponentAttribute.Match(System.Object)">
            <summary>Sets the stub of Attribute.Match(Object obj)</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubCastleComponentAttribute.MatchObject">
            <summary>Sets the stub of Attribute.Match(Object obj)</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubCastleComponentAttribute.TypeIdGet">
            <summary>Sets the stub of Attribute.get_TypeId()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubCastleComponentAttribute.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubCastleComponentAttribute.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubCastleComponentAttribute.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubCastleComponentAttribute.TypeId">
            <summary>Sets the stub of Attribute.get_TypeId()</summary>
        </member>
        <member name="T:Castle.Core.Fakes.StubComponentDependencyModel">
            <summary>Stub type of Castle.Core.ComponentDependencyModel</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubComponentDependencyModel.#ctor(System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubComponentDependencyModel.#ctor(System.String,System.Type)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubComponentDependencyModel.Equals(System.Object)">
            <summary>Sets the stub of DependencyModel.Equals(Object obj)</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubComponentDependencyModel.EqualsObject">
            <summary>Sets the stub of DependencyModel.Equals(Object obj)</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubComponentDependencyModel.GetHashCode">
            <summary>Sets the stub of DependencyModel.GetHashCode()</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubComponentDependencyModel.GetHashCode01">
            <summary>Sets the stub of DependencyModel.GetHashCode()</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubComponentDependencyModel.Init(Castle.Core.ParameterModelCollection)">
            <summary>Sets the stub of ComponentDependencyModel.Init(ParameterModelCollection parameters)</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubComponentDependencyModel.InitParameterModelCollection">
            <summary>Sets the stub of ComponentDependencyModel.Init(ParameterModelCollection parameters)</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubComponentDependencyModel.InitializeStub">
            <summary>Initializes a new instance of type StubComponentDependencyModel</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubComponentDependencyModel.ToString">
            <summary>Sets the stub of DependencyModel.ToString()</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubComponentDependencyModel.ToString01">
            <summary>Sets the stub of DependencyModel.ToString()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubComponentDependencyModel.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubComponentDependencyModel.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubComponentDependencyModel.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.Core.Fakes.StubComponentName">
            <summary>Stub type of Castle.Core.ComponentName</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubComponentName.#ctor(System.String,System.Boolean)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubComponentName.InitializeStub">
            <summary>Initializes a new instance of type StubComponentName</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubComponentName.ToString">
            <summary>Sets the stub of ComponentName.ToString()</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubComponentName.ToString01">
            <summary>Sets the stub of ComponentName.ToString()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubComponentName.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubComponentName.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubComponentName.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.Core.Fakes.StubConstructorCandidate">
            <summary>Stub type of Castle.Core.ConstructorCandidate</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubConstructorCandidate.#ctor(System.Reflection.ConstructorInfo,Castle.Core.ConstructorDependencyModel[])">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubConstructorCandidate.InitializeStub">
            <summary>Initializes a new instance of type StubConstructorCandidate</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubConstructorCandidate.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubConstructorCandidate.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubConstructorCandidate.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.Core.Fakes.StubConstructorCandidateCollection">
            <summary>Stub type of Castle.Core.ConstructorCandidateCollection</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubConstructorCandidateCollection.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubConstructorCandidateCollection.InitializeStub">
            <summary>Initializes a new instance of type StubConstructorCandidateCollection</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubConstructorCandidateCollection.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubConstructorCandidateCollection.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubConstructorCandidateCollection.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.Core.Fakes.StubConstructorDependencyModel">
            <summary>Stub type of Castle.Core.ConstructorDependencyModel</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubConstructorDependencyModel.#ctor(System.Reflection.ParameterInfo)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubConstructorDependencyModel.Equals(System.Object)">
            <summary>Sets the stub of DependencyModel.Equals(Object obj)</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubConstructorDependencyModel.EqualsObject">
            <summary>Sets the stub of DependencyModel.Equals(Object obj)</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubConstructorDependencyModel.GetHashCode">
            <summary>Sets the stub of DependencyModel.GetHashCode()</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubConstructorDependencyModel.GetHashCode01">
            <summary>Sets the stub of DependencyModel.GetHashCode()</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubConstructorDependencyModel.Init(Castle.Core.ParameterModelCollection)">
            <summary>Sets the stub of DependencyModel.Init(ParameterModelCollection parameters)</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubConstructorDependencyModel.InitParameterModelCollection">
            <summary>Sets the stub of DependencyModel.Init(ParameterModelCollection parameters)</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubConstructorDependencyModel.InitializeStub">
            <summary>Initializes a new instance of type StubConstructorDependencyModel</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubConstructorDependencyModel.ToString">
            <summary>Sets the stub of DependencyModel.ToString()</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubConstructorDependencyModel.ToString01">
            <summary>Sets the stub of DependencyModel.ToString()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubConstructorDependencyModel.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubConstructorDependencyModel.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubConstructorDependencyModel.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.Core.Fakes.StubCustomLifestyleAttribute">
            <summary>Stub type of Castle.Core.CustomLifestyleAttribute</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubCustomLifestyleAttribute.#ctor(System.Type)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubCustomLifestyleAttribute.Equals(System.Object)">
            <summary>Sets the stub of Attribute.Equals(Object obj)</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubCustomLifestyleAttribute.EqualsObject">
            <summary>Sets the stub of Attribute.Equals(Object obj)</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubCustomLifestyleAttribute.GetHashCode">
            <summary>Sets the stub of Attribute.GetHashCode()</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubCustomLifestyleAttribute.GetHashCode01">
            <summary>Sets the stub of Attribute.GetHashCode()</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubCustomLifestyleAttribute.InitializeStub">
            <summary>Initializes a new instance of type StubCustomLifestyleAttribute</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubCustomLifestyleAttribute.IsDefaultAttribute">
            <summary>Sets the stub of Attribute.IsDefaultAttribute()</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubCustomLifestyleAttribute.IsDefaultAttribute01">
            <summary>Sets the stub of Attribute.IsDefaultAttribute()</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubCustomLifestyleAttribute.Match(System.Object)">
            <summary>Sets the stub of Attribute.Match(Object obj)</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubCustomLifestyleAttribute.MatchObject">
            <summary>Sets the stub of Attribute.Match(Object obj)</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubCustomLifestyleAttribute.TypeIdGet">
            <summary>Sets the stub of Attribute.get_TypeId()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubCustomLifestyleAttribute.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubCustomLifestyleAttribute.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubCustomLifestyleAttribute.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubCustomLifestyleAttribute.TypeId">
            <summary>Sets the stub of Attribute.get_TypeId()</summary>
        </member>
        <member name="T:Castle.Core.Fakes.StubDependencyModel">
            <summary>Stub type of Castle.Core.DependencyModel</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubDependencyModel.#ctor(System.String,System.Type,System.Boolean)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubDependencyModel.#ctor(System.String,System.Type,System.Boolean,System.Boolean,System.Object)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubDependencyModel.Equals(System.Object)">
            <summary>Sets the stub of DependencyModel.Equals(Object obj)</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubDependencyModel.EqualsObject">
            <summary>Sets the stub of DependencyModel.Equals(Object obj)</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubDependencyModel.GetHashCode">
            <summary>Sets the stub of DependencyModel.GetHashCode()</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubDependencyModel.GetHashCode01">
            <summary>Sets the stub of DependencyModel.GetHashCode()</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubDependencyModel.Init(Castle.Core.ParameterModelCollection)">
            <summary>Sets the stub of DependencyModel.Init(ParameterModelCollection parameters)</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubDependencyModel.InitParameterModelCollection">
            <summary>Sets the stub of DependencyModel.Init(ParameterModelCollection parameters)</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubDependencyModel.InitializeStub">
            <summary>Initializes a new instance of type StubDependencyModel</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubDependencyModel.ToString">
            <summary>Sets the stub of DependencyModel.ToString()</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubDependencyModel.ToString01">
            <summary>Sets the stub of DependencyModel.ToString()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubDependencyModel.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubDependencyModel.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubDependencyModel.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.Core.Fakes.StubDependencyModelCollection">
            <summary>Stub type of Castle.Core.DependencyModelCollection</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubDependencyModelCollection.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubDependencyModelCollection.InitializeStub">
            <summary>Initializes a new instance of type StubDependencyModelCollection</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubDependencyModelCollection.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubDependencyModelCollection.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubDependencyModelCollection.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.Core.Fakes.StubICommissionConcern">
            <summary>Stub type of Castle.Core.ICommissionConcern</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubICommissionConcern.#ctor">
            <summary>Initializes a new instance of type StubICommissionConcern</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubICommissionConcern.ApplyComponentModelObject">
            <summary>Sets the stub of ICommissionConcern.Apply(ComponentModel model, Object component)</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubICommissionConcern.cw::Castle#Core#ICommissionConcern#Apply(Castle.Core.ComponentModel,System.Object)">
            <summary>Sets the stub of ICommissionConcern.Apply(ComponentModel model, Object component)</summary>
        </member>
        <member name="T:Castle.Core.Fakes.StubIDecommissionConcern">
            <summary>Stub type of Castle.Core.IDecommissionConcern</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubIDecommissionConcern.#ctor">
            <summary>Initializes a new instance of type StubIDecommissionConcern</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubIDecommissionConcern.ApplyComponentModelObject">
            <summary>Sets the stub of IDecommissionConcern.Apply(ComponentModel model, Object component)</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubIDecommissionConcern.cw::Castle#Core#IDecommissionConcern#Apply(Castle.Core.ComponentModel,System.Object)">
            <summary>Sets the stub of IDecommissionConcern.Apply(ComponentModel model, Object component)</summary>
        </member>
        <member name="T:Castle.Core.Fakes.StubIInitializable">
            <summary>Stub type of Castle.Core.IInitializable</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubIInitializable.#ctor">
            <summary>Initializes a new instance of type StubIInitializable</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubIInitializable.cw::Castle#Core#IInitializable#Initialize">
            <summary>Sets the stub of IInitializable.Initialize()</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubIInitializable.Initialize">
            <summary>Sets the stub of IInitializable.Initialize()</summary>
        </member>
        <member name="T:Castle.Core.Fakes.StubIRecyclable">
            <summary>Stub type of Castle.Core.IRecyclable</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubIRecyclable.#ctor">
            <summary>Initializes a new instance of type StubIRecyclable</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubIRecyclable.cw::Castle#Core#IRecyclable#Recycle">
            <summary>Sets the stub of IRecyclable.Recycle()</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubIRecyclable.Recycle">
            <summary>Sets the stub of IRecyclable.Recycle()</summary>
        </member>
        <member name="T:Castle.Core.Fakes.StubIStartable">
            <summary>Stub type of Castle.Core.IStartable</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubIStartable.#ctor">
            <summary>Initializes a new instance of type StubIStartable</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubIStartable.cw::Castle#Core#IStartable#Start">
            <summary>Sets the stub of IStartable.Start()</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubIStartable.cw::Castle#Core#IStartable#Stop">
            <summary>Sets the stub of IStartable.Stop()</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubIStartable.Start">
            <summary>Sets the stub of IStartable.Start()</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubIStartable.Stop">
            <summary>Sets the stub of IStartable.Stop()</summary>
        </member>
        <member name="T:Castle.Core.Fakes.StubInterceptorAttribute">
            <summary>Stub type of Castle.Core.InterceptorAttribute</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubInterceptorAttribute.#ctor(System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubInterceptorAttribute.#ctor(System.Type)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubInterceptorAttribute.Equals(System.Object)">
            <summary>Sets the stub of Attribute.Equals(Object obj)</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubInterceptorAttribute.EqualsObject">
            <summary>Sets the stub of Attribute.Equals(Object obj)</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubInterceptorAttribute.GetHashCode">
            <summary>Sets the stub of Attribute.GetHashCode()</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubInterceptorAttribute.GetHashCode01">
            <summary>Sets the stub of Attribute.GetHashCode()</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubInterceptorAttribute.InitializeStub">
            <summary>Initializes a new instance of type StubInterceptorAttribute</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubInterceptorAttribute.InterceptorGet">
            <summary>Sets the stub of InterceptorAttribute.get_Interceptor()</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubInterceptorAttribute.IsDefaultAttribute">
            <summary>Sets the stub of Attribute.IsDefaultAttribute()</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubInterceptorAttribute.IsDefaultAttribute01">
            <summary>Sets the stub of Attribute.IsDefaultAttribute()</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubInterceptorAttribute.Match(System.Object)">
            <summary>Sets the stub of Attribute.Match(Object obj)</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubInterceptorAttribute.MatchObject">
            <summary>Sets the stub of Attribute.Match(Object obj)</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubInterceptorAttribute.TypeIdGet">
            <summary>Sets the stub of Attribute.get_TypeId()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubInterceptorAttribute.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubInterceptorAttribute.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubInterceptorAttribute.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubInterceptorAttribute.Interceptor">
            <summary>Sets the stub of InterceptorAttribute.get_Interceptor()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubInterceptorAttribute.TypeId">
            <summary>Sets the stub of Attribute.get_TypeId()</summary>
        </member>
        <member name="T:Castle.Core.Fakes.StubInterceptorReference">
            <summary>Stub type of Castle.Core.InterceptorReference</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubInterceptorReference.#ctor(System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubInterceptorReference.#ctor(System.Type)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubInterceptorReference.Equals(System.Object)">
            <summary>Sets the stub of InterceptorReference.Equals(Object obj)</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubInterceptorReference.EqualsObject">
            <summary>Sets the stub of InterceptorReference.Equals(Object obj)</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubInterceptorReference.GetHashCode">
            <summary>Sets the stub of InterceptorReference.GetHashCode()</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubInterceptorReference.GetHashCode01">
            <summary>Sets the stub of InterceptorReference.GetHashCode()</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubInterceptorReference.InitializeStub">
            <summary>Initializes a new instance of type StubInterceptorReference</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubInterceptorReference.ToString">
            <summary>Sets the stub of InterceptorReference.ToString()</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubInterceptorReference.ToString01">
            <summary>Sets the stub of InterceptorReference.ToString()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubInterceptorReference.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubInterceptorReference.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubInterceptorReference.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.Core.Fakes.StubInterceptorReferenceCollection">
            <summary>Stub type of Castle.Core.InterceptorReferenceCollection</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubInterceptorReferenceCollection.#ctor(Castle.Core.ComponentModel)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubInterceptorReferenceCollection.InitializeStub">
            <summary>Initializes a new instance of type StubInterceptorReferenceCollection</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubInterceptorReferenceCollection.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubInterceptorReferenceCollection.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubInterceptorReferenceCollection.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.Core.Fakes.StubLifecycleConcernsCollection">
            <summary>Stub type of Castle.Core.LifecycleConcernsCollection</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubLifecycleConcernsCollection.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubLifecycleConcernsCollection.InitializeStub">
            <summary>Initializes a new instance of type StubLifecycleConcernsCollection</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubLifecycleConcernsCollection.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubLifecycleConcernsCollection.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubLifecycleConcernsCollection.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.Core.Fakes.StubLifestyleAttribute">
            <summary>Stub type of Castle.Core.LifestyleAttribute</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubLifestyleAttribute.#ctor(Castle.Core.LifestyleType)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubLifestyleAttribute.Equals(System.Object)">
            <summary>Sets the stub of Attribute.Equals(Object obj)</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubLifestyleAttribute.EqualsObject">
            <summary>Sets the stub of Attribute.Equals(Object obj)</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubLifestyleAttribute.GetHashCode">
            <summary>Sets the stub of Attribute.GetHashCode()</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubLifestyleAttribute.GetHashCode01">
            <summary>Sets the stub of Attribute.GetHashCode()</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubLifestyleAttribute.InitializeStub">
            <summary>Initializes a new instance of type StubLifestyleAttribute</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubLifestyleAttribute.IsDefaultAttribute">
            <summary>Sets the stub of Attribute.IsDefaultAttribute()</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubLifestyleAttribute.IsDefaultAttribute01">
            <summary>Sets the stub of Attribute.IsDefaultAttribute()</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubLifestyleAttribute.Match(System.Object)">
            <summary>Sets the stub of Attribute.Match(Object obj)</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubLifestyleAttribute.MatchObject">
            <summary>Sets the stub of Attribute.Match(Object obj)</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubLifestyleAttribute.TypeIdGet">
            <summary>Sets the stub of Attribute.get_TypeId()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubLifestyleAttribute.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubLifestyleAttribute.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubLifestyleAttribute.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubLifestyleAttribute.TypeId">
            <summary>Sets the stub of Attribute.get_TypeId()</summary>
        </member>
        <member name="T:Castle.Core.Fakes.StubMethodMetaModel">
            <summary>Stub type of Castle.Core.MethodMetaModel</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubMethodMetaModel.#ctor(Castle.Core.Configuration.IConfiguration)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubMethodMetaModel.InitializeStub">
            <summary>Initializes a new instance of type StubMethodMetaModel</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubMethodMetaModel.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubMethodMetaModel.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubMethodMetaModel.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.Core.Fakes.StubMethodMetaModelCollection">
            <summary>Stub type of Castle.Core.MethodMetaModelCollection</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubMethodMetaModelCollection.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubMethodMetaModelCollection.ClearItems">
            <summary>Sets the stub of Collection`1.ClearItems()</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubMethodMetaModelCollection.ClearItems01">
            <summary>Sets the stub of Collection`1.ClearItems()</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubMethodMetaModelCollection.InitializeStub">
            <summary>Initializes a new instance of type StubMethodMetaModelCollection</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubMethodMetaModelCollection.InsertItem(System.Int32,Castle.Core.MethodMetaModel)">
            <summary>Sets the stub of Collection`1.InsertItem(Int32 index, !0 item)</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubMethodMetaModelCollection.InsertItemInt32MethodMetaModel">
            <summary>Sets the stub of Collection`1.InsertItem(Int32 index, !0 item)</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubMethodMetaModelCollection.RemoveItem(System.Int32)">
            <summary>Sets the stub of Collection`1.RemoveItem(Int32 index)</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubMethodMetaModelCollection.RemoveItemInt32">
            <summary>Sets the stub of Collection`1.RemoveItem(Int32 index)</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubMethodMetaModelCollection.SetItem(System.Int32,Castle.Core.MethodMetaModel)">
            <summary>Sets the stub of Collection`1.SetItem(Int32 index, !0 item)</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubMethodMetaModelCollection.SetItemInt32MethodMetaModel">
            <summary>Sets the stub of Collection`1.SetItem(Int32 index, !0 item)</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubMethodMetaModelCollection.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubMethodMetaModelCollection.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubMethodMetaModelCollection.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.Core.Fakes.StubParameterModel">
            <summary>Stub type of Castle.Core.ParameterModel</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubParameterModel.#ctor(System.String,Castle.Core.Configuration.IConfiguration)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubParameterModel.#ctor(System.String,System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubParameterModel.InitializeStub">
            <summary>Initializes a new instance of type StubParameterModel</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubParameterModel.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubParameterModel.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubParameterModel.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.Core.Fakes.StubParameterModelCollection">
            <summary>Stub type of Castle.Core.ParameterModelCollection</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubParameterModelCollection.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubParameterModelCollection.InitializeStub">
            <summary>Initializes a new instance of type StubParameterModelCollection</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubParameterModelCollection.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubParameterModelCollection.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubParameterModelCollection.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.Core.Fakes.StubPropertyDependencyModel">
            <summary>Stub type of Castle.Core.PropertyDependencyModel</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubPropertyDependencyModel.#ctor(System.Reflection.PropertyInfo,System.Boolean)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubPropertyDependencyModel.Equals(System.Object)">
            <summary>Sets the stub of DependencyModel.Equals(Object obj)</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubPropertyDependencyModel.EqualsObject">
            <summary>Sets the stub of DependencyModel.Equals(Object obj)</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubPropertyDependencyModel.GetHashCode">
            <summary>Sets the stub of DependencyModel.GetHashCode()</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubPropertyDependencyModel.GetHashCode01">
            <summary>Sets the stub of DependencyModel.GetHashCode()</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubPropertyDependencyModel.Init(Castle.Core.ParameterModelCollection)">
            <summary>Sets the stub of DependencyModel.Init(ParameterModelCollection parameters)</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubPropertyDependencyModel.InitParameterModelCollection">
            <summary>Sets the stub of DependencyModel.Init(ParameterModelCollection parameters)</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubPropertyDependencyModel.InitializeStub">
            <summary>Initializes a new instance of type StubPropertyDependencyModel</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubPropertyDependencyModel.ToString">
            <summary>Sets the stub of DependencyModel.ToString()</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubPropertyDependencyModel.ToString01">
            <summary>Sets the stub of DependencyModel.ToString()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubPropertyDependencyModel.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubPropertyDependencyModel.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubPropertyDependencyModel.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.Core.Fakes.StubPropertySet">
            <summary>Stub type of Castle.Core.PropertySet</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubPropertySet.#ctor(System.Reflection.PropertyInfo,Castle.Core.DependencyModel)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubPropertySet.InitializeStub">
            <summary>Initializes a new instance of type StubPropertySet</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubPropertySet.ToString">
            <summary>Sets the stub of PropertySet.ToString()</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubPropertySet.ToString01">
            <summary>Sets the stub of PropertySet.ToString()</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubPropertySet.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubPropertySet.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubPropertySet.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.Core.Fakes.StubPropertySetCollection">
            <summary>Stub type of Castle.Core.PropertySetCollection</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubPropertySetCollection.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubPropertySetCollection.InitializeStub">
            <summary>Initializes a new instance of type StubPropertySetCollection</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubPropertySetCollection.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubPropertySetCollection.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubPropertySetCollection.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.Core.Fakes.StubStandardPropertyFilters">
            <summary>Stub type of Castle.Core.StandardPropertyFilters</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubStandardPropertyFilters.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubStandardPropertyFilters.InitializeStub">
            <summary>Initializes a new instance of type StubStandardPropertyFilters</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubStandardPropertyFilters.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubStandardPropertyFilters.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubStandardPropertyFilters.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.Core.Interceptor.Fakes.StubIOnBehalfAware">
            <summary>Stub type of Castle.Core.Interceptor.IOnBehalfAware</summary>
        </member>
        <member name="M:Castle.Core.Interceptor.Fakes.StubIOnBehalfAware.#ctor">
            <summary>Initializes a new instance of type StubIOnBehalfAware</summary>
        </member>
        <member name="M:Castle.Core.Interceptor.Fakes.StubIOnBehalfAware.cw::Castle#Core#Interceptor#IOnBehalfAware#SetInterceptedComponentModel(Castle.Core.ComponentModel)">
            <summary>Sets the stub of IOnBehalfAware.SetInterceptedComponentModel(ComponentModel target)</summary>
        </member>
        <member name="F:Castle.Core.Interceptor.Fakes.StubIOnBehalfAware.SetInterceptedComponentModelComponentModel">
            <summary>Sets the stub of IOnBehalfAware.SetInterceptedComponentModel(ComponentModel target)</summary>
        </member>
        <member name="T:Castle.Core.Internal.Fakes.ShimComponentModelExtensions">
            <summary>Shim type of Castle.Core.Internal.ComponentModelExtensions</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.ShimComponentModelExtensions.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.ShimComponentModelExtensions.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.ShimComponentModelExtensions.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimComponentModelExtensions.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimComponentModelExtensions.GetDefaultComponentForServiceFilterComponentModel">
            <summary>Sets the shim of ComponentModelExtensions.GetDefaultComponentForServiceFilter(ComponentModel component)</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimComponentModelExtensions.GetFallbackComponentForServiceFilterComponentModel">
            <summary>Sets the shim of ComponentModelExtensions.GetFallbackComponentForServiceFilter(ComponentModel component)</summary>
        </member>
        <member name="T:Castle.Core.Internal.Fakes.ShimComponentServicesUtil">
            <summary>Shim type of Castle.Core.Internal.ComponentServicesUtil</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.ShimComponentServicesUtil.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.ShimComponentServicesUtil.#ctor(Castle.Core.Internal.ComponentServicesUtil)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.ShimComponentServicesUtil.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.ShimComponentServicesUtil.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimComponentServicesUtil.AddServiceIListOfTypeType">
            <summary>Sets the shim of ComponentServicesUtil.AddService(IList`1&lt;Type&gt; existingServices, Type newService)</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimComponentServicesUtil.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimComponentServicesUtil.Constructor">
            <summary>Sets the shim of ComponentServicesUtil.ComponentServicesUtil()</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimComponentServicesUtil.StaticConstructor">
            <summary>Sets the shim of ComponentServicesUtil.ComponentServicesUtil()</summary>
        </member>
        <member name="T:Castle.Core.Internal.Fakes.ShimComponentServicesUtil.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="T:Castle.Core.Internal.Fakes.ShimConstants">
            <summary>Shim type of Castle.Core.Internal.Constants</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.ShimConstants.#ctor(Castle.Core.Internal.Constants)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.ShimConstants.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.ShimConstants.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimConstants.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimConstants.Constructor">
            <summary>Sets the shim of Constants.Constants()</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimConstants.DefaultComponentForServiceFilterGet">
            <summary>Sets the shim of Constants.get_DefaultComponentForServiceFilter()</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimConstants.ExceptionHelpLinkGet">
            <summary>Sets the shim of Constants.get_ExceptionHelpLink()</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimConstants.FallbackComponentForServiceFilterGet">
            <summary>Sets the shim of Constants.get_FallbackComponentForServiceFilter()</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimConstants.GenericImplementationMatchingStrategyGet">
            <summary>Sets the shim of Constants.get_GenericImplementationMatchingStrategy()</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimConstants.GenericServiceStrategyGet">
            <summary>Sets the shim of Constants.get_GenericServiceStrategy()</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimConstants.PropertyFiltersGet">
            <summary>Sets the shim of Constants.get_PropertyFilters()</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimConstants.ScopeAccessorTypeGet">
            <summary>Sets the shim of Constants.get_ScopeAccessorType()</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimConstants.ScopeRootSelectorGet">
            <summary>Sets the shim of Constants.get_ScopeRootSelector()</summary>
        </member>
        <member name="T:Castle.Core.Internal.Fakes.ShimConstants.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="T:Castle.Core.Internal.Fakes.ShimExceptionHelper">
            <summary>Shim type of Castle.Core.Internal.ExceptionHelper</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.ShimExceptionHelper.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.ShimExceptionHelper.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.ShimExceptionHelper.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimExceptionHelper.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimExceptionHelper.SetUpException">
            <summary>Sets the shim of ExceptionHelper.SetUp(Exception exception)</summary>
        </member>
        <member name="T:Castle.Core.Internal.Fakes.ShimGraphNode">
            <summary>Shim type of Castle.Core.Internal.GraphNode</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.ShimGraphNode.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.ShimGraphNode.#ctor(Castle.Core.Internal.GraphNode)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.ShimGraphNode.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.ShimGraphNode.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.ShimGraphNode.Bind(Castle.Core.Internal.IVertex)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimGraphNode.AddDependentGraphNode">
            <summary>Sets the shim of GraphNode.AddDependent(GraphNode node)</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimGraphNode.AdjacenciesCastleCoreInternalIVertexget">
            <summary>Sets the shim of GraphNode.Castle.Core.Internal.IVertex.get_Adjacencies()</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimGraphNode.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimGraphNode.Constructor">
            <summary>Sets the shim of GraphNode.GraphNode()</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimGraphNode.DependentsGet">
            <summary>Sets the shim of GraphNode.get_Dependents()</summary>
        </member>
        <member name="T:Castle.Core.Internal.Fakes.ShimGraphNode.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimGraphNode.AllInstances.AddDependentGraphNode">
            <summary>Sets the shim of GraphNode.AddDependent(GraphNode node)</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimGraphNode.AllInstances.AdjacenciesCastleCoreInternalIVertexget">
            <summary>Sets the shim of GraphNode.Castle.Core.Internal.IVertex.get_Adjacencies()</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimGraphNode.AllInstances.DependentsGet">
            <summary>Sets the shim of GraphNode.get_Dependents()</summary>
        </member>
        <member name="T:Castle.Core.Internal.Fakes.ShimHelpfulExceptionsUtil">
            <summary>Shim type of Castle.Core.Internal.HelpfulExceptionsUtil</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.ShimHelpfulExceptionsUtil.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.ShimHelpfulExceptionsUtil.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.ShimHelpfulExceptionsUtil.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimHelpfulExceptionsUtil.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimHelpfulExceptionsUtil.IsUsingFactoryMethodComponentModel">
            <summary>Sets the shim of HelpfulExceptionsUtil.IsUsingFactoryMethod(ComponentModel componentModel)</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimHelpfulExceptionsUtil.TrackInstanceCalledMultipleTimesObjectBurden">
            <summary>Sets the shim of HelpfulExceptionsUtil.TrackInstanceCalledMultipleTimes(Object instance, Burden burden)</summary>
        </member>
        <member name="T:Castle.Core.Internal.Fakes.ShimLateBoundComponent">
            <summary>Shim type of Castle.Core.Internal.LateBoundComponent</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.ShimLateBoundComponent.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.ShimLateBoundComponent.#ctor(Castle.Core.Internal.LateBoundComponent)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.ShimLateBoundComponent.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.ShimLateBoundComponent.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimLateBoundComponent.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimLateBoundComponent.Constructor">
            <summary>Sets the shim of LateBoundComponent.LateBoundComponent()</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimLateBoundComponent.StaticConstructor">
            <summary>Sets the shim of LateBoundComponent.LateBoundComponent()</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimLateBoundComponent.ToString">
            <summary>Sets the shim of LateBoundComponent.ToString()</summary>
        </member>
        <member name="T:Castle.Core.Internal.Fakes.ShimLateBoundComponent.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimLateBoundComponent.AllInstances.ToString01">
            <summary>Sets the shim of LateBoundComponent.ToString()</summary>
        </member>
        <member name="T:Castle.Core.Internal.Fakes.ShimLifestyleExtensions">
            <summary>Shim type of Castle.Core.Internal.LifestyleExtensions</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.ShimLifestyleExtensions.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.ShimLifestyleExtensions.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.ShimLifestyleExtensions.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimLifestyleExtensions.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimLifestyleExtensions.GetScopeAccessorTypeComponentModel">
            <summary>Sets the shim of LifestyleExtensions.GetScopeAccessorType(ComponentModel model)</summary>
        </member>
        <member name="T:Castle.Core.Internal.Fakes.ShimMust">
            <summary>Shim type of Castle.Core.Internal.Must</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.ShimMust.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.ShimMust.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.ShimMust.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.ShimMust.NotBeNullOf1M0String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0,System.String,``0})">
            <summary>Sets the shim of Must.NotBeNull(!!0 arg, String name)</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimMust.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="T:Castle.Core.Internal.Fakes.ShimReflectionUtil">
            <summary>Shim type of Castle.Core.Internal.ReflectionUtil</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.ShimReflectionUtil.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.ShimReflectionUtil.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.ShimReflectionUtil.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.ShimReflectionUtil.CreateInstanceOf1TypeObjectArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Type,System.Object[],``0})">
            <summary>Sets the shim of ReflectionUtil.CreateInstance(Type subtypeofTBase, Object[] ctorArgs)</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.ShimReflectionUtil.EnsureIsAssignableOf1Type``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.Type})">
            <summary>Sets the shim of ReflectionUtil.EnsureIsAssignable(Type subtypeofTBase)</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.ShimReflectionUtil.GetAttributesOf1MemberInfo``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Reflection.MemberInfo,``0[]})">
            <summary>Sets the shim of ReflectionUtil.GetAttributes(MemberInfo item)</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.ShimReflectionUtil.InstantiateOf1TypeObjectArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Type,System.Object[],``0})">
            <summary>Sets the shim of ReflectionUtil.Instantiate(Type subtypeofTBase, Object[] ctorArgs)</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.ShimReflectionUtil.IsOf1Type``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Type,System.Boolean})">
            <summary>Sets the shim of ReflectionUtil.Is(Type type)</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.ShimReflectionUtil._Instantiateb__5Of1Object``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Object,System.Type})">
            <summary>Sets the shim of ReflectionUtil.&lt;Instantiate&gt;b__5(Object a)</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.ShimReflectionUtil._Instantiateb__6Of1Object``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Object,System.Type})">
            <summary>Sets the shim of ReflectionUtil.&lt;Instantiate&gt;b__6(Object o)</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimReflectionUtil.AddApplicationAssembliesAssemblyHashSetOfAssemblyString">
            <summary>Sets the shim of ReflectionUtil.AddApplicationAssemblies(Assembly assembly, HashSet`1&lt;Assembly&gt; assemblies, String applicationName)</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimReflectionUtil.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimReflectionUtil.BuildFactoryConstructorInfo">
            <summary>Sets the shim of ReflectionUtil.BuildFactory(ConstructorInfo ctor)</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimReflectionUtil.GetApplicationAssembliesAssembly">
            <summary>Sets the shim of ReflectionUtil.GetApplicationAssemblies(Assembly rootAssembly)</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimReflectionUtil.GetAssembliesIAssemblyProvider">
            <summary>Sets the shim of ReflectionUtil.GetAssemblies(IAssemblyProvider assemblyProvider)</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimReflectionUtil.GetAssemblyNameString">
            <summary>Sets the shim of ReflectionUtil.GetAssemblyName(String filePath)</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimReflectionUtil.GetAssemblyNamedString">
            <summary>Sets the shim of ReflectionUtil.GetAssemblyNamed(String assemblyName)</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimReflectionUtil.GetAssemblyNamedStringPredicateOfAssemblyNamePredicateOfAssembly">
            <summary>Sets the shim of ReflectionUtil.GetAssemblyNamed(String filePath, Predicate`1&lt;AssemblyName&gt; nameFilter, Predicate`1&lt;Assembly&gt; assemblyFilter)</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimReflectionUtil.GetAvailableTypesAssemblyBoolean">
            <summary>Sets the shim of ReflectionUtil.GetAvailableTypes(Assembly assembly, Boolean includeNonExported)</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimReflectionUtil.GetAvailableTypesOrderedAssemblyBoolean">
            <summary>Sets the shim of ReflectionUtil.GetAvailableTypesOrdered(Assembly assembly, Boolean includeNonExported)</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimReflectionUtil.GetCompatibleArrayItemTypeType">
            <summary>Sets the shim of ReflectionUtil.GetCompatibleArrayItemType(Type type)</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimReflectionUtil.GetLoadedAssemblies">
            <summary>Sets the shim of ReflectionUtil.GetLoadedAssemblies()</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimReflectionUtil.HasDefaultValueParameterInfo">
            <summary>Sets the shim of ReflectionUtil.HasDefaultValue(ParameterInfo item)</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimReflectionUtil.InstantiateConstructorInfoObjectArray">
            <summary>Sets the shim of ReflectionUtil.Instantiate(ConstructorInfo ctor, Object[] ctorArgs)</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimReflectionUtil.IsApplicationAssemblyStringString">
            <summary>Sets the shim of ReflectionUtil.IsApplicationAssembly(String applicationName, String assemblyName)</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimReflectionUtil.IsAssemblyFileString">
            <summary>Sets the shim of ReflectionUtil.IsAssemblyFile(String filePath)</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimReflectionUtil.IsDllString">
            <summary>Sets the shim of ReflectionUtil.IsDll(String extension)</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimReflectionUtil.IsExeString">
            <summary>Sets the shim of ReflectionUtil.IsExe(String extension)</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimReflectionUtil.LoadAssemblyAssemblyName">
            <summary>Sets the shim of ReflectionUtil.LoadAssembly(AssemblyName assemblyName)</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimReflectionUtil.StaticConstructor">
            <summary>Sets the shim of ReflectionUtil.ReflectionUtil()</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimReflectionUtil._GetAvailableTypesOrderedb__2Type">
            <summary>Sets the shim of ReflectionUtil.&lt;GetAvailableTypesOrdered&gt;b__2(Type t)</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimReflectionUtil._GetAvailableTypesb__0Type">
            <summary>Sets the shim of ReflectionUtil.&lt;GetAvailableTypes&gt;b__0(Type t)</summary>
        </member>
        <member name="T:Castle.Core.Internal.Fakes.ShimSegmentedList`1">
            <summary>Shim type of Castle.Core.Internal.SegmentedList`1</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.ShimSegmentedList`1.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.ShimSegmentedList`1.#ctor(Castle.Core.Internal.SegmentedList{`0})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.ShimSegmentedList`1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.ShimSegmentedList`1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimSegmentedList`1.AddFirstInt32T0">
            <summary>Sets the shim of SegmentedList`1.AddFirst(Int32 segmentIndex, !0 item)</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimSegmentedList`1.AddLastInt32T0">
            <summary>Sets the shim of SegmentedList`1.AddLast(Int32 segmentIndex, !0 item)</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimSegmentedList`1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimSegmentedList`1.ConstructorInt32">
            <summary>Sets the shim of SegmentedList`1.SegmentedList`1(Int32 segmentCount)</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimSegmentedList`1.GetSegmentInt32">
            <summary>Sets the shim of SegmentedList`1.GetSegment(Int32 segmentIndex)</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimSegmentedList`1.ToArray">
            <summary>Sets the shim of SegmentedList`1.ToArray()</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimSegmentedList`1._ToArrayb__0ListOfT0">
            <summary>Sets the shim of SegmentedList`1.&lt;ToArray&gt;b__0(List`1&lt;!0&gt; l)</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimSegmentedList`1._ToArrayb__1ListOfT0">
            <summary>Sets the shim of SegmentedList`1.&lt;ToArray&gt;b__1(List`1&lt;!0&gt; l)</summary>
        </member>
        <member name="T:Castle.Core.Internal.Fakes.ShimSegmentedList`1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimSegmentedList`1.AllInstances.AddFirstInt32T0">
            <summary>Sets the shim of SegmentedList`1.AddFirst(Int32 segmentIndex, !0 item)</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimSegmentedList`1.AllInstances.AddLastInt32T0">
            <summary>Sets the shim of SegmentedList`1.AddLast(Int32 segmentIndex, !0 item)</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimSegmentedList`1.AllInstances.GetSegmentInt32">
            <summary>Sets the shim of SegmentedList`1.GetSegment(Int32 segmentIndex)</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimSegmentedList`1.AllInstances.ToArray">
            <summary>Sets the shim of SegmentedList`1.ToArray()</summary>
        </member>
        <member name="T:Castle.Core.Internal.Fakes.ShimSimpleSortedSet`1">
            <summary>Shim type of Castle.Core.Internal.SimpleSortedSet`1</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.ShimSimpleSortedSet`1.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.ShimSimpleSortedSet`1.#ctor(Castle.Core.Internal.SimpleSortedSet{`0})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.ShimSimpleSortedSet`1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.ShimSimpleSortedSet`1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.ShimSimpleSortedSet`1.Bind(System.Collections.IEnumerable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.ShimSimpleSortedSet`1.Bind(System.Collections.Generic.ICollection{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.ShimSimpleSortedSet`1.Bind(System.Collections.Generic.IEnumerable{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimSimpleSortedSet`1.AddT0">
            <summary>Sets the shim of SimpleSortedSet`1.Add(!0 item)</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimSimpleSortedSet`1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimSimpleSortedSet`1.Clear">
            <summary>Sets the shim of SimpleSortedSet`1.Clear()</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimSimpleSortedSet`1.Constructor">
            <summary>Sets the shim of SimpleSortedSet`1.SimpleSortedSet`1()</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimSimpleSortedSet`1.ConstructorIComparerOfT0">
            <summary>Sets the shim of SimpleSortedSet`1.SimpleSortedSet`1(IComparer`1&lt;!0&gt; comparer)</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimSimpleSortedSet`1.ConstructorIEnumerableOfT0IComparerOfT0">
            <summary>Sets the shim of SimpleSortedSet`1.SimpleSortedSet`1(IEnumerable`1&lt;!0&gt; other, IComparer`1&lt;!0&gt; comparer)</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimSimpleSortedSet`1.ContainsT0">
            <summary>Sets the shim of SimpleSortedSet`1.Contains(!0 item)</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimSimpleSortedSet`1.CopyToT0ArrayInt32">
            <summary>Sets the shim of SimpleSortedSet`1.CopyTo(!0[] array, Int32 arrayIndex)</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimSimpleSortedSet`1.CountGet">
            <summary>Sets the shim of SimpleSortedSet`1.get_Count()</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimSimpleSortedSet`1.GetEnumerator">
            <summary>Sets the shim of SimpleSortedSet`1.GetEnumerator()</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimSimpleSortedSet`1.IsReadOnlySystemCollectionsGenericICollectionTget">
            <summary>Sets the shim of SimpleSortedSet`1.System.Collections.Generic.ICollection&lt;T&gt;.get_IsReadOnly()</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimSimpleSortedSet`1.ItemGetInt32">
            <summary>Sets the shim of SimpleSortedSet`1.get_Item(Int32 index)</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimSimpleSortedSet`1.RemoveT0">
            <summary>Sets the shim of SimpleSortedSet`1.Remove(!0 item)</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimSimpleSortedSet`1.SystemCollectionsIEnumerableGetEnumerator">
            <summary>Sets the shim of SimpleSortedSet`1.System.Collections.IEnumerable.GetEnumerator()</summary>
        </member>
        <member name="T:Castle.Core.Internal.Fakes.ShimSimpleSortedSet`1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimSimpleSortedSet`1.AllInstances.AddT0">
            <summary>Sets the shim of SimpleSortedSet`1.Add(!0 item)</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimSimpleSortedSet`1.AllInstances.Clear">
            <summary>Sets the shim of SimpleSortedSet`1.Clear()</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimSimpleSortedSet`1.AllInstances.ContainsT0">
            <summary>Sets the shim of SimpleSortedSet`1.Contains(!0 item)</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimSimpleSortedSet`1.AllInstances.CopyToT0ArrayInt32">
            <summary>Sets the shim of SimpleSortedSet`1.CopyTo(!0[] array, Int32 arrayIndex)</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimSimpleSortedSet`1.AllInstances.CountGet">
            <summary>Sets the shim of SimpleSortedSet`1.get_Count()</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimSimpleSortedSet`1.AllInstances.GetEnumerator">
            <summary>Sets the shim of SimpleSortedSet`1.GetEnumerator()</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimSimpleSortedSet`1.AllInstances.IsReadOnlySystemCollectionsGenericICollectionTget">
            <summary>Sets the shim of SimpleSortedSet`1.System.Collections.Generic.ICollection&lt;T&gt;.get_IsReadOnly()</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimSimpleSortedSet`1.AllInstances.ItemGetInt32">
            <summary>Sets the shim of SimpleSortedSet`1.get_Item(Int32 index)</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimSimpleSortedSet`1.AllInstances.RemoveT0">
            <summary>Sets the shim of SimpleSortedSet`1.Remove(!0 item)</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimSimpleSortedSet`1.AllInstances.SystemCollectionsIEnumerableGetEnumerator">
            <summary>Sets the shim of SimpleSortedSet`1.System.Collections.IEnumerable.GetEnumerator()</summary>
        </member>
        <member name="T:Castle.Core.Internal.Fakes.ShimSimpleThreadSafeDictionary`2">
            <summary>Shim type of Castle.Core.Internal.SimpleThreadSafeDictionary`2</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.ShimSimpleThreadSafeDictionary`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.ShimSimpleThreadSafeDictionary`2.#ctor(Castle.Core.Internal.SimpleThreadSafeDictionary{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.ShimSimpleThreadSafeDictionary`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.ShimSimpleThreadSafeDictionary`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimSimpleThreadSafeDictionary`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimSimpleThreadSafeDictionary`2.Constructor">
            <summary>Sets the shim of SimpleThreadSafeDictionary`2.SimpleThreadSafeDictionary`2()</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimSimpleThreadSafeDictionary`2.ContainsT0">
            <summary>Sets the shim of SimpleThreadSafeDictionary`2.Contains(!0 key)</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimSimpleThreadSafeDictionary`2.EjectAllValues">
            <summary>Sets the shim of SimpleThreadSafeDictionary`2.EjectAllValues()</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimSimpleThreadSafeDictionary`2.GetOrAddT0FuncOfT0T1">
            <summary>Sets the shim of SimpleThreadSafeDictionary`2.GetOrAdd(!0 key, Func`2&lt;!0,!1&gt; factory)</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimSimpleThreadSafeDictionary`2.GetOrThrowT0">
            <summary>Sets the shim of SimpleThreadSafeDictionary`2.GetOrThrow(!0 key)</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimSimpleThreadSafeDictionary`2.TryGetT0T1Out">
            <summary>Sets the shim of SimpleThreadSafeDictionary`2.TryGet(!0 key, !1&amp; value)</summary>
        </member>
        <member name="T:Castle.Core.Internal.Fakes.ShimSimpleThreadSafeDictionary`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimSimpleThreadSafeDictionary`2.AllInstances.ContainsT0">
            <summary>Sets the shim of SimpleThreadSafeDictionary`2.Contains(!0 key)</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimSimpleThreadSafeDictionary`2.AllInstances.EjectAllValues">
            <summary>Sets the shim of SimpleThreadSafeDictionary`2.EjectAllValues()</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimSimpleThreadSafeDictionary`2.AllInstances.GetOrAddT0FuncOfT0T1">
            <summary>Sets the shim of SimpleThreadSafeDictionary`2.GetOrAdd(!0 key, Func`2&lt;!0,!1&gt; factory)</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimSimpleThreadSafeDictionary`2.AllInstances.GetOrThrowT0">
            <summary>Sets the shim of SimpleThreadSafeDictionary`2.GetOrThrow(!0 key)</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimSimpleThreadSafeDictionary`2.AllInstances.TryGetT0T1Out">
            <summary>Sets the shim of SimpleThreadSafeDictionary`2.TryGet(!0 key, !1&amp; value)</summary>
        </member>
        <member name="T:Castle.Core.Internal.Fakes.ShimStringExtensions">
            <summary>Shim type of Castle.Core.Internal.StringExtensions</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.ShimStringExtensions.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.ShimStringExtensions.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.ShimStringExtensions.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimStringExtensions.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimStringExtensions.EqualsTextStringString">
            <summary>Sets the shim of StringExtensions.EqualsText(String one, String two)</summary>
        </member>
        <member name="T:Castle.Core.Internal.Fakes.ShimThreadSafeFlag">
            <summary>Shim type of Castle.Core.Internal.ThreadSafeFlag</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.ShimThreadSafeFlag.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.ShimThreadSafeFlag.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.ShimThreadSafeFlag.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimThreadSafeFlag.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="T:Castle.Core.Internal.Fakes.ShimThreadSafeFlag.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="T:Castle.Core.Internal.Fakes.ShimThreadSafeInit">
            <summary>Shim type of Castle.Core.Internal.ThreadSafeInit</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.ShimThreadSafeInit.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.ShimThreadSafeInit.#ctor(Castle.Core.Internal.ThreadSafeInit)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.ShimThreadSafeInit.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.ShimThreadSafeInit.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimThreadSafeInit.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimThreadSafeInit.Constructor">
            <summary>Sets the shim of ThreadSafeInit.ThreadSafeInit()</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimThreadSafeInit.EndThreadSafeOnceSection">
            <summary>Sets the shim of ThreadSafeInit.EndThreadSafeOnceSection()</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimThreadSafeInit.ExecuteThreadSafeOnce">
            <summary>Sets the shim of ThreadSafeInit.ExecuteThreadSafeOnce()</summary>
        </member>
        <member name="T:Castle.Core.Internal.Fakes.ShimThreadSafeInit.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimThreadSafeInit.AllInstances.EndThreadSafeOnceSection">
            <summary>Sets the shim of ThreadSafeInit.EndThreadSafeOnceSection()</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimThreadSafeInit.AllInstances.ExecuteThreadSafeOnce">
            <summary>Sets the shim of ThreadSafeInit.ExecuteThreadSafeOnce()</summary>
        </member>
        <member name="T:Castle.Core.Internal.Fakes.ShimTopologicalSortAlgo">
            <summary>Shim type of Castle.Core.Internal.TopologicalSortAlgo</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.ShimTopologicalSortAlgo.#ctor(Castle.Core.Internal.TopologicalSortAlgo)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.ShimTopologicalSortAlgo.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.ShimTopologicalSortAlgo.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimTopologicalSortAlgo.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimTopologicalSortAlgo.Constructor">
            <summary>Sets the shim of TopologicalSortAlgo.TopologicalSortAlgo()</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimTopologicalSortAlgo.SortIVertexArray">
            <summary>Sets the shim of TopologicalSortAlgo.Sort(IVertex[] graphNodes)</summary>
        </member>
        <member name="T:Castle.Core.Internal.Fakes.ShimTopologicalSortAlgo.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="T:Castle.Core.Internal.Fakes.ShimTypeByInheritanceDepthMostSpecificFirstComparer">
            <summary>Shim type of Castle.Core.Internal.TypeByInheritanceDepthMostSpecificFirstComparer</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.ShimTypeByInheritanceDepthMostSpecificFirstComparer.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.ShimTypeByInheritanceDepthMostSpecificFirstComparer.#ctor(Castle.Core.Internal.TypeByInheritanceDepthMostSpecificFirstComparer)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.ShimTypeByInheritanceDepthMostSpecificFirstComparer.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.ShimTypeByInheritanceDepthMostSpecificFirstComparer.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.ShimTypeByInheritanceDepthMostSpecificFirstComparer.Bind(System.Collections.Generic.IComparer{System.Type})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimTypeByInheritanceDepthMostSpecificFirstComparer.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimTypeByInheritanceDepthMostSpecificFirstComparer.CompareTypeType">
            <summary>Sets the shim of TypeByInheritanceDepthMostSpecificFirstComparer.Compare(Type x, Type y)</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimTypeByInheritanceDepthMostSpecificFirstComparer.Constructor">
            <summary>Sets the shim of TypeByInheritanceDepthMostSpecificFirstComparer.TypeByInheritanceDepthMostSpecificFirstComparer()</summary>
        </member>
        <member name="T:Castle.Core.Internal.Fakes.ShimTypeByInheritanceDepthMostSpecificFirstComparer.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimTypeByInheritanceDepthMostSpecificFirstComparer.AllInstances.CompareTypeType">
            <summary>Sets the shim of TypeByInheritanceDepthMostSpecificFirstComparer.Compare(Type x, Type y)</summary>
        </member>
        <member name="T:Castle.Core.Internal.Fakes.ShimTypeUtil">
            <summary>Shim type of Castle.Core.Internal.TypeUtil</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.ShimTypeUtil.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.ShimTypeUtil.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.ShimTypeUtil.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimTypeUtil.AppendGenericParametersStringBuilderTypeArray">
            <summary>Sets the shim of TypeUtil.AppendGenericParameters(StringBuilder name, Type[] genericArguments)</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimTypeUtil.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimTypeUtil.IsPrimitiveTypeOrCollectionType">
            <summary>Sets the shim of TypeUtil.IsPrimitiveTypeOrCollection(Type type)</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimTypeUtil.IsPrimitiveTypeType">
            <summary>Sets the shim of TypeUtil.IsPrimitiveType(Type type)</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimTypeUtil.ToCSharpStringType">
            <summary>Sets the shim of TypeUtil.ToCSharpString(Type type)</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimTypeUtil.ToCSharpStringTypeStringBuilder">
            <summary>Sets the shim of TypeUtil.ToCSharpString(Type type, StringBuilder name)</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimTypeUtil.TryMakeGenericTypeTypeTypeArray">
            <summary>Sets the shim of TypeUtil.TryMakeGenericType(Type openGeneric, Type[] arguments)</summary>
        </member>
        <member name="T:Castle.Core.Internal.Fakes.StubComponentServicesUtil">
            <summary>Stub type of Castle.Core.Internal.ComponentServicesUtil</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.StubComponentServicesUtil.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.StubComponentServicesUtil.InitializeStub">
            <summary>Initializes a new instance of type StubComponentServicesUtil</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.StubComponentServicesUtil.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.StubComponentServicesUtil.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.StubComponentServicesUtil.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.Core.Internal.Fakes.StubConstants">
            <summary>Stub type of Castle.Core.Internal.Constants</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.StubConstants.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.StubConstants.InitializeStub">
            <summary>Initializes a new instance of type StubConstants</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.StubConstants.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.StubConstants.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.StubConstants.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.Core.Internal.Fakes.StubGraphNode">
            <summary>Stub type of Castle.Core.Internal.GraphNode</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.StubGraphNode.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.StubGraphNode.InitializeStub">
            <summary>Initializes a new instance of type StubGraphNode</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.StubGraphNode.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.StubGraphNode.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.StubGraphNode.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.Core.Internal.Fakes.StubIAssemblyProvider">
            <summary>Stub type of Castle.Core.Internal.IAssemblyProvider</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.StubIAssemblyProvider.#ctor">
            <summary>Initializes a new instance of type StubIAssemblyProvider</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.StubIAssemblyProvider.cw::Castle#Core#Internal#IAssemblyProvider#GetAssemblies">
            <summary>Sets the stub of IAssemblyProvider.GetAssemblies()</summary>
        </member>
        <member name="F:Castle.Core.Internal.Fakes.StubIAssemblyProvider.GetAssemblies">
            <summary>Sets the stub of IAssemblyProvider.GetAssemblies()</summary>
        </member>
        <member name="T:Castle.Core.Internal.Fakes.StubIMutableCollection`1">
            <summary>Stub type of Castle.Core.Internal.IMutableCollection`1</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.StubIMutableCollection`1.#ctor">
            <summary>Initializes a new instance of type StubIMutableCollection</summary>
        </member>
        <member name="F:Castle.Core.Internal.Fakes.StubIMutableCollection`1.AddT0">
            <summary>Sets the stub of IMutableCollection`1.Add(!0 item)</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.StubIMutableCollection`1.cw::Castle#Core#Internal#IMutableCollection{T}#Add(`0)">
            <summary>Sets the stub of IMutableCollection`1.Add(!0 item)</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.StubIMutableCollection`1.cw::Castle#Core#Internal#IMutableCollection{T}#Remove(`0)">
            <summary>Sets the stub of IMutableCollection`1.Remove(!0 item)</summary>
        </member>
        <member name="F:Castle.Core.Internal.Fakes.StubIMutableCollection`1.CountGet">
            <summary>Sets the stub of IMutableCollection`1.get_Count()</summary>
        </member>
        <member name="F:Castle.Core.Internal.Fakes.StubIMutableCollection`1.GetEnumerator">
            <summary>Sets the stub of IEnumerable`1.GetEnumerator()</summary>
        </member>
        <member name="F:Castle.Core.Internal.Fakes.StubIMutableCollection`1.GetEnumerator01">
            <summary>Sets the stub of IEnumerable.GetEnumerator()</summary>
        </member>
        <member name="F:Castle.Core.Internal.Fakes.StubIMutableCollection`1.RemoveT0">
            <summary>Sets the stub of IMutableCollection`1.Remove(!0 item)</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.StubIMutableCollection`1.global::System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>Sets the stub of IEnumerable`1.GetEnumerator()</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.StubIMutableCollection`1.global::System#Collections#IEnumerable#GetEnumerator">
            <summary>Sets the stub of IEnumerable.GetEnumerator()</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.StubIMutableCollection`1.cw::Castle#Core#Internal#IMutableCollection{T}#Count">
            <summary>Sets the stub of IMutableCollection`1.get_Count()</summary>
        </member>
        <member name="T:Castle.Core.Internal.Fakes.StubIVertex">
            <summary>Stub type of Castle.Core.Internal.IVertex</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.StubIVertex.#ctor">
            <summary>Initializes a new instance of type StubIVertex</summary>
        </member>
        <member name="F:Castle.Core.Internal.Fakes.StubIVertex.AdjacenciesGet">
            <summary>Sets the stub of IVertex.get_Adjacencies()</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.StubIVertex.cw::Castle#Core#Internal#IVertex#Adjacencies">
            <summary>Sets the stub of IVertex.get_Adjacencies()</summary>
        </member>
        <member name="T:Castle.Core.Internal.Fakes.StubSegmentedList`1">
            <summary>Stub type of Castle.Core.Internal.SegmentedList`1</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.StubSegmentedList`1.#ctor(System.Int32)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.StubSegmentedList`1.InitializeStub">
            <summary>Initializes a new instance of type StubSegmentedList</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.StubSegmentedList`1.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.StubSegmentedList`1.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.StubSegmentedList`1.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.Core.Internal.Fakes.StubSimpleSortedSet`1">
            <summary>Stub type of Castle.Core.Internal.SimpleSortedSet`1</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.StubSimpleSortedSet`1.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.StubSimpleSortedSet`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.StubSimpleSortedSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IComparer{`0})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.StubSimpleSortedSet`1.InitializeStub">
            <summary>Initializes a new instance of type StubSimpleSortedSet</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.StubSimpleSortedSet`1.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.StubSimpleSortedSet`1.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.StubSimpleSortedSet`1.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.Core.Internal.Fakes.StubSimpleThreadSafeDictionary`2">
            <summary>Stub type of Castle.Core.Internal.SimpleThreadSafeDictionary`2</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.StubSimpleThreadSafeDictionary`2.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.StubSimpleThreadSafeDictionary`2.InitializeStub">
            <summary>Initializes a new instance of type StubSimpleThreadSafeDictionary</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.StubSimpleThreadSafeDictionary`2.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.StubSimpleThreadSafeDictionary`2.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.StubSimpleThreadSafeDictionary`2.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.Core.Internal.Fakes.StubTopologicalSortAlgo">
            <summary>Stub type of Castle.Core.Internal.TopologicalSortAlgo</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.StubTopologicalSortAlgo.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.StubTopologicalSortAlgo.InitializeStub">
            <summary>Initializes a new instance of type StubTopologicalSortAlgo</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.StubTopologicalSortAlgo.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.StubTopologicalSortAlgo.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.StubTopologicalSortAlgo.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.Core.Internal.Fakes.StubTypeByInheritanceDepthMostSpecificFirstComparer">
            <summary>Stub type of Castle.Core.Internal.TypeByInheritanceDepthMostSpecificFirstComparer</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.StubTypeByInheritanceDepthMostSpecificFirstComparer.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.StubTypeByInheritanceDepthMostSpecificFirstComparer.InitializeStub">
            <summary>Initializes a new instance of type StubTypeByInheritanceDepthMostSpecificFirstComparer</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.StubTypeByInheritanceDepthMostSpecificFirstComparer.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.StubTypeByInheritanceDepthMostSpecificFirstComparer.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.StubTypeByInheritanceDepthMostSpecificFirstComparer.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.Facilities.Startable.Fakes.ShimStartConcern">
            <summary>Shim type of Castle.Facilities.Startable.StartConcern</summary>
        </member>
        <member name="M:Castle.Facilities.Startable.Fakes.ShimStartConcern.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Facilities.Startable.Fakes.ShimStartConcern.#ctor(Castle.Facilities.Startable.StartConcern)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Facilities.Startable.Fakes.ShimStartConcern.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Facilities.Startable.Fakes.ShimStartConcern.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Facilities.Startable.Fakes.ShimStartConcern.Bind(Castle.Core.ICommissionConcern)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.ShimStartConcern.ApplyComponentModelObject">
            <summary>Sets the shim of StartConcern.Apply(ComponentModel model, Object component)</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.ShimStartConcern.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.ShimStartConcern.Constructor">
            <summary>Sets the shim of StartConcern.StartConcern()</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.ShimStartConcern.InstanceGet">
            <summary>Sets the shim of StartConcern.get_Instance()</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.ShimStartConcern.StaticConstructor">
            <summary>Sets the shim of StartConcern.StartConcern()</summary>
        </member>
        <member name="T:Castle.Facilities.Startable.Fakes.ShimStartConcern.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.ShimStartConcern.AllInstances.ApplyComponentModelObject">
            <summary>Sets the shim of StartConcern.Apply(ComponentModel model, Object component)</summary>
        </member>
        <member name="T:Castle.Facilities.Startable.Fakes.ShimStartableContributor">
            <summary>Shim type of Castle.Facilities.Startable.StartableContributor</summary>
        </member>
        <member name="M:Castle.Facilities.Startable.Fakes.ShimStartableContributor.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Facilities.Startable.Fakes.ShimStartableContributor.#ctor(Castle.Facilities.Startable.StartableContributor)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Facilities.Startable.Fakes.ShimStartableContributor.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Facilities.Startable.Fakes.ShimStartableContributor.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Facilities.Startable.Fakes.ShimStartableContributor.Bind(Castle.MicroKernel.ModelBuilder.IContributeComponentModelConstruction)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.ShimStartableContributor.AddStartComponentModel">
            <summary>Sets the shim of StartableContributor.AddStart(ComponentModel model)</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.ShimStartableContributor.AddStopComponentModel">
            <summary>Sets the shim of StartableContributor.AddStop(ComponentModel model)</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.ShimStartableContributor.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.ShimStartableContributor.CheckIfComponentImplementsIStartableComponentModel">
            <summary>Sets the shim of StartableContributor.CheckIfComponentImplementsIStartable(ComponentModel model)</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.ShimStartableContributor.ConstructorITypeConverter">
            <summary>Sets the shim of StartableContributor.StartableContributor(ITypeConverter converter)</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.ShimStartableContributor.HasStartableAttributeSetComponentModel">
            <summary>Sets the shim of StartableContributor.HasStartableAttributeSet(ComponentModel model)</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.ShimStartableContributor.ProcessModelIKernelComponentModel">
            <summary>Sets the shim of StartableContributor.ProcessModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="T:Castle.Facilities.Startable.Fakes.ShimStartableContributor.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.ShimStartableContributor.AllInstances.AddStartComponentModel">
            <summary>Sets the shim of StartableContributor.AddStart(ComponentModel model)</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.ShimStartableContributor.AllInstances.AddStopComponentModel">
            <summary>Sets the shim of StartableContributor.AddStop(ComponentModel model)</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.ShimStartableContributor.AllInstances.HasStartableAttributeSetComponentModel">
            <summary>Sets the shim of StartableContributor.HasStartableAttributeSet(ComponentModel model)</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.ShimStartableContributor.AllInstances.ProcessModelIKernelComponentModel">
            <summary>Sets the shim of StartableContributor.ProcessModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="T:Castle.Facilities.Startable.Fakes.ShimStartableFacility">
            <summary>Shim type of Castle.Facilities.Startable.StartableFacility</summary>
        </member>
        <member name="M:Castle.Facilities.Startable.Fakes.ShimStartableFacility.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Facilities.Startable.Fakes.ShimStartableFacility.#ctor(Castle.Facilities.Startable.StartableFacility)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Facilities.Startable.Fakes.ShimStartableFacility.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Facilities.Startable.Fakes.ShimStartableFacility.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Facilities.Startable.Fakes.ShimStartableFacility.Bind(Castle.MicroKernel.IFacility)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.Facilities.Startable.Fakes.ShimStartableFacility.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.ShimStartableFacility.AddHandlerToWaitingListIHandler">
            <summary>Sets the shim of StartableFacility.AddHandlerToWaitingList(IHandler handler)</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.ShimStartableFacility.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.ShimStartableFacility.CacheForStartStringIHandler">
            <summary>Sets the shim of StartableFacility.CacheForStart(String key, IHandler handler)</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.ShimStartableFacility.CheckWaitingList">
            <summary>Sets the shim of StartableFacility.CheckWaitingList()</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.ShimStartableFacility.Constructor">
            <summary>Sets the shim of StartableFacility.StartableFacility()</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.ShimStartableFacility.DeferredStart">
            <summary>Sets the shim of StartableFacility.DeferredStart()</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.ShimStartableFacility.DeferredTryStart">
            <summary>Sets the shim of StartableFacility.DeferredTryStart()</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.ShimStartableFacility.Init">
            <summary>Sets the shim of StartableFacility.Init()</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.ShimStartableFacility.IsStartableIHandler">
            <summary>Sets the shim of StartableFacility.IsStartable(IHandler handler)</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.ShimStartableFacility.OnComponentRegisteredStringIHandler">
            <summary>Sets the shim of StartableFacility.OnComponentRegistered(String key, IHandler handler)</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.ShimStartableFacility.StartAllObjectEventArgs">
            <summary>Sets the shim of StartableFacility.StartAll(Object sender, EventArgs e)</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.ShimStartableFacility.StartIHandler">
            <summary>Sets the shim of StartableFacility.Start(IHandler handler)</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.ShimStartableFacility.TryStartIHandler">
            <summary>Sets the shim of StartableFacility.TryStart(IHandler handler)</summary>
        </member>
        <member name="T:Castle.Facilities.Startable.Fakes.ShimStartableFacility.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.ShimStartableFacility.AllInstances.AddHandlerToWaitingListIHandler">
            <summary>Sets the shim of StartableFacility.AddHandlerToWaitingList(IHandler handler)</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.ShimStartableFacility.AllInstances.CacheForStartStringIHandler">
            <summary>Sets the shim of StartableFacility.CacheForStart(String key, IHandler handler)</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.ShimStartableFacility.AllInstances.CheckWaitingList">
            <summary>Sets the shim of StartableFacility.CheckWaitingList()</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.ShimStartableFacility.AllInstances.DeferredStart">
            <summary>Sets the shim of StartableFacility.DeferredStart()</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.ShimStartableFacility.AllInstances.DeferredTryStart">
            <summary>Sets the shim of StartableFacility.DeferredTryStart()</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.ShimStartableFacility.AllInstances.Init">
            <summary>Sets the shim of StartableFacility.Init()</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.ShimStartableFacility.AllInstances.IsStartableIHandler">
            <summary>Sets the shim of StartableFacility.IsStartable(IHandler handler)</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.ShimStartableFacility.AllInstances.OnComponentRegisteredStringIHandler">
            <summary>Sets the shim of StartableFacility.OnComponentRegistered(String key, IHandler handler)</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.ShimStartableFacility.AllInstances.StartAllObjectEventArgs">
            <summary>Sets the shim of StartableFacility.StartAll(Object sender, EventArgs e)</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.ShimStartableFacility.AllInstances.StartIHandler">
            <summary>Sets the shim of StartableFacility.Start(IHandler handler)</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.ShimStartableFacility.AllInstances.TryStartIHandler">
            <summary>Sets the shim of StartableFacility.TryStart(IHandler handler)</summary>
        </member>
        <member name="T:Castle.Facilities.Startable.Fakes.ShimStartableFacilityRegistrationExtensions">
            <summary>Shim type of Castle.Facilities.Startable.StartableFacilityRegistrationExtensions</summary>
        </member>
        <member name="M:Castle.Facilities.Startable.Fakes.ShimStartableFacilityRegistrationExtensions.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Facilities.Startable.Fakes.ShimStartableFacilityRegistrationExtensions.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Facilities.Startable.Fakes.ShimStartableFacilityRegistrationExtensions.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Facilities.Startable.Fakes.ShimStartableFacilityRegistrationExtensions.EnsureIsOf1Expression``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.Expressions.Expression,``0})">
            <summary>Sets the shim of StartableFacilityRegistrationExtensions.EnsureIs(Expression expression)</summary>
        </member>
        <member name="M:Castle.Facilities.Startable.Fakes.ShimStartableFacilityRegistrationExtensions.ObtainMethodNameOf1ExpressionOfFuncOfM0Action``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.Expressions.Expression{System.Func{``0,System.Action}},System.String})">
            <summary>Sets the shim of StartableFacilityRegistrationExtensions.ObtainMethodName(Expression`1&lt;Func`2&lt;!!0,Action&gt;&gt; methodToUse)</summary>
        </member>
        <member name="M:Castle.Facilities.Startable.Fakes.ShimStartableFacilityRegistrationExtensions.StartOf1ComponentRegistrationOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.Registration.ComponentRegistration{``0},Castle.MicroKernel.Registration.ComponentRegistration{``0}})">
            <summary>Sets the shim of StartableFacilityRegistrationExtensions.Start(ComponentRegistration`1&lt;!!0&gt; registration)</summary>
        </member>
        <member name="M:Castle.Facilities.Startable.Fakes.ShimStartableFacilityRegistrationExtensions.StartUsingMethodOf1ComponentRegistrationOfM0ExpressionOfFuncOfM0Action``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.Registration.ComponentRegistration{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Action}},Castle.MicroKernel.Registration.ComponentRegistration{``0}})">
            <summary>Sets the shim of StartableFacilityRegistrationExtensions.StartUsingMethod(ComponentRegistration`1&lt;!!0&gt; registration, Expression`1&lt;Func`2&lt;!!0,Action&gt;&gt; methodToUse)</summary>
        </member>
        <member name="M:Castle.Facilities.Startable.Fakes.ShimStartableFacilityRegistrationExtensions.StartUsingMethodOf1ComponentRegistrationOfM0String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.Registration.ComponentRegistration{``0},System.String,Castle.MicroKernel.Registration.ComponentRegistration{``0}})">
            <summary>Sets the shim of StartableFacilityRegistrationExtensions.StartUsingMethod(ComponentRegistration`1&lt;!!0&gt; registration, String startMethod)</summary>
        </member>
        <member name="M:Castle.Facilities.Startable.Fakes.ShimStartableFacilityRegistrationExtensions.StopUsingMethodOf1ComponentRegistrationOfM0ExpressionOfFuncOfM0Action``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.Registration.ComponentRegistration{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Action}},Castle.MicroKernel.Registration.ComponentRegistration{``0}})">
            <summary>Sets the shim of StartableFacilityRegistrationExtensions.StopUsingMethod(ComponentRegistration`1&lt;!!0&gt; registration, Expression`1&lt;Func`2&lt;!!0,Action&gt;&gt; methodToUse)</summary>
        </member>
        <member name="M:Castle.Facilities.Startable.Fakes.ShimStartableFacilityRegistrationExtensions.StopUsingMethodOf1ComponentRegistrationOfM0String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.Registration.ComponentRegistration{``0},System.String,Castle.MicroKernel.Registration.ComponentRegistration{``0}})">
            <summary>Sets the shim of StartableFacilityRegistrationExtensions.StopUsingMethod(ComponentRegistration`1&lt;!!0&gt; registration, String stopMethod)</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.ShimStartableFacilityRegistrationExtensions.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="T:Castle.Facilities.Startable.Fakes.ShimStopConcern">
            <summary>Shim type of Castle.Facilities.Startable.StopConcern</summary>
        </member>
        <member name="M:Castle.Facilities.Startable.Fakes.ShimStopConcern.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Facilities.Startable.Fakes.ShimStopConcern.#ctor(Castle.Facilities.Startable.StopConcern)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Facilities.Startable.Fakes.ShimStopConcern.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Facilities.Startable.Fakes.ShimStopConcern.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Facilities.Startable.Fakes.ShimStopConcern.Bind(Castle.Core.IDecommissionConcern)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.ShimStopConcern.ApplyComponentModelObject">
            <summary>Sets the shim of StopConcern.Apply(ComponentModel model, Object component)</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.ShimStopConcern.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.ShimStopConcern.Constructor">
            <summary>Sets the shim of StopConcern.StopConcern()</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.ShimStopConcern.InstanceGet">
            <summary>Sets the shim of StopConcern.get_Instance()</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.ShimStopConcern.StaticConstructor">
            <summary>Sets the shim of StopConcern.StopConcern()</summary>
        </member>
        <member name="T:Castle.Facilities.Startable.Fakes.ShimStopConcern.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.ShimStopConcern.AllInstances.ApplyComponentModelObject">
            <summary>Sets the shim of StopConcern.Apply(ComponentModel model, Object component)</summary>
        </member>
        <member name="T:Castle.Facilities.Startable.Fakes.StubStartConcern">
            <summary>Stub type of Castle.Facilities.Startable.StartConcern</summary>
        </member>
        <member name="M:Castle.Facilities.Startable.Fakes.StubStartConcern.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Facilities.Startable.Fakes.StubStartConcern.InitializeStub">
            <summary>Initializes a new instance of type StubStartConcern</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.StubStartConcern.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.StubStartConcern.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.StubStartConcern.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.Facilities.Startable.Fakes.StubStartableContributor">
            <summary>Stub type of Castle.Facilities.Startable.StartableContributor</summary>
        </member>
        <member name="M:Castle.Facilities.Startable.Fakes.StubStartableContributor.#ctor(Castle.MicroKernel.SubSystems.Conversion.ITypeConverter)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Facilities.Startable.Fakes.StubStartableContributor.InitializeStub">
            <summary>Initializes a new instance of type StubStartableContributor</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.StubStartableContributor.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.StubStartableContributor.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.StubStartableContributor.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.Facilities.Startable.Fakes.StubStartableFacility">
            <summary>Stub type of Castle.Facilities.Startable.StartableFacility</summary>
        </member>
        <member name="M:Castle.Facilities.Startable.Fakes.StubStartableFacility.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Facilities.Startable.Fakes.StubStartableFacility.Dispose">
            <summary>Sets the stub of AbstractFacility.Dispose()</summary>
        </member>
        <member name="F:Castle.Facilities.Startable.Fakes.StubStartableFacility.Dispose01">
            <summary>Sets the stub of AbstractFacility.Dispose()</summary>
        </member>
        <member name="M:Castle.Facilities.Startable.Fakes.StubStartableFacility.Init">
            <summary>Sets the stub of StartableFacility.Init()</summary>
        </member>
        <member name="F:Castle.Facilities.Startable.Fakes.StubStartableFacility.Init01">
            <summary>Sets the stub of StartableFacility.Init()</summary>
        </member>
        <member name="M:Castle.Facilities.Startable.Fakes.StubStartableFacility.InitializeStub">
            <summary>Initializes a new instance of type StubStartableFacility</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.StubStartableFacility.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.StubStartableFacility.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.StubStartableFacility.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.Facilities.Startable.Fakes.StubStopConcern">
            <summary>Stub type of Castle.Facilities.Startable.StopConcern</summary>
        </member>
        <member name="M:Castle.Facilities.Startable.Fakes.StubStopConcern.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Facilities.Startable.Fakes.StubStopConcern.InitializeStub">
            <summary>Initializes a new instance of type StubStopConcern</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.StubStopConcern.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.StubStopConcern.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.StubStopConcern.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.Facilities.TypedFactory.Fakes.ShimDefaultDelegateComponentSelector">
            <summary>Shim type of Castle.Facilities.TypedFactory.DefaultDelegateComponentSelector</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.ShimDefaultDelegateComponentSelector.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.ShimDefaultDelegateComponentSelector.#ctor(Castle.Facilities.TypedFactory.DefaultDelegateComponentSelector)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.ShimDefaultDelegateComponentSelector.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.ShimDefaultDelegateComponentSelector.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.ShimDefaultDelegateComponentSelector.Bind(Castle.Facilities.TypedFactory.ITypedFactoryComponentSelector)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimDefaultDelegateComponentSelector.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimDefaultDelegateComponentSelector.Constructor">
            <summary>Sets the shim of DefaultDelegateComponentSelector.DefaultDelegateComponentSelector()</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimDefaultDelegateComponentSelector.GetArgumentsMethodInfoObjectArray">
            <summary>Sets the shim of DefaultDelegateComponentSelector.GetArguments(MethodInfo method, Object[] arguments)</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimDefaultDelegateComponentSelector.GetComponentNameMethodInfoObjectArray">
            <summary>Sets the shim of DefaultDelegateComponentSelector.GetComponentName(MethodInfo method, Object[] arguments)</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimDefaultDelegateComponentSelector.IsFuncType">
            <summary>Sets the shim of DefaultDelegateComponentSelector.IsFunc(Type type)</summary>
        </member>
        <member name="T:Castle.Facilities.TypedFactory.Fakes.ShimDefaultDelegateComponentSelector.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimDefaultDelegateComponentSelector.AllInstances.GetArgumentsMethodInfoObjectArray">
            <summary>Sets the shim of DefaultDelegateComponentSelector.GetArguments(MethodInfo method, Object[] arguments)</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimDefaultDelegateComponentSelector.AllInstances.GetComponentNameMethodInfoObjectArray">
            <summary>Sets the shim of DefaultDelegateComponentSelector.GetComponentName(MethodInfo method, Object[] arguments)</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimDefaultDelegateComponentSelector.AllInstances.IsFuncType">
            <summary>Sets the shim of DefaultDelegateComponentSelector.IsFunc(Type type)</summary>
        </member>
        <member name="T:Castle.Facilities.TypedFactory.Fakes.ShimDefaultTypedFactoryComponentSelector">
            <summary>Shim type of Castle.Facilities.TypedFactory.DefaultTypedFactoryComponentSelector</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.ShimDefaultTypedFactoryComponentSelector.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.ShimDefaultTypedFactoryComponentSelector.#ctor(Castle.Facilities.TypedFactory.DefaultTypedFactoryComponentSelector)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.ShimDefaultTypedFactoryComponentSelector.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.ShimDefaultTypedFactoryComponentSelector.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.ShimDefaultTypedFactoryComponentSelector.Bind(Castle.Facilities.TypedFactory.ITypedFactoryComponentSelector)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimDefaultTypedFactoryComponentSelector.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimDefaultTypedFactoryComponentSelector.BuildFactoryComponentMethodInfoStringTypeIDictionary">
            <summary>Sets the shim of DefaultTypedFactoryComponentSelector.BuildFactoryComponent(MethodInfo method, String componentName, Type componentType, IDictionary additionalArguments)</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimDefaultTypedFactoryComponentSelector.Constructor">
            <summary>Sets the shim of DefaultTypedFactoryComponentSelector.DefaultTypedFactoryComponentSelector()</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimDefaultTypedFactoryComponentSelector.ConstructorBooleanBoolean">
            <summary>Sets the shim of DefaultTypedFactoryComponentSelector.DefaultTypedFactoryComponentSelector(Boolean getMethodsResolveByName, Boolean fallbackToResolveByTypeIfNameNotFound)</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimDefaultTypedFactoryComponentSelector.FallbackToResolveByTypeIfNameNotFoundGet">
            <summary>Sets the shim of DefaultTypedFactoryComponentSelector.get_FallbackToResolveByTypeIfNameNotFound()</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimDefaultTypedFactoryComponentSelector.FallbackToResolveByTypeIfNameNotFoundSetBoolean">
            <summary>Sets the shim of DefaultTypedFactoryComponentSelector.set_FallbackToResolveByTypeIfNameNotFound(Boolean value)</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimDefaultTypedFactoryComponentSelector.GetArgumentsMethodInfoObjectArray">
            <summary>Sets the shim of DefaultTypedFactoryComponentSelector.GetArguments(MethodInfo method, Object[] arguments)</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimDefaultTypedFactoryComponentSelector.GetComponentNameMethodInfoObjectArray">
            <summary>Sets the shim of DefaultTypedFactoryComponentSelector.GetComponentName(MethodInfo method, Object[] arguments)</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimDefaultTypedFactoryComponentSelector.GetComponentTypeMethodInfoObjectArray">
            <summary>Sets the shim of DefaultTypedFactoryComponentSelector.GetComponentType(MethodInfo method, Object[] arguments)</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimDefaultTypedFactoryComponentSelector.GetMethodsResolveByNameGet">
            <summary>Sets the shim of DefaultTypedFactoryComponentSelector.get_GetMethodsResolveByName()</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimDefaultTypedFactoryComponentSelector.GetMethodsResolveByNameSetBoolean">
            <summary>Sets the shim of DefaultTypedFactoryComponentSelector.set_GetMethodsResolveByName(Boolean value)</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimDefaultTypedFactoryComponentSelector.SelectComponentMethodInfoTypeObjectArray">
            <summary>Sets the shim of DefaultTypedFactoryComponentSelector.SelectComponent(MethodInfo method, Type type, Object[] arguments)</summary>
        </member>
        <member name="T:Castle.Facilities.TypedFactory.Fakes.ShimDefaultTypedFactoryComponentSelector.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimDefaultTypedFactoryComponentSelector.AllInstances.BuildFactoryComponentMethodInfoStringTypeIDictionary">
            <summary>Sets the shim of DefaultTypedFactoryComponentSelector.BuildFactoryComponent(MethodInfo method, String componentName, Type componentType, IDictionary additionalArguments)</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimDefaultTypedFactoryComponentSelector.AllInstances.FallbackToResolveByTypeIfNameNotFoundGet">
            <summary>Sets the shim of DefaultTypedFactoryComponentSelector.get_FallbackToResolveByTypeIfNameNotFound()</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimDefaultTypedFactoryComponentSelector.AllInstances.FallbackToResolveByTypeIfNameNotFoundSetBoolean">
            <summary>Sets the shim of DefaultTypedFactoryComponentSelector.set_FallbackToResolveByTypeIfNameNotFound(Boolean value)</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimDefaultTypedFactoryComponentSelector.AllInstances.GetArgumentsMethodInfoObjectArray">
            <summary>Sets the shim of DefaultTypedFactoryComponentSelector.GetArguments(MethodInfo method, Object[] arguments)</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimDefaultTypedFactoryComponentSelector.AllInstances.GetComponentNameMethodInfoObjectArray">
            <summary>Sets the shim of DefaultTypedFactoryComponentSelector.GetComponentName(MethodInfo method, Object[] arguments)</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimDefaultTypedFactoryComponentSelector.AllInstances.GetComponentTypeMethodInfoObjectArray">
            <summary>Sets the shim of DefaultTypedFactoryComponentSelector.GetComponentType(MethodInfo method, Object[] arguments)</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimDefaultTypedFactoryComponentSelector.AllInstances.GetMethodsResolveByNameGet">
            <summary>Sets the shim of DefaultTypedFactoryComponentSelector.get_GetMethodsResolveByName()</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimDefaultTypedFactoryComponentSelector.AllInstances.GetMethodsResolveByNameSetBoolean">
            <summary>Sets the shim of DefaultTypedFactoryComponentSelector.set_GetMethodsResolveByName(Boolean value)</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimDefaultTypedFactoryComponentSelector.AllInstances.SelectComponentMethodInfoTypeObjectArray">
            <summary>Sets the shim of DefaultTypedFactoryComponentSelector.SelectComponent(MethodInfo method, Type type, Object[] arguments)</summary>
        </member>
        <member name="T:Castle.Facilities.TypedFactory.Fakes.ShimDelegateFactoryActivator">
            <summary>Shim type of Castle.Facilities.TypedFactory.DelegateFactoryActivator</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.ShimDelegateFactoryActivator.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.ShimDelegateFactoryActivator.#ctor(Castle.Facilities.TypedFactory.DelegateFactoryActivator)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.ShimDelegateFactoryActivator.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.ShimDelegateFactoryActivator.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.ShimDelegateFactoryActivator.Bind(Castle.MicroKernel.IComponentActivator)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.ShimDelegateFactoryActivator.Bind(Castle.MicroKernel.ComponentActivator.IDependencyAwareActivator)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimDelegateFactoryActivator.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimDelegateFactoryActivator.CanProvideRequiredDependenciesComponentModel">
            <summary>Sets the shim of DelegateFactoryActivator.CanProvideRequiredDependencies(ComponentModel component)</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimDelegateFactoryActivator.ConstructorComponentModelIKernelInternalComponentInstanceDelegateComponentInstanceDelegate">
            <summary>Sets the shim of DelegateFactoryActivator.DelegateFactoryActivator(ComponentModel model, IKernelInternal kernel, ComponentInstanceDelegate onCreation, ComponentInstanceDelegate onDestruction)</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimDelegateFactoryActivator.InternalCreateCreationContext">
            <summary>Sets the shim of DelegateFactoryActivator.InternalCreate(CreationContext context)</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimDelegateFactoryActivator.InternalDestroyObject">
            <summary>Sets the shim of DelegateFactoryActivator.InternalDestroy(Object instance)</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimDelegateFactoryActivator.IsManagedExternallyComponentModel">
            <summary>Sets the shim of DelegateFactoryActivator.IsManagedExternally(ComponentModel component)</summary>
        </member>
        <member name="T:Castle.Facilities.TypedFactory.Fakes.ShimDelegateFactoryActivator.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimDelegateFactoryActivator.AllInstances.CanProvideRequiredDependenciesComponentModel">
            <summary>Sets the shim of DelegateFactoryActivator.CanProvideRequiredDependencies(ComponentModel component)</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimDelegateFactoryActivator.AllInstances.InternalCreateCreationContext">
            <summary>Sets the shim of DelegateFactoryActivator.InternalCreate(CreationContext context)</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimDelegateFactoryActivator.AllInstances.InternalDestroyObject">
            <summary>Sets the shim of DelegateFactoryActivator.InternalDestroy(Object instance)</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimDelegateFactoryActivator.AllInstances.IsManagedExternallyComponentModel">
            <summary>Sets the shim of DelegateFactoryActivator.IsManagedExternally(ComponentModel component)</summary>
        </member>
        <member name="T:Castle.Facilities.TypedFactory.Fakes.ShimFactoryAttribute">
            <summary>Shim type of Castle.Facilities.TypedFactory.FactoryAttribute</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.ShimFactoryAttribute.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.ShimFactoryAttribute.#ctor(Castle.Facilities.TypedFactory.FactoryAttribute)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.ShimFactoryAttribute.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.ShimFactoryAttribute.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimFactoryAttribute.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimFactoryAttribute.Constructor">
            <summary>Sets the shim of FactoryAttribute.FactoryAttribute()</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimFactoryAttribute.SelectorComponentNameGet">
            <summary>Sets the shim of FactoryAttribute.get_SelectorComponentName()</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimFactoryAttribute.SelectorComponentNameSetString">
            <summary>Sets the shim of FactoryAttribute.set_SelectorComponentName(String value)</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimFactoryAttribute.SelectorComponentTypeGet">
            <summary>Sets the shim of FactoryAttribute.get_SelectorComponentType()</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimFactoryAttribute.SelectorComponentTypeSetType">
            <summary>Sets the shim of FactoryAttribute.set_SelectorComponentType(Type value)</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimFactoryAttribute.SelectorTypeGet">
            <summary>Sets the shim of FactoryAttribute.get_SelectorType()</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimFactoryAttribute.SelectorTypeSetType">
            <summary>Sets the shim of FactoryAttribute.set_SelectorType(Type value)</summary>
        </member>
        <member name="T:Castle.Facilities.TypedFactory.Fakes.ShimFactoryAttribute.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimFactoryAttribute.AllInstances.SelectorComponentNameGet">
            <summary>Sets the shim of FactoryAttribute.get_SelectorComponentName()</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimFactoryAttribute.AllInstances.SelectorComponentNameSetString">
            <summary>Sets the shim of FactoryAttribute.set_SelectorComponentName(String value)</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimFactoryAttribute.AllInstances.SelectorComponentTypeGet">
            <summary>Sets the shim of FactoryAttribute.get_SelectorComponentType()</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimFactoryAttribute.AllInstances.SelectorComponentTypeSetType">
            <summary>Sets the shim of FactoryAttribute.set_SelectorComponentType(Type value)</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimFactoryAttribute.AllInstances.SelectorTypeGet">
            <summary>Sets the shim of FactoryAttribute.get_SelectorType()</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimFactoryAttribute.AllInstances.SelectorTypeSetType">
            <summary>Sets the shim of FactoryAttribute.set_SelectorType(Type value)</summary>
        </member>
        <member name="T:Castle.Facilities.TypedFactory.Fakes.ShimFactoryEntry">
            <summary>Shim type of Castle.Facilities.TypedFactory.FactoryEntry</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.ShimFactoryEntry.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.ShimFactoryEntry.#ctor(Castle.Facilities.TypedFactory.FactoryEntry)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.ShimFactoryEntry.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.ShimFactoryEntry.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimFactoryEntry.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimFactoryEntry.ConstructorStringTypeStringString">
            <summary>Sets the shim of FactoryEntry.FactoryEntry(String id, Type factoryInterface, String creationMethod, String destructionMethod)</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimFactoryEntry.CreationMethodGet">
            <summary>Sets the shim of FactoryEntry.get_CreationMethod()</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimFactoryEntry.DestructionMethodGet">
            <summary>Sets the shim of FactoryEntry.get_DestructionMethod()</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimFactoryEntry.FactoryInterfaceGet">
            <summary>Sets the shim of FactoryEntry.get_FactoryInterface()</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimFactoryEntry.IdGet">
            <summary>Sets the shim of FactoryEntry.get_Id()</summary>
        </member>
        <member name="T:Castle.Facilities.TypedFactory.Fakes.ShimFactoryEntry.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimFactoryEntry.AllInstances.CreationMethodGet">
            <summary>Sets the shim of FactoryEntry.get_CreationMethod()</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimFactoryEntry.AllInstances.DestructionMethodGet">
            <summary>Sets the shim of FactoryEntry.get_DestructionMethod()</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimFactoryEntry.AllInstances.FactoryInterfaceGet">
            <summary>Sets the shim of FactoryEntry.get_FactoryInterface()</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimFactoryEntry.AllInstances.IdGet">
            <summary>Sets the shim of FactoryEntry.get_Id()</summary>
        </member>
        <member name="T:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryCachingInspector">
            <summary>Shim type of Castle.Facilities.TypedFactory.TypedFactoryCachingInspector</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryCachingInspector.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryCachingInspector.#ctor(Castle.Facilities.TypedFactory.TypedFactoryCachingInspector)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryCachingInspector.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryCachingInspector.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryCachingInspector.Bind(Castle.MicroKernel.ModelBuilder.IContributeComponentModelConstruction)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryCachingInspector.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryCachingInspector.BuildCacheComponentModel">
            <summary>Sets the shim of TypedFactoryCachingInspector.BuildCache(ComponentModel model)</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryCachingInspector.BuildHandlersMapTypeDictionaryOfMethodInfoFactoryMethod">
            <summary>Sets the shim of TypedFactoryCachingInspector.BuildHandlersMap(Type service, Dictionary`2&lt;MethodInfo,FactoryMethod&gt; map)</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryCachingInspector.CastleMicroKernelModelBuilderIContributeComponentModelConstructionProcessModelIKernelComponentModel">
            <summary>Sets the shim of TypedFactoryCachingInspector.Castle.MicroKernel.ModelBuilder.IContributeComponentModelConstruction.ProcessModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryCachingInspector.Constructor">
            <summary>Sets the shim of TypedFactoryCachingInspector.TypedFactoryCachingInspector()</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryCachingInspector.IsReleaseMethodMethodInfo">
            <summary>Sets the shim of TypedFactoryCachingInspector.IsReleaseMethod(MethodInfo methodInfo)</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryCachingInspector._CastleMicroKernelModelBuilderIContributeComponentModelConstructionProcessModelb__0Type">
            <summary>Sets the shim of TypedFactoryCachingInspector.&lt;Castle.MicroKernel.ModelBuilder.IContributeComponentModelConstruction.ProcessModel&gt;b__0(Type s)</summary>
        </member>
        <member name="T:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryCachingInspector.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryCachingInspector.AllInstances.BuildCacheComponentModel">
            <summary>Sets the shim of TypedFactoryCachingInspector.BuildCache(ComponentModel model)</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryCachingInspector.AllInstances.BuildHandlersMapTypeDictionaryOfMethodInfoFactoryMethod">
            <summary>Sets the shim of TypedFactoryCachingInspector.BuildHandlersMap(Type service, Dictionary`2&lt;MethodInfo,FactoryMethod&gt; map)</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryCachingInspector.AllInstances.CastleMicroKernelModelBuilderIContributeComponentModelConstructionProcessModelIKernelComponentModel">
            <summary>Sets the shim of TypedFactoryCachingInspector.Castle.MicroKernel.ModelBuilder.IContributeComponentModelConstruction.ProcessModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryCachingInspector.AllInstances.IsReleaseMethodMethodInfo">
            <summary>Sets the shim of TypedFactoryCachingInspector.IsReleaseMethod(MethodInfo methodInfo)</summary>
        </member>
        <member name="T:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryComponentResolver">
            <summary>Shim type of Castle.Facilities.TypedFactory.TypedFactoryComponentResolver</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryComponentResolver.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryComponentResolver.#ctor(Castle.Facilities.TypedFactory.TypedFactoryComponentResolver)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryComponentResolver.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryComponentResolver.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryComponentResolver.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryComponentResolver.ConstructorStringTypeIDictionaryBooleanType">
            <summary>Sets the shim of TypedFactoryComponentResolver.TypedFactoryComponentResolver(String componentName, Type componentType, IDictionary additionalArguments, Boolean fallbackToResolveByTypeIfNameNotFound, Type actualSelectorType)</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryComponentResolver.LoadByNameIKernelInternal">
            <summary>Sets the shim of TypedFactoryComponentResolver.LoadByName(IKernelInternal kernel)</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryComponentResolver.ResolveIKernelInternalIReleasePolicy">
            <summary>Sets the shim of TypedFactoryComponentResolver.Resolve(IKernelInternal kernel, IReleasePolicy scope)</summary>
        </member>
        <member name="T:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryComponentResolver.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryComponentResolver.AllInstances.LoadByNameIKernelInternal">
            <summary>Sets the shim of TypedFactoryComponentResolver.LoadByName(IKernelInternal kernel)</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryComponentResolver.AllInstances.ResolveIKernelInternalIReleasePolicy">
            <summary>Sets the shim of TypedFactoryComponentResolver.Resolve(IKernelInternal kernel, IReleasePolicy scope)</summary>
        </member>
        <member name="T:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryConfiguration">
            <summary>Shim type of Castle.Facilities.TypedFactory.TypedFactoryConfiguration</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryConfiguration.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryConfiguration.#ctor(Castle.Facilities.TypedFactory.TypedFactoryConfiguration)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryConfiguration.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryConfiguration.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryConfiguration.SelectedWithOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action)">
            <summary>Sets the shim of TypedFactoryConfiguration.SelectedWith()</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryConfiguration.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryConfiguration.ConstructorStringType">
            <summary>Sets the shim of TypedFactoryConfiguration.TypedFactoryConfiguration(String defaultComponentSelectorKey, Type factoryType)</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryConfiguration.ReferenceGet">
            <summary>Sets the shim of TypedFactoryConfiguration.get_Reference()</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryConfiguration.SelectedWithITypedFactoryComponentSelector">
            <summary>Sets the shim of TypedFactoryConfiguration.SelectedWith(ITypedFactoryComponentSelector selector)</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryConfiguration.SelectedWithString">
            <summary>Sets the shim of TypedFactoryConfiguration.SelectedWith(String selectorComponentName)</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryConfiguration.SelectedWithType">
            <summary>Sets the shim of TypedFactoryConfiguration.SelectedWith(Type selectorComponentType)</summary>
        </member>
        <member name="T:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryConfiguration.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryConfiguration.AllInstances.SelectedWithOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{Castle.Facilities.TypedFactory.TypedFactoryConfiguration})">
            <summary>Sets the shim of TypedFactoryConfiguration.SelectedWith()</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryConfiguration.AllInstances.ReferenceGet">
            <summary>Sets the shim of TypedFactoryConfiguration.get_Reference()</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryConfiguration.AllInstances.SelectedWithITypedFactoryComponentSelector">
            <summary>Sets the shim of TypedFactoryConfiguration.SelectedWith(ITypedFactoryComponentSelector selector)</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryConfiguration.AllInstances.SelectedWithString">
            <summary>Sets the shim of TypedFactoryConfiguration.SelectedWith(String selectorComponentName)</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryConfiguration.AllInstances.SelectedWithType">
            <summary>Sets the shim of TypedFactoryConfiguration.SelectedWith(Type selectorComponentType)</summary>
        </member>
        <member name="T:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryFacility">
            <summary>Shim type of Castle.Facilities.TypedFactory.TypedFactoryFacility</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryFacility.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryFacility.#ctor(Castle.Facilities.TypedFactory.TypedFactoryFacility)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryFacility.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryFacility.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryFacility.Bind(Castle.MicroKernel.IFacility)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryFacility.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryFacility.AddFactoriesIConfigurationITypeConverter">
            <summary>Sets the shim of TypedFactoryFacility.AddFactories(IConfiguration facilityConfig, ITypeConverter converter)</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryFacility.AddTypedFactoryEntryFactoryEntry">
            <summary>Sets the shim of TypedFactoryFacility.AddTypedFactoryEntry(FactoryEntry entry)</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryFacility.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryFacility.Constructor">
            <summary>Sets the shim of TypedFactoryFacility.TypedFactoryFacility()</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryFacility.Init">
            <summary>Sets the shim of TypedFactoryFacility.Init()</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryFacility.InitFacility">
            <summary>Sets the shim of TypedFactoryFacility.InitFacility()</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryFacility.LegacyInit">
            <summary>Sets the shim of TypedFactoryFacility.LegacyInit()</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryFacility.LegacyRegisterFactoryStringTypeStringString">
            <summary>Sets the shim of TypedFactoryFacility.LegacyRegisterFactory(String id, Type factoryType, String creation, String destruction)</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryFacility.RegisterFactoryStringTypeString">
            <summary>Sets the shim of TypedFactoryFacility.RegisterFactory(String id, Type type, String selector)</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryFacility.StaticConstructor">
            <summary>Sets the shim of TypedFactoryFacility.TypedFactoryFacility()</summary>
        </member>
        <member name="T:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryFacility.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryFacility.AllInstances.AddFactoriesIConfigurationITypeConverter">
            <summary>Sets the shim of TypedFactoryFacility.AddFactories(IConfiguration facilityConfig, ITypeConverter converter)</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryFacility.AllInstances.AddTypedFactoryEntryFactoryEntry">
            <summary>Sets the shim of TypedFactoryFacility.AddTypedFactoryEntry(FactoryEntry entry)</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryFacility.AllInstances.Init">
            <summary>Sets the shim of TypedFactoryFacility.Init()</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryFacility.AllInstances.InitFacility">
            <summary>Sets the shim of TypedFactoryFacility.InitFacility()</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryFacility.AllInstances.LegacyInit">
            <summary>Sets the shim of TypedFactoryFacility.LegacyInit()</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryFacility.AllInstances.LegacyRegisterFactoryStringTypeStringString">
            <summary>Sets the shim of TypedFactoryFacility.LegacyRegisterFactory(String id, Type factoryType, String creation, String destruction)</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryFacility.AllInstances.RegisterFactoryStringTypeString">
            <summary>Sets the shim of TypedFactoryFacility.RegisterFactory(String id, Type type, String selector)</summary>
        </member>
        <member name="T:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryRegistrationExtensions">
            <summary>Shim type of Castle.Facilities.TypedFactory.TypedFactoryRegistrationExtensions</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryRegistrationExtensions.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryRegistrationExtensions.AsFactoryOf1ComponentRegistrationOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.Registration.ComponentRegistration{``0},Castle.MicroKernel.Registration.ComponentRegistration{``0}})">
            <summary>Sets the shim of TypedFactoryRegistrationExtensions.AsFactory(ComponentRegistration`1&lt;!!0&gt; registration)</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryRegistrationExtensions.AsFactoryOf1ComponentRegistrationOfM0ActionOfTypedFactoryConfiguration``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.Registration.ComponentRegistration{``0},System.Action{Castle.Facilities.TypedFactory.TypedFactoryConfiguration},Castle.MicroKernel.Registration.ComponentRegistration{``0}})">
            <summary>Sets the shim of TypedFactoryRegistrationExtensions.AsFactory(ComponentRegistration`1&lt;!!0&gt; registration, Action`1&lt;TypedFactoryConfiguration&gt; configuration)</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryRegistrationExtensions.AsFactoryOf1ComponentRegistrationOfM0ITypedFactoryComponentSelector``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.Registration.ComponentRegistration{``0},Castle.Facilities.TypedFactory.ITypedFactoryComponentSelector,Castle.MicroKernel.Registration.ComponentRegistration{``0}})">
            <summary>Sets the shim of TypedFactoryRegistrationExtensions.AsFactory(ComponentRegistration`1&lt;!!0&gt; registration, ITypedFactoryComponentSelector selector)</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryRegistrationExtensions.AsFactoryOf1ComponentRegistrationOfM0String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.Registration.ComponentRegistration{``0},System.String,Castle.MicroKernel.Registration.ComponentRegistration{``0}})">
            <summary>Sets the shim of TypedFactoryRegistrationExtensions.AsFactory(ComponentRegistration`1&lt;!!0&gt; registration, String selectorComponentName)</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryRegistrationExtensions.AsFactoryOf1ComponentRegistrationOfM0Type``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.Registration.ComponentRegistration{``0},System.Type,Castle.MicroKernel.Registration.ComponentRegistration{``0}})">
            <summary>Sets the shim of TypedFactoryRegistrationExtensions.AsFactory(ComponentRegistration`1&lt;!!0&gt; registration, Type selectorComponentType)</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryRegistrationExtensions.AttachConfigurationOf1ComponentRegistrationOfM0ActionOfTypedFactoryConfigurationString``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.Registration.ComponentRegistration{``0},System.Action{Castle.Facilities.TypedFactory.TypedFactoryConfiguration},System.String,Castle.MicroKernel.Registration.ComponentRegistration{``0}})">
            <summary>Sets the shim of TypedFactoryRegistrationExtensions.AttachConfiguration(ComponentRegistration`1&lt;!!0&gt; componentRegistration, Action`1&lt;TypedFactoryConfiguration&gt; configuration, String defaultComponentSelectorKey)</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryRegistrationExtensions.AttachFactoryInterceptorOf1ComponentRegistrationOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.Registration.ComponentRegistration{``0},Castle.MicroKernel.Registration.ComponentRegistration{``0}})">
            <summary>Sets the shim of TypedFactoryRegistrationExtensions.AttachFactoryInterceptor(ComponentRegistration`1&lt;!!0&gt; registration)</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryRegistrationExtensions.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryRegistrationExtensions.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryRegistrationExtensions.RegisterDelegateBasedFactoryOf1ComponentRegistrationOfM0ActionOfTypedFactoryConfigurationType``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.Registration.ComponentRegistration{``0},System.Action{Castle.Facilities.TypedFactory.TypedFactoryConfiguration},System.Type,Castle.MicroKernel.Registration.ComponentRegistration{``0}})">
            <summary>Sets the shim of TypedFactoryRegistrationExtensions.RegisterDelegateBasedFactory(ComponentRegistration`1&lt;!!0&gt; registration, Action`1&lt;TypedFactoryConfiguration&gt; configuration, Type delegateType)</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryRegistrationExtensions.RegisterInterfaceBasedFactoryOf1ComponentRegistrationOfM0ActionOfTypedFactoryConfiguration``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.Registration.ComponentRegistration{``0},System.Action{Castle.Facilities.TypedFactory.TypedFactoryConfiguration},Castle.MicroKernel.Registration.ComponentRegistration{``0}})">
            <summary>Sets the shim of TypedFactoryRegistrationExtensions.RegisterInterfaceBasedFactory(ComponentRegistration`1&lt;!!0&gt; registration, Action`1&lt;TypedFactoryConfiguration&gt; configuration)</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryRegistrationExtensions._AsFactoryb__9Of1Type``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Type,System.Boolean})">
            <summary>Sets the shim of TypedFactoryRegistrationExtensions.&lt;AsFactory&gt;b__9(Type s)</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryRegistrationExtensions.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryRegistrationExtensions.GetSelectorReferenceActionOfTypedFactoryConfigurationStringType">
            <summary>Sets the shim of TypedFactoryRegistrationExtensions.GetSelectorReference(Action`1&lt;TypedFactoryConfiguration&gt; configuration, String defaultComponentSelectorKey, Type factoryType)</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryRegistrationExtensions.HasOutArgumentsType">
            <summary>Sets the shim of TypedFactoryRegistrationExtensions.HasOutArguments(Type serviceType)</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryRegistrationExtensions._HasOutArgumentsb__10MethodInfo">
            <summary>Sets the shim of TypedFactoryRegistrationExtensions.&lt;HasOutArguments&gt;b__10(MethodInfo m)</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryRegistrationExtensions._HasOutArgumentsb__11ParameterInfo">
            <summary>Sets the shim of TypedFactoryRegistrationExtensions.&lt;HasOutArguments&gt;b__11(ParameterInfo p)</summary>
        </member>
        <member name="T:Castle.Facilities.TypedFactory.Fakes.StubDefaultDelegateComponentSelector">
            <summary>Stub type of Castle.Facilities.TypedFactory.DefaultDelegateComponentSelector</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.StubDefaultDelegateComponentSelector.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.StubDefaultDelegateComponentSelector.BuildFactoryComponent(System.Reflection.MethodInfo,System.String,System.Type,System.Collections.IDictionary)">
            <summary>Sets the stub of DefaultTypedFactoryComponentSelector.BuildFactoryComponent(MethodInfo method, String componentName, Type componentType, IDictionary additionalArguments)</summary>
        </member>
        <member name="F:Castle.Facilities.TypedFactory.Fakes.StubDefaultDelegateComponentSelector.BuildFactoryComponentMethodInfoStringTypeIDictionary">
            <summary>Sets the stub of DefaultTypedFactoryComponentSelector.BuildFactoryComponent(MethodInfo method, String componentName, Type componentType, IDictionary additionalArguments)</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.StubDefaultDelegateComponentSelector.GetArguments(System.Reflection.MethodInfo,System.Object[])">
            <summary>Sets the stub of DefaultDelegateComponentSelector.GetArguments(MethodInfo method, Object[] arguments)</summary>
        </member>
        <member name="F:Castle.Facilities.TypedFactory.Fakes.StubDefaultDelegateComponentSelector.GetArgumentsMethodInfoObjectArray">
            <summary>Sets the stub of DefaultDelegateComponentSelector.GetArguments(MethodInfo method, Object[] arguments)</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.StubDefaultDelegateComponentSelector.GetComponentName(System.Reflection.MethodInfo,System.Object[])">
            <summary>Sets the stub of DefaultDelegateComponentSelector.GetComponentName(MethodInfo method, Object[] arguments)</summary>
        </member>
        <member name="F:Castle.Facilities.TypedFactory.Fakes.StubDefaultDelegateComponentSelector.GetComponentNameMethodInfoObjectArray">
            <summary>Sets the stub of DefaultDelegateComponentSelector.GetComponentName(MethodInfo method, Object[] arguments)</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.StubDefaultDelegateComponentSelector.GetComponentType(System.Reflection.MethodInfo,System.Object[])">
            <summary>Sets the stub of DefaultTypedFactoryComponentSelector.GetComponentType(MethodInfo method, Object[] arguments)</summary>
        </member>
        <member name="F:Castle.Facilities.TypedFactory.Fakes.StubDefaultDelegateComponentSelector.GetComponentTypeMethodInfoObjectArray">
            <summary>Sets the stub of DefaultTypedFactoryComponentSelector.GetComponentType(MethodInfo method, Object[] arguments)</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.StubDefaultDelegateComponentSelector.InitializeStub">
            <summary>Initializes a new instance of type StubDefaultDelegateComponentSelector</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.StubDefaultDelegateComponentSelector.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.StubDefaultDelegateComponentSelector.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.StubDefaultDelegateComponentSelector.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.Facilities.TypedFactory.Fakes.StubDefaultTypedFactoryComponentSelector">
            <summary>Stub type of Castle.Facilities.TypedFactory.DefaultTypedFactoryComponentSelector</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.StubDefaultTypedFactoryComponentSelector.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.StubDefaultTypedFactoryComponentSelector.#ctor(System.Boolean,System.Boolean)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.StubDefaultTypedFactoryComponentSelector.BuildFactoryComponent(System.Reflection.MethodInfo,System.String,System.Type,System.Collections.IDictionary)">
            <summary>Sets the stub of DefaultTypedFactoryComponentSelector.BuildFactoryComponent(MethodInfo method, String componentName, Type componentType, IDictionary additionalArguments)</summary>
        </member>
        <member name="F:Castle.Facilities.TypedFactory.Fakes.StubDefaultTypedFactoryComponentSelector.BuildFactoryComponentMethodInfoStringTypeIDictionary">
            <summary>Sets the stub of DefaultTypedFactoryComponentSelector.BuildFactoryComponent(MethodInfo method, String componentName, Type componentType, IDictionary additionalArguments)</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.StubDefaultTypedFactoryComponentSelector.GetArguments(System.Reflection.MethodInfo,System.Object[])">
            <summary>Sets the stub of DefaultTypedFactoryComponentSelector.GetArguments(MethodInfo method, Object[] arguments)</summary>
        </member>
        <member name="F:Castle.Facilities.TypedFactory.Fakes.StubDefaultTypedFactoryComponentSelector.GetArgumentsMethodInfoObjectArray">
            <summary>Sets the stub of DefaultTypedFactoryComponentSelector.GetArguments(MethodInfo method, Object[] arguments)</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.StubDefaultTypedFactoryComponentSelector.GetComponentName(System.Reflection.MethodInfo,System.Object[])">
            <summary>Sets the stub of DefaultTypedFactoryComponentSelector.GetComponentName(MethodInfo method, Object[] arguments)</summary>
        </member>
        <member name="F:Castle.Facilities.TypedFactory.Fakes.StubDefaultTypedFactoryComponentSelector.GetComponentNameMethodInfoObjectArray">
            <summary>Sets the stub of DefaultTypedFactoryComponentSelector.GetComponentName(MethodInfo method, Object[] arguments)</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.StubDefaultTypedFactoryComponentSelector.GetComponentType(System.Reflection.MethodInfo,System.Object[])">
            <summary>Sets the stub of DefaultTypedFactoryComponentSelector.GetComponentType(MethodInfo method, Object[] arguments)</summary>
        </member>
        <member name="F:Castle.Facilities.TypedFactory.Fakes.StubDefaultTypedFactoryComponentSelector.GetComponentTypeMethodInfoObjectArray">
            <summary>Sets the stub of DefaultTypedFactoryComponentSelector.GetComponentType(MethodInfo method, Object[] arguments)</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.StubDefaultTypedFactoryComponentSelector.InitializeStub">
            <summary>Initializes a new instance of type StubDefaultTypedFactoryComponentSelector</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.StubDefaultTypedFactoryComponentSelector.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.StubDefaultTypedFactoryComponentSelector.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.StubDefaultTypedFactoryComponentSelector.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.Facilities.TypedFactory.Fakes.StubDelegateFactoryActivator">
            <summary>Stub type of Castle.Facilities.TypedFactory.DelegateFactoryActivator</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.StubDelegateFactoryActivator.#ctor(Castle.Core.ComponentModel,Castle.MicroKernel.IKernelInternal,Castle.MicroKernel.ComponentInstanceDelegate,Castle.MicroKernel.ComponentInstanceDelegate)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.StubDelegateFactoryActivator.ApplyCommissionConcerns(System.Object)">
            <summary>Sets the stub of AbstractComponentActivator.ApplyCommissionConcerns(Object instance)</summary>
        </member>
        <member name="F:Castle.Facilities.TypedFactory.Fakes.StubDelegateFactoryActivator.ApplyCommissionConcernsObject">
            <summary>Sets the stub of AbstractComponentActivator.ApplyCommissionConcerns(Object instance)</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.StubDelegateFactoryActivator.ApplyConcerns(System.Collections.Generic.IEnumerable{Castle.Core.ICommissionConcern},System.Object)">
            <summary>Sets the stub of AbstractComponentActivator.ApplyConcerns(IEnumerable`1&lt;ICommissionConcern&gt; steps, Object instance)</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.StubDelegateFactoryActivator.ApplyConcerns(System.Collections.Generic.IEnumerable{Castle.Core.IDecommissionConcern},System.Object)">
            <summary>Sets the stub of AbstractComponentActivator.ApplyConcerns(IEnumerable`1&lt;IDecommissionConcern&gt; steps, Object instance)</summary>
        </member>
        <member name="F:Castle.Facilities.TypedFactory.Fakes.StubDelegateFactoryActivator.ApplyConcernsIEnumerableOfICommissionConcernObject">
            <summary>Sets the stub of AbstractComponentActivator.ApplyConcerns(IEnumerable`1&lt;ICommissionConcern&gt; steps, Object instance)</summary>
        </member>
        <member name="F:Castle.Facilities.TypedFactory.Fakes.StubDelegateFactoryActivator.ApplyConcernsIEnumerableOfIDecommissionConcernObject">
            <summary>Sets the stub of AbstractComponentActivator.ApplyConcerns(IEnumerable`1&lt;IDecommissionConcern&gt; steps, Object instance)</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.StubDelegateFactoryActivator.ApplyDecommissionConcerns(System.Object)">
            <summary>Sets the stub of AbstractComponentActivator.ApplyDecommissionConcerns(Object instance)</summary>
        </member>
        <member name="F:Castle.Facilities.TypedFactory.Fakes.StubDelegateFactoryActivator.ApplyDecommissionConcernsObject">
            <summary>Sets the stub of AbstractComponentActivator.ApplyDecommissionConcerns(Object instance)</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.StubDelegateFactoryActivator.Create(Castle.MicroKernel.Context.CreationContext,Castle.MicroKernel.Burden)">
            <summary>Sets the stub of AbstractComponentActivator.Create(CreationContext context, Burden burden)</summary>
        </member>
        <member name="F:Castle.Facilities.TypedFactory.Fakes.StubDelegateFactoryActivator.CreateCreationContextBurden">
            <summary>Sets the stub of AbstractComponentActivator.Create(CreationContext context, Burden burden)</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.StubDelegateFactoryActivator.Destroy(System.Object)">
            <summary>Sets the stub of AbstractComponentActivator.Destroy(Object instance)</summary>
        </member>
        <member name="F:Castle.Facilities.TypedFactory.Fakes.StubDelegateFactoryActivator.DestroyObject">
            <summary>Sets the stub of AbstractComponentActivator.Destroy(Object instance)</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.StubDelegateFactoryActivator.InitializeStub">
            <summary>Initializes a new instance of type StubDelegateFactoryActivator</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.StubDelegateFactoryActivator.InternalCreate(Castle.MicroKernel.Context.CreationContext)">
            <summary>Sets the stub of DelegateFactoryActivator.InternalCreate(CreationContext context)</summary>
        </member>
        <member name="F:Castle.Facilities.TypedFactory.Fakes.StubDelegateFactoryActivator.InternalCreateCreationContext">
            <summary>Sets the stub of DelegateFactoryActivator.InternalCreate(CreationContext context)</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.StubDelegateFactoryActivator.InternalDestroy(System.Object)">
            <summary>Sets the stub of DelegateFactoryActivator.InternalDestroy(Object instance)</summary>
        </member>
        <member name="F:Castle.Facilities.TypedFactory.Fakes.StubDelegateFactoryActivator.InternalDestroyObject">
            <summary>Sets the stub of DelegateFactoryActivator.InternalDestroy(Object instance)</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.StubDelegateFactoryActivator.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.StubDelegateFactoryActivator.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.StubDelegateFactoryActivator.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.Facilities.TypedFactory.Fakes.StubFactoryAttribute">
            <summary>Stub type of Castle.Facilities.TypedFactory.FactoryAttribute</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.StubFactoryAttribute.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.StubFactoryAttribute.Equals(System.Object)">
            <summary>Sets the stub of Attribute.Equals(Object obj)</summary>
        </member>
        <member name="F:Castle.Facilities.TypedFactory.Fakes.StubFactoryAttribute.EqualsObject">
            <summary>Sets the stub of Attribute.Equals(Object obj)</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.StubFactoryAttribute.GetHashCode">
            <summary>Sets the stub of Attribute.GetHashCode()</summary>
        </member>
        <member name="F:Castle.Facilities.TypedFactory.Fakes.StubFactoryAttribute.GetHashCode01">
            <summary>Sets the stub of Attribute.GetHashCode()</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.StubFactoryAttribute.InitializeStub">
            <summary>Initializes a new instance of type StubFactoryAttribute</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.StubFactoryAttribute.IsDefaultAttribute">
            <summary>Sets the stub of Attribute.IsDefaultAttribute()</summary>
        </member>
        <member name="F:Castle.Facilities.TypedFactory.Fakes.StubFactoryAttribute.IsDefaultAttribute01">
            <summary>Sets the stub of Attribute.IsDefaultAttribute()</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.StubFactoryAttribute.Match(System.Object)">
            <summary>Sets the stub of Attribute.Match(Object obj)</summary>
        </member>
        <member name="F:Castle.Facilities.TypedFactory.Fakes.StubFactoryAttribute.MatchObject">
            <summary>Sets the stub of Attribute.Match(Object obj)</summary>
        </member>
        <member name="F:Castle.Facilities.TypedFactory.Fakes.StubFactoryAttribute.TypeIdGet">
            <summary>Sets the stub of Attribute.get_TypeId()</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.StubFactoryAttribute.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.StubFactoryAttribute.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.StubFactoryAttribute.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.StubFactoryAttribute.TypeId">
            <summary>Sets the stub of Attribute.get_TypeId()</summary>
        </member>
        <member name="T:Castle.Facilities.TypedFactory.Fakes.StubFactoryEntry">
            <summary>Stub type of Castle.Facilities.TypedFactory.FactoryEntry</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.StubFactoryEntry.#ctor(System.String,System.Type,System.String,System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.StubFactoryEntry.InitializeStub">
            <summary>Initializes a new instance of type StubFactoryEntry</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.StubFactoryEntry.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.StubFactoryEntry.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.StubFactoryEntry.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.Facilities.TypedFactory.Fakes.StubITypedFactoryComponentSelector">
            <summary>Stub type of Castle.Facilities.TypedFactory.ITypedFactoryComponentSelector</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.StubITypedFactoryComponentSelector.#ctor">
            <summary>Initializes a new instance of type StubITypedFactoryComponentSelector</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.StubITypedFactoryComponentSelector.cw::Castle#Facilities#TypedFactory#ITypedFactoryComponentSelector#SelectComponent(System.Reflection.MethodInfo,System.Type,System.Object[])">
            <summary>Sets the stub of ITypedFactoryComponentSelector.SelectComponent(MethodInfo method, Type type, Object[] arguments)</summary>
        </member>
        <member name="F:Castle.Facilities.TypedFactory.Fakes.StubITypedFactoryComponentSelector.SelectComponentMethodInfoTypeObjectArray">
            <summary>Sets the stub of ITypedFactoryComponentSelector.SelectComponent(MethodInfo method, Type type, Object[] arguments)</summary>
        </member>
        <member name="T:Castle.Facilities.TypedFactory.Fakes.StubTypedFactoryCachingInspector">
            <summary>Stub type of Castle.Facilities.TypedFactory.TypedFactoryCachingInspector</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.StubTypedFactoryCachingInspector.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.StubTypedFactoryCachingInspector.BuildCache(Castle.Core.ComponentModel)">
            <summary>Sets the stub of TypedFactoryCachingInspector.BuildCache(ComponentModel model)</summary>
        </member>
        <member name="F:Castle.Facilities.TypedFactory.Fakes.StubTypedFactoryCachingInspector.BuildCacheComponentModel">
            <summary>Sets the stub of TypedFactoryCachingInspector.BuildCache(ComponentModel model)</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.StubTypedFactoryCachingInspector.InitializeStub">
            <summary>Initializes a new instance of type StubTypedFactoryCachingInspector</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.StubTypedFactoryCachingInspector.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.StubTypedFactoryCachingInspector.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.StubTypedFactoryCachingInspector.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.Facilities.TypedFactory.Fakes.StubTypedFactoryComponentResolver">
            <summary>Stub type of Castle.Facilities.TypedFactory.TypedFactoryComponentResolver</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.StubTypedFactoryComponentResolver.#ctor(System.String,System.Type,System.Collections.IDictionary,System.Boolean,System.Type)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.StubTypedFactoryComponentResolver.InitializeStub">
            <summary>Initializes a new instance of type StubTypedFactoryComponentResolver</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.StubTypedFactoryComponentResolver.Resolve(Castle.MicroKernel.IKernelInternal,Castle.MicroKernel.IReleasePolicy)">
            <summary>Sets the stub of TypedFactoryComponentResolver.Resolve(IKernelInternal kernel, IReleasePolicy scope)</summary>
        </member>
        <member name="F:Castle.Facilities.TypedFactory.Fakes.StubTypedFactoryComponentResolver.ResolveIKernelInternalIReleasePolicy">
            <summary>Sets the stub of TypedFactoryComponentResolver.Resolve(IKernelInternal kernel, IReleasePolicy scope)</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.StubTypedFactoryComponentResolver.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.StubTypedFactoryComponentResolver.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.StubTypedFactoryComponentResolver.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.Facilities.TypedFactory.Fakes.StubTypedFactoryConfiguration">
            <summary>Stub type of Castle.Facilities.TypedFactory.TypedFactoryConfiguration</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.StubTypedFactoryConfiguration.#ctor(System.String,System.Type)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.StubTypedFactoryConfiguration.InitializeStub">
            <summary>Initializes a new instance of type StubTypedFactoryConfiguration</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.StubTypedFactoryConfiguration.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.StubTypedFactoryConfiguration.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.StubTypedFactoryConfiguration.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.Facilities.TypedFactory.Fakes.StubTypedFactoryFacility">
            <summary>Stub type of Castle.Facilities.TypedFactory.TypedFactoryFacility</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.StubTypedFactoryFacility.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.StubTypedFactoryFacility.AddFactories(Castle.Core.Configuration.IConfiguration,Castle.MicroKernel.SubSystems.Conversion.ITypeConverter)">
            <summary>Sets the stub of TypedFactoryFacility.AddFactories(IConfiguration facilityConfig, ITypeConverter converter)</summary>
        </member>
        <member name="F:Castle.Facilities.TypedFactory.Fakes.StubTypedFactoryFacility.AddFactoriesIConfigurationITypeConverter">
            <summary>Sets the stub of TypedFactoryFacility.AddFactories(IConfiguration facilityConfig, ITypeConverter converter)</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.StubTypedFactoryFacility.Dispose">
            <summary>Sets the stub of AbstractFacility.Dispose()</summary>
        </member>
        <member name="F:Castle.Facilities.TypedFactory.Fakes.StubTypedFactoryFacility.Dispose01">
            <summary>Sets the stub of AbstractFacility.Dispose()</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.StubTypedFactoryFacility.Init">
            <summary>Sets the stub of TypedFactoryFacility.Init()</summary>
        </member>
        <member name="F:Castle.Facilities.TypedFactory.Fakes.StubTypedFactoryFacility.Init01">
            <summary>Sets the stub of TypedFactoryFacility.Init()</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.StubTypedFactoryFacility.InitializeStub">
            <summary>Initializes a new instance of type StubTypedFactoryFacility</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.StubTypedFactoryFacility.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.StubTypedFactoryFacility.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.StubTypedFactoryFacility.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.Facilities.TypedFactory.Internal.Fakes.ShimDelegateFactory">
            <summary>Shim type of Castle.Facilities.TypedFactory.Internal.DelegateFactory</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Internal.Fakes.ShimDelegateFactory.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Internal.Fakes.ShimDelegateFactory.#ctor(Castle.Facilities.TypedFactory.Internal.DelegateFactory)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Internal.Fakes.ShimDelegateFactory.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Internal.Fakes.ShimDelegateFactory.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Internal.Fakes.ShimDelegateFactory.Bind(Castle.MicroKernel.Resolvers.ILazyComponentLoader)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Internal.Fakes.ShimDelegateFactory.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Internal.Fakes.ShimDelegateFactory.Constructor">
            <summary>Sets the shim of DelegateFactory.DelegateFactory()</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Internal.Fakes.ShimDelegateFactory.ExtractInvokeMethodType">
            <summary>Sets the shim of DelegateFactory.ExtractInvokeMethod(Type service)</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Internal.Fakes.ShimDelegateFactory.GetInvokeMethodType">
            <summary>Sets the shim of DelegateFactory.GetInvokeMethod(Type delegate)</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Internal.Fakes.ShimDelegateFactory.GetNameType">
            <summary>Sets the shim of DelegateFactory.GetName(Type service)</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Internal.Fakes.ShimDelegateFactory.HasReturnMethodInfo">
            <summary>Sets the shim of DelegateFactory.HasReturn(MethodInfo invoke)</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Internal.Fakes.ShimDelegateFactory.LoadStringTypeIDictionary">
            <summary>Sets the shim of DelegateFactory.Load(String name, Type service, IDictionary arguments)</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Internal.Fakes.ShimDelegateFactory._Loadb__0IKernelIDictionary">
            <summary>Sets the shim of DelegateFactory.&lt;Load&gt;b__0(IKernel k, IDictionary d)</summary>
        </member>
        <member name="T:Castle.Facilities.TypedFactory.Internal.Fakes.ShimDelegateFactory.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Internal.Fakes.ShimDelegateFactory.AllInstances.GetNameType">
            <summary>Sets the shim of DelegateFactory.GetName(Type service)</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Internal.Fakes.ShimDelegateFactory.AllInstances.LoadStringTypeIDictionary">
            <summary>Sets the shim of DelegateFactory.Load(String name, Type service, IDictionary arguments)</summary>
        </member>
        <member name="T:Castle.Facilities.TypedFactory.Internal.Fakes.ShimDelegateProxyFactory">
            <summary>Shim type of Castle.Facilities.TypedFactory.Internal.DelegateProxyFactory</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Internal.Fakes.ShimDelegateProxyFactory.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Internal.Fakes.ShimDelegateProxyFactory.#ctor(Castle.Facilities.TypedFactory.Internal.DelegateProxyFactory)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Internal.Fakes.ShimDelegateProxyFactory.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Internal.Fakes.ShimDelegateProxyFactory.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Internal.Fakes.ShimDelegateProxyFactory.Bind(Castle.MicroKernel.IProxyFactoryExtension)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Internal.Fakes.ShimDelegateProxyFactory.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Internal.Fakes.ShimDelegateProxyFactory.Constructor">
            <summary>Sets the shim of DelegateProxyFactory.DelegateProxyFactory()</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Internal.Fakes.ShimDelegateProxyFactory.GenerateIProxyBuilderProxyGenerationOptionsIInterceptorArrayComponentModelCreationContext">
            <summary>Sets the shim of DelegateProxyFactory.Generate(IProxyBuilder builder, ProxyGenerationOptions options, IInterceptor[] interceptors, ComponentModel model, CreationContext context)</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Internal.Fakes.ShimDelegateProxyFactory.GetInvokeDelegateObjectType">
            <summary>Sets the shim of DelegateProxyFactory.GetInvokeDelegate(Object instance, Type targetDelegateType)</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Internal.Fakes.ShimDelegateProxyFactory.GetProxyInstanceTypeIInterceptorArray">
            <summary>Sets the shim of DelegateProxyFactory.GetProxyInstance(Type type, IInterceptor[] interceptors)</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Internal.Fakes.ShimDelegateProxyFactory.GetProxyTypeIProxyBuilderType">
            <summary>Sets the shim of DelegateProxyFactory.GetProxyType(IProxyBuilder builder, Type targetDelegateType)</summary>
        </member>
        <member name="T:Castle.Facilities.TypedFactory.Internal.Fakes.ShimDelegateProxyFactory.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Internal.Fakes.ShimDelegateProxyFactory.AllInstances.GenerateIProxyBuilderProxyGenerationOptionsIInterceptorArrayComponentModelCreationContext">
            <summary>Sets the shim of DelegateProxyFactory.Generate(IProxyBuilder builder, ProxyGenerationOptions options, IInterceptor[] interceptors, ComponentModel model, CreationContext context)</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Internal.Fakes.ShimDelegateProxyFactory.AllInstances.GetInvokeDelegateObjectType">
            <summary>Sets the shim of DelegateProxyFactory.GetInvokeDelegate(Object instance, Type targetDelegateType)</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Internal.Fakes.ShimDelegateProxyFactory.AllInstances.GetProxyInstanceTypeIInterceptorArray">
            <summary>Sets the shim of DelegateProxyFactory.GetProxyInstance(Type type, IInterceptor[] interceptors)</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Internal.Fakes.ShimDelegateProxyFactory.AllInstances.GetProxyTypeIProxyBuilderType">
            <summary>Sets the shim of DelegateProxyFactory.GetProxyType(IProxyBuilder builder, Type targetDelegateType)</summary>
        </member>
        <member name="T:Castle.Facilities.TypedFactory.Internal.Fakes.ShimDelegateServiceStrategy">
            <summary>Shim type of Castle.Facilities.TypedFactory.Internal.DelegateServiceStrategy</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Internal.Fakes.ShimDelegateServiceStrategy.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Internal.Fakes.ShimDelegateServiceStrategy.#ctor(Castle.Facilities.TypedFactory.Internal.DelegateServiceStrategy)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Internal.Fakes.ShimDelegateServiceStrategy.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Internal.Fakes.ShimDelegateServiceStrategy.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Internal.Fakes.ShimDelegateServiceStrategy.Bind(Castle.MicroKernel.Handlers.IGenericServiceStrategy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Internal.Fakes.ShimDelegateServiceStrategy.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Internal.Fakes.ShimDelegateServiceStrategy.Constructor">
            <summary>Sets the shim of DelegateServiceStrategy.DelegateServiceStrategy()</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Internal.Fakes.ShimDelegateServiceStrategy.StaticConstructor">
            <summary>Sets the shim of DelegateServiceStrategy.DelegateServiceStrategy()</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Internal.Fakes.ShimDelegateServiceStrategy.SupportsTypeComponentModel">
            <summary>Sets the shim of DelegateServiceStrategy.Supports(Type service, ComponentModel component)</summary>
        </member>
        <member name="T:Castle.Facilities.TypedFactory.Internal.Fakes.ShimDelegateServiceStrategy.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Internal.Fakes.ShimDelegateServiceStrategy.AllInstances.SupportsTypeComponentModel">
            <summary>Sets the shim of DelegateServiceStrategy.Supports(Type service, ComponentModel component)</summary>
        </member>
        <member name="T:Castle.Facilities.TypedFactory.Internal.Fakes.ShimEmpty">
            <summary>Shim type of Castle.Facilities.TypedFactory.Internal.Empty</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Internal.Fakes.ShimEmpty.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Internal.Fakes.ShimEmpty.#ctor(Castle.Facilities.TypedFactory.Internal.Empty)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Internal.Fakes.ShimEmpty.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Internal.Fakes.ShimEmpty.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Internal.Fakes.ShimEmpty.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Internal.Fakes.ShimEmpty.Constructor">
            <summary>Sets the shim of Empty.Empty()</summary>
        </member>
        <member name="T:Castle.Facilities.TypedFactory.Internal.Fakes.ShimEmpty.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="T:Castle.Facilities.TypedFactory.Internal.Fakes.ShimFactoryInterceptor">
            <summary>Shim type of Castle.Facilities.TypedFactory.Internal.FactoryInterceptor</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Internal.Fakes.ShimFactoryInterceptor.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Internal.Fakes.ShimFactoryInterceptor.#ctor(Castle.Facilities.TypedFactory.Internal.FactoryInterceptor)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Internal.Fakes.ShimFactoryInterceptor.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Internal.Fakes.ShimFactoryInterceptor.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Internal.Fakes.ShimFactoryInterceptor.Bind(Castle.DynamicProxy.IInterceptor)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Internal.Fakes.ShimFactoryInterceptor.Bind(Castle.Core.Interceptor.IOnBehalfAware)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Internal.Fakes.ShimFactoryInterceptor.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Internal.Fakes.ShimFactoryInterceptor.ConstructorIKernel">
            <summary>Sets the shim of FactoryInterceptor.FactoryInterceptor(IKernel kernel)</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Internal.Fakes.ShimFactoryInterceptor.InterceptIInvocation">
            <summary>Sets the shim of FactoryInterceptor.Intercept(IInvocation invocation)</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Internal.Fakes.ShimFactoryInterceptor.SetInterceptedComponentModelComponentModel">
            <summary>Sets the shim of FactoryInterceptor.SetInterceptedComponentModel(ComponentModel target)</summary>
        </member>
        <member name="T:Castle.Facilities.TypedFactory.Internal.Fakes.ShimFactoryInterceptor.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Internal.Fakes.ShimFactoryInterceptor.AllInstances.InterceptIInvocation">
            <summary>Sets the shim of FactoryInterceptor.Intercept(IInvocation invocation)</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Internal.Fakes.ShimFactoryInterceptor.AllInstances.SetInterceptedComponentModelComponentModel">
            <summary>Sets the shim of FactoryInterceptor.SetInterceptedComponentModel(ComponentModel target)</summary>
        </member>
        <member name="T:Castle.Facilities.TypedFactory.Internal.Fakes.ShimTypedFactoryInterceptor">
            <summary>Shim type of Castle.Facilities.TypedFactory.Internal.TypedFactoryInterceptor</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Internal.Fakes.ShimTypedFactoryInterceptor.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Internal.Fakes.ShimTypedFactoryInterceptor.#ctor(Castle.Facilities.TypedFactory.Internal.TypedFactoryInterceptor)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Internal.Fakes.ShimTypedFactoryInterceptor.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Internal.Fakes.ShimTypedFactoryInterceptor.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Internal.Fakes.ShimTypedFactoryInterceptor.Bind(Castle.DynamicProxy.IInterceptor)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Internal.Fakes.ShimTypedFactoryInterceptor.Bind(Castle.Core.Interceptor.IOnBehalfAware)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Internal.Fakes.ShimTypedFactoryInterceptor.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Internal.Fakes.ShimTypedFactoryInterceptor.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Internal.Fakes.ShimTypedFactoryInterceptor.ComponentSelectorGet">
            <summary>Sets the shim of TypedFactoryInterceptor.get_ComponentSelector()</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Internal.Fakes.ShimTypedFactoryInterceptor.ComponentSelectorSetITypedFactoryComponentSelector">
            <summary>Sets the shim of TypedFactoryInterceptor.set_ComponentSelector(ITypedFactoryComponentSelector value)</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Internal.Fakes.ShimTypedFactoryInterceptor.ConstructorIKernelInternalITypedFactoryComponentSelector">
            <summary>Sets the shim of TypedFactoryInterceptor.TypedFactoryInterceptor(IKernelInternal kernel, ITypedFactoryComponentSelector componentSelector)</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Internal.Fakes.ShimTypedFactoryInterceptor.Dispose">
            <summary>Sets the shim of TypedFactoryInterceptor.Dispose()</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Internal.Fakes.ShimTypedFactoryInterceptor.InterceptIInvocation">
            <summary>Sets the shim of TypedFactoryInterceptor.Intercept(IInvocation invocation)</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Internal.Fakes.ShimTypedFactoryInterceptor.ReleaseIInvocation">
            <summary>Sets the shim of TypedFactoryInterceptor.Release(IInvocation invocation)</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Internal.Fakes.ShimTypedFactoryInterceptor.ResolveIInvocation">
            <summary>Sets the shim of TypedFactoryInterceptor.Resolve(IInvocation invocation)</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Internal.Fakes.ShimTypedFactoryInterceptor.SetInterceptedComponentModelComponentModel">
            <summary>Sets the shim of TypedFactoryInterceptor.SetInterceptedComponentModel(ComponentModel target)</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Internal.Fakes.ShimTypedFactoryInterceptor.TryGetMethodIInvocationFactoryMethodOut">
            <summary>Sets the shim of TypedFactoryInterceptor.TryGetMethod(IInvocation invocation, FactoryMethod&amp; method)</summary>
        </member>
        <member name="T:Castle.Facilities.TypedFactory.Internal.Fakes.ShimTypedFactoryInterceptor.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Internal.Fakes.ShimTypedFactoryInterceptor.AllInstances.ComponentSelectorGet">
            <summary>Sets the shim of TypedFactoryInterceptor.get_ComponentSelector()</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Internal.Fakes.ShimTypedFactoryInterceptor.AllInstances.ComponentSelectorSetITypedFactoryComponentSelector">
            <summary>Sets the shim of TypedFactoryInterceptor.set_ComponentSelector(ITypedFactoryComponentSelector value)</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Internal.Fakes.ShimTypedFactoryInterceptor.AllInstances.Dispose">
            <summary>Sets the shim of TypedFactoryInterceptor.Dispose()</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Internal.Fakes.ShimTypedFactoryInterceptor.AllInstances.InterceptIInvocation">
            <summary>Sets the shim of TypedFactoryInterceptor.Intercept(IInvocation invocation)</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Internal.Fakes.ShimTypedFactoryInterceptor.AllInstances.ReleaseIInvocation">
            <summary>Sets the shim of TypedFactoryInterceptor.Release(IInvocation invocation)</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Internal.Fakes.ShimTypedFactoryInterceptor.AllInstances.ResolveIInvocation">
            <summary>Sets the shim of TypedFactoryInterceptor.Resolve(IInvocation invocation)</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Internal.Fakes.ShimTypedFactoryInterceptor.AllInstances.SetInterceptedComponentModelComponentModel">
            <summary>Sets the shim of TypedFactoryInterceptor.SetInterceptedComponentModel(ComponentModel target)</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Internal.Fakes.ShimTypedFactoryInterceptor.AllInstances.TryGetMethodIInvocationFactoryMethodOut">
            <summary>Sets the shim of TypedFactoryInterceptor.TryGetMethod(IInvocation invocation, FactoryMethod&amp; method)</summary>
        </member>
        <member name="T:Castle.Facilities.TypedFactory.Internal.Fakes.StubDelegateFactory">
            <summary>Stub type of Castle.Facilities.TypedFactory.Internal.DelegateFactory</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Internal.Fakes.StubDelegateFactory.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Internal.Fakes.StubDelegateFactory.InitializeStub">
            <summary>Initializes a new instance of type StubDelegateFactory</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Internal.Fakes.StubDelegateFactory.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Internal.Fakes.StubDelegateFactory.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Internal.Fakes.StubDelegateFactory.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.Facilities.TypedFactory.Internal.Fakes.StubDelegateProxyFactory">
            <summary>Stub type of Castle.Facilities.TypedFactory.Internal.DelegateProxyFactory</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Internal.Fakes.StubDelegateProxyFactory.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Internal.Fakes.StubDelegateProxyFactory.InitializeStub">
            <summary>Initializes a new instance of type StubDelegateProxyFactory</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Internal.Fakes.StubDelegateProxyFactory.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Internal.Fakes.StubDelegateProxyFactory.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Internal.Fakes.StubDelegateProxyFactory.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.Facilities.TypedFactory.Internal.Fakes.StubEmpty">
            <summary>Stub type of Castle.Facilities.TypedFactory.Internal.Empty</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Internal.Fakes.StubEmpty.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Internal.Fakes.StubEmpty.InitializeStub">
            <summary>Initializes a new instance of type StubEmpty</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Internal.Fakes.StubEmpty.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Internal.Fakes.StubEmpty.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Internal.Fakes.StubEmpty.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.Facilities.TypedFactory.Internal.Fakes.StubFactoryInterceptor">
            <summary>Stub type of Castle.Facilities.TypedFactory.Internal.FactoryInterceptor</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Internal.Fakes.StubFactoryInterceptor.#ctor(Castle.MicroKernel.IKernel)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Internal.Fakes.StubFactoryInterceptor.InitializeStub">
            <summary>Initializes a new instance of type StubFactoryInterceptor</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Internal.Fakes.StubFactoryInterceptor.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Internal.Fakes.StubFactoryInterceptor.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Internal.Fakes.StubFactoryInterceptor.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.Facilities.TypedFactory.Internal.Fakes.StubTypedFactoryInterceptor">
            <summary>Stub type of Castle.Facilities.TypedFactory.Internal.TypedFactoryInterceptor</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Internal.Fakes.StubTypedFactoryInterceptor.#ctor(Castle.MicroKernel.IKernelInternal,Castle.Facilities.TypedFactory.ITypedFactoryComponentSelector)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Internal.Fakes.StubTypedFactoryInterceptor.InitializeStub">
            <summary>Initializes a new instance of type StubTypedFactoryInterceptor</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Internal.Fakes.StubTypedFactoryInterceptor.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Internal.Fakes.StubTypedFactoryInterceptor.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Internal.Fakes.StubTypedFactoryInterceptor.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.ComponentActivator.Fakes.ShimAbstractComponentActivator">
            <summary>Shim type of Castle.MicroKernel.ComponentActivator.AbstractComponentActivator</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.ShimAbstractComponentActivator.#ctor(Castle.MicroKernel.ComponentActivator.AbstractComponentActivator)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.ShimAbstractComponentActivator.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.ShimAbstractComponentActivator.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.ShimAbstractComponentActivator.Bind(Castle.MicroKernel.IComponentActivator)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimAbstractComponentActivator.ApplyCommissionConcernsObject">
            <summary>Sets the shim of AbstractComponentActivator.ApplyCommissionConcerns(Object instance)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimAbstractComponentActivator.ApplyConcernsIEnumerableOfICommissionConcernObject">
            <summary>Sets the shim of AbstractComponentActivator.ApplyConcerns(IEnumerable`1&lt;ICommissionConcern&gt; steps, Object instance)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimAbstractComponentActivator.ApplyConcernsIEnumerableOfIDecommissionConcernObject">
            <summary>Sets the shim of AbstractComponentActivator.ApplyConcerns(IEnumerable`1&lt;IDecommissionConcern&gt; steps, Object instance)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimAbstractComponentActivator.ApplyDecommissionConcernsObject">
            <summary>Sets the shim of AbstractComponentActivator.ApplyDecommissionConcerns(Object instance)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimAbstractComponentActivator.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimAbstractComponentActivator.ConstructorComponentModelIKernelInternalComponentInstanceDelegateComponentInstanceDelegate">
            <summary>Sets the shim of AbstractComponentActivator.AbstractComponentActivator(ComponentModel model, IKernelInternal kernel, ComponentInstanceDelegate onCreation, ComponentInstanceDelegate onDestruction)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimAbstractComponentActivator.CreateCreationContextBurden">
            <summary>Sets the shim of AbstractComponentActivator.Create(CreationContext context, Burden burden)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimAbstractComponentActivator.DestroyObject">
            <summary>Sets the shim of AbstractComponentActivator.Destroy(Object instance)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimAbstractComponentActivator.KernelGet">
            <summary>Sets the shim of AbstractComponentActivator.get_Kernel()</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimAbstractComponentActivator.ModelGet">
            <summary>Sets the shim of AbstractComponentActivator.get_Model()</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimAbstractComponentActivator.OnCreationGet">
            <summary>Sets the shim of AbstractComponentActivator.get_OnCreation()</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimAbstractComponentActivator.OnDestructionGet">
            <summary>Sets the shim of AbstractComponentActivator.get_OnDestruction()</summary>
        </member>
        <member name="T:Castle.MicroKernel.ComponentActivator.Fakes.ShimAbstractComponentActivator.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimAbstractComponentActivator.AllInstances.ApplyCommissionConcernsObject">
            <summary>Sets the shim of AbstractComponentActivator.ApplyCommissionConcerns(Object instance)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimAbstractComponentActivator.AllInstances.ApplyConcernsIEnumerableOfICommissionConcernObject">
            <summary>Sets the shim of AbstractComponentActivator.ApplyConcerns(IEnumerable`1&lt;ICommissionConcern&gt; steps, Object instance)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimAbstractComponentActivator.AllInstances.ApplyConcernsIEnumerableOfIDecommissionConcernObject">
            <summary>Sets the shim of AbstractComponentActivator.ApplyConcerns(IEnumerable`1&lt;IDecommissionConcern&gt; steps, Object instance)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimAbstractComponentActivator.AllInstances.ApplyDecommissionConcernsObject">
            <summary>Sets the shim of AbstractComponentActivator.ApplyDecommissionConcerns(Object instance)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimAbstractComponentActivator.AllInstances.CreateCreationContextBurden">
            <summary>Sets the shim of AbstractComponentActivator.Create(CreationContext context, Burden burden)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimAbstractComponentActivator.AllInstances.DestroyObject">
            <summary>Sets the shim of AbstractComponentActivator.Destroy(Object instance)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimAbstractComponentActivator.AllInstances.KernelGet">
            <summary>Sets the shim of AbstractComponentActivator.get_Kernel()</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimAbstractComponentActivator.AllInstances.ModelGet">
            <summary>Sets the shim of AbstractComponentActivator.get_Model()</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimAbstractComponentActivator.AllInstances.OnCreationGet">
            <summary>Sets the shim of AbstractComponentActivator.get_OnCreation()</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimAbstractComponentActivator.AllInstances.OnDestructionGet">
            <summary>Sets the shim of AbstractComponentActivator.get_OnDestruction()</summary>
        </member>
        <member name="T:Castle.MicroKernel.ComponentActivator.Fakes.ShimComponentActivatorException">
            <summary>Shim type of Castle.MicroKernel.ComponentActivator.ComponentActivatorException</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.ShimComponentActivatorException.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.ShimComponentActivatorException.#ctor(Castle.MicroKernel.ComponentActivator.ComponentActivatorException)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.ShimComponentActivatorException.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.ShimComponentActivatorException.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.ShimComponentActivatorException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimComponentActivatorException.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimComponentActivatorException.ComponentModelGet">
            <summary>Sets the shim of ComponentActivatorException.get_ComponentModel()</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimComponentActivatorException.ComponentModelSetComponentModel">
            <summary>Sets the shim of ComponentActivatorException.set_ComponentModel(ComponentModel value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimComponentActivatorException.ConstructorSerializationInfoStreamingContext">
            <summary>Sets the shim of ComponentActivatorException.ComponentActivatorException(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimComponentActivatorException.ConstructorStringComponentModel">
            <summary>Sets the shim of ComponentActivatorException.ComponentActivatorException(String message, ComponentModel componentComponentModel)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimComponentActivatorException.ConstructorStringExceptionComponentModel">
            <summary>Sets the shim of ComponentActivatorException.ComponentActivatorException(String message, Exception innerException, ComponentModel componentModel)</summary>
        </member>
        <member name="T:Castle.MicroKernel.ComponentActivator.Fakes.ShimComponentActivatorException.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimComponentActivatorException.AllInstances.ComponentModelGet">
            <summary>Sets the shim of ComponentActivatorException.get_ComponentModel()</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimComponentActivatorException.AllInstances.ComponentModelSetComponentModel">
            <summary>Sets the shim of ComponentActivatorException.set_ComponentModel(ComponentModel value)</summary>
        </member>
        <member name="T:Castle.MicroKernel.ComponentActivator.Fakes.ShimDefaultComponentActivator">
            <summary>Shim type of Castle.MicroKernel.ComponentActivator.DefaultComponentActivator</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.ShimDefaultComponentActivator.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.ShimDefaultComponentActivator.#ctor(Castle.MicroKernel.ComponentActivator.DefaultComponentActivator)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.ShimDefaultComponentActivator.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.ShimDefaultComponentActivator.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.ShimDefaultComponentActivator.Bind(Castle.MicroKernel.IComponentActivator)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimDefaultComponentActivator.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimDefaultComponentActivator.BestPossibleScoreConstructorCandidateInt32">
            <summary>Sets the shim of DefaultComponentActivator.BestPossibleScore(ConstructorCandidate candidate, Int32 candidatePoints)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimDefaultComponentActivator.BestScoreSoFarInt32Int32ConstructorCandidate">
            <summary>Sets the shim of DefaultComponentActivator.BestScoreSoFar(Int32 candidatePoints, Int32 winnerPoints, ConstructorCandidate winnerCandidate)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimDefaultComponentActivator.CanSatisfyDependencyCreationContextDependencyModel">
            <summary>Sets the shim of DefaultComponentActivator.CanSatisfyDependency(CreationContext context, DependencyModel dependency)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimDefaultComponentActivator.CheckCtorCandidateConstructorCandidateCreationContextInt32Out">
            <summary>Sets the shim of DefaultComponentActivator.CheckCtorCandidate(ConstructorCandidate candidate, CreationContext context, Int32&amp; candidatePoints)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimDefaultComponentActivator.ConstructorComponentModelIKernelInternalComponentInstanceDelegateComponentInstanceDelegate">
            <summary>Sets the shim of DefaultComponentActivator.DefaultComponentActivator(ComponentModel model, IKernelInternal kernel, ComponentInstanceDelegate onCreation, ComponentInstanceDelegate onDestruction)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimDefaultComponentActivator.CreateConstructorArgumentsConstructorCandidateCreationContext">
            <summary>Sets the shim of DefaultComponentActivator.CreateConstructorArguments(ConstructorCandidate constructor, CreationContext context)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimDefaultComponentActivator.CreateInstanceCoreConstructorCandidateObjectArrayType">
            <summary>Sets the shim of DefaultComponentActivator.CreateInstanceCore(ConstructorCandidate constructor, Object[] arguments, Type implType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimDefaultComponentActivator.CreateInstanceCreationContextConstructorCandidateObjectArray">
            <summary>Sets the shim of DefaultComponentActivator.CreateInstance(CreationContext context, ConstructorCandidate constructor, Object[] arguments)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimDefaultComponentActivator.FastCreateInstanceTypeObjectArrayConstructorCandidate">
            <summary>Sets the shim of DefaultComponentActivator.FastCreateInstance(Type implType, Object[] arguments, ConstructorCandidate constructor)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimDefaultComponentActivator.InstantiateCreationContext">
            <summary>Sets the shim of DefaultComponentActivator.Instantiate(CreationContext context)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimDefaultComponentActivator.InternalCreateCreationContext">
            <summary>Sets the shim of DefaultComponentActivator.InternalCreate(CreationContext context)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimDefaultComponentActivator.InternalDestroyObject">
            <summary>Sets the shim of DefaultComponentActivator.InternalDestroy(Object instance)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimDefaultComponentActivator.ObtainPropertyValueCreationContextPropertySetIDependencyResolver">
            <summary>Sets the shim of DefaultComponentActivator.ObtainPropertyValue(CreationContext context, PropertySet property, IDependencyResolver resolver)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimDefaultComponentActivator.SelectEligibleConstructorCreationContext">
            <summary>Sets the shim of DefaultComponentActivator.SelectEligibleConstructor(CreationContext context)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimDefaultComponentActivator.SetUpPropertiesObjectCreationContext">
            <summary>Sets the shim of DefaultComponentActivator.SetUpProperties(Object instance, CreationContext context)</summary>
        </member>
        <member name="T:Castle.MicroKernel.ComponentActivator.Fakes.ShimDefaultComponentActivator.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimDefaultComponentActivator.AllInstances.CanSatisfyDependencyCreationContextDependencyModel">
            <summary>Sets the shim of DefaultComponentActivator.CanSatisfyDependency(CreationContext context, DependencyModel dependency)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimDefaultComponentActivator.AllInstances.CheckCtorCandidateConstructorCandidateCreationContextInt32Out">
            <summary>Sets the shim of DefaultComponentActivator.CheckCtorCandidate(ConstructorCandidate candidate, CreationContext context, Int32&amp; candidatePoints)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimDefaultComponentActivator.AllInstances.CreateConstructorArgumentsConstructorCandidateCreationContext">
            <summary>Sets the shim of DefaultComponentActivator.CreateConstructorArguments(ConstructorCandidate constructor, CreationContext context)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimDefaultComponentActivator.AllInstances.CreateInstanceCoreConstructorCandidateObjectArrayType">
            <summary>Sets the shim of DefaultComponentActivator.CreateInstanceCore(ConstructorCandidate constructor, Object[] arguments, Type implType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimDefaultComponentActivator.AllInstances.CreateInstanceCreationContextConstructorCandidateObjectArray">
            <summary>Sets the shim of DefaultComponentActivator.CreateInstance(CreationContext context, ConstructorCandidate constructor, Object[] arguments)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimDefaultComponentActivator.AllInstances.FastCreateInstanceTypeObjectArrayConstructorCandidate">
            <summary>Sets the shim of DefaultComponentActivator.FastCreateInstance(Type implType, Object[] arguments, ConstructorCandidate constructor)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimDefaultComponentActivator.AllInstances.InstantiateCreationContext">
            <summary>Sets the shim of DefaultComponentActivator.Instantiate(CreationContext context)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimDefaultComponentActivator.AllInstances.InternalCreateCreationContext">
            <summary>Sets the shim of DefaultComponentActivator.InternalCreate(CreationContext context)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimDefaultComponentActivator.AllInstances.InternalDestroyObject">
            <summary>Sets the shim of DefaultComponentActivator.InternalDestroy(Object instance)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimDefaultComponentActivator.AllInstances.ObtainPropertyValueCreationContextPropertySetIDependencyResolver">
            <summary>Sets the shim of DefaultComponentActivator.ObtainPropertyValue(CreationContext context, PropertySet property, IDependencyResolver resolver)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimDefaultComponentActivator.AllInstances.SelectEligibleConstructorCreationContext">
            <summary>Sets the shim of DefaultComponentActivator.SelectEligibleConstructor(CreationContext context)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimDefaultComponentActivator.AllInstances.SetUpPropertiesObjectCreationContext">
            <summary>Sets the shim of DefaultComponentActivator.SetUpProperties(Object instance, CreationContext context)</summary>
        </member>
        <member name="T:Castle.MicroKernel.ComponentActivator.Fakes.ShimExternalInstanceActivator">
            <summary>Shim type of Castle.MicroKernel.ComponentActivator.ExternalInstanceActivator</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.ShimExternalInstanceActivator.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.ShimExternalInstanceActivator.#ctor(Castle.MicroKernel.ComponentActivator.ExternalInstanceActivator)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.ShimExternalInstanceActivator.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.ShimExternalInstanceActivator.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.ShimExternalInstanceActivator.Bind(Castle.MicroKernel.IComponentActivator)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.ShimExternalInstanceActivator.Bind(Castle.MicroKernel.ComponentActivator.IDependencyAwareActivator)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimExternalInstanceActivator.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimExternalInstanceActivator.CanProvideRequiredDependenciesComponentModel">
            <summary>Sets the shim of ExternalInstanceActivator.CanProvideRequiredDependencies(ComponentModel component)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimExternalInstanceActivator.ConstructorComponentModelIKernelInternalComponentInstanceDelegateComponentInstanceDelegate">
            <summary>Sets the shim of ExternalInstanceActivator.ExternalInstanceActivator(ComponentModel model, IKernelInternal kernel, ComponentInstanceDelegate onCreation, ComponentInstanceDelegate onDestruction)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimExternalInstanceActivator.InternalCreateCreationContext">
            <summary>Sets the shim of ExternalInstanceActivator.InternalCreate(CreationContext context)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimExternalInstanceActivator.InternalDestroyObject">
            <summary>Sets the shim of ExternalInstanceActivator.InternalDestroy(Object instance)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimExternalInstanceActivator.IsManagedExternallyComponentModel">
            <summary>Sets the shim of ExternalInstanceActivator.IsManagedExternally(ComponentModel component)</summary>
        </member>
        <member name="T:Castle.MicroKernel.ComponentActivator.Fakes.ShimExternalInstanceActivator.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimExternalInstanceActivator.AllInstances.CanProvideRequiredDependenciesComponentModel">
            <summary>Sets the shim of ExternalInstanceActivator.CanProvideRequiredDependencies(ComponentModel component)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimExternalInstanceActivator.AllInstances.InternalCreateCreationContext">
            <summary>Sets the shim of ExternalInstanceActivator.InternalCreate(CreationContext context)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimExternalInstanceActivator.AllInstances.InternalDestroyObject">
            <summary>Sets the shim of ExternalInstanceActivator.InternalDestroy(Object instance)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimExternalInstanceActivator.AllInstances.IsManagedExternallyComponentModel">
            <summary>Sets the shim of ExternalInstanceActivator.IsManagedExternally(ComponentModel component)</summary>
        </member>
        <member name="T:Castle.MicroKernel.ComponentActivator.Fakes.ShimFactoryMethodActivator`1">
            <summary>Shim type of Castle.MicroKernel.ComponentActivator.FactoryMethodActivator`1</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.ShimFactoryMethodActivator`1.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.ShimFactoryMethodActivator`1.#ctor(Castle.MicroKernel.ComponentActivator.FactoryMethodActivator{`0})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.ShimFactoryMethodActivator`1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.ShimFactoryMethodActivator`1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.ShimFactoryMethodActivator`1.Bind(Castle.MicroKernel.IComponentActivator)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.ShimFactoryMethodActivator`1.Bind(Castle.MicroKernel.ComponentActivator.IDependencyAwareActivator)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimFactoryMethodActivator`1.ApplyCommissionConcernsObject">
            <summary>Sets the shim of FactoryMethodActivator`1.ApplyCommissionConcerns(Object instance)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimFactoryMethodActivator`1.ApplyDecommissionConcernsObject">
            <summary>Sets the shim of FactoryMethodActivator`1.ApplyDecommissionConcerns(Object instance)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimFactoryMethodActivator`1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimFactoryMethodActivator`1.CanProvideRequiredDependenciesComponentModel">
            <summary>Sets the shim of FactoryMethodActivator`1.CanProvideRequiredDependencies(ComponentModel component)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimFactoryMethodActivator`1.ConstructorComponentModelIKernelInternalComponentInstanceDelegateComponentInstanceDelegate">
            <summary>Sets the shim of FactoryMethodActivator`1.FactoryMethodActivator`1(ComponentModel model, IKernelInternal kernel, ComponentInstanceDelegate onCreation, ComponentInstanceDelegate onDestruction)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimFactoryMethodActivator`1.InstantiateCreationContext">
            <summary>Sets the shim of FactoryMethodActivator`1.Instantiate(CreationContext context)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimFactoryMethodActivator`1.IsManagedExternallyComponentModel">
            <summary>Sets the shim of FactoryMethodActivator`1.IsManagedExternally(ComponentModel component)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimFactoryMethodActivator`1.SetUpPropertiesObjectCreationContext">
            <summary>Sets the shim of FactoryMethodActivator`1.SetUpProperties(Object instance, CreationContext context)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimFactoryMethodActivator`1.ShouldCreateProxyObject">
            <summary>Sets the shim of FactoryMethodActivator`1.ShouldCreateProxy(Object instance)</summary>
        </member>
        <member name="T:Castle.MicroKernel.ComponentActivator.Fakes.ShimFactoryMethodActivator`1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimFactoryMethodActivator`1.AllInstances.ApplyCommissionConcernsObject">
            <summary>Sets the shim of FactoryMethodActivator`1.ApplyCommissionConcerns(Object instance)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimFactoryMethodActivator`1.AllInstances.ApplyDecommissionConcernsObject">
            <summary>Sets the shim of FactoryMethodActivator`1.ApplyDecommissionConcerns(Object instance)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimFactoryMethodActivator`1.AllInstances.CanProvideRequiredDependenciesComponentModel">
            <summary>Sets the shim of FactoryMethodActivator`1.CanProvideRequiredDependencies(ComponentModel component)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimFactoryMethodActivator`1.AllInstances.InstantiateCreationContext">
            <summary>Sets the shim of FactoryMethodActivator`1.Instantiate(CreationContext context)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimFactoryMethodActivator`1.AllInstances.IsManagedExternallyComponentModel">
            <summary>Sets the shim of FactoryMethodActivator`1.IsManagedExternally(ComponentModel component)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimFactoryMethodActivator`1.AllInstances.SetUpPropertiesObjectCreationContext">
            <summary>Sets the shim of FactoryMethodActivator`1.SetUpProperties(Object instance, CreationContext context)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimFactoryMethodActivator`1.AllInstances.ShouldCreateProxyObject">
            <summary>Sets the shim of FactoryMethodActivator`1.ShouldCreateProxy(Object instance)</summary>
        </member>
        <member name="T:Castle.MicroKernel.ComponentActivator.Fakes.ShimNoResolvableConstructorFoundException">
            <summary>Shim type of Castle.MicroKernel.ComponentActivator.NoResolvableConstructorFoundException</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.ShimNoResolvableConstructorFoundException.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.ShimNoResolvableConstructorFoundException.#ctor(Castle.MicroKernel.ComponentActivator.NoResolvableConstructorFoundException)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.ShimNoResolvableConstructorFoundException.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.ShimNoResolvableConstructorFoundException.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.ShimNoResolvableConstructorFoundException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimNoResolvableConstructorFoundException.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimNoResolvableConstructorFoundException.ConstructorSerializationInfoStreamingContext">
            <summary>Sets the shim of NoResolvableConstructorFoundException.NoResolvableConstructorFoundException(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimNoResolvableConstructorFoundException.ConstructorStringExceptionComponentModel">
            <summary>Sets the shim of NoResolvableConstructorFoundException.NoResolvableConstructorFoundException(String message, Exception innerException, ComponentModel componentModel)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimNoResolvableConstructorFoundException.ConstructorTypeComponentModel">
            <summary>Sets the shim of NoResolvableConstructorFoundException.NoResolvableConstructorFoundException(Type type, ComponentModel componentModel)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimNoResolvableConstructorFoundException.TypeGet">
            <summary>Sets the shim of NoResolvableConstructorFoundException.get_Type()</summary>
        </member>
        <member name="T:Castle.MicroKernel.ComponentActivator.Fakes.ShimNoResolvableConstructorFoundException.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimNoResolvableConstructorFoundException.AllInstances.TypeGet">
            <summary>Sets the shim of NoResolvableConstructorFoundException.get_Type()</summary>
        </member>
        <member name="T:Castle.MicroKernel.ComponentActivator.Fakes.ShimWebUserControlComponentActivator">
            <summary>Shim type of Castle.MicroKernel.ComponentActivator.WebUserControlComponentActivator</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.ShimWebUserControlComponentActivator.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.ShimWebUserControlComponentActivator.#ctor(Castle.MicroKernel.ComponentActivator.WebUserControlComponentActivator)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.ShimWebUserControlComponentActivator.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.ShimWebUserControlComponentActivator.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.ShimWebUserControlComponentActivator.Bind(Castle.MicroKernel.IComponentActivator)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimWebUserControlComponentActivator.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimWebUserControlComponentActivator.ConstructorComponentModelIKernelInternalComponentInstanceDelegateComponentInstanceDelegate">
            <summary>Sets the shim of WebUserControlComponentActivator.WebUserControlComponentActivator(ComponentModel model, IKernelInternal kernel, ComponentInstanceDelegate onCreation, ComponentInstanceDelegate onDestruction)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimWebUserControlComponentActivator.CreateInstanceCreationContextConstructorCandidateObjectArray">
            <summary>Sets the shim of WebUserControlComponentActivator.CreateInstance(CreationContext context, ConstructorCandidate constructor, Object[] arguments)</summary>
        </member>
        <member name="T:Castle.MicroKernel.ComponentActivator.Fakes.ShimWebUserControlComponentActivator.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimWebUserControlComponentActivator.AllInstances.CreateInstanceCreationContextConstructorCandidateObjectArray">
            <summary>Sets the shim of WebUserControlComponentActivator.CreateInstance(CreationContext context, ConstructorCandidate constructor, Object[] arguments)</summary>
        </member>
        <member name="T:Castle.MicroKernel.ComponentActivator.Fakes.StubAbstractComponentActivator">
            <summary>Stub type of Castle.MicroKernel.ComponentActivator.AbstractComponentActivator</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubAbstractComponentActivator.#ctor(Castle.Core.ComponentModel,Castle.MicroKernel.IKernelInternal,Castle.MicroKernel.ComponentInstanceDelegate,Castle.MicroKernel.ComponentInstanceDelegate)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubAbstractComponentActivator.ApplyCommissionConcerns(System.Object)">
            <summary>Sets the stub of AbstractComponentActivator.ApplyCommissionConcerns(Object instance)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubAbstractComponentActivator.ApplyCommissionConcernsObject">
            <summary>Sets the stub of AbstractComponentActivator.ApplyCommissionConcerns(Object instance)</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubAbstractComponentActivator.ApplyConcerns(System.Collections.Generic.IEnumerable{Castle.Core.ICommissionConcern},System.Object)">
            <summary>Sets the stub of AbstractComponentActivator.ApplyConcerns(IEnumerable`1&lt;ICommissionConcern&gt; steps, Object instance)</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubAbstractComponentActivator.ApplyConcerns(System.Collections.Generic.IEnumerable{Castle.Core.IDecommissionConcern},System.Object)">
            <summary>Sets the stub of AbstractComponentActivator.ApplyConcerns(IEnumerable`1&lt;IDecommissionConcern&gt; steps, Object instance)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubAbstractComponentActivator.ApplyConcernsIEnumerableOfICommissionConcernObject">
            <summary>Sets the stub of AbstractComponentActivator.ApplyConcerns(IEnumerable`1&lt;ICommissionConcern&gt; steps, Object instance)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubAbstractComponentActivator.ApplyConcernsIEnumerableOfIDecommissionConcernObject">
            <summary>Sets the stub of AbstractComponentActivator.ApplyConcerns(IEnumerable`1&lt;IDecommissionConcern&gt; steps, Object instance)</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubAbstractComponentActivator.ApplyDecommissionConcerns(System.Object)">
            <summary>Sets the stub of AbstractComponentActivator.ApplyDecommissionConcerns(Object instance)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubAbstractComponentActivator.ApplyDecommissionConcernsObject">
            <summary>Sets the stub of AbstractComponentActivator.ApplyDecommissionConcerns(Object instance)</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubAbstractComponentActivator.Create(Castle.MicroKernel.Context.CreationContext,Castle.MicroKernel.Burden)">
            <summary>Sets the stub of AbstractComponentActivator.Create(CreationContext context, Burden burden)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubAbstractComponentActivator.CreateCreationContextBurden">
            <summary>Sets the stub of AbstractComponentActivator.Create(CreationContext context, Burden burden)</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubAbstractComponentActivator.Destroy(System.Object)">
            <summary>Sets the stub of AbstractComponentActivator.Destroy(Object instance)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubAbstractComponentActivator.DestroyObject">
            <summary>Sets the stub of AbstractComponentActivator.Destroy(Object instance)</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubAbstractComponentActivator.InitializeStub">
            <summary>Initializes a new instance of type StubAbstractComponentActivator</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubAbstractComponentActivator.InternalCreate(Castle.MicroKernel.Context.CreationContext)">
            <summary>Sets the stub of AbstractComponentActivator.InternalCreate(CreationContext context)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubAbstractComponentActivator.InternalCreateCreationContext">
            <summary>Sets the stub of AbstractComponentActivator.InternalCreate(CreationContext context)</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubAbstractComponentActivator.InternalDestroy(System.Object)">
            <summary>Sets the stub of AbstractComponentActivator.InternalDestroy(Object instance)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubAbstractComponentActivator.InternalDestroyObject">
            <summary>Sets the stub of AbstractComponentActivator.InternalDestroy(Object instance)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.StubAbstractComponentActivator.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.StubAbstractComponentActivator.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.StubAbstractComponentActivator.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.ComponentActivator.Fakes.StubComponentActivatorException">
            <summary>Stub type of Castle.MicroKernel.ComponentActivator.ComponentActivatorException</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubComponentActivatorException.#ctor(System.String,Castle.Core.ComponentModel)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubComponentActivatorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubComponentActivatorException.#ctor(System.String,System.Exception,Castle.Core.ComponentModel)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubComponentActivatorException.AttachBackingFieldToHelpLink">
            <summary>Attaches delegates to emulate StubComponentActivatorException.HelpLink as a property with a backing field.</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubComponentActivatorException.AttachBackingFieldToSource">
            <summary>Attaches delegates to emulate StubComponentActivatorException.Source as a property with a backing field.</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubComponentActivatorException.DataGet">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubComponentActivatorException.GetBaseException">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubComponentActivatorException.GetBaseException01">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubComponentActivatorException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubComponentActivatorException.GetObjectDataSerializationInfoStreamingContext">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubComponentActivatorException.HelpLinkGet">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubComponentActivatorException.HelpLinkSetString">
            <summary>Sets the stub of Exception.set_HelpLink(String value)</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubComponentActivatorException.InitializeStub">
            <summary>Initializes a new instance of type StubComponentActivatorException</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubComponentActivatorException.MessageGet">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubComponentActivatorException.SourceGet">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubComponentActivatorException.SourceSetString">
            <summary>Sets the stub of Exception.set_Source(String value)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubComponentActivatorException.StackTraceGet">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubComponentActivatorException.ToString">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubComponentActivatorException.ToString01">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.StubComponentActivatorException.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.StubComponentActivatorException.Data">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.StubComponentActivatorException.HelpLink">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.StubComponentActivatorException.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.StubComponentActivatorException.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.StubComponentActivatorException.Message">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.StubComponentActivatorException.Source">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.StubComponentActivatorException.StackTrace">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="T:Castle.MicroKernel.ComponentActivator.Fakes.StubDefaultComponentActivator">
            <summary>Stub type of Castle.MicroKernel.ComponentActivator.DefaultComponentActivator</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubDefaultComponentActivator.#ctor(Castle.Core.ComponentModel,Castle.MicroKernel.IKernelInternal,Castle.MicroKernel.ComponentInstanceDelegate,Castle.MicroKernel.ComponentInstanceDelegate)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubDefaultComponentActivator.ApplyCommissionConcerns(System.Object)">
            <summary>Sets the stub of AbstractComponentActivator.ApplyCommissionConcerns(Object instance)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubDefaultComponentActivator.ApplyCommissionConcernsObject">
            <summary>Sets the stub of AbstractComponentActivator.ApplyCommissionConcerns(Object instance)</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubDefaultComponentActivator.ApplyConcerns(System.Collections.Generic.IEnumerable{Castle.Core.ICommissionConcern},System.Object)">
            <summary>Sets the stub of AbstractComponentActivator.ApplyConcerns(IEnumerable`1&lt;ICommissionConcern&gt; steps, Object instance)</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubDefaultComponentActivator.ApplyConcerns(System.Collections.Generic.IEnumerable{Castle.Core.IDecommissionConcern},System.Object)">
            <summary>Sets the stub of AbstractComponentActivator.ApplyConcerns(IEnumerable`1&lt;IDecommissionConcern&gt; steps, Object instance)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubDefaultComponentActivator.ApplyConcernsIEnumerableOfICommissionConcernObject">
            <summary>Sets the stub of AbstractComponentActivator.ApplyConcerns(IEnumerable`1&lt;ICommissionConcern&gt; steps, Object instance)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubDefaultComponentActivator.ApplyConcernsIEnumerableOfIDecommissionConcernObject">
            <summary>Sets the stub of AbstractComponentActivator.ApplyConcerns(IEnumerable`1&lt;IDecommissionConcern&gt; steps, Object instance)</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubDefaultComponentActivator.ApplyDecommissionConcerns(System.Object)">
            <summary>Sets the stub of AbstractComponentActivator.ApplyDecommissionConcerns(Object instance)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubDefaultComponentActivator.ApplyDecommissionConcernsObject">
            <summary>Sets the stub of AbstractComponentActivator.ApplyDecommissionConcerns(Object instance)</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubDefaultComponentActivator.CanSatisfyDependency(Castle.MicroKernel.Context.CreationContext,Castle.Core.DependencyModel)">
            <summary>Sets the stub of DefaultComponentActivator.CanSatisfyDependency(CreationContext context, DependencyModel dependency)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubDefaultComponentActivator.CanSatisfyDependencyCreationContextDependencyModel">
            <summary>Sets the stub of DefaultComponentActivator.CanSatisfyDependency(CreationContext context, DependencyModel dependency)</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubDefaultComponentActivator.Create(Castle.MicroKernel.Context.CreationContext,Castle.MicroKernel.Burden)">
            <summary>Sets the stub of AbstractComponentActivator.Create(CreationContext context, Burden burden)</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubDefaultComponentActivator.CreateConstructorArguments(Castle.Core.ConstructorCandidate,Castle.MicroKernel.Context.CreationContext)">
            <summary>Sets the stub of DefaultComponentActivator.CreateConstructorArguments(ConstructorCandidate constructor, CreationContext context)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubDefaultComponentActivator.CreateConstructorArgumentsConstructorCandidateCreationContext">
            <summary>Sets the stub of DefaultComponentActivator.CreateConstructorArguments(ConstructorCandidate constructor, CreationContext context)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubDefaultComponentActivator.CreateCreationContextBurden">
            <summary>Sets the stub of AbstractComponentActivator.Create(CreationContext context, Burden burden)</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubDefaultComponentActivator.CreateInstance(Castle.MicroKernel.Context.CreationContext,Castle.Core.ConstructorCandidate,System.Object[])">
            <summary>Sets the stub of DefaultComponentActivator.CreateInstance(CreationContext context, ConstructorCandidate constructor, Object[] arguments)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubDefaultComponentActivator.CreateInstanceCreationContextConstructorCandidateObjectArray">
            <summary>Sets the stub of DefaultComponentActivator.CreateInstance(CreationContext context, ConstructorCandidate constructor, Object[] arguments)</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubDefaultComponentActivator.Destroy(System.Object)">
            <summary>Sets the stub of AbstractComponentActivator.Destroy(Object instance)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubDefaultComponentActivator.DestroyObject">
            <summary>Sets the stub of AbstractComponentActivator.Destroy(Object instance)</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubDefaultComponentActivator.InitializeStub">
            <summary>Initializes a new instance of type StubDefaultComponentActivator</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubDefaultComponentActivator.Instantiate(Castle.MicroKernel.Context.CreationContext)">
            <summary>Sets the stub of DefaultComponentActivator.Instantiate(CreationContext context)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubDefaultComponentActivator.InstantiateCreationContext">
            <summary>Sets the stub of DefaultComponentActivator.Instantiate(CreationContext context)</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubDefaultComponentActivator.InternalCreate(Castle.MicroKernel.Context.CreationContext)">
            <summary>Sets the stub of DefaultComponentActivator.InternalCreate(CreationContext context)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubDefaultComponentActivator.InternalCreateCreationContext">
            <summary>Sets the stub of DefaultComponentActivator.InternalCreate(CreationContext context)</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubDefaultComponentActivator.InternalDestroy(System.Object)">
            <summary>Sets the stub of DefaultComponentActivator.InternalDestroy(Object instance)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubDefaultComponentActivator.InternalDestroyObject">
            <summary>Sets the stub of DefaultComponentActivator.InternalDestroy(Object instance)</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubDefaultComponentActivator.SelectEligibleConstructor(Castle.MicroKernel.Context.CreationContext)">
            <summary>Sets the stub of DefaultComponentActivator.SelectEligibleConstructor(CreationContext context)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubDefaultComponentActivator.SelectEligibleConstructorCreationContext">
            <summary>Sets the stub of DefaultComponentActivator.SelectEligibleConstructor(CreationContext context)</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubDefaultComponentActivator.SetUpProperties(System.Object,Castle.MicroKernel.Context.CreationContext)">
            <summary>Sets the stub of DefaultComponentActivator.SetUpProperties(Object instance, CreationContext context)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubDefaultComponentActivator.SetUpPropertiesObjectCreationContext">
            <summary>Sets the stub of DefaultComponentActivator.SetUpProperties(Object instance, CreationContext context)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.StubDefaultComponentActivator.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.StubDefaultComponentActivator.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.StubDefaultComponentActivator.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.ComponentActivator.Fakes.StubExternalInstanceActivator">
            <summary>Stub type of Castle.MicroKernel.ComponentActivator.ExternalInstanceActivator</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubExternalInstanceActivator.#ctor(Castle.Core.ComponentModel,Castle.MicroKernel.IKernelInternal,Castle.MicroKernel.ComponentInstanceDelegate,Castle.MicroKernel.ComponentInstanceDelegate)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubExternalInstanceActivator.ApplyCommissionConcerns(System.Object)">
            <summary>Sets the stub of AbstractComponentActivator.ApplyCommissionConcerns(Object instance)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubExternalInstanceActivator.ApplyCommissionConcernsObject">
            <summary>Sets the stub of AbstractComponentActivator.ApplyCommissionConcerns(Object instance)</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubExternalInstanceActivator.ApplyConcerns(System.Collections.Generic.IEnumerable{Castle.Core.ICommissionConcern},System.Object)">
            <summary>Sets the stub of AbstractComponentActivator.ApplyConcerns(IEnumerable`1&lt;ICommissionConcern&gt; steps, Object instance)</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubExternalInstanceActivator.ApplyConcerns(System.Collections.Generic.IEnumerable{Castle.Core.IDecommissionConcern},System.Object)">
            <summary>Sets the stub of AbstractComponentActivator.ApplyConcerns(IEnumerable`1&lt;IDecommissionConcern&gt; steps, Object instance)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubExternalInstanceActivator.ApplyConcernsIEnumerableOfICommissionConcernObject">
            <summary>Sets the stub of AbstractComponentActivator.ApplyConcerns(IEnumerable`1&lt;ICommissionConcern&gt; steps, Object instance)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubExternalInstanceActivator.ApplyConcernsIEnumerableOfIDecommissionConcernObject">
            <summary>Sets the stub of AbstractComponentActivator.ApplyConcerns(IEnumerable`1&lt;IDecommissionConcern&gt; steps, Object instance)</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubExternalInstanceActivator.ApplyDecommissionConcerns(System.Object)">
            <summary>Sets the stub of AbstractComponentActivator.ApplyDecommissionConcerns(Object instance)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubExternalInstanceActivator.ApplyDecommissionConcernsObject">
            <summary>Sets the stub of AbstractComponentActivator.ApplyDecommissionConcerns(Object instance)</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubExternalInstanceActivator.Create(Castle.MicroKernel.Context.CreationContext,Castle.MicroKernel.Burden)">
            <summary>Sets the stub of AbstractComponentActivator.Create(CreationContext context, Burden burden)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubExternalInstanceActivator.CreateCreationContextBurden">
            <summary>Sets the stub of AbstractComponentActivator.Create(CreationContext context, Burden burden)</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubExternalInstanceActivator.Destroy(System.Object)">
            <summary>Sets the stub of AbstractComponentActivator.Destroy(Object instance)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubExternalInstanceActivator.DestroyObject">
            <summary>Sets the stub of AbstractComponentActivator.Destroy(Object instance)</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubExternalInstanceActivator.InitializeStub">
            <summary>Initializes a new instance of type StubExternalInstanceActivator</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubExternalInstanceActivator.InternalCreate(Castle.MicroKernel.Context.CreationContext)">
            <summary>Sets the stub of ExternalInstanceActivator.InternalCreate(CreationContext context)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubExternalInstanceActivator.InternalCreateCreationContext">
            <summary>Sets the stub of ExternalInstanceActivator.InternalCreate(CreationContext context)</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubExternalInstanceActivator.InternalDestroy(System.Object)">
            <summary>Sets the stub of ExternalInstanceActivator.InternalDestroy(Object instance)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubExternalInstanceActivator.InternalDestroyObject">
            <summary>Sets the stub of ExternalInstanceActivator.InternalDestroy(Object instance)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.StubExternalInstanceActivator.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.StubExternalInstanceActivator.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.StubExternalInstanceActivator.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.ComponentActivator.Fakes.StubFactoryMethodActivator`1">
            <summary>Stub type of Castle.MicroKernel.ComponentActivator.FactoryMethodActivator`1</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubFactoryMethodActivator`1.#ctor(Castle.Core.ComponentModel,Castle.MicroKernel.IKernelInternal,Castle.MicroKernel.ComponentInstanceDelegate,Castle.MicroKernel.ComponentInstanceDelegate)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubFactoryMethodActivator`1.ApplyCommissionConcerns(System.Object)">
            <summary>Sets the stub of FactoryMethodActivator`1.ApplyCommissionConcerns(Object instance)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubFactoryMethodActivator`1.ApplyCommissionConcernsObject">
            <summary>Sets the stub of FactoryMethodActivator`1.ApplyCommissionConcerns(Object instance)</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubFactoryMethodActivator`1.ApplyConcerns(System.Collections.Generic.IEnumerable{Castle.Core.ICommissionConcern},System.Object)">
            <summary>Sets the stub of AbstractComponentActivator.ApplyConcerns(IEnumerable`1&lt;ICommissionConcern&gt; steps, Object instance)</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubFactoryMethodActivator`1.ApplyConcerns(System.Collections.Generic.IEnumerable{Castle.Core.IDecommissionConcern},System.Object)">
            <summary>Sets the stub of AbstractComponentActivator.ApplyConcerns(IEnumerable`1&lt;IDecommissionConcern&gt; steps, Object instance)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubFactoryMethodActivator`1.ApplyConcernsIEnumerableOfICommissionConcernObject">
            <summary>Sets the stub of AbstractComponentActivator.ApplyConcerns(IEnumerable`1&lt;ICommissionConcern&gt; steps, Object instance)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubFactoryMethodActivator`1.ApplyConcernsIEnumerableOfIDecommissionConcernObject">
            <summary>Sets the stub of AbstractComponentActivator.ApplyConcerns(IEnumerable`1&lt;IDecommissionConcern&gt; steps, Object instance)</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubFactoryMethodActivator`1.ApplyDecommissionConcerns(System.Object)">
            <summary>Sets the stub of FactoryMethodActivator`1.ApplyDecommissionConcerns(Object instance)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubFactoryMethodActivator`1.ApplyDecommissionConcernsObject">
            <summary>Sets the stub of FactoryMethodActivator`1.ApplyDecommissionConcerns(Object instance)</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubFactoryMethodActivator`1.CanSatisfyDependency(Castle.MicroKernel.Context.CreationContext,Castle.Core.DependencyModel)">
            <summary>Sets the stub of DefaultComponentActivator.CanSatisfyDependency(CreationContext context, DependencyModel dependency)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubFactoryMethodActivator`1.CanSatisfyDependencyCreationContextDependencyModel">
            <summary>Sets the stub of DefaultComponentActivator.CanSatisfyDependency(CreationContext context, DependencyModel dependency)</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubFactoryMethodActivator`1.Create(Castle.MicroKernel.Context.CreationContext,Castle.MicroKernel.Burden)">
            <summary>Sets the stub of AbstractComponentActivator.Create(CreationContext context, Burden burden)</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubFactoryMethodActivator`1.CreateConstructorArguments(Castle.Core.ConstructorCandidate,Castle.MicroKernel.Context.CreationContext)">
            <summary>Sets the stub of DefaultComponentActivator.CreateConstructorArguments(ConstructorCandidate constructor, CreationContext context)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubFactoryMethodActivator`1.CreateConstructorArgumentsConstructorCandidateCreationContext">
            <summary>Sets the stub of DefaultComponentActivator.CreateConstructorArguments(ConstructorCandidate constructor, CreationContext context)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubFactoryMethodActivator`1.CreateCreationContextBurden">
            <summary>Sets the stub of AbstractComponentActivator.Create(CreationContext context, Burden burden)</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubFactoryMethodActivator`1.CreateInstance(Castle.MicroKernel.Context.CreationContext,Castle.Core.ConstructorCandidate,System.Object[])">
            <summary>Sets the stub of DefaultComponentActivator.CreateInstance(CreationContext context, ConstructorCandidate constructor, Object[] arguments)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubFactoryMethodActivator`1.CreateInstanceCreationContextConstructorCandidateObjectArray">
            <summary>Sets the stub of DefaultComponentActivator.CreateInstance(CreationContext context, ConstructorCandidate constructor, Object[] arguments)</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubFactoryMethodActivator`1.Destroy(System.Object)">
            <summary>Sets the stub of AbstractComponentActivator.Destroy(Object instance)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubFactoryMethodActivator`1.DestroyObject">
            <summary>Sets the stub of AbstractComponentActivator.Destroy(Object instance)</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubFactoryMethodActivator`1.InitializeStub">
            <summary>Initializes a new instance of type StubFactoryMethodActivator</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubFactoryMethodActivator`1.Instantiate(Castle.MicroKernel.Context.CreationContext)">
            <summary>Sets the stub of FactoryMethodActivator`1.Instantiate(CreationContext context)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubFactoryMethodActivator`1.InstantiateCreationContext">
            <summary>Sets the stub of FactoryMethodActivator`1.Instantiate(CreationContext context)</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubFactoryMethodActivator`1.InternalCreate(Castle.MicroKernel.Context.CreationContext)">
            <summary>Sets the stub of DefaultComponentActivator.InternalCreate(CreationContext context)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubFactoryMethodActivator`1.InternalCreateCreationContext">
            <summary>Sets the stub of DefaultComponentActivator.InternalCreate(CreationContext context)</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubFactoryMethodActivator`1.InternalDestroy(System.Object)">
            <summary>Sets the stub of DefaultComponentActivator.InternalDestroy(Object instance)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubFactoryMethodActivator`1.InternalDestroyObject">
            <summary>Sets the stub of DefaultComponentActivator.InternalDestroy(Object instance)</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubFactoryMethodActivator`1.SelectEligibleConstructor(Castle.MicroKernel.Context.CreationContext)">
            <summary>Sets the stub of DefaultComponentActivator.SelectEligibleConstructor(CreationContext context)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubFactoryMethodActivator`1.SelectEligibleConstructorCreationContext">
            <summary>Sets the stub of DefaultComponentActivator.SelectEligibleConstructor(CreationContext context)</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubFactoryMethodActivator`1.SetUpProperties(System.Object,Castle.MicroKernel.Context.CreationContext)">
            <summary>Sets the stub of FactoryMethodActivator`1.SetUpProperties(Object instance, CreationContext context)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubFactoryMethodActivator`1.SetUpPropertiesObjectCreationContext">
            <summary>Sets the stub of FactoryMethodActivator`1.SetUpProperties(Object instance, CreationContext context)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.StubFactoryMethodActivator`1.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.StubFactoryMethodActivator`1.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.StubFactoryMethodActivator`1.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.ComponentActivator.Fakes.StubIDependencyAwareActivator">
            <summary>Stub type of Castle.MicroKernel.ComponentActivator.IDependencyAwareActivator</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubIDependencyAwareActivator.#ctor">
            <summary>Initializes a new instance of type StubIDependencyAwareActivator</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubIDependencyAwareActivator.CanProvideRequiredDependenciesComponentModel">
            <summary>Sets the stub of IDependencyAwareActivator.CanProvideRequiredDependencies(ComponentModel component)</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubIDependencyAwareActivator.cw::Castle#MicroKernel#ComponentActivator#IDependencyAwareActivator#CanProvideRequiredDependencies(Castle.Core.ComponentModel)">
            <summary>Sets the stub of IDependencyAwareActivator.CanProvideRequiredDependencies(ComponentModel component)</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubIDependencyAwareActivator.cw::Castle#MicroKernel#ComponentActivator#IDependencyAwareActivator#IsManagedExternally(Castle.Core.ComponentModel)">
            <summary>Sets the stub of IDependencyAwareActivator.IsManagedExternally(ComponentModel component)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubIDependencyAwareActivator.IsManagedExternallyComponentModel">
            <summary>Sets the stub of IDependencyAwareActivator.IsManagedExternally(ComponentModel component)</summary>
        </member>
        <member name="T:Castle.MicroKernel.ComponentActivator.Fakes.StubNoResolvableConstructorFoundException">
            <summary>Stub type of Castle.MicroKernel.ComponentActivator.NoResolvableConstructorFoundException</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubNoResolvableConstructorFoundException.#ctor(System.Type,Castle.Core.ComponentModel)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubNoResolvableConstructorFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubNoResolvableConstructorFoundException.#ctor(System.String,System.Exception,Castle.Core.ComponentModel)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubNoResolvableConstructorFoundException.AttachBackingFieldToHelpLink">
            <summary>Attaches delegates to emulate StubNoResolvableConstructorFoundException.HelpLink as a property with a backing field.</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubNoResolvableConstructorFoundException.AttachBackingFieldToSource">
            <summary>Attaches delegates to emulate StubNoResolvableConstructorFoundException.Source as a property with a backing field.</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubNoResolvableConstructorFoundException.DataGet">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubNoResolvableConstructorFoundException.GetBaseException">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubNoResolvableConstructorFoundException.GetBaseException01">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubNoResolvableConstructorFoundException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubNoResolvableConstructorFoundException.GetObjectDataSerializationInfoStreamingContext">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubNoResolvableConstructorFoundException.HelpLinkGet">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubNoResolvableConstructorFoundException.HelpLinkSetString">
            <summary>Sets the stub of Exception.set_HelpLink(String value)</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubNoResolvableConstructorFoundException.InitializeStub">
            <summary>Initializes a new instance of type StubNoResolvableConstructorFoundException</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubNoResolvableConstructorFoundException.MessageGet">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubNoResolvableConstructorFoundException.SourceGet">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubNoResolvableConstructorFoundException.SourceSetString">
            <summary>Sets the stub of Exception.set_Source(String value)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubNoResolvableConstructorFoundException.StackTraceGet">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubNoResolvableConstructorFoundException.ToString">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubNoResolvableConstructorFoundException.ToString01">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.StubNoResolvableConstructorFoundException.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.StubNoResolvableConstructorFoundException.Data">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.StubNoResolvableConstructorFoundException.HelpLink">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.StubNoResolvableConstructorFoundException.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.StubNoResolvableConstructorFoundException.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.StubNoResolvableConstructorFoundException.Message">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.StubNoResolvableConstructorFoundException.Source">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.StubNoResolvableConstructorFoundException.StackTrace">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="T:Castle.MicroKernel.ComponentActivator.Fakes.StubWebUserControlComponentActivator">
            <summary>Stub type of Castle.MicroKernel.ComponentActivator.WebUserControlComponentActivator</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubWebUserControlComponentActivator.#ctor(Castle.Core.ComponentModel,Castle.MicroKernel.IKernelInternal,Castle.MicroKernel.ComponentInstanceDelegate,Castle.MicroKernel.ComponentInstanceDelegate)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubWebUserControlComponentActivator.ApplyCommissionConcerns(System.Object)">
            <summary>Sets the stub of AbstractComponentActivator.ApplyCommissionConcerns(Object instance)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubWebUserControlComponentActivator.ApplyCommissionConcernsObject">
            <summary>Sets the stub of AbstractComponentActivator.ApplyCommissionConcerns(Object instance)</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubWebUserControlComponentActivator.ApplyConcerns(System.Collections.Generic.IEnumerable{Castle.Core.ICommissionConcern},System.Object)">
            <summary>Sets the stub of AbstractComponentActivator.ApplyConcerns(IEnumerable`1&lt;ICommissionConcern&gt; steps, Object instance)</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubWebUserControlComponentActivator.ApplyConcerns(System.Collections.Generic.IEnumerable{Castle.Core.IDecommissionConcern},System.Object)">
            <summary>Sets the stub of AbstractComponentActivator.ApplyConcerns(IEnumerable`1&lt;IDecommissionConcern&gt; steps, Object instance)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubWebUserControlComponentActivator.ApplyConcernsIEnumerableOfICommissionConcernObject">
            <summary>Sets the stub of AbstractComponentActivator.ApplyConcerns(IEnumerable`1&lt;ICommissionConcern&gt; steps, Object instance)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubWebUserControlComponentActivator.ApplyConcernsIEnumerableOfIDecommissionConcernObject">
            <summary>Sets the stub of AbstractComponentActivator.ApplyConcerns(IEnumerable`1&lt;IDecommissionConcern&gt; steps, Object instance)</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubWebUserControlComponentActivator.ApplyDecommissionConcerns(System.Object)">
            <summary>Sets the stub of AbstractComponentActivator.ApplyDecommissionConcerns(Object instance)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubWebUserControlComponentActivator.ApplyDecommissionConcernsObject">
            <summary>Sets the stub of AbstractComponentActivator.ApplyDecommissionConcerns(Object instance)</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubWebUserControlComponentActivator.CanSatisfyDependency(Castle.MicroKernel.Context.CreationContext,Castle.Core.DependencyModel)">
            <summary>Sets the stub of DefaultComponentActivator.CanSatisfyDependency(CreationContext context, DependencyModel dependency)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubWebUserControlComponentActivator.CanSatisfyDependencyCreationContextDependencyModel">
            <summary>Sets the stub of DefaultComponentActivator.CanSatisfyDependency(CreationContext context, DependencyModel dependency)</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubWebUserControlComponentActivator.Create(Castle.MicroKernel.Context.CreationContext,Castle.MicroKernel.Burden)">
            <summary>Sets the stub of AbstractComponentActivator.Create(CreationContext context, Burden burden)</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubWebUserControlComponentActivator.CreateConstructorArguments(Castle.Core.ConstructorCandidate,Castle.MicroKernel.Context.CreationContext)">
            <summary>Sets the stub of DefaultComponentActivator.CreateConstructorArguments(ConstructorCandidate constructor, CreationContext context)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubWebUserControlComponentActivator.CreateConstructorArgumentsConstructorCandidateCreationContext">
            <summary>Sets the stub of DefaultComponentActivator.CreateConstructorArguments(ConstructorCandidate constructor, CreationContext context)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubWebUserControlComponentActivator.CreateCreationContextBurden">
            <summary>Sets the stub of AbstractComponentActivator.Create(CreationContext context, Burden burden)</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubWebUserControlComponentActivator.CreateInstance(Castle.MicroKernel.Context.CreationContext,Castle.Core.ConstructorCandidate,System.Object[])">
            <summary>Sets the stub of WebUserControlComponentActivator.CreateInstance(CreationContext context, ConstructorCandidate constructor, Object[] arguments)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubWebUserControlComponentActivator.CreateInstanceCreationContextConstructorCandidateObjectArray">
            <summary>Sets the stub of WebUserControlComponentActivator.CreateInstance(CreationContext context, ConstructorCandidate constructor, Object[] arguments)</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubWebUserControlComponentActivator.Destroy(System.Object)">
            <summary>Sets the stub of AbstractComponentActivator.Destroy(Object instance)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubWebUserControlComponentActivator.DestroyObject">
            <summary>Sets the stub of AbstractComponentActivator.Destroy(Object instance)</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubWebUserControlComponentActivator.InitializeStub">
            <summary>Initializes a new instance of type StubWebUserControlComponentActivator</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubWebUserControlComponentActivator.Instantiate(Castle.MicroKernel.Context.CreationContext)">
            <summary>Sets the stub of DefaultComponentActivator.Instantiate(CreationContext context)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubWebUserControlComponentActivator.InstantiateCreationContext">
            <summary>Sets the stub of DefaultComponentActivator.Instantiate(CreationContext context)</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubWebUserControlComponentActivator.InternalCreate(Castle.MicroKernel.Context.CreationContext)">
            <summary>Sets the stub of DefaultComponentActivator.InternalCreate(CreationContext context)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubWebUserControlComponentActivator.InternalCreateCreationContext">
            <summary>Sets the stub of DefaultComponentActivator.InternalCreate(CreationContext context)</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubWebUserControlComponentActivator.InternalDestroy(System.Object)">
            <summary>Sets the stub of DefaultComponentActivator.InternalDestroy(Object instance)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubWebUserControlComponentActivator.InternalDestroyObject">
            <summary>Sets the stub of DefaultComponentActivator.InternalDestroy(Object instance)</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubWebUserControlComponentActivator.SelectEligibleConstructor(Castle.MicroKernel.Context.CreationContext)">
            <summary>Sets the stub of DefaultComponentActivator.SelectEligibleConstructor(CreationContext context)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubWebUserControlComponentActivator.SelectEligibleConstructorCreationContext">
            <summary>Sets the stub of DefaultComponentActivator.SelectEligibleConstructor(CreationContext context)</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubWebUserControlComponentActivator.SetUpProperties(System.Object,Castle.MicroKernel.Context.CreationContext)">
            <summary>Sets the stub of DefaultComponentActivator.SetUpProperties(Object instance, CreationContext context)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubWebUserControlComponentActivator.SetUpPropertiesObjectCreationContext">
            <summary>Sets the stub of DefaultComponentActivator.SetUpProperties(Object instance, CreationContext context)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.StubWebUserControlComponentActivator.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.StubWebUserControlComponentActivator.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.StubWebUserControlComponentActivator.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.Context.Fakes.ShimCreationContext">
            <summary>Shim type of Castle.MicroKernel.Context.CreationContext</summary>
        </member>
        <member name="M:Castle.MicroKernel.Context.Fakes.ShimCreationContext.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Context.Fakes.ShimCreationContext.#ctor(Castle.MicroKernel.Context.CreationContext)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Context.Fakes.ShimCreationContext.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Context.Fakes.ShimCreationContext.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Context.Fakes.ShimCreationContext.Bind(Castle.MicroKernel.ISubDependencyResolver)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Context.Fakes.ShimCreationContext.AdditionalArgumentsGet">
            <summary>Sets the shim of CreationContext.get_AdditionalArguments()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Context.Fakes.ShimCreationContext.AttachExistingBurdenBurden">
            <summary>Sets the shim of CreationContext.AttachExistingBurden(Burden burden)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Context.Fakes.ShimCreationContext.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Context.Fakes.ShimCreationContext.BuildCycleMessageForIHandlerStringBuilder">
            <summary>Sets the shim of CreationContext.BuildCycleMessageFor(IHandler duplicateHandler, StringBuilder message)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Context.Fakes.ShimCreationContext.CanConvertParameterType">
            <summary>Sets the shim of CreationContext.CanConvertParameter(Type type)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Context.Fakes.ShimCreationContext.CanResolveByKeyDependencyModel">
            <summary>Sets the shim of CreationContext.CanResolveByKey(DependencyModel dependency)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Context.Fakes.ShimCreationContext.CanResolveByTypeDependencyModel">
            <summary>Sets the shim of CreationContext.CanResolveByType(DependencyModel dependency)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Context.Fakes.ShimCreationContext.CanResolveCreationContextISubDependencyResolverComponentModelDependencyModel">
            <summary>Sets the shim of CreationContext.CanResolve(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model, DependencyModel dependency)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Context.Fakes.ShimCreationContext.CanResolveDependencyModelObject">
            <summary>Sets the shim of CreationContext.CanResolve(DependencyModel dependency, Object inlineArgument)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Context.Fakes.ShimCreationContext.Constructor">
            <summary>Sets the shim of CreationContext.CreationContext()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Context.Fakes.ShimCreationContext.ConstructorIHandlerIReleasePolicyTypeIDictionaryITypeConverterCreationContext">
            <summary>Sets the shim of CreationContext.CreationContext(IHandler handler, IReleasePolicy releasePolicy, Type requestedType, IDictionary additionalArguments, ITypeConverter converter, CreationContext parent)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Context.Fakes.ShimCreationContext.ConstructorTypeCreationContextBoolean">
            <summary>Sets the shim of CreationContext.CreationContext(Type requestedType, CreationContext parentContext, Boolean propagateInlineDependencies)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Context.Fakes.ShimCreationContext.CreateBurdenIComponentActivatorBoolean">
            <summary>Sets the shim of CreationContext.CreateBurden(IComponentActivator componentActivator, Boolean trackedExternally)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Context.Fakes.ShimCreationContext.CreateEmpty">
            <summary>Sets the shim of CreationContext.CreateEmpty()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Context.Fakes.ShimCreationContext.EnsureAdditionalArgumentsWriteableIDictionary">
            <summary>Sets the shim of CreationContext.EnsureAdditionalArgumentsWriteable(IDictionary dictionary)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Context.Fakes.ShimCreationContext.EnterResolutionContextIHandlerBoolean">
            <summary>Sets the shim of CreationContext.EnterResolutionContext(IHandler handlerBeingResolved, Boolean requiresDecommission)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Context.Fakes.ShimCreationContext.EnterResolutionContextIHandlerBooleanBoolean">
            <summary>Sets the shim of CreationContext.EnterResolutionContext(IHandler handlerBeingResolved, Boolean trackContext, Boolean requiresDecommission)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Context.Fakes.ShimCreationContext.ExitResolutionContextBurdenBoolean">
            <summary>Sets the shim of CreationContext.ExitResolutionContext(Burden burden, Boolean trackContext)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Context.Fakes.ShimCreationContext.ExtractGenericArgumentsType">
            <summary>Sets the shim of CreationContext.ExtractGenericArguments(Type typeToExtractGenericArguments)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Context.Fakes.ShimCreationContext.ForDependencyInspectionIHandler">
            <summary>Sets the shim of CreationContext.ForDependencyInspection(IHandler handler)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Context.Fakes.ShimCreationContext.GenericArgumentsGet">
            <summary>Sets the shim of CreationContext.get_GenericArguments()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Context.Fakes.ShimCreationContext.GetContextualPropertyObject">
            <summary>Sets the shim of CreationContext.GetContextualProperty(Object key)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Context.Fakes.ShimCreationContext.HandlerGet">
            <summary>Sets the shim of CreationContext.get_Handler()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Context.Fakes.ShimCreationContext.HasAdditionalArgumentsGet">
            <summary>Sets the shim of CreationContext.get_HasAdditionalArguments()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Context.Fakes.ShimCreationContext.IsInResolutionContextIHandler">
            <summary>Sets the shim of CreationContext.IsInResolutionContext(IHandler handler)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Context.Fakes.ShimCreationContext.IsResolvingGet">
            <summary>Sets the shim of CreationContext.get_IsResolving()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Context.Fakes.ShimCreationContext.ReleasePolicyGet">
            <summary>Sets the shim of CreationContext.get_ReleasePolicy()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Context.Fakes.ShimCreationContext.ReleasePolicySetIReleasePolicy">
            <summary>Sets the shim of CreationContext.set_ReleasePolicy(IReleasePolicy value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Context.Fakes.ShimCreationContext.RequestedTypeGet">
            <summary>Sets the shim of CreationContext.get_RequestedType()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Context.Fakes.ShimCreationContext.ResolveCreationContextISubDependencyResolverComponentModelDependencyModel">
            <summary>Sets the shim of CreationContext.Resolve(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model, DependencyModel dependency)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Context.Fakes.ShimCreationContext.ResolveDependencyModelObject">
            <summary>Sets the shim of CreationContext.Resolve(DependencyModel dependency, Object inlineArgument)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Context.Fakes.ShimCreationContext.SelectScopeRootFuncOfIHandlerArrayIHandler">
            <summary>Sets the shim of CreationContext.SelectScopeRoot(Func`2&lt;IHandler[],IHandler&gt; scopeRootSelector)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Context.Fakes.ShimCreationContext.SetContextualPropertyObjectObject">
            <summary>Sets the shim of CreationContext.SetContextualProperty(Object key, Object value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Context.Fakes.ShimCreationContext._SelectScopeRootb__0CreationContextResolutionContext">
            <summary>Sets the shim of CreationContext.&lt;SelectScopeRoot&gt;b__0(ResolutionContext c)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Context.Fakes.ShimCreationContext.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.Context.Fakes.ShimCreationContext.AllInstances.AdditionalArgumentsGet">
            <summary>Sets the shim of CreationContext.get_AdditionalArguments()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Context.Fakes.ShimCreationContext.AllInstances.AttachExistingBurdenBurden">
            <summary>Sets the shim of CreationContext.AttachExistingBurden(Burden burden)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Context.Fakes.ShimCreationContext.AllInstances.BuildCycleMessageForIHandlerStringBuilder">
            <summary>Sets the shim of CreationContext.BuildCycleMessageFor(IHandler duplicateHandler, StringBuilder message)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Context.Fakes.ShimCreationContext.AllInstances.CanConvertParameterType">
            <summary>Sets the shim of CreationContext.CanConvertParameter(Type type)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Context.Fakes.ShimCreationContext.AllInstances.CanResolveByKeyDependencyModel">
            <summary>Sets the shim of CreationContext.CanResolveByKey(DependencyModel dependency)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Context.Fakes.ShimCreationContext.AllInstances.CanResolveByTypeDependencyModel">
            <summary>Sets the shim of CreationContext.CanResolveByType(DependencyModel dependency)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Context.Fakes.ShimCreationContext.AllInstances.CanResolveCreationContextISubDependencyResolverComponentModelDependencyModel">
            <summary>Sets the shim of CreationContext.CanResolve(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model, DependencyModel dependency)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Context.Fakes.ShimCreationContext.AllInstances.CanResolveDependencyModelObject">
            <summary>Sets the shim of CreationContext.CanResolve(DependencyModel dependency, Object inlineArgument)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Context.Fakes.ShimCreationContext.AllInstances.CreateBurdenIComponentActivatorBoolean">
            <summary>Sets the shim of CreationContext.CreateBurden(IComponentActivator componentActivator, Boolean trackedExternally)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Context.Fakes.ShimCreationContext.AllInstances.EnsureAdditionalArgumentsWriteableIDictionary">
            <summary>Sets the shim of CreationContext.EnsureAdditionalArgumentsWriteable(IDictionary dictionary)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Context.Fakes.ShimCreationContext.AllInstances.EnterResolutionContextIHandlerBoolean">
            <summary>Sets the shim of CreationContext.EnterResolutionContext(IHandler handlerBeingResolved, Boolean requiresDecommission)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Context.Fakes.ShimCreationContext.AllInstances.EnterResolutionContextIHandlerBooleanBoolean">
            <summary>Sets the shim of CreationContext.EnterResolutionContext(IHandler handlerBeingResolved, Boolean trackContext, Boolean requiresDecommission)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Context.Fakes.ShimCreationContext.AllInstances.ExitResolutionContextBurdenBoolean">
            <summary>Sets the shim of CreationContext.ExitResolutionContext(Burden burden, Boolean trackContext)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Context.Fakes.ShimCreationContext.AllInstances.GenericArgumentsGet">
            <summary>Sets the shim of CreationContext.get_GenericArguments()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Context.Fakes.ShimCreationContext.AllInstances.GetContextualPropertyObject">
            <summary>Sets the shim of CreationContext.GetContextualProperty(Object key)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Context.Fakes.ShimCreationContext.AllInstances.HandlerGet">
            <summary>Sets the shim of CreationContext.get_Handler()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Context.Fakes.ShimCreationContext.AllInstances.HasAdditionalArgumentsGet">
            <summary>Sets the shim of CreationContext.get_HasAdditionalArguments()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Context.Fakes.ShimCreationContext.AllInstances.IsInResolutionContextIHandler">
            <summary>Sets the shim of CreationContext.IsInResolutionContext(IHandler handler)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Context.Fakes.ShimCreationContext.AllInstances.IsResolvingGet">
            <summary>Sets the shim of CreationContext.get_IsResolving()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Context.Fakes.ShimCreationContext.AllInstances.ReleasePolicyGet">
            <summary>Sets the shim of CreationContext.get_ReleasePolicy()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Context.Fakes.ShimCreationContext.AllInstances.ReleasePolicySetIReleasePolicy">
            <summary>Sets the shim of CreationContext.set_ReleasePolicy(IReleasePolicy value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Context.Fakes.ShimCreationContext.AllInstances.RequestedTypeGet">
            <summary>Sets the shim of CreationContext.get_RequestedType()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Context.Fakes.ShimCreationContext.AllInstances.ResolveCreationContextISubDependencyResolverComponentModelDependencyModel">
            <summary>Sets the shim of CreationContext.Resolve(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model, DependencyModel dependency)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Context.Fakes.ShimCreationContext.AllInstances.ResolveDependencyModelObject">
            <summary>Sets the shim of CreationContext.Resolve(DependencyModel dependency, Object inlineArgument)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Context.Fakes.ShimCreationContext.AllInstances.SelectScopeRootFuncOfIHandlerArrayIHandler">
            <summary>Sets the shim of CreationContext.SelectScopeRoot(Func`2&lt;IHandler[],IHandler&gt; scopeRootSelector)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Context.Fakes.ShimCreationContext.AllInstances.SetContextualPropertyObjectObject">
            <summary>Sets the shim of CreationContext.SetContextualProperty(Object key, Object value)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Context.Fakes.ShimCreationContext.ShimResolutionContext">
            <summary>Shim type of Castle.MicroKernel.Context.CreationContext+ResolutionContext</summary>
        </member>
        <member name="M:Castle.MicroKernel.Context.Fakes.ShimCreationContext.ShimResolutionContext.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Context.Fakes.ShimCreationContext.ShimResolutionContext.#ctor(Castle.MicroKernel.Context.CreationContext.ResolutionContext)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Context.Fakes.ShimCreationContext.ShimResolutionContext.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Context.Fakes.ShimCreationContext.ShimResolutionContext.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Context.Fakes.ShimCreationContext.ShimResolutionContext.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Context.Fakes.ShimCreationContext.ShimResolutionContext.AttachBurdenBurden">
            <summary>Sets the shim of ResolutionContext.AttachBurden(Burden burden)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Context.Fakes.ShimCreationContext.ShimResolutionContext.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Context.Fakes.ShimCreationContext.ShimResolutionContext.BurdenGet">
            <summary>Sets the shim of ResolutionContext.get_Burden()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Context.Fakes.ShimCreationContext.ShimResolutionContext.ConstructorCreationContextIHandlerBooleanBoolean">
            <summary>Sets the shim of ResolutionContext.ResolutionContext(CreationContext context, IHandler handler, Boolean requiresDecommission, Boolean trackContext)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Context.Fakes.ShimCreationContext.ShimResolutionContext.ContextGet">
            <summary>Sets the shim of ResolutionContext.get_Context()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Context.Fakes.ShimCreationContext.ShimResolutionContext.CreateBurdenBoolean">
            <summary>Sets the shim of ResolutionContext.CreateBurden(Boolean trackedExternally)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Context.Fakes.ShimCreationContext.ShimResolutionContext.Dispose">
            <summary>Sets the shim of ResolutionContext.Dispose()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Context.Fakes.ShimCreationContext.ShimResolutionContext.GetContextualPropertyObject">
            <summary>Sets the shim of ResolutionContext.GetContextualProperty(Object key)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Context.Fakes.ShimCreationContext.ShimResolutionContext.HandlerGet">
            <summary>Sets the shim of ResolutionContext.get_Handler()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Context.Fakes.ShimCreationContext.ShimResolutionContext.SetContextualPropertyObjectObject">
            <summary>Sets the shim of ResolutionContext.SetContextualProperty(Object key, Object value)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Context.Fakes.ShimCreationContext.ShimResolutionContext.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.Context.Fakes.ShimCreationContext.ShimResolutionContext.AllInstances.AttachBurdenBurden">
            <summary>Sets the shim of ResolutionContext.AttachBurden(Burden burden)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Context.Fakes.ShimCreationContext.ShimResolutionContext.AllInstances.BurdenGet">
            <summary>Sets the shim of ResolutionContext.get_Burden()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Context.Fakes.ShimCreationContext.ShimResolutionContext.AllInstances.ContextGet">
            <summary>Sets the shim of ResolutionContext.get_Context()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Context.Fakes.ShimCreationContext.ShimResolutionContext.AllInstances.CreateBurdenBoolean">
            <summary>Sets the shim of ResolutionContext.CreateBurden(Boolean trackedExternally)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Context.Fakes.ShimCreationContext.ShimResolutionContext.AllInstances.Dispose">
            <summary>Sets the shim of ResolutionContext.Dispose()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Context.Fakes.ShimCreationContext.ShimResolutionContext.AllInstances.GetContextualPropertyObject">
            <summary>Sets the shim of ResolutionContext.GetContextualProperty(Object key)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Context.Fakes.ShimCreationContext.ShimResolutionContext.AllInstances.HandlerGet">
            <summary>Sets the shim of ResolutionContext.get_Handler()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Context.Fakes.ShimCreationContext.ShimResolutionContext.AllInstances.SetContextualPropertyObjectObject">
            <summary>Sets the shim of ResolutionContext.SetContextualProperty(Object key, Object value)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Context.Fakes.StubCreationContext">
            <summary>Stub type of Castle.MicroKernel.Context.CreationContext</summary>
        </member>
        <member name="M:Castle.MicroKernel.Context.Fakes.StubCreationContext.#ctor(System.Type,Castle.MicroKernel.Context.CreationContext,System.Boolean)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Context.Fakes.StubCreationContext.#ctor(Castle.MicroKernel.IHandler,Castle.MicroKernel.IReleasePolicy,System.Type,System.Collections.IDictionary,Castle.MicroKernel.SubSystems.Conversion.ITypeConverter,Castle.MicroKernel.Context.CreationContext)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Context.Fakes.StubCreationContext.CanResolve(Castle.MicroKernel.Context.CreationContext,Castle.MicroKernel.ISubDependencyResolver,Castle.Core.ComponentModel,Castle.Core.DependencyModel)">
            <summary>Sets the stub of CreationContext.CanResolve(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model, DependencyModel dependency)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Context.Fakes.StubCreationContext.CanResolveCreationContextISubDependencyResolverComponentModelDependencyModel">
            <summary>Sets the stub of CreationContext.CanResolve(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model, DependencyModel dependency)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Context.Fakes.StubCreationContext.InitializeStub">
            <summary>Initializes a new instance of type StubCreationContext</summary>
        </member>
        <member name="F:Castle.MicroKernel.Context.Fakes.StubCreationContext.IsResolvingGet">
            <summary>Sets the stub of CreationContext.get_IsResolving()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Context.Fakes.StubCreationContext.Resolve(Castle.MicroKernel.Context.CreationContext,Castle.MicroKernel.ISubDependencyResolver,Castle.Core.ComponentModel,Castle.Core.DependencyModel)">
            <summary>Sets the stub of CreationContext.Resolve(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model, DependencyModel dependency)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Context.Fakes.StubCreationContext.ResolveCreationContextISubDependencyResolverComponentModelDependencyModel">
            <summary>Sets the stub of CreationContext.Resolve(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model, DependencyModel dependency)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Context.Fakes.StubCreationContext.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.Context.Fakes.StubCreationContext.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Context.Fakes.StubCreationContext.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Context.Fakes.StubCreationContext.IsResolving">
            <summary>Sets the stub of CreationContext.get_IsResolving()</summary>
        </member>
        <member name="T:Castle.MicroKernel.Context.Fakes.StubIArgumentsComparer">
            <summary>Stub type of Castle.MicroKernel.Context.IArgumentsComparer</summary>
        </member>
        <member name="M:Castle.MicroKernel.Context.Fakes.StubIArgumentsComparer.#ctor">
            <summary>Initializes a new instance of type StubIArgumentsComparer</summary>
        </member>
        <member name="M:Castle.MicroKernel.Context.Fakes.StubIArgumentsComparer.cw::Castle#MicroKernel#Context#IArgumentsComparer#RunEqualityComparison(System.Object,System.Object,System.Boolean@)">
            <summary>Sets the stub of IArgumentsComparer.RunEqualityComparison(Object x, Object y, Boolean&amp; areEqual)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Context.Fakes.StubIArgumentsComparer.cw::Castle#MicroKernel#Context#IArgumentsComparer#RunHasCodeCalculation(System.Object,System.Int32@)">
            <summary>Sets the stub of IArgumentsComparer.RunHasCodeCalculation(Object o, Int32&amp; hashCode)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Context.Fakes.StubIArgumentsComparer.RunEqualityComparisonObjectObjectBooleanOut">
            <summary>Sets the stub of IArgumentsComparer.RunEqualityComparison(Object x, Object y, Boolean&amp; areEqual)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Context.Fakes.StubIArgumentsComparer.RunHasCodeCalculationObjectInt32Out">
            <summary>Sets the stub of IArgumentsComparer.RunHasCodeCalculation(Object o, Int32&amp; hashCode)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Facilities.Fakes.ShimAbstractFacility">
            <summary>Shim type of Castle.MicroKernel.Facilities.AbstractFacility</summary>
        </member>
        <member name="M:Castle.MicroKernel.Facilities.Fakes.ShimAbstractFacility.#ctor(Castle.MicroKernel.Facilities.AbstractFacility)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Facilities.Fakes.ShimAbstractFacility.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Facilities.Fakes.ShimAbstractFacility.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Facilities.Fakes.ShimAbstractFacility.Bind(Castle.MicroKernel.IFacility)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.MicroKernel.Facilities.Fakes.ShimAbstractFacility.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Facilities.Fakes.ShimAbstractFacility.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Facilities.Fakes.ShimAbstractFacility.CastleMicroKernelIFacilityInitIKernelIConfiguration">
            <summary>Sets the shim of AbstractFacility.Castle.MicroKernel.IFacility.Init(IKernel kernel, IConfiguration facilityConfig)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Facilities.Fakes.ShimAbstractFacility.CastleMicroKernelIFacilityTerminate">
            <summary>Sets the shim of AbstractFacility.Castle.MicroKernel.IFacility.Terminate()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Facilities.Fakes.ShimAbstractFacility.Constructor">
            <summary>Sets the shim of AbstractFacility.AbstractFacility()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Facilities.Fakes.ShimAbstractFacility.Dispose">
            <summary>Sets the shim of AbstractFacility.Dispose()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Facilities.Fakes.ShimAbstractFacility.FacilityConfigGet">
            <summary>Sets the shim of AbstractFacility.get_FacilityConfig()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Facilities.Fakes.ShimAbstractFacility.KernelGet">
            <summary>Sets the shim of AbstractFacility.get_Kernel()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Facilities.Fakes.ShimAbstractFacility.SystemIDisposableDispose">
            <summary>Sets the shim of AbstractFacility.System.IDisposable.Dispose()</summary>
        </member>
        <member name="T:Castle.MicroKernel.Facilities.Fakes.ShimAbstractFacility.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.Facilities.Fakes.ShimAbstractFacility.AllInstances.CastleMicroKernelIFacilityInitIKernelIConfiguration">
            <summary>Sets the shim of AbstractFacility.Castle.MicroKernel.IFacility.Init(IKernel kernel, IConfiguration facilityConfig)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Facilities.Fakes.ShimAbstractFacility.AllInstances.CastleMicroKernelIFacilityTerminate">
            <summary>Sets the shim of AbstractFacility.Castle.MicroKernel.IFacility.Terminate()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Facilities.Fakes.ShimAbstractFacility.AllInstances.Dispose">
            <summary>Sets the shim of AbstractFacility.Dispose()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Facilities.Fakes.ShimAbstractFacility.AllInstances.FacilityConfigGet">
            <summary>Sets the shim of AbstractFacility.get_FacilityConfig()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Facilities.Fakes.ShimAbstractFacility.AllInstances.KernelGet">
            <summary>Sets the shim of AbstractFacility.get_Kernel()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Facilities.Fakes.ShimAbstractFacility.AllInstances.SystemIDisposableDispose">
            <summary>Sets the shim of AbstractFacility.System.IDisposable.Dispose()</summary>
        </member>
        <member name="T:Castle.MicroKernel.Facilities.Fakes.ShimFacilityException">
            <summary>Shim type of Castle.MicroKernel.Facilities.FacilityException</summary>
        </member>
        <member name="M:Castle.MicroKernel.Facilities.Fakes.ShimFacilityException.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Facilities.Fakes.ShimFacilityException.#ctor(Castle.MicroKernel.Facilities.FacilityException)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Facilities.Fakes.ShimFacilityException.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Facilities.Fakes.ShimFacilityException.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Facilities.Fakes.ShimFacilityException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Facilities.Fakes.ShimFacilityException.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Facilities.Fakes.ShimFacilityException.ConstructorSerializationInfoStreamingContext">
            <summary>Sets the shim of FacilityException.FacilityException(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Facilities.Fakes.ShimFacilityException.ConstructorString">
            <summary>Sets the shim of FacilityException.FacilityException(String message)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Facilities.Fakes.ShimFacilityException.ConstructorStringException">
            <summary>Sets the shim of FacilityException.FacilityException(String message, Exception innerException)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Facilities.Fakes.ShimFacilityException.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="T:Castle.MicroKernel.Facilities.Fakes.StubAbstractFacility">
            <summary>Stub type of Castle.MicroKernel.Facilities.AbstractFacility</summary>
        </member>
        <member name="M:Castle.MicroKernel.Facilities.Fakes.StubAbstractFacility.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Facilities.Fakes.StubAbstractFacility.Dispose">
            <summary>Sets the stub of AbstractFacility.Dispose()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Facilities.Fakes.StubAbstractFacility.Dispose01">
            <summary>Sets the stub of AbstractFacility.Dispose()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Facilities.Fakes.StubAbstractFacility.Init">
            <summary>Sets the stub of AbstractFacility.Init()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Facilities.Fakes.StubAbstractFacility.Init01">
            <summary>Sets the stub of AbstractFacility.Init()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Facilities.Fakes.StubAbstractFacility.InitializeStub">
            <summary>Initializes a new instance of type StubAbstractFacility</summary>
        </member>
        <member name="P:Castle.MicroKernel.Facilities.Fakes.StubAbstractFacility.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.Facilities.Fakes.StubAbstractFacility.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Facilities.Fakes.StubAbstractFacility.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.Facilities.Fakes.StubFacilityException">
            <summary>Stub type of Castle.MicroKernel.Facilities.FacilityException</summary>
        </member>
        <member name="M:Castle.MicroKernel.Facilities.Fakes.StubFacilityException.#ctor(System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Facilities.Fakes.StubFacilityException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Facilities.Fakes.StubFacilityException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Facilities.Fakes.StubFacilityException.AttachBackingFieldToHelpLink">
            <summary>Attaches delegates to emulate StubFacilityException.HelpLink as a property with a backing field.</summary>
        </member>
        <member name="M:Castle.MicroKernel.Facilities.Fakes.StubFacilityException.AttachBackingFieldToSource">
            <summary>Attaches delegates to emulate StubFacilityException.Source as a property with a backing field.</summary>
        </member>
        <member name="F:Castle.MicroKernel.Facilities.Fakes.StubFacilityException.DataGet">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Facilities.Fakes.StubFacilityException.GetBaseException">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Facilities.Fakes.StubFacilityException.GetBaseException01">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Facilities.Fakes.StubFacilityException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Facilities.Fakes.StubFacilityException.GetObjectDataSerializationInfoStreamingContext">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Facilities.Fakes.StubFacilityException.HelpLinkGet">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Facilities.Fakes.StubFacilityException.HelpLinkSetString">
            <summary>Sets the stub of Exception.set_HelpLink(String value)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Facilities.Fakes.StubFacilityException.InitializeStub">
            <summary>Initializes a new instance of type StubFacilityException</summary>
        </member>
        <member name="F:Castle.MicroKernel.Facilities.Fakes.StubFacilityException.MessageGet">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Facilities.Fakes.StubFacilityException.SourceGet">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Facilities.Fakes.StubFacilityException.SourceSetString">
            <summary>Sets the stub of Exception.set_Source(String value)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Facilities.Fakes.StubFacilityException.StackTraceGet">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Facilities.Fakes.StubFacilityException.ToString">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Facilities.Fakes.StubFacilityException.ToString01">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Facilities.Fakes.StubFacilityException.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.Facilities.Fakes.StubFacilityException.Data">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Facilities.Fakes.StubFacilityException.HelpLink">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Facilities.Fakes.StubFacilityException.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Facilities.Fakes.StubFacilityException.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Facilities.Fakes.StubFacilityException.Message">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Facilities.Fakes.StubFacilityException.Source">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Facilities.Fakes.StubFacilityException.StackTrace">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="T:Castle.MicroKernel.Fakes.ShimAbstractSubSystem">
            <summary>Shim type of Castle.MicroKernel.AbstractSubSystem</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimAbstractSubSystem.#ctor(Castle.MicroKernel.AbstractSubSystem)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimAbstractSubSystem.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimAbstractSubSystem.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimAbstractSubSystem.Bind(Castle.MicroKernel.ISubSystem)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimAbstractSubSystem.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimAbstractSubSystem.Constructor">
            <summary>Sets the shim of AbstractSubSystem.AbstractSubSystem()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimAbstractSubSystem.InitIKernelInternal">
            <summary>Sets the shim of AbstractSubSystem.Init(IKernelInternal kernel)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimAbstractSubSystem.InitializeLifetimeService">
            <summary>Sets the shim of AbstractSubSystem.InitializeLifetimeService()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimAbstractSubSystem.KernelGet">
            <summary>Sets the shim of AbstractSubSystem.get_Kernel()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimAbstractSubSystem.Terminate">
            <summary>Sets the shim of AbstractSubSystem.Terminate()</summary>
        </member>
        <member name="T:Castle.MicroKernel.Fakes.ShimAbstractSubSystem.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimAbstractSubSystem.AllInstances.InitIKernelInternal">
            <summary>Sets the shim of AbstractSubSystem.Init(IKernelInternal kernel)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimAbstractSubSystem.AllInstances.InitializeLifetimeService">
            <summary>Sets the shim of AbstractSubSystem.InitializeLifetimeService()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimAbstractSubSystem.AllInstances.KernelGet">
            <summary>Sets the shim of AbstractSubSystem.get_Kernel()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimAbstractSubSystem.AllInstances.Terminate">
            <summary>Sets the shim of AbstractSubSystem.Terminate()</summary>
        </member>
        <member name="T:Castle.MicroKernel.Fakes.ShimArguments">
            <summary>Shim type of Castle.MicroKernel.Arguments</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimArguments.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimArguments.#ctor(Castle.MicroKernel.Arguments)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimArguments.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimArguments.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimArguments.Bind(System.ICloneable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimArguments.Bind(System.Collections.ICollection)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimArguments.Bind(System.Collections.IDictionary)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimArguments.Bind(System.Collections.IEnumerable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimArguments.AddObjectObject">
            <summary>Sets the shim of Arguments.Add(Object key, Object value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimArguments.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimArguments.Clear">
            <summary>Sets the shim of Arguments.Clear()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimArguments.ConstructorIArgumentsComparerArray">
            <summary>Sets the shim of Arguments.Arguments(IArgumentsComparer[] customComparers)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimArguments.ConstructorIDictionaryIArgumentsComparerArray">
            <summary>Sets the shim of Arguments.Arguments(IDictionary values, IArgumentsComparer[] customComparers)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimArguments.ConstructorObjectArrayIArgumentsComparerArray">
            <summary>Sets the shim of Arguments.Arguments(Object[] typedArguments, IArgumentsComparer[] customComparers)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimArguments.ConstructorObjectIArgumentsComparerArray">
            <summary>Sets the shim of Arguments.Arguments(Object namedArgumentsAsAnonymousType, IArgumentsComparer[] customComparers)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimArguments.ContainsObject">
            <summary>Sets the shim of Arguments.Contains(Object key)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimArguments.CountGet">
            <summary>Sets the shim of Arguments.get_Count()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimArguments.CreateDeepCopy">
            <summary>Sets the shim of Arguments.CreateDeepCopy()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimArguments.GetEnumerator">
            <summary>Sets the shim of Arguments.GetEnumerator()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimArguments.IsFixedSizeSystemCollectionsIDictionaryget">
            <summary>Sets the shim of Arguments.System.Collections.IDictionary.get_IsFixedSize()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimArguments.IsReadOnlySystemCollectionsIDictionaryget">
            <summary>Sets the shim of Arguments.System.Collections.IDictionary.get_IsReadOnly()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimArguments.IsSynchronizedSystemCollectionsICollectionget">
            <summary>Sets the shim of Arguments.System.Collections.ICollection.get_IsSynchronized()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimArguments.ItemGetObject">
            <summary>Sets the shim of Arguments.get_Item(Object key)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimArguments.ItemSetObjectObject">
            <summary>Sets the shim of Arguments.set_Item(Object key, Object value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimArguments.KeysGet">
            <summary>Sets the shim of Arguments.get_Keys()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimArguments.RemoveObject">
            <summary>Sets the shim of Arguments.Remove(Object key)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimArguments.SyncRootSystemCollectionsICollectionget">
            <summary>Sets the shim of Arguments.System.Collections.ICollection.get_SyncRoot()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimArguments.SystemCollectionsICollectionCopyToArrayInt32">
            <summary>Sets the shim of Arguments.System.Collections.ICollection.CopyTo(Array array, Int32 index)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimArguments.SystemCollectionsIEnumerableGetEnumerator">
            <summary>Sets the shim of Arguments.System.Collections.IEnumerable.GetEnumerator()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimArguments.SystemICloneableClone">
            <summary>Sets the shim of Arguments.System.ICloneable.Clone()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimArguments.ValuesGet">
            <summary>Sets the shim of Arguments.get_Values()</summary>
        </member>
        <member name="T:Castle.MicroKernel.Fakes.ShimArguments.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimArguments.AllInstances.AddObjectObject">
            <summary>Sets the shim of Arguments.Add(Object key, Object value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimArguments.AllInstances.Clear">
            <summary>Sets the shim of Arguments.Clear()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimArguments.AllInstances.ContainsObject">
            <summary>Sets the shim of Arguments.Contains(Object key)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimArguments.AllInstances.CountGet">
            <summary>Sets the shim of Arguments.get_Count()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimArguments.AllInstances.CreateDeepCopy">
            <summary>Sets the shim of Arguments.CreateDeepCopy()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimArguments.AllInstances.GetEnumerator">
            <summary>Sets the shim of Arguments.GetEnumerator()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimArguments.AllInstances.IsFixedSizeSystemCollectionsIDictionaryget">
            <summary>Sets the shim of Arguments.System.Collections.IDictionary.get_IsFixedSize()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimArguments.AllInstances.IsReadOnlySystemCollectionsIDictionaryget">
            <summary>Sets the shim of Arguments.System.Collections.IDictionary.get_IsReadOnly()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimArguments.AllInstances.IsSynchronizedSystemCollectionsICollectionget">
            <summary>Sets the shim of Arguments.System.Collections.ICollection.get_IsSynchronized()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimArguments.AllInstances.ItemGetObject">
            <summary>Sets the shim of Arguments.get_Item(Object key)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimArguments.AllInstances.ItemSetObjectObject">
            <summary>Sets the shim of Arguments.set_Item(Object key, Object value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimArguments.AllInstances.KeysGet">
            <summary>Sets the shim of Arguments.get_Keys()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimArguments.AllInstances.RemoveObject">
            <summary>Sets the shim of Arguments.Remove(Object key)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimArguments.AllInstances.SyncRootSystemCollectionsICollectionget">
            <summary>Sets the shim of Arguments.System.Collections.ICollection.get_SyncRoot()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimArguments.AllInstances.SystemCollectionsICollectionCopyToArrayInt32">
            <summary>Sets the shim of Arguments.System.Collections.ICollection.CopyTo(Array array, Int32 index)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimArguments.AllInstances.SystemCollectionsIEnumerableGetEnumerator">
            <summary>Sets the shim of Arguments.System.Collections.IEnumerable.GetEnumerator()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimArguments.AllInstances.SystemICloneableClone">
            <summary>Sets the shim of Arguments.System.ICloneable.Clone()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimArguments.AllInstances.ValuesGet">
            <summary>Sets the shim of Arguments.get_Values()</summary>
        </member>
        <member name="T:Castle.MicroKernel.Fakes.ShimBurden">
            <summary>Shim type of Castle.MicroKernel.Burden</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimBurden.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimBurden.#ctor(Castle.MicroKernel.Burden)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimBurden.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimBurden.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimBurden.AddChildBurden">
            <summary>Sets the shim of Burden.AddChild(Burden child)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimBurden.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimBurden.ConstructorIHandlerBooleanBoolean">
            <summary>Sets the shim of Burden.Burden(IHandler handler, Boolean requiresDecommission, Boolean trackedExternally)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimBurden.GraphReleasedAddBurdenReleaseDelegate">
            <summary>Sets the shim of Burden.add_GraphReleased(BurdenReleaseDelegate value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimBurden.GraphReleasedRemoveBurdenReleaseDelegate">
            <summary>Sets the shim of Burden.remove_GraphReleased(BurdenReleaseDelegate value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimBurden.HandlerGet">
            <summary>Sets the shim of Burden.get_Handler()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimBurden.InstanceGet">
            <summary>Sets the shim of Burden.get_Instance()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimBurden.InstanceSetObject">
            <summary>Sets the shim of Burden.set_Instance(Object value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimBurden.IsLateBoundIDecommissionConcern">
            <summary>Sets the shim of Burden.IsLateBound(IDecommissionConcern arg)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimBurden.ModelGet">
            <summary>Sets the shim of Burden.get_Model()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimBurden.Release">
            <summary>Sets the shim of Burden.Release()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimBurden.ReleasedAddBurdenReleaseDelegate">
            <summary>Sets the shim of Burden.add_Released(BurdenReleaseDelegate value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimBurden.ReleasedRemoveBurdenReleaseDelegate">
            <summary>Sets the shim of Burden.remove_Released(BurdenReleaseDelegate value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimBurden.ReleasingAddBurdenReleaseDelegate">
            <summary>Sets the shim of Burden.add_Releasing(BurdenReleaseDelegate value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimBurden.ReleasingRemoveBurdenReleaseDelegate">
            <summary>Sets the shim of Burden.remove_Releasing(BurdenReleaseDelegate value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimBurden.RequiresDecommissionGet">
            <summary>Sets the shim of Burden.get_RequiresDecommission()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimBurden.RequiresDecommissionSetBoolean">
            <summary>Sets the shim of Burden.set_RequiresDecommission(Boolean value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimBurden.RequiresPolicyReleaseGet">
            <summary>Sets the shim of Burden.get_RequiresPolicyRelease()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimBurden.SetRootInstanceObject">
            <summary>Sets the shim of Burden.SetRootInstance(Object instance)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimBurden.TrackedExternallyGet">
            <summary>Sets the shim of Burden.get_TrackedExternally()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimBurden.TrackedExternallySetBoolean">
            <summary>Sets the shim of Burden.set_TrackedExternally(Boolean value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimBurden._Releaseb__0Burden">
            <summary>Sets the shim of Burden.&lt;Release&gt;b__0(Burden c)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Fakes.ShimBurden.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimBurden.AllInstances.AddChildBurden">
            <summary>Sets the shim of Burden.AddChild(Burden child)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimBurden.AllInstances.GraphReleasedAddBurdenReleaseDelegate">
            <summary>Sets the shim of Burden.add_GraphReleased(BurdenReleaseDelegate value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimBurden.AllInstances.GraphReleasedRemoveBurdenReleaseDelegate">
            <summary>Sets the shim of Burden.remove_GraphReleased(BurdenReleaseDelegate value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimBurden.AllInstances.HandlerGet">
            <summary>Sets the shim of Burden.get_Handler()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimBurden.AllInstances.InstanceGet">
            <summary>Sets the shim of Burden.get_Instance()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimBurden.AllInstances.InstanceSetObject">
            <summary>Sets the shim of Burden.set_Instance(Object value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimBurden.AllInstances.IsLateBoundIDecommissionConcern">
            <summary>Sets the shim of Burden.IsLateBound(IDecommissionConcern arg)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimBurden.AllInstances.ModelGet">
            <summary>Sets the shim of Burden.get_Model()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimBurden.AllInstances.Release">
            <summary>Sets the shim of Burden.Release()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimBurden.AllInstances.ReleasedAddBurdenReleaseDelegate">
            <summary>Sets the shim of Burden.add_Released(BurdenReleaseDelegate value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimBurden.AllInstances.ReleasedRemoveBurdenReleaseDelegate">
            <summary>Sets the shim of Burden.remove_Released(BurdenReleaseDelegate value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimBurden.AllInstances.ReleasingAddBurdenReleaseDelegate">
            <summary>Sets the shim of Burden.add_Releasing(BurdenReleaseDelegate value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimBurden.AllInstances.ReleasingRemoveBurdenReleaseDelegate">
            <summary>Sets the shim of Burden.remove_Releasing(BurdenReleaseDelegate value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimBurden.AllInstances.RequiresDecommissionGet">
            <summary>Sets the shim of Burden.get_RequiresDecommission()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimBurden.AllInstances.RequiresDecommissionSetBoolean">
            <summary>Sets the shim of Burden.set_RequiresDecommission(Boolean value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimBurden.AllInstances.RequiresPolicyReleaseGet">
            <summary>Sets the shim of Burden.get_RequiresPolicyRelease()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimBurden.AllInstances.SetRootInstanceObject">
            <summary>Sets the shim of Burden.SetRootInstance(Object instance)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimBurden.AllInstances.TrackedExternallyGet">
            <summary>Sets the shim of Burden.get_TrackedExternally()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimBurden.AllInstances.TrackedExternallySetBoolean">
            <summary>Sets the shim of Burden.set_TrackedExternally(Boolean value)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Fakes.ShimCircularDependencyException">
            <summary>Shim type of Castle.MicroKernel.CircularDependencyException</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimCircularDependencyException.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimCircularDependencyException.#ctor(Castle.MicroKernel.CircularDependencyException)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimCircularDependencyException.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimCircularDependencyException.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimCircularDependencyException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimCircularDependencyException.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimCircularDependencyException.ConstructorSerializationInfoStreamingContext">
            <summary>Sets the shim of CircularDependencyException.CircularDependencyException(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimCircularDependencyException.ConstructorString">
            <summary>Sets the shim of CircularDependencyException.CircularDependencyException(String message)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimCircularDependencyException.ConstructorStringComponentModel">
            <summary>Sets the shim of CircularDependencyException.CircularDependencyException(String message, ComponentModel component)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimCircularDependencyException.ConstructorStringException">
            <summary>Sets the shim of CircularDependencyException.CircularDependencyException(String message, Exception innerException)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Fakes.ShimCircularDependencyException.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="T:Castle.MicroKernel.Fakes.ShimComponentNotFoundException">
            <summary>Shim type of Castle.MicroKernel.ComponentNotFoundException</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimComponentNotFoundException.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimComponentNotFoundException.#ctor(Castle.MicroKernel.ComponentNotFoundException)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimComponentNotFoundException.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimComponentNotFoundException.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimComponentNotFoundException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimComponentNotFoundException.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimComponentNotFoundException.BuildMessageStringTypeInt32">
            <summary>Sets the shim of ComponentNotFoundException.BuildMessage(String name, Type service, Int32 countOfHandlersForTheService)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimComponentNotFoundException.ConstructorSerializationInfoStreamingContext">
            <summary>Sets the shim of ComponentNotFoundException.ComponentNotFoundException(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimComponentNotFoundException.ConstructorStringString">
            <summary>Sets the shim of ComponentNotFoundException.ComponentNotFoundException(String name, String message)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimComponentNotFoundException.ConstructorStringTypeInt32">
            <summary>Sets the shim of ComponentNotFoundException.ComponentNotFoundException(String name, Type service, Int32 countOfHandlersForTheService)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimComponentNotFoundException.ConstructorType">
            <summary>Sets the shim of ComponentNotFoundException.ComponentNotFoundException(Type service)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimComponentNotFoundException.ConstructorTypeString">
            <summary>Sets the shim of ComponentNotFoundException.ComponentNotFoundException(Type service, String message)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimComponentNotFoundException.NameGet">
            <summary>Sets the shim of ComponentNotFoundException.get_Name()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimComponentNotFoundException.NameSetString">
            <summary>Sets the shim of ComponentNotFoundException.set_Name(String value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimComponentNotFoundException.ServiceGet">
            <summary>Sets the shim of ComponentNotFoundException.get_Service()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimComponentNotFoundException.ServiceSetType">
            <summary>Sets the shim of ComponentNotFoundException.set_Service(Type value)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Fakes.ShimComponentNotFoundException.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimComponentNotFoundException.AllInstances.NameGet">
            <summary>Sets the shim of ComponentNotFoundException.get_Name()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimComponentNotFoundException.AllInstances.NameSetString">
            <summary>Sets the shim of ComponentNotFoundException.set_Name(String value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimComponentNotFoundException.AllInstances.ServiceGet">
            <summary>Sets the shim of ComponentNotFoundException.get_Service()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimComponentNotFoundException.AllInstances.ServiceSetType">
            <summary>Sets the shim of ComponentNotFoundException.set_Service(Type value)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Fakes.ShimComponentReference`1">
            <summary>Shim type of Castle.MicroKernel.ComponentReference`1</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimComponentReference`1.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimComponentReference`1.#ctor(Castle.MicroKernel.ComponentReference{`0})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimComponentReference`1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimComponentReference`1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimComponentReference`1.Bind(Castle.MicroKernel.IReference{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimComponentReference`1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimComponentReference`1.CastleMicroKernelIReferenceTAttachComponentModel">
            <summary>Sets the shim of ComponentReference`1.Castle.MicroKernel.IReference&lt;T&gt;.Attach(ComponentModel component)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimComponentReference`1.CastleMicroKernelIReferenceTDetachComponentModel">
            <summary>Sets the shim of ComponentReference`1.Castle.MicroKernel.IReference&lt;T&gt;.Detach(ComponentModel component)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimComponentReference`1.ComponentTypeGet">
            <summary>Sets the shim of ComponentReference`1.get_ComponentType()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimComponentReference`1.ConstructorString">
            <summary>Sets the shim of ComponentReference`1.ComponentReference`1(String referencedComponentName)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimComponentReference`1.ConstructorType">
            <summary>Sets the shim of ComponentReference`1.ComponentReference`1(Type componentType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimComponentReference`1.GetHandlerIKernel">
            <summary>Sets the shim of ComponentReference`1.GetHandler(IKernel kernel)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimComponentReference`1.RebuildContextIHandlerCreationContext">
            <summary>Sets the shim of ComponentReference`1.RebuildContext(IHandler handler, CreationContext current)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimComponentReference`1.ResolveIKernelCreationContext">
            <summary>Sets the shim of ComponentReference`1.Resolve(IKernel kernel, CreationContext context)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Fakes.ShimComponentReference`1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimComponentReference`1.AllInstances.CastleMicroKernelIReferenceTAttachComponentModel">
            <summary>Sets the shim of ComponentReference`1.Castle.MicroKernel.IReference&lt;T&gt;.Attach(ComponentModel component)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimComponentReference`1.AllInstances.CastleMicroKernelIReferenceTDetachComponentModel">
            <summary>Sets the shim of ComponentReference`1.Castle.MicroKernel.IReference&lt;T&gt;.Detach(ComponentModel component)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimComponentReference`1.AllInstances.ComponentTypeGet">
            <summary>Sets the shim of ComponentReference`1.get_ComponentType()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimComponentReference`1.AllInstances.GetHandlerIKernel">
            <summary>Sets the shim of ComponentReference`1.GetHandler(IKernel kernel)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimComponentReference`1.AllInstances.RebuildContextIHandlerCreationContext">
            <summary>Sets the shim of ComponentReference`1.RebuildContext(IHandler handler, CreationContext current)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimComponentReference`1.AllInstances.ResolveIKernelCreationContext">
            <summary>Sets the shim of ComponentReference`1.Resolve(IKernel kernel, CreationContext context)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Fakes.ShimComponentRegistrationException">
            <summary>Shim type of Castle.MicroKernel.ComponentRegistrationException</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimComponentRegistrationException.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimComponentRegistrationException.#ctor(Castle.MicroKernel.ComponentRegistrationException)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimComponentRegistrationException.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimComponentRegistrationException.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimComponentRegistrationException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimComponentRegistrationException.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimComponentRegistrationException.ConstructorSerializationInfoStreamingContext">
            <summary>Sets the shim of ComponentRegistrationException.ComponentRegistrationException(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimComponentRegistrationException.ConstructorString">
            <summary>Sets the shim of ComponentRegistrationException.ComponentRegistrationException(String message)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimComponentRegistrationException.ConstructorStringException">
            <summary>Sets the shim of ComponentRegistrationException.ComponentRegistrationException(String message, Exception innerException)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Fakes.ShimComponentRegistrationException.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="T:Castle.MicroKernel.Fakes.ShimComponentResolutionException">
            <summary>Shim type of Castle.MicroKernel.ComponentResolutionException</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimComponentResolutionException.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimComponentResolutionException.#ctor(Castle.MicroKernel.ComponentResolutionException)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimComponentResolutionException.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimComponentResolutionException.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimComponentResolutionException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimComponentResolutionException.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimComponentResolutionException.ComponentGet">
            <summary>Sets the shim of ComponentResolutionException.get_Component()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimComponentResolutionException.ComponentSetComponentModel">
            <summary>Sets the shim of ComponentResolutionException.set_Component(ComponentModel value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimComponentResolutionException.ConstructorComponentModel">
            <summary>Sets the shim of ComponentResolutionException.ComponentResolutionException(ComponentModel component)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimComponentResolutionException.ConstructorSerializationInfoStreamingContext">
            <summary>Sets the shim of ComponentResolutionException.ComponentResolutionException(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimComponentResolutionException.ConstructorString">
            <summary>Sets the shim of ComponentResolutionException.ComponentResolutionException(String message)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimComponentResolutionException.ConstructorStringComponentModel">
            <summary>Sets the shim of ComponentResolutionException.ComponentResolutionException(String message, ComponentModel component)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimComponentResolutionException.ConstructorStringException">
            <summary>Sets the shim of ComponentResolutionException.ComponentResolutionException(String message, Exception innerException)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimComponentResolutionException.ConstructorStringExceptionComponentModel">
            <summary>Sets the shim of ComponentResolutionException.ComponentResolutionException(String message, Exception innerException, ComponentModel component)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Fakes.ShimComponentResolutionException.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimComponentResolutionException.AllInstances.ComponentGet">
            <summary>Sets the shim of ComponentResolutionException.get_Component()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimComponentResolutionException.AllInstances.ComponentSetComponentModel">
            <summary>Sets the shim of ComponentResolutionException.set_Component(ComponentModel value)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Fakes.ShimDefaultKernel">
            <summary>Shim type of Castle.MicroKernel.DefaultKernel</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimDefaultKernel.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimDefaultKernel.#ctor(Castle.MicroKernel.DefaultKernel)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimDefaultKernel.AddComponentInstanceOf1Object``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.Object})">
            <summary>Sets the shim of DefaultKernel.AddComponentInstance(Object instance)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimDefaultKernel.AddComponentInstanceOf1TypeObject``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.Type,System.Object})">
            <summary>Sets the shim of DefaultKernel.AddComponentInstance(Type serviceType, Object instance)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimDefaultKernel.AddComponentOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action)">
            <summary>Sets the shim of DefaultKernel.AddComponent()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimDefaultKernel.AddComponentOf1LifestyleType``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{Castle.Core.LifestyleType})">
            <summary>Sets the shim of DefaultKernel.AddComponent(LifestyleType lifestyle)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimDefaultKernel.AddComponentOf1LifestyleTypeBoolean``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{Castle.Core.LifestyleType,System.Boolean})">
            <summary>Sets the shim of DefaultKernel.AddComponent(LifestyleType lifestyle, Boolean overwriteLifestyle)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimDefaultKernel.AddComponentOf1Type``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.Type})">
            <summary>Sets the shim of DefaultKernel.AddComponent(Type serviceType)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimDefaultKernel.AddComponentOf1TypeLifestyleType``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.Type,Castle.Core.LifestyleType})">
            <summary>Sets the shim of DefaultKernel.AddComponent(Type serviceType, LifestyleType lifestyle)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimDefaultKernel.AddComponentOf1TypeLifestyleTypeBoolean``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.Type,Castle.Core.LifestyleType,System.Boolean})">
            <summary>Sets the shim of DefaultKernel.AddComponent(Type serviceType, LifestyleType lifestyle, Boolean overwriteLifestyle)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimDefaultKernel.AddFacilityOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.IKernel})">
            <summary>Sets the shim of DefaultKernel.AddFacility()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimDefaultKernel.AddFacilityOf1ActionOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Action{``0},Castle.MicroKernel.IKernel})">
            <summary>Sets the shim of DefaultKernel.AddFacility(Action`1&lt;!!0&gt; onCreate)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimDefaultKernel.AddFacilityOf1String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,Castle.MicroKernel.IKernel})">
            <summary>Sets the shim of DefaultKernel.AddFacility(String key)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimDefaultKernel.AddFacilityOf1StringActionOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,System.Action{``0},Castle.MicroKernel.IKernel})">
            <summary>Sets the shim of DefaultKernel.AddFacility(String key, Action`1&lt;!!0&gt; onCreate)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimDefaultKernel.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimDefaultKernel.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimDefaultKernel.Bind(Castle.MicroKernel.IKernel)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimDefaultKernel.Bind(Castle.MicroKernel.IKernelEvents)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimDefaultKernel.Bind(Castle.MicroKernel.IKernelInternal)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimDefaultKernel.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimDefaultKernel.ResolveAllOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0[]})">
            <summary>Sets the shim of DefaultKernel.ResolveAll()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimDefaultKernel.ResolveAllOf1IDictionary``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.IDictionary,``0[]})">
            <summary>Sets the shim of DefaultKernel.ResolveAll(IDictionary arguments)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimDefaultKernel.ResolveAllOf1Object``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Object,``0[]})">
            <summary>Sets the shim of DefaultKernel.ResolveAll(Object argumentsAsAnonymousType)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimDefaultKernel.ResolveOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0})">
            <summary>Sets the shim of DefaultKernel.Resolve()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimDefaultKernel.ResolveOf1IDictionary``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.IDictionary,``0})">
            <summary>Sets the shim of DefaultKernel.Resolve(IDictionary arguments)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimDefaultKernel.ResolveOf1Object``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Object,``0})">
            <summary>Sets the shim of DefaultKernel.Resolve(Object argumentsAsAnonymousType)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimDefaultKernel.ResolveOf1String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,``0})">
            <summary>Sets the shim of DefaultKernel.Resolve(String key)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimDefaultKernel.ResolveOf1StringIDictionary``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,System.Collections.IDictionary,``0})">
            <summary>Sets the shim of DefaultKernel.Resolve(String key, IDictionary arguments)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AddChildKernelIKernel">
            <summary>Sets the shim of DefaultKernel.AddChildKernel(IKernel childKernel)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AddComponentInstanceStringObject">
            <summary>Sets the shim of DefaultKernel.AddComponentInstance(String key, Object instance)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AddComponentInstanceStringTypeObject">
            <summary>Sets the shim of DefaultKernel.AddComponentInstance(String key, Type serviceType, Object instance)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AddComponentInstanceStringTypeTypeObject">
            <summary>Sets the shim of DefaultKernel.AddComponentInstance(String key, Type serviceType, Type classType, Object instance)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AddComponentStringType">
            <summary>Sets the shim of DefaultKernel.AddComponent(String key, Type classType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AddComponentStringTypeLifestyleType">
            <summary>Sets the shim of DefaultKernel.AddComponent(String key, Type classType, LifestyleType lifestyle)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AddComponentStringTypeLifestyleTypeBoolean">
            <summary>Sets the shim of DefaultKernel.AddComponent(String key, Type classType, LifestyleType lifestyle, Boolean overwriteLifestyle)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AddComponentStringTypeType">
            <summary>Sets the shim of DefaultKernel.AddComponent(String key, Type serviceType, Type classType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AddComponentStringTypeTypeLifestyleType">
            <summary>Sets the shim of DefaultKernel.AddComponent(String key, Type serviceType, Type classType, LifestyleType lifestyle)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AddComponentStringTypeTypeLifestyleTypeBoolean">
            <summary>Sets the shim of DefaultKernel.AddComponent(String key, Type serviceType, Type classType, LifestyleType lifestyle, Boolean overwriteLifestyle)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AddComponentWithExtendedPropertiesStringTypeIDictionary">
            <summary>Sets the shim of DefaultKernel.AddComponentWithExtendedProperties(String key, Type classType, IDictionary extendedProperties)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AddComponentWithExtendedPropertiesStringTypeTypeIDictionary">
            <summary>Sets the shim of DefaultKernel.AddComponentWithExtendedProperties(String key, Type serviceType, Type classType, IDictionary extendedProperties)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AddCustomComponentComponentModel">
            <summary>Sets the shim of DefaultKernel.AddCustomComponent(ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AddFacilityIFacility">
            <summary>Sets the shim of DefaultKernel.AddFacility(IFacility facility)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AddFacilityStringIFacility">
            <summary>Sets the shim of DefaultKernel.AddFacility(String key, IFacility facility)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AddHandlerSelectorIHandlerSelector">
            <summary>Sets the shim of DefaultKernel.AddHandlerSelector(IHandlerSelector selector)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AddHandlersFilterIHandlersFilter">
            <summary>Sets the shim of DefaultKernel.AddHandlersFilter(IHandlersFilter filter)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AddSubSystemStringISubSystem">
            <summary>Sets the shim of DefaultKernel.AddSubSystem(String name, ISubSystem subsystem)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AddedAsChildKernelAddEventHandler">
            <summary>Sets the shim of DefaultKernel.add_AddedAsChildKernel(EventHandler value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AddedAsChildKernelRemoveEventHandler">
            <summary>Sets the shim of DefaultKernel.remove_AddedAsChildKernel(EventHandler value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.CastleMicroKernelIKernelInternalCreateHandlerComponentModel">
            <summary>Sets the shim of DefaultKernel.Castle.MicroKernel.IKernelInternal.CreateHandler(ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.CastleMicroKernelIKernelInternalLoadHandlerByNameStringTypeIDictionary">
            <summary>Sets the shim of DefaultKernel.Castle.MicroKernel.IKernelInternal.LoadHandlerByName(String name, Type service, IDictionary arguments)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.CastleMicroKernelIKernelInternalLoadHandlerByTypeStringTypeIDictionary">
            <summary>Sets the shim of DefaultKernel.Castle.MicroKernel.IKernelInternal.LoadHandlerByType(String name, Type service, IDictionary arguments)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.CastleMicroKernelIKernelInternalRaiseEventsOnHandlerCreatedIHandler">
            <summary>Sets the shim of DefaultKernel.Castle.MicroKernel.IKernelInternal.RaiseEventsOnHandlerCreated(IHandler handler)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.CastleMicroKernelIKernelInternalResolveAllTypeIDictionaryIReleasePolicy">
            <summary>Sets the shim of DefaultKernel.Castle.MicroKernel.IKernelInternal.ResolveAll(Type service, IDictionary arguments, IReleasePolicy policy)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.CastleMicroKernelIKernelInternalResolveStringTypeIDictionaryIReleasePolicy">
            <summary>Sets the shim of DefaultKernel.Castle.MicroKernel.IKernelInternal.Resolve(String key, Type service, IDictionary arguments, IReleasePolicy policy)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.CastleMicroKernelIKernelInternalResolveTypeIDictionaryIReleasePolicy">
            <summary>Sets the shim of DefaultKernel.Castle.MicroKernel.IKernelInternal.Resolve(Type service, IDictionary arguments, IReleasePolicy policy)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.ComponentCreatedAddComponentInstanceDelegate">
            <summary>Sets the shim of DefaultKernel.add_ComponentCreated(ComponentInstanceDelegate value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.ComponentCreatedRemoveComponentInstanceDelegate">
            <summary>Sets the shim of DefaultKernel.remove_ComponentCreated(ComponentInstanceDelegate value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.ComponentDestroyedAddComponentInstanceDelegate">
            <summary>Sets the shim of DefaultKernel.add_ComponentDestroyed(ComponentInstanceDelegate value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.ComponentDestroyedRemoveComponentInstanceDelegate">
            <summary>Sets the shim of DefaultKernel.remove_ComponentDestroyed(ComponentInstanceDelegate value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.ComponentModelBuilderGet">
            <summary>Sets the shim of DefaultKernel.get_ComponentModelBuilder()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.ComponentModelBuilderSetIComponentModelBuilder">
            <summary>Sets the shim of DefaultKernel.set_ComponentModelBuilder(IComponentModelBuilder value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.ComponentModelCreatedAddComponentModelDelegate">
            <summary>Sets the shim of DefaultKernel.add_ComponentModelCreated(ComponentModelDelegate value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.ComponentModelCreatedRemoveComponentModelDelegate">
            <summary>Sets the shim of DefaultKernel.remove_ComponentModelCreated(ComponentModelDelegate value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.ComponentRegisteredAddComponentDataDelegate">
            <summary>Sets the shim of DefaultKernel.add_ComponentRegistered(ComponentDataDelegate value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.ComponentRegisteredRemoveComponentDataDelegate">
            <summary>Sets the shim of DefaultKernel.remove_ComponentRegistered(ComponentDataDelegate value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.ConfigurationStoreGet">
            <summary>Sets the shim of DefaultKernel.get_ConfigurationStore()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.ConfigurationStoreSetIConfigurationStore">
            <summary>Sets the shim of DefaultKernel.set_ConfigurationStore(IConfigurationStore value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.Constructor">
            <summary>Sets the shim of DefaultKernel.DefaultKernel()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.ConstructorIDependencyResolverIProxyFactory">
            <summary>Sets the shim of DefaultKernel.DefaultKernel(IDependencyResolver resolver, IProxyFactory proxyFactory)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.ConstructorIProxyFactory">
            <summary>Sets the shim of DefaultKernel.DefaultKernel(IProxyFactory proxyFactory)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.ConstructorSerializationInfoStreamingContext">
            <summary>Sets the shim of DefaultKernel.DefaultKernel(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.ConversionSubSystemGet">
            <summary>Sets the shim of DefaultKernel.get_ConversionSubSystem()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.ConversionSubSystemSetIConversionManager">
            <summary>Sets the shim of DefaultKernel.set_ConversionSubSystem(IConversionManager value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.CreateComponentActivatorComponentModel">
            <summary>Sets the shim of DefaultKernel.CreateComponentActivator(ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.CreateCreationContextIHandlerTypeIDictionaryCreationContextIReleasePolicy">
            <summary>Sets the shim of DefaultKernel.CreateCreationContext(IHandler handler, Type requestedType, IDictionary additionalArguments, CreationContext parent, IReleasePolicy policy)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.CreateLifestyleManagerComponentModelIComponentActivator">
            <summary>Sets the shim of DefaultKernel.CreateLifestyleManager(ComponentModel model, IComponentActivator activator)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.CreateScopeAccessorComponentModel">
            <summary>Sets the shim of DefaultKernel.CreateScopeAccessor(ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.CreateScopeAccessorForBoundLifestyleComponentModel">
            <summary>Sets the shim of DefaultKernel.CreateScopeAccessorForBoundLifestyle(ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.DependencyResolvingAddDependencyDelegate">
            <summary>Sets the shim of DefaultKernel.add_DependencyResolving(DependencyDelegate value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.DependencyResolvingRemoveDependencyDelegate">
            <summary>Sets the shim of DefaultKernel.remove_DependencyResolving(DependencyDelegate value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.Dispose">
            <summary>Sets the shim of DefaultKernel.Dispose()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.DisposeComponentsInstancesWithinTracker">
            <summary>Sets the shim of DefaultKernel.DisposeComponentsInstancesWithinTracker()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.DisposeHandlerIHandler">
            <summary>Sets the shim of DefaultKernel.DisposeHandler(IHandler handler)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.DisposeHandlers">
            <summary>Sets the shim of DefaultKernel.DisposeHandlers()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.DisposeSubKernels">
            <summary>Sets the shim of DefaultKernel.DisposeSubKernels()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.DoActualRaisingOfHandlersChanged">
            <summary>Sets the shim of DefaultKernel.DoActualRaisingOfHandlersChanged()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.EmptyCollectionResolvingAddServiceDelegate">
            <summary>Sets the shim of DefaultKernel.add_EmptyCollectionResolving(ServiceDelegate value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.EmptyCollectionResolvingRemoveServiceDelegate">
            <summary>Sets the shim of DefaultKernel.remove_EmptyCollectionResolving(ServiceDelegate value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.GetAssignableHandlersType">
            <summary>Sets the shim of DefaultKernel.GetAssignableHandlers(Type service)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.GetFacilities">
            <summary>Sets the shim of DefaultKernel.GetFacilities()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.GetHandlerString">
            <summary>Sets the shim of DefaultKernel.GetHandler(String name)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.GetHandlerType">
            <summary>Sets the shim of DefaultKernel.GetHandler(Type service)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.GetHandlersType">
            <summary>Sets the shim of DefaultKernel.GetHandlers(Type service)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.GetObjectDataSerializationInfoStreamingContext">
            <summary>Sets the shim of DefaultKernel.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.GetSubSystemString">
            <summary>Sets the shim of DefaultKernel.GetSubSystem(String name)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.GraphNodesGet">
            <summary>Sets the shim of DefaultKernel.get_GraphNodes()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.HandlerFactoryGet">
            <summary>Sets the shim of DefaultKernel.get_HandlerFactory()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.HandlerFactorySetIHandlerFactory">
            <summary>Sets the shim of DefaultKernel.set_HandlerFactory(IHandlerFactory value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.HandlerRegisteredAddHandlerDelegate">
            <summary>Sets the shim of DefaultKernel.add_HandlerRegistered(HandlerDelegate value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.HandlerRegisteredOnParentKernelIHandlerBooleanRef">
            <summary>Sets the shim of DefaultKernel.HandlerRegisteredOnParentKernel(IHandler handler, Boolean&amp; stateChanged)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.HandlerRegisteredRemoveHandlerDelegate">
            <summary>Sets the shim of DefaultKernel.remove_HandlerRegistered(HandlerDelegate value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.HandlersChangedAddHandlersChangedDelegate">
            <summary>Sets the shim of DefaultKernel.add_HandlersChanged(HandlersChangedDelegate value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.HandlersChangedOnParentKernelBooleanRef">
            <summary>Sets the shim of DefaultKernel.HandlersChangedOnParentKernel(Boolean&amp; changed)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.HandlersChangedRemoveHandlersChangedDelegate">
            <summary>Sets the shim of DefaultKernel.remove_HandlersChanged(HandlersChangedDelegate value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.HasComponentString">
            <summary>Sets the shim of DefaultKernel.HasComponent(String name)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.HasComponentType">
            <summary>Sets the shim of DefaultKernel.HasComponent(Type serviceType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.InitializeLifetimeService">
            <summary>Sets the shim of DefaultKernel.InitializeLifetimeService()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.ItemGetString">
            <summary>Sets the shim of DefaultKernel.get_Item(String key)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.ItemGetType">
            <summary>Sets the shim of DefaultKernel.get_Item(Type service)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.LoggerGet">
            <summary>Sets the shim of DefaultKernel.get_Logger()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.LoggerSetILogger">
            <summary>Sets the shim of DefaultKernel.set_Logger(ILogger value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.NamingSubSystemGet">
            <summary>Sets the shim of DefaultKernel.get_NamingSubSystem()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.NamingSubSystemSetINamingSubSystem">
            <summary>Sets the shim of DefaultKernel.set_NamingSubSystem(INamingSubSystem value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.OptimizeDependencyResolution">
            <summary>Sets the shim of DefaultKernel.OptimizeDependencyResolution()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.ParentGet">
            <summary>Sets the shim of DefaultKernel.get_Parent()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.ParentSetIKernel">
            <summary>Sets the shim of DefaultKernel.set_Parent(IKernel value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.ProxyFactoryGet">
            <summary>Sets the shim of DefaultKernel.get_ProxyFactory()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.ProxyFactorySetIProxyFactory">
            <summary>Sets the shim of DefaultKernel.set_ProxyFactory(IProxyFactory value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.RaiseAddedAsChildKernel">
            <summary>Sets the shim of DefaultKernel.RaiseAddedAsChildKernel()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.RaiseComponentCreatedComponentModelObject">
            <summary>Sets the shim of DefaultKernel.RaiseComponentCreated(ComponentModel model, Object instance)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.RaiseComponentDestroyedComponentModelObject">
            <summary>Sets the shim of DefaultKernel.RaiseComponentDestroyed(ComponentModel model, Object instance)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.RaiseComponentModelCreatedComponentModel">
            <summary>Sets the shim of DefaultKernel.RaiseComponentModelCreated(ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.RaiseComponentRegisteredStringIHandler">
            <summary>Sets the shim of DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.RaiseDependencyResolvingComponentModelDependencyModelObject">
            <summary>Sets the shim of DefaultKernel.RaiseDependencyResolving(ComponentModel client, DependencyModel model, Object dependency)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.RaiseHandlerRegisteredIHandler">
            <summary>Sets the shim of DefaultKernel.RaiseHandlerRegistered(IHandler handler)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.RaiseHandlersChanged">
            <summary>Sets the shim of DefaultKernel.RaiseHandlersChanged()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.RaiseRegistrationCompleted">
            <summary>Sets the shim of DefaultKernel.RaiseRegistrationCompleted()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.RaiseRemovedAsChildKernel">
            <summary>Sets the shim of DefaultKernel.RaiseRemovedAsChildKernel()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.RegisterIRegistrationArray">
            <summary>Sets the shim of DefaultKernel.Register(IRegistration[] registrations)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.RegisterSubSystems">
            <summary>Sets the shim of DefaultKernel.RegisterSubSystems()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.RegistrationCompletedAddEventHandler">
            <summary>Sets the shim of DefaultKernel.add_RegistrationCompleted(EventHandler value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.RegistrationCompletedRemoveEventHandler">
            <summary>Sets the shim of DefaultKernel.remove_RegistrationCompleted(EventHandler value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.ReleaseComponentObject">
            <summary>Sets the shim of DefaultKernel.ReleaseComponent(Object instance)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.ReleasePolicyGet">
            <summary>Sets the shim of DefaultKernel.get_ReleasePolicy()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.ReleasePolicySetIReleasePolicy">
            <summary>Sets the shim of DefaultKernel.set_ReleasePolicy(IReleasePolicy value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.RemoveChildKernelIKernel">
            <summary>Sets the shim of DefaultKernel.RemoveChildKernel(IKernel childKernel)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.RemovedAsChildKernelAddEventHandler">
            <summary>Sets the shim of DefaultKernel.add_RemovedAsChildKernel(EventHandler value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.RemovedAsChildKernelRemoveEventHandler">
            <summary>Sets the shim of DefaultKernel.remove_RemovedAsChildKernel(EventHandler value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.ResolveAllType">
            <summary>Sets the shim of DefaultKernel.ResolveAll(Type service)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.ResolveAllTypeIDictionary">
            <summary>Sets the shim of DefaultKernel.ResolveAll(Type service, IDictionary arguments)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.ResolveAllTypeObject">
            <summary>Sets the shim of DefaultKernel.ResolveAll(Type service, Object argumentsAsAnonymousType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.ResolveComponentIHandlerTypeIDictionaryIReleasePolicy">
            <summary>Sets the shim of DefaultKernel.ResolveComponent(IHandler handler, Type service, IDictionary additionalArguments, IReleasePolicy policy)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.ResolveStringIDictionary">
            <summary>Sets the shim of DefaultKernel.Resolve(String key, IDictionary arguments)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.ResolveStringObject">
            <summary>Sets the shim of DefaultKernel.Resolve(String key, Object argumentsAsAnonymousType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.ResolveStringType">
            <summary>Sets the shim of DefaultKernel.Resolve(String key, Type service)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.ResolveStringTypeIDictionary">
            <summary>Sets the shim of DefaultKernel.Resolve(String key, Type service, IDictionary arguments)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.ResolveType">
            <summary>Sets the shim of DefaultKernel.Resolve(Type service)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.ResolveTypeIDictionary">
            <summary>Sets the shim of DefaultKernel.Resolve(Type service, IDictionary arguments)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.ResolveTypeObject">
            <summary>Sets the shim of DefaultKernel.Resolve(Type service, Object argumentsAsAnonymousType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.ResolverGet">
            <summary>Sets the shim of DefaultKernel.get_Resolver()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.ResolverSetIDependencyResolver">
            <summary>Sets the shim of DefaultKernel.set_Resolver(IDependencyResolver value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.SubscribeToParentKernel">
            <summary>Sets the shim of DefaultKernel.SubscribeToParentKernel()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.TerminateFacilities">
            <summary>Sets the shim of DefaultKernel.TerminateFacilities()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.UnsubscribeFromParentKernel">
            <summary>Sets the shim of DefaultKernel.UnsubscribeFromParentKernel()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.WrapParentHandlerIHandler">
            <summary>Sets the shim of DefaultKernel.WrapParentHandler(IHandler parentHandler)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel._ctorb__0IHandlerBooleanRef">
            <summary>Sets the shim of DefaultKernel.&lt;.ctor&gt;b__0(IHandler param0, Boolean&amp; param1)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel._ctorb__16IHandlerBooleanRef">
            <summary>Sets the shim of DefaultKernel.&lt;.ctor&gt;b__16(IHandler param0, Boolean&amp; param1)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel._ctorb__17BooleanRef">
            <summary>Sets the shim of DefaultKernel.&lt;.ctor&gt;b__17(Boolean&amp; param0)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel._ctorb__18StringIHandler">
            <summary>Sets the shim of DefaultKernel.&lt;.ctor&gt;b__18(String param0, IHandler param1)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel._ctorb__19ComponentModelObject">
            <summary>Sets the shim of DefaultKernel.&lt;.ctor&gt;b__19(ComponentModel param0, Object param1)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel._ctorb__1BooleanRef">
            <summary>Sets the shim of DefaultKernel.&lt;.ctor&gt;b__1(Boolean&amp; param0)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel._ctorb__1aComponentModelObject">
            <summary>Sets the shim of DefaultKernel.&lt;.ctor&gt;b__1a(ComponentModel param0, Object param1)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel._ctorb__1bObjectEventArgs">
            <summary>Sets the shim of DefaultKernel.&lt;.ctor&gt;b__1b(Object param0, EventArgs param1)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel._ctorb__1cObjectEventArgs">
            <summary>Sets the shim of DefaultKernel.&lt;.ctor&gt;b__1c(Object param0, EventArgs param1)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel._ctorb__1dObjectEventArgs">
            <summary>Sets the shim of DefaultKernel.&lt;.ctor&gt;b__1d(Object param0, EventArgs param1)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel._ctorb__1eComponentModel">
            <summary>Sets the shim of DefaultKernel.&lt;.ctor&gt;b__1e(ComponentModel param0)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel._ctorb__1fComponentModelDependencyModelObject">
            <summary>Sets the shim of DefaultKernel.&lt;.ctor&gt;b__1f(ComponentModel param0, DependencyModel param1, Object param2)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel._ctorb__20Type">
            <summary>Sets the shim of DefaultKernel.&lt;.ctor&gt;b__20(Type param0)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel._ctorb__2StringIHandler">
            <summary>Sets the shim of DefaultKernel.&lt;.ctor&gt;b__2(String param0, IHandler param1)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel._ctorb__3ComponentModelObject">
            <summary>Sets the shim of DefaultKernel.&lt;.ctor&gt;b__3(ComponentModel param0, Object param1)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel._ctorb__4ComponentModelObject">
            <summary>Sets the shim of DefaultKernel.&lt;.ctor&gt;b__4(ComponentModel param0, Object param1)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel._ctorb__5ObjectEventArgs">
            <summary>Sets the shim of DefaultKernel.&lt;.ctor&gt;b__5(Object param0, EventArgs param1)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel._ctorb__6ObjectEventArgs">
            <summary>Sets the shim of DefaultKernel.&lt;.ctor&gt;b__6(Object param0, EventArgs param1)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel._ctorb__7ObjectEventArgs">
            <summary>Sets the shim of DefaultKernel.&lt;.ctor&gt;b__7(Object param0, EventArgs param1)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel._ctorb__8ComponentModel">
            <summary>Sets the shim of DefaultKernel.&lt;.ctor&gt;b__8(ComponentModel param0)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel._ctorb__9ComponentModelDependencyModelObject">
            <summary>Sets the shim of DefaultKernel.&lt;.ctor&gt;b__9(ComponentModel param0, DependencyModel param1, Object param2)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel._ctorb__aType">
            <summary>Sets the shim of DefaultKernel.&lt;.ctor&gt;b__a(Type param0)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.AddComponentInstanceOf1Object``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{Castle.MicroKernel.DefaultKernel,System.Object})">
            <summary>Sets the shim of DefaultKernel.AddComponentInstance(Object instance)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.AddComponentInstanceOf1TypeObject``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{Castle.MicroKernel.DefaultKernel,System.Type,System.Object})">
            <summary>Sets the shim of DefaultKernel.AddComponentInstance(Type serviceType, Object instance)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.AddComponentOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{Castle.MicroKernel.DefaultKernel})">
            <summary>Sets the shim of DefaultKernel.AddComponent()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.AddComponentOf1LifestyleType``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{Castle.MicroKernel.DefaultKernel,Castle.Core.LifestyleType})">
            <summary>Sets the shim of DefaultKernel.AddComponent(LifestyleType lifestyle)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.AddComponentOf1LifestyleTypeBoolean``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{Castle.MicroKernel.DefaultKernel,Castle.Core.LifestyleType,System.Boolean})">
            <summary>Sets the shim of DefaultKernel.AddComponent(LifestyleType lifestyle, Boolean overwriteLifestyle)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.AddComponentOf1Type``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{Castle.MicroKernel.DefaultKernel,System.Type})">
            <summary>Sets the shim of DefaultKernel.AddComponent(Type serviceType)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.AddComponentOf1TypeLifestyleType``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{Castle.MicroKernel.DefaultKernel,System.Type,Castle.Core.LifestyleType})">
            <summary>Sets the shim of DefaultKernel.AddComponent(Type serviceType, LifestyleType lifestyle)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.AddComponentOf1TypeLifestyleTypeBoolean``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{Castle.MicroKernel.DefaultKernel,System.Type,Castle.Core.LifestyleType,System.Boolean})">
            <summary>Sets the shim of DefaultKernel.AddComponent(Type serviceType, LifestyleType lifestyle, Boolean overwriteLifestyle)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.AddFacilityOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.DefaultKernel,Castle.MicroKernel.IKernel})">
            <summary>Sets the shim of DefaultKernel.AddFacility()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.AddFacilityOf1ActionOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.DefaultKernel,System.Action{``0},Castle.MicroKernel.IKernel})">
            <summary>Sets the shim of DefaultKernel.AddFacility(Action`1&lt;!!0&gt; onCreate)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.AddFacilityOf1String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.DefaultKernel,System.String,Castle.MicroKernel.IKernel})">
            <summary>Sets the shim of DefaultKernel.AddFacility(String key)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.AddFacilityOf1StringActionOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.DefaultKernel,System.String,System.Action{``0},Castle.MicroKernel.IKernel})">
            <summary>Sets the shim of DefaultKernel.AddFacility(String key, Action`1&lt;!!0&gt; onCreate)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.ResolveAllOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.DefaultKernel,``0[]})">
            <summary>Sets the shim of DefaultKernel.ResolveAll()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.ResolveAllOf1IDictionary``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.DefaultKernel,System.Collections.IDictionary,``0[]})">
            <summary>Sets the shim of DefaultKernel.ResolveAll(IDictionary arguments)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.ResolveAllOf1Object``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.DefaultKernel,System.Object,``0[]})">
            <summary>Sets the shim of DefaultKernel.ResolveAll(Object argumentsAsAnonymousType)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.ResolveOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.DefaultKernel,``0})">
            <summary>Sets the shim of DefaultKernel.Resolve()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.ResolveOf1IDictionary``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.DefaultKernel,System.Collections.IDictionary,``0})">
            <summary>Sets the shim of DefaultKernel.Resolve(IDictionary arguments)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.ResolveOf1Object``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.DefaultKernel,System.Object,``0})">
            <summary>Sets the shim of DefaultKernel.Resolve(Object argumentsAsAnonymousType)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.ResolveOf1String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.DefaultKernel,System.String,``0})">
            <summary>Sets the shim of DefaultKernel.Resolve(String key)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.ResolveOf1StringIDictionary``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.DefaultKernel,System.String,System.Collections.IDictionary,``0})">
            <summary>Sets the shim of DefaultKernel.Resolve(String key, IDictionary arguments)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.AddChildKernelIKernel">
            <summary>Sets the shim of DefaultKernel.AddChildKernel(IKernel childKernel)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.AddComponentInstanceStringObject">
            <summary>Sets the shim of DefaultKernel.AddComponentInstance(String key, Object instance)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.AddComponentInstanceStringTypeObject">
            <summary>Sets the shim of DefaultKernel.AddComponentInstance(String key, Type serviceType, Object instance)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.AddComponentInstanceStringTypeTypeObject">
            <summary>Sets the shim of DefaultKernel.AddComponentInstance(String key, Type serviceType, Type classType, Object instance)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.AddComponentStringType">
            <summary>Sets the shim of DefaultKernel.AddComponent(String key, Type classType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.AddComponentStringTypeLifestyleType">
            <summary>Sets the shim of DefaultKernel.AddComponent(String key, Type classType, LifestyleType lifestyle)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.AddComponentStringTypeLifestyleTypeBoolean">
            <summary>Sets the shim of DefaultKernel.AddComponent(String key, Type classType, LifestyleType lifestyle, Boolean overwriteLifestyle)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.AddComponentStringTypeType">
            <summary>Sets the shim of DefaultKernel.AddComponent(String key, Type serviceType, Type classType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.AddComponentStringTypeTypeLifestyleType">
            <summary>Sets the shim of DefaultKernel.AddComponent(String key, Type serviceType, Type classType, LifestyleType lifestyle)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.AddComponentStringTypeTypeLifestyleTypeBoolean">
            <summary>Sets the shim of DefaultKernel.AddComponent(String key, Type serviceType, Type classType, LifestyleType lifestyle, Boolean overwriteLifestyle)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.AddComponentWithExtendedPropertiesStringTypeIDictionary">
            <summary>Sets the shim of DefaultKernel.AddComponentWithExtendedProperties(String key, Type classType, IDictionary extendedProperties)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.AddComponentWithExtendedPropertiesStringTypeTypeIDictionary">
            <summary>Sets the shim of DefaultKernel.AddComponentWithExtendedProperties(String key, Type serviceType, Type classType, IDictionary extendedProperties)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.AddCustomComponentComponentModel">
            <summary>Sets the shim of DefaultKernel.AddCustomComponent(ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.AddFacilityIFacility">
            <summary>Sets the shim of DefaultKernel.AddFacility(IFacility facility)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.AddFacilityStringIFacility">
            <summary>Sets the shim of DefaultKernel.AddFacility(String key, IFacility facility)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.AddHandlerSelectorIHandlerSelector">
            <summary>Sets the shim of DefaultKernel.AddHandlerSelector(IHandlerSelector selector)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.AddHandlersFilterIHandlersFilter">
            <summary>Sets the shim of DefaultKernel.AddHandlersFilter(IHandlersFilter filter)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.AddSubSystemStringISubSystem">
            <summary>Sets the shim of DefaultKernel.AddSubSystem(String name, ISubSystem subsystem)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.AddedAsChildKernelAddEventHandler">
            <summary>Sets the shim of DefaultKernel.add_AddedAsChildKernel(EventHandler value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.AddedAsChildKernelRemoveEventHandler">
            <summary>Sets the shim of DefaultKernel.remove_AddedAsChildKernel(EventHandler value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.CastleMicroKernelIKernelInternalCreateHandlerComponentModel">
            <summary>Sets the shim of DefaultKernel.Castle.MicroKernel.IKernelInternal.CreateHandler(ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.CastleMicroKernelIKernelInternalLoadHandlerByNameStringTypeIDictionary">
            <summary>Sets the shim of DefaultKernel.Castle.MicroKernel.IKernelInternal.LoadHandlerByName(String name, Type service, IDictionary arguments)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.CastleMicroKernelIKernelInternalLoadHandlerByTypeStringTypeIDictionary">
            <summary>Sets the shim of DefaultKernel.Castle.MicroKernel.IKernelInternal.LoadHandlerByType(String name, Type service, IDictionary arguments)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.CastleMicroKernelIKernelInternalRaiseEventsOnHandlerCreatedIHandler">
            <summary>Sets the shim of DefaultKernel.Castle.MicroKernel.IKernelInternal.RaiseEventsOnHandlerCreated(IHandler handler)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.CastleMicroKernelIKernelInternalResolveAllTypeIDictionaryIReleasePolicy">
            <summary>Sets the shim of DefaultKernel.Castle.MicroKernel.IKernelInternal.ResolveAll(Type service, IDictionary arguments, IReleasePolicy policy)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.CastleMicroKernelIKernelInternalResolveStringTypeIDictionaryIReleasePolicy">
            <summary>Sets the shim of DefaultKernel.Castle.MicroKernel.IKernelInternal.Resolve(String key, Type service, IDictionary arguments, IReleasePolicy policy)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.CastleMicroKernelIKernelInternalResolveTypeIDictionaryIReleasePolicy">
            <summary>Sets the shim of DefaultKernel.Castle.MicroKernel.IKernelInternal.Resolve(Type service, IDictionary arguments, IReleasePolicy policy)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.ComponentCreatedAddComponentInstanceDelegate">
            <summary>Sets the shim of DefaultKernel.add_ComponentCreated(ComponentInstanceDelegate value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.ComponentCreatedRemoveComponentInstanceDelegate">
            <summary>Sets the shim of DefaultKernel.remove_ComponentCreated(ComponentInstanceDelegate value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.ComponentDestroyedAddComponentInstanceDelegate">
            <summary>Sets the shim of DefaultKernel.add_ComponentDestroyed(ComponentInstanceDelegate value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.ComponentDestroyedRemoveComponentInstanceDelegate">
            <summary>Sets the shim of DefaultKernel.remove_ComponentDestroyed(ComponentInstanceDelegate value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.ComponentModelBuilderGet">
            <summary>Sets the shim of DefaultKernel.get_ComponentModelBuilder()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.ComponentModelBuilderSetIComponentModelBuilder">
            <summary>Sets the shim of DefaultKernel.set_ComponentModelBuilder(IComponentModelBuilder value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.ComponentModelCreatedAddComponentModelDelegate">
            <summary>Sets the shim of DefaultKernel.add_ComponentModelCreated(ComponentModelDelegate value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.ComponentModelCreatedRemoveComponentModelDelegate">
            <summary>Sets the shim of DefaultKernel.remove_ComponentModelCreated(ComponentModelDelegate value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.ComponentRegisteredAddComponentDataDelegate">
            <summary>Sets the shim of DefaultKernel.add_ComponentRegistered(ComponentDataDelegate value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.ComponentRegisteredRemoveComponentDataDelegate">
            <summary>Sets the shim of DefaultKernel.remove_ComponentRegistered(ComponentDataDelegate value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.ConfigurationStoreGet">
            <summary>Sets the shim of DefaultKernel.get_ConfigurationStore()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.ConfigurationStoreSetIConfigurationStore">
            <summary>Sets the shim of DefaultKernel.set_ConfigurationStore(IConfigurationStore value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.ConversionSubSystemGet">
            <summary>Sets the shim of DefaultKernel.get_ConversionSubSystem()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.ConversionSubSystemSetIConversionManager">
            <summary>Sets the shim of DefaultKernel.set_ConversionSubSystem(IConversionManager value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.CreateComponentActivatorComponentModel">
            <summary>Sets the shim of DefaultKernel.CreateComponentActivator(ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.CreateCreationContextIHandlerTypeIDictionaryCreationContextIReleasePolicy">
            <summary>Sets the shim of DefaultKernel.CreateCreationContext(IHandler handler, Type requestedType, IDictionary additionalArguments, CreationContext parent, IReleasePolicy policy)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.CreateLifestyleManagerComponentModelIComponentActivator">
            <summary>Sets the shim of DefaultKernel.CreateLifestyleManager(ComponentModel model, IComponentActivator activator)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.CreateScopeAccessorForBoundLifestyleComponentModel">
            <summary>Sets the shim of DefaultKernel.CreateScopeAccessorForBoundLifestyle(ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.DependencyResolvingAddDependencyDelegate">
            <summary>Sets the shim of DefaultKernel.add_DependencyResolving(DependencyDelegate value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.DependencyResolvingRemoveDependencyDelegate">
            <summary>Sets the shim of DefaultKernel.remove_DependencyResolving(DependencyDelegate value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.Dispose">
            <summary>Sets the shim of DefaultKernel.Dispose()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.DisposeComponentsInstancesWithinTracker">
            <summary>Sets the shim of DefaultKernel.DisposeComponentsInstancesWithinTracker()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.DisposeHandlerIHandler">
            <summary>Sets the shim of DefaultKernel.DisposeHandler(IHandler handler)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.DisposeHandlers">
            <summary>Sets the shim of DefaultKernel.DisposeHandlers()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.DisposeSubKernels">
            <summary>Sets the shim of DefaultKernel.DisposeSubKernels()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.DoActualRaisingOfHandlersChanged">
            <summary>Sets the shim of DefaultKernel.DoActualRaisingOfHandlersChanged()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.EmptyCollectionResolvingAddServiceDelegate">
            <summary>Sets the shim of DefaultKernel.add_EmptyCollectionResolving(ServiceDelegate value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.EmptyCollectionResolvingRemoveServiceDelegate">
            <summary>Sets the shim of DefaultKernel.remove_EmptyCollectionResolving(ServiceDelegate value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.GetAssignableHandlersType">
            <summary>Sets the shim of DefaultKernel.GetAssignableHandlers(Type service)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.GetFacilities">
            <summary>Sets the shim of DefaultKernel.GetFacilities()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.GetHandlerString">
            <summary>Sets the shim of DefaultKernel.GetHandler(String name)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.GetHandlerType">
            <summary>Sets the shim of DefaultKernel.GetHandler(Type service)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.GetHandlersType">
            <summary>Sets the shim of DefaultKernel.GetHandlers(Type service)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.GetObjectDataSerializationInfoStreamingContext">
            <summary>Sets the shim of DefaultKernel.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.GetSubSystemString">
            <summary>Sets the shim of DefaultKernel.GetSubSystem(String name)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.GraphNodesGet">
            <summary>Sets the shim of DefaultKernel.get_GraphNodes()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.HandlerFactoryGet">
            <summary>Sets the shim of DefaultKernel.get_HandlerFactory()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.HandlerFactorySetIHandlerFactory">
            <summary>Sets the shim of DefaultKernel.set_HandlerFactory(IHandlerFactory value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.HandlerRegisteredAddHandlerDelegate">
            <summary>Sets the shim of DefaultKernel.add_HandlerRegistered(HandlerDelegate value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.HandlerRegisteredOnParentKernelIHandlerBooleanRef">
            <summary>Sets the shim of DefaultKernel.HandlerRegisteredOnParentKernel(IHandler handler, Boolean&amp; stateChanged)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.HandlerRegisteredRemoveHandlerDelegate">
            <summary>Sets the shim of DefaultKernel.remove_HandlerRegistered(HandlerDelegate value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.HandlersChangedAddHandlersChangedDelegate">
            <summary>Sets the shim of DefaultKernel.add_HandlersChanged(HandlersChangedDelegate value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.HandlersChangedOnParentKernelBooleanRef">
            <summary>Sets the shim of DefaultKernel.HandlersChangedOnParentKernel(Boolean&amp; changed)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.HandlersChangedRemoveHandlersChangedDelegate">
            <summary>Sets the shim of DefaultKernel.remove_HandlersChanged(HandlersChangedDelegate value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.HasComponentString">
            <summary>Sets the shim of DefaultKernel.HasComponent(String name)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.HasComponentType">
            <summary>Sets the shim of DefaultKernel.HasComponent(Type serviceType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.InitializeLifetimeService">
            <summary>Sets the shim of DefaultKernel.InitializeLifetimeService()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.ItemGetString">
            <summary>Sets the shim of DefaultKernel.get_Item(String key)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.ItemGetType">
            <summary>Sets the shim of DefaultKernel.get_Item(Type service)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.LoggerGet">
            <summary>Sets the shim of DefaultKernel.get_Logger()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.LoggerSetILogger">
            <summary>Sets the shim of DefaultKernel.set_Logger(ILogger value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.NamingSubSystemGet">
            <summary>Sets the shim of DefaultKernel.get_NamingSubSystem()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.NamingSubSystemSetINamingSubSystem">
            <summary>Sets the shim of DefaultKernel.set_NamingSubSystem(INamingSubSystem value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.OptimizeDependencyResolution">
            <summary>Sets the shim of DefaultKernel.OptimizeDependencyResolution()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.ParentGet">
            <summary>Sets the shim of DefaultKernel.get_Parent()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.ParentSetIKernel">
            <summary>Sets the shim of DefaultKernel.set_Parent(IKernel value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.ProxyFactoryGet">
            <summary>Sets the shim of DefaultKernel.get_ProxyFactory()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.ProxyFactorySetIProxyFactory">
            <summary>Sets the shim of DefaultKernel.set_ProxyFactory(IProxyFactory value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.RaiseAddedAsChildKernel">
            <summary>Sets the shim of DefaultKernel.RaiseAddedAsChildKernel()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.RaiseComponentCreatedComponentModelObject">
            <summary>Sets the shim of DefaultKernel.RaiseComponentCreated(ComponentModel model, Object instance)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.RaiseComponentDestroyedComponentModelObject">
            <summary>Sets the shim of DefaultKernel.RaiseComponentDestroyed(ComponentModel model, Object instance)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.RaiseComponentModelCreatedComponentModel">
            <summary>Sets the shim of DefaultKernel.RaiseComponentModelCreated(ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.RaiseComponentRegisteredStringIHandler">
            <summary>Sets the shim of DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.RaiseDependencyResolvingComponentModelDependencyModelObject">
            <summary>Sets the shim of DefaultKernel.RaiseDependencyResolving(ComponentModel client, DependencyModel model, Object dependency)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.RaiseHandlerRegisteredIHandler">
            <summary>Sets the shim of DefaultKernel.RaiseHandlerRegistered(IHandler handler)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.RaiseHandlersChanged">
            <summary>Sets the shim of DefaultKernel.RaiseHandlersChanged()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.RaiseRegistrationCompleted">
            <summary>Sets the shim of DefaultKernel.RaiseRegistrationCompleted()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.RaiseRemovedAsChildKernel">
            <summary>Sets the shim of DefaultKernel.RaiseRemovedAsChildKernel()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.RegisterIRegistrationArray">
            <summary>Sets the shim of DefaultKernel.Register(IRegistration[] registrations)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.RegisterSubSystems">
            <summary>Sets the shim of DefaultKernel.RegisterSubSystems()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.RegistrationCompletedAddEventHandler">
            <summary>Sets the shim of DefaultKernel.add_RegistrationCompleted(EventHandler value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.RegistrationCompletedRemoveEventHandler">
            <summary>Sets the shim of DefaultKernel.remove_RegistrationCompleted(EventHandler value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.ReleaseComponentObject">
            <summary>Sets the shim of DefaultKernel.ReleaseComponent(Object instance)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.ReleasePolicyGet">
            <summary>Sets the shim of DefaultKernel.get_ReleasePolicy()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.ReleasePolicySetIReleasePolicy">
            <summary>Sets the shim of DefaultKernel.set_ReleasePolicy(IReleasePolicy value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.RemoveChildKernelIKernel">
            <summary>Sets the shim of DefaultKernel.RemoveChildKernel(IKernel childKernel)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.RemovedAsChildKernelAddEventHandler">
            <summary>Sets the shim of DefaultKernel.add_RemovedAsChildKernel(EventHandler value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.RemovedAsChildKernelRemoveEventHandler">
            <summary>Sets the shim of DefaultKernel.remove_RemovedAsChildKernel(EventHandler value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.ResolveAllType">
            <summary>Sets the shim of DefaultKernel.ResolveAll(Type service)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.ResolveAllTypeIDictionary">
            <summary>Sets the shim of DefaultKernel.ResolveAll(Type service, IDictionary arguments)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.ResolveAllTypeObject">
            <summary>Sets the shim of DefaultKernel.ResolveAll(Type service, Object argumentsAsAnonymousType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.ResolveComponentIHandlerTypeIDictionaryIReleasePolicy">
            <summary>Sets the shim of DefaultKernel.ResolveComponent(IHandler handler, Type service, IDictionary additionalArguments, IReleasePolicy policy)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.ResolveStringIDictionary">
            <summary>Sets the shim of DefaultKernel.Resolve(String key, IDictionary arguments)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.ResolveStringObject">
            <summary>Sets the shim of DefaultKernel.Resolve(String key, Object argumentsAsAnonymousType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.ResolveStringType">
            <summary>Sets the shim of DefaultKernel.Resolve(String key, Type service)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.ResolveStringTypeIDictionary">
            <summary>Sets the shim of DefaultKernel.Resolve(String key, Type service, IDictionary arguments)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.ResolveType">
            <summary>Sets the shim of DefaultKernel.Resolve(Type service)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.ResolveTypeIDictionary">
            <summary>Sets the shim of DefaultKernel.Resolve(Type service, IDictionary arguments)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.ResolveTypeObject">
            <summary>Sets the shim of DefaultKernel.Resolve(Type service, Object argumentsAsAnonymousType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.ResolverGet">
            <summary>Sets the shim of DefaultKernel.get_Resolver()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.ResolverSetIDependencyResolver">
            <summary>Sets the shim of DefaultKernel.set_Resolver(IDependencyResolver value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.SubscribeToParentKernel">
            <summary>Sets the shim of DefaultKernel.SubscribeToParentKernel()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.TerminateFacilities">
            <summary>Sets the shim of DefaultKernel.TerminateFacilities()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.UnsubscribeFromParentKernel">
            <summary>Sets the shim of DefaultKernel.UnsubscribeFromParentKernel()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.WrapParentHandlerIHandler">
            <summary>Sets the shim of DefaultKernel.WrapParentHandler(IHandler parentHandler)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Fakes.ShimInstanceReference`1">
            <summary>Shim type of Castle.MicroKernel.InstanceReference`1</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimInstanceReference`1.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimInstanceReference`1.#ctor(Castle.MicroKernel.InstanceReference{`0})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimInstanceReference`1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimInstanceReference`1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimInstanceReference`1.Bind(Castle.MicroKernel.IReference{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimInstanceReference`1.AttachComponentModel">
            <summary>Sets the shim of InstanceReference`1.Attach(ComponentModel component)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimInstanceReference`1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimInstanceReference`1.ConstructorT0">
            <summary>Sets the shim of InstanceReference`1.InstanceReference`1(!0 instance)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimInstanceReference`1.DetachComponentModel">
            <summary>Sets the shim of InstanceReference`1.Detach(ComponentModel component)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimInstanceReference`1.ResolveIKernelCreationContext">
            <summary>Sets the shim of InstanceReference`1.Resolve(IKernel kernel, CreationContext context)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Fakes.ShimInstanceReference`1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimInstanceReference`1.AllInstances.AttachComponentModel">
            <summary>Sets the shim of InstanceReference`1.Attach(ComponentModel component)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimInstanceReference`1.AllInstances.DetachComponentModel">
            <summary>Sets the shim of InstanceReference`1.Detach(ComponentModel component)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimInstanceReference`1.AllInstances.ResolveIKernelCreationContext">
            <summary>Sets the shim of InstanceReference`1.Resolve(IKernel kernel, CreationContext context)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Fakes.ShimKernelException">
            <summary>Shim type of Castle.MicroKernel.KernelException</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimKernelException.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimKernelException.#ctor(Castle.MicroKernel.KernelException)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimKernelException.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimKernelException.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimKernelException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimKernelException.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimKernelException.ConstructorSerializationInfoStreamingContext">
            <summary>Sets the shim of KernelException.KernelException(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimKernelException.ConstructorString">
            <summary>Sets the shim of KernelException.KernelException(String message)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimKernelException.ConstructorStringException">
            <summary>Sets the shim of KernelException.KernelException(String message, Exception innerException)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Fakes.ShimKernelException.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="T:Castle.MicroKernel.Fakes.ShimSubSystemConstants">
            <summary>Shim type of Castle.MicroKernel.SubSystemConstants</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimSubSystemConstants.#ctor(Castle.MicroKernel.SubSystemConstants)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimSubSystemConstants.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimSubSystemConstants.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimSubSystemConstants.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimSubSystemConstants.Constructor">
            <summary>Sets the shim of SubSystemConstants.SubSystemConstants()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimSubSystemConstants.StaticConstructor">
            <summary>Sets the shim of SubSystemConstants.SubSystemConstants()</summary>
        </member>
        <member name="T:Castle.MicroKernel.Fakes.ShimSubSystemConstants.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="T:Castle.MicroKernel.Fakes.StubAbstractSubSystem">
            <summary>Stub type of Castle.MicroKernel.AbstractSubSystem</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubAbstractSubSystem.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubAbstractSubSystem.Init(Castle.MicroKernel.IKernelInternal)">
            <summary>Sets the stub of AbstractSubSystem.Init(IKernelInternal kernel)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubAbstractSubSystem.InitIKernelInternal">
            <summary>Sets the stub of AbstractSubSystem.Init(IKernelInternal kernel)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubAbstractSubSystem.InitializeLifetimeService">
            <summary>Sets the stub of AbstractSubSystem.InitializeLifetimeService()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubAbstractSubSystem.InitializeLifetimeService01">
            <summary>Sets the stub of AbstractSubSystem.InitializeLifetimeService()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubAbstractSubSystem.InitializeStub">
            <summary>Initializes a new instance of type StubAbstractSubSystem</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubAbstractSubSystem.Terminate">
            <summary>Sets the stub of AbstractSubSystem.Terminate()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubAbstractSubSystem.Terminate01">
            <summary>Sets the stub of AbstractSubSystem.Terminate()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubAbstractSubSystem.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubAbstractSubSystem.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubAbstractSubSystem.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.Fakes.StubArguments">
            <summary>Stub type of Castle.MicroKernel.Arguments</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubArguments.#ctor(Castle.MicroKernel.Context.IArgumentsComparer[])">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubArguments.#ctor(System.Object,Castle.MicroKernel.Context.IArgumentsComparer[])">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubArguments.#ctor(System.Object[],Castle.MicroKernel.Context.IArgumentsComparer[])">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubArguments.#ctor(System.Collections.IDictionary,Castle.MicroKernel.Context.IArgumentsComparer[])">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubArguments.CreateDeepCopy">
            <summary>Sets the stub of Arguments.CreateDeepCopy()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubArguments.CreateDeepCopy01">
            <summary>Sets the stub of Arguments.CreateDeepCopy()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubArguments.InitializeStub">
            <summary>Initializes a new instance of type StubArguments</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubArguments.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubArguments.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubArguments.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.Fakes.StubCircularDependencyException">
            <summary>Stub type of Castle.MicroKernel.CircularDependencyException</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubCircularDependencyException.#ctor(System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubCircularDependencyException.#ctor(System.String,Castle.Core.ComponentModel)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubCircularDependencyException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubCircularDependencyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubCircularDependencyException.AttachBackingFieldToHelpLink">
            <summary>Attaches delegates to emulate StubCircularDependencyException.HelpLink as a property with a backing field.</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubCircularDependencyException.AttachBackingFieldToSource">
            <summary>Attaches delegates to emulate StubCircularDependencyException.Source as a property with a backing field.</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubCircularDependencyException.DataGet">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubCircularDependencyException.GetBaseException">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubCircularDependencyException.GetBaseException01">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubCircularDependencyException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubCircularDependencyException.GetObjectDataSerializationInfoStreamingContext">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubCircularDependencyException.HelpLinkGet">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubCircularDependencyException.HelpLinkSetString">
            <summary>Sets the stub of Exception.set_HelpLink(String value)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubCircularDependencyException.InitializeStub">
            <summary>Initializes a new instance of type StubCircularDependencyException</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubCircularDependencyException.MessageGet">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubCircularDependencyException.SourceGet">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubCircularDependencyException.SourceSetString">
            <summary>Sets the stub of Exception.set_Source(String value)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubCircularDependencyException.StackTraceGet">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubCircularDependencyException.ToString">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubCircularDependencyException.ToString01">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubCircularDependencyException.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubCircularDependencyException.Data">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubCircularDependencyException.HelpLink">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubCircularDependencyException.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubCircularDependencyException.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubCircularDependencyException.Message">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubCircularDependencyException.Source">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubCircularDependencyException.StackTrace">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="T:Castle.MicroKernel.Fakes.StubComponentNotFoundException">
            <summary>Stub type of Castle.MicroKernel.ComponentNotFoundException</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubComponentNotFoundException.#ctor(System.Type)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubComponentNotFoundException.#ctor(System.String,System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubComponentNotFoundException.#ctor(System.Type,System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubComponentNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubComponentNotFoundException.#ctor(System.String,System.Type,System.Int32)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubComponentNotFoundException.AttachBackingFieldToHelpLink">
            <summary>Attaches delegates to emulate StubComponentNotFoundException.HelpLink as a property with a backing field.</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubComponentNotFoundException.AttachBackingFieldToSource">
            <summary>Attaches delegates to emulate StubComponentNotFoundException.Source as a property with a backing field.</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubComponentNotFoundException.DataGet">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubComponentNotFoundException.GetBaseException">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubComponentNotFoundException.GetBaseException01">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubComponentNotFoundException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubComponentNotFoundException.GetObjectDataSerializationInfoStreamingContext">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubComponentNotFoundException.HelpLinkGet">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubComponentNotFoundException.HelpLinkSetString">
            <summary>Sets the stub of Exception.set_HelpLink(String value)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubComponentNotFoundException.InitializeStub">
            <summary>Initializes a new instance of type StubComponentNotFoundException</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubComponentNotFoundException.MessageGet">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubComponentNotFoundException.SourceGet">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubComponentNotFoundException.SourceSetString">
            <summary>Sets the stub of Exception.set_Source(String value)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubComponentNotFoundException.StackTraceGet">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubComponentNotFoundException.ToString">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubComponentNotFoundException.ToString01">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubComponentNotFoundException.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubComponentNotFoundException.Data">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubComponentNotFoundException.HelpLink">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubComponentNotFoundException.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubComponentNotFoundException.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubComponentNotFoundException.Message">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubComponentNotFoundException.Source">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubComponentNotFoundException.StackTrace">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="T:Castle.MicroKernel.Fakes.StubComponentReference`1">
            <summary>Stub type of Castle.MicroKernel.ComponentReference`1</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubComponentReference`1.#ctor(System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubComponentReference`1.#ctor(System.Type)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubComponentReference`1.ComponentTypeGet">
            <summary>Sets the stub of ComponentReference`1.get_ComponentType()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubComponentReference`1.InitializeStub">
            <summary>Initializes a new instance of type StubComponentReference</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubComponentReference`1.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubComponentReference`1.ComponentType">
            <summary>Sets the stub of ComponentReference`1.get_ComponentType()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubComponentReference`1.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubComponentReference`1.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.Fakes.StubComponentRegistrationException">
            <summary>Stub type of Castle.MicroKernel.ComponentRegistrationException</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubComponentRegistrationException.#ctor(System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubComponentRegistrationException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubComponentRegistrationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubComponentRegistrationException.AttachBackingFieldToHelpLink">
            <summary>Attaches delegates to emulate StubComponentRegistrationException.HelpLink as a property with a backing field.</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubComponentRegistrationException.AttachBackingFieldToSource">
            <summary>Attaches delegates to emulate StubComponentRegistrationException.Source as a property with a backing field.</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubComponentRegistrationException.DataGet">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubComponentRegistrationException.GetBaseException">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubComponentRegistrationException.GetBaseException01">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubComponentRegistrationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubComponentRegistrationException.GetObjectDataSerializationInfoStreamingContext">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubComponentRegistrationException.HelpLinkGet">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubComponentRegistrationException.HelpLinkSetString">
            <summary>Sets the stub of Exception.set_HelpLink(String value)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubComponentRegistrationException.InitializeStub">
            <summary>Initializes a new instance of type StubComponentRegistrationException</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubComponentRegistrationException.MessageGet">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubComponentRegistrationException.SourceGet">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubComponentRegistrationException.SourceSetString">
            <summary>Sets the stub of Exception.set_Source(String value)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubComponentRegistrationException.StackTraceGet">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubComponentRegistrationException.ToString">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubComponentRegistrationException.ToString01">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubComponentRegistrationException.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubComponentRegistrationException.Data">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubComponentRegistrationException.HelpLink">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubComponentRegistrationException.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubComponentRegistrationException.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubComponentRegistrationException.Message">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubComponentRegistrationException.Source">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubComponentRegistrationException.StackTrace">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="T:Castle.MicroKernel.Fakes.StubComponentResolutionException">
            <summary>Stub type of Castle.MicroKernel.ComponentResolutionException</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubComponentResolutionException.#ctor(Castle.Core.ComponentModel)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubComponentResolutionException.#ctor(System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubComponentResolutionException.#ctor(System.String,Castle.Core.ComponentModel)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubComponentResolutionException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubComponentResolutionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubComponentResolutionException.#ctor(System.String,System.Exception,Castle.Core.ComponentModel)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubComponentResolutionException.AttachBackingFieldToHelpLink">
            <summary>Attaches delegates to emulate StubComponentResolutionException.HelpLink as a property with a backing field.</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubComponentResolutionException.AttachBackingFieldToSource">
            <summary>Attaches delegates to emulate StubComponentResolutionException.Source as a property with a backing field.</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubComponentResolutionException.DataGet">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubComponentResolutionException.GetBaseException">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubComponentResolutionException.GetBaseException01">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubComponentResolutionException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubComponentResolutionException.GetObjectDataSerializationInfoStreamingContext">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubComponentResolutionException.HelpLinkGet">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubComponentResolutionException.HelpLinkSetString">
            <summary>Sets the stub of Exception.set_HelpLink(String value)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubComponentResolutionException.InitializeStub">
            <summary>Initializes a new instance of type StubComponentResolutionException</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubComponentResolutionException.MessageGet">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubComponentResolutionException.SourceGet">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubComponentResolutionException.SourceSetString">
            <summary>Sets the stub of Exception.set_Source(String value)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubComponentResolutionException.StackTraceGet">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubComponentResolutionException.ToString">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubComponentResolutionException.ToString01">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubComponentResolutionException.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubComponentResolutionException.Data">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubComponentResolutionException.HelpLink">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubComponentResolutionException.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubComponentResolutionException.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubComponentResolutionException.Message">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubComponentResolutionException.Source">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubComponentResolutionException.StackTrace">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="T:Castle.MicroKernel.Fakes.StubDefaultKernel">
            <summary>Stub type of Castle.MicroKernel.DefaultKernel</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubDefaultKernel.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubDefaultKernel.#ctor(Castle.MicroKernel.IProxyFactory)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubDefaultKernel.#ctor(Castle.MicroKernel.IDependencyResolver,Castle.MicroKernel.IProxyFactory)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubDefaultKernel.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubDefaultKernel.AddChildKernel(Castle.MicroKernel.IKernel)">
            <summary>Sets the stub of DefaultKernel.AddChildKernel(IKernel childKernel)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubDefaultKernel.AddChildKernelIKernel">
            <summary>Sets the stub of DefaultKernel.AddChildKernel(IKernel childKernel)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubDefaultKernel.AddComponent(System.String,System.Type)">
            <summary>Sets the stub of DefaultKernel.AddComponent(String key, Type classType)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubDefaultKernel.AddComponent(System.String,System.Type,System.Type)">
            <summary>Sets the stub of DefaultKernel.AddComponent(String key, Type serviceType, Type classType)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubDefaultKernel.AddComponentStringType">
            <summary>Sets the stub of DefaultKernel.AddComponent(String key, Type classType)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubDefaultKernel.AddComponentStringTypeType">
            <summary>Sets the stub of DefaultKernel.AddComponent(String key, Type serviceType, Type classType)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubDefaultKernel.AddComponentWithExtendedProperties(System.String,System.Type,System.Collections.IDictionary)">
            <summary>Sets the stub of DefaultKernel.AddComponentWithExtendedProperties(String key, Type classType, IDictionary extendedProperties)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubDefaultKernel.AddComponentWithExtendedProperties(System.String,System.Type,System.Type,System.Collections.IDictionary)">
            <summary>Sets the stub of DefaultKernel.AddComponentWithExtendedProperties(String key, Type serviceType, Type classType, IDictionary extendedProperties)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubDefaultKernel.AddComponentWithExtendedPropertiesStringTypeIDictionary">
            <summary>Sets the stub of DefaultKernel.AddComponentWithExtendedProperties(String key, Type classType, IDictionary extendedProperties)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubDefaultKernel.AddComponentWithExtendedPropertiesStringTypeTypeIDictionary">
            <summary>Sets the stub of DefaultKernel.AddComponentWithExtendedProperties(String key, Type serviceType, Type classType, IDictionary extendedProperties)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubDefaultKernel.AddCustomComponent(Castle.Core.ComponentModel)">
            <summary>Sets the stub of DefaultKernel.AddCustomComponent(ComponentModel model)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubDefaultKernel.AddCustomComponentComponentModel">
            <summary>Sets the stub of DefaultKernel.AddCustomComponent(ComponentModel model)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubDefaultKernel.AddFacility(Castle.MicroKernel.IFacility)">
            <summary>Sets the stub of DefaultKernel.AddFacility(IFacility facility)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubDefaultKernel.AddFacility(System.String,Castle.MicroKernel.IFacility)">
            <summary>Sets the stub of DefaultKernel.AddFacility(String key, IFacility facility)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubDefaultKernel.AddFacilityIFacility">
            <summary>Sets the stub of DefaultKernel.AddFacility(IFacility facility)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubDefaultKernel.AddFacilityStringIFacility">
            <summary>Sets the stub of DefaultKernel.AddFacility(String key, IFacility facility)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubDefaultKernel.AddSubSystem(System.String,Castle.MicroKernel.ISubSystem)">
            <summary>Sets the stub of DefaultKernel.AddSubSystem(String name, ISubSystem subsystem)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubDefaultKernel.AddSubSystemStringISubSystem">
            <summary>Sets the stub of DefaultKernel.AddSubSystem(String name, ISubSystem subsystem)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubDefaultKernel.AttachBackingFieldToConfigurationStore">
            <summary>Attaches delegates to emulate StubDefaultKernel.ConfigurationStore as a property with a backing field.</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubDefaultKernel.AttachBackingFieldToParent">
            <summary>Attaches delegates to emulate StubDefaultKernel.Parent as a property with a backing field.</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubDefaultKernel.ConfigurationStoreGet">
            <summary>Sets the stub of DefaultKernel.get_ConfigurationStore()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubDefaultKernel.ConfigurationStoreSetIConfigurationStore">
            <summary>Sets the stub of DefaultKernel.set_ConfigurationStore(IConfigurationStore value)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubDefaultKernel.CreateComponentActivator(Castle.Core.ComponentModel)">
            <summary>Sets the stub of DefaultKernel.CreateComponentActivator(ComponentModel model)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubDefaultKernel.CreateComponentActivatorComponentModel">
            <summary>Sets the stub of DefaultKernel.CreateComponentActivator(ComponentModel model)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubDefaultKernel.CreateLifestyleManager(Castle.Core.ComponentModel,Castle.MicroKernel.IComponentActivator)">
            <summary>Sets the stub of DefaultKernel.CreateLifestyleManager(ComponentModel model, IComponentActivator activator)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubDefaultKernel.CreateLifestyleManagerComponentModelIComponentActivator">
            <summary>Sets the stub of DefaultKernel.CreateLifestyleManager(ComponentModel model, IComponentActivator activator)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubDefaultKernel.Dispose">
            <summary>Sets the stub of DefaultKernel.Dispose()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubDefaultKernel.Dispose01">
            <summary>Sets the stub of DefaultKernel.Dispose()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubDefaultKernel.GetAssignableHandlers(System.Type)">
            <summary>Sets the stub of DefaultKernel.GetAssignableHandlers(Type service)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubDefaultKernel.GetAssignableHandlersType">
            <summary>Sets the stub of DefaultKernel.GetAssignableHandlers(Type service)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubDefaultKernel.GetFacilities">
            <summary>Sets the stub of DefaultKernel.GetFacilities()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubDefaultKernel.GetFacilities01">
            <summary>Sets the stub of DefaultKernel.GetFacilities()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubDefaultKernel.GetHandler(System.String)">
            <summary>Sets the stub of DefaultKernel.GetHandler(String name)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubDefaultKernel.GetHandler(System.Type)">
            <summary>Sets the stub of DefaultKernel.GetHandler(Type service)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubDefaultKernel.GetHandlerString">
            <summary>Sets the stub of DefaultKernel.GetHandler(String name)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubDefaultKernel.GetHandlerType">
            <summary>Sets the stub of DefaultKernel.GetHandler(Type service)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubDefaultKernel.GetHandlers(System.Type)">
            <summary>Sets the stub of DefaultKernel.GetHandlers(Type service)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubDefaultKernel.GetHandlersType">
            <summary>Sets the stub of DefaultKernel.GetHandlers(Type service)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubDefaultKernel.GetSubSystem(System.String)">
            <summary>Sets the stub of DefaultKernel.GetSubSystem(String name)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubDefaultKernel.GetSubSystemString">
            <summary>Sets the stub of DefaultKernel.GetSubSystem(String name)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubDefaultKernel.HasComponent(System.String)">
            <summary>Sets the stub of DefaultKernel.HasComponent(String name)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubDefaultKernel.HasComponent(System.Type)">
            <summary>Sets the stub of DefaultKernel.HasComponent(Type serviceType)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubDefaultKernel.HasComponentString">
            <summary>Sets the stub of DefaultKernel.HasComponent(String name)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubDefaultKernel.HasComponentType">
            <summary>Sets the stub of DefaultKernel.HasComponent(Type serviceType)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubDefaultKernel.InitializeLifetimeService">
            <summary>Sets the stub of DefaultKernel.InitializeLifetimeService()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubDefaultKernel.InitializeLifetimeService01">
            <summary>Sets the stub of DefaultKernel.InitializeLifetimeService()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubDefaultKernel.InitializeStub">
            <summary>Initializes a new instance of type StubDefaultKernel</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubDefaultKernel.ItemGetString">
            <summary>Sets the stub of DefaultKernel.get_Item(String key)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubDefaultKernel.ItemGetType">
            <summary>Sets the stub of DefaultKernel.get_Item(Type service)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubDefaultKernel.ParentGet">
            <summary>Sets the stub of DefaultKernel.get_Parent()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubDefaultKernel.ParentSetIKernel">
            <summary>Sets the stub of DefaultKernel.set_Parent(IKernel value)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubDefaultKernel.RaiseAddedAsChildKernel">
            <summary>Sets the stub of DefaultKernel.RaiseAddedAsChildKernel()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubDefaultKernel.RaiseAddedAsChildKernel01">
            <summary>Sets the stub of DefaultKernel.RaiseAddedAsChildKernel()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubDefaultKernel.RaiseComponentCreated(Castle.Core.ComponentModel,System.Object)">
            <summary>Sets the stub of DefaultKernel.RaiseComponentCreated(ComponentModel model, Object instance)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubDefaultKernel.RaiseComponentCreatedComponentModelObject">
            <summary>Sets the stub of DefaultKernel.RaiseComponentCreated(ComponentModel model, Object instance)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubDefaultKernel.RaiseComponentDestroyed(Castle.Core.ComponentModel,System.Object)">
            <summary>Sets the stub of DefaultKernel.RaiseComponentDestroyed(ComponentModel model, Object instance)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubDefaultKernel.RaiseComponentDestroyedComponentModelObject">
            <summary>Sets the stub of DefaultKernel.RaiseComponentDestroyed(ComponentModel model, Object instance)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubDefaultKernel.RaiseComponentModelCreated(Castle.Core.ComponentModel)">
            <summary>Sets the stub of DefaultKernel.RaiseComponentModelCreated(ComponentModel model)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubDefaultKernel.RaiseComponentModelCreatedComponentModel">
            <summary>Sets the stub of DefaultKernel.RaiseComponentModelCreated(ComponentModel model)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubDefaultKernel.RaiseComponentRegistered(System.String,Castle.MicroKernel.IHandler)">
            <summary>Sets the stub of DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubDefaultKernel.RaiseComponentRegisteredStringIHandler">
            <summary>Sets the stub of DefaultKernel.RaiseComponentRegistered(String key, IHandler handler)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubDefaultKernel.RaiseDependencyResolving(Castle.Core.ComponentModel,Castle.Core.DependencyModel,System.Object)">
            <summary>Sets the stub of DefaultKernel.RaiseDependencyResolving(ComponentModel client, DependencyModel model, Object dependency)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubDefaultKernel.RaiseDependencyResolvingComponentModelDependencyModelObject">
            <summary>Sets the stub of DefaultKernel.RaiseDependencyResolving(ComponentModel client, DependencyModel model, Object dependency)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubDefaultKernel.RaiseHandlerRegistered(Castle.MicroKernel.IHandler)">
            <summary>Sets the stub of DefaultKernel.RaiseHandlerRegistered(IHandler handler)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubDefaultKernel.RaiseHandlerRegisteredIHandler">
            <summary>Sets the stub of DefaultKernel.RaiseHandlerRegistered(IHandler handler)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubDefaultKernel.RaiseHandlersChanged">
            <summary>Sets the stub of DefaultKernel.RaiseHandlersChanged()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubDefaultKernel.RaiseHandlersChanged01">
            <summary>Sets the stub of DefaultKernel.RaiseHandlersChanged()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubDefaultKernel.RaiseRegistrationCompleted">
            <summary>Sets the stub of DefaultKernel.RaiseRegistrationCompleted()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubDefaultKernel.RaiseRegistrationCompleted01">
            <summary>Sets the stub of DefaultKernel.RaiseRegistrationCompleted()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubDefaultKernel.RaiseRemovedAsChildKernel">
            <summary>Sets the stub of DefaultKernel.RaiseRemovedAsChildKernel()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubDefaultKernel.RaiseRemovedAsChildKernel01">
            <summary>Sets the stub of DefaultKernel.RaiseRemovedAsChildKernel()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubDefaultKernel.RegisterSubSystems">
            <summary>Sets the stub of DefaultKernel.RegisterSubSystems()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubDefaultKernel.RegisterSubSystems01">
            <summary>Sets the stub of DefaultKernel.RegisterSubSystems()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubDefaultKernel.ReleaseComponent(System.Object)">
            <summary>Sets the stub of DefaultKernel.ReleaseComponent(Object instance)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubDefaultKernel.ReleaseComponentObject">
            <summary>Sets the stub of DefaultKernel.ReleaseComponent(Object instance)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubDefaultKernel.RemoveChildKernel(Castle.MicroKernel.IKernel)">
            <summary>Sets the stub of DefaultKernel.RemoveChildKernel(IKernel childKernel)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubDefaultKernel.RemoveChildKernelIKernel">
            <summary>Sets the stub of DefaultKernel.RemoveChildKernel(IKernel childKernel)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubDefaultKernel.Resolve(System.String,System.Type)">
            <summary>Sets the stub of DefaultKernel.Resolve(String key, Type service)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubDefaultKernel.Resolve(System.String,System.Type,System.Collections.IDictionary)">
            <summary>Sets the stub of DefaultKernel.Resolve(String key, Type service, IDictionary arguments)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubDefaultKernel.ResolveStringType">
            <summary>Sets the stub of DefaultKernel.Resolve(String key, Type service)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubDefaultKernel.ResolveStringTypeIDictionary">
            <summary>Sets the stub of DefaultKernel.Resolve(String key, Type service, IDictionary arguments)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubDefaultKernel.WrapParentHandler(Castle.MicroKernel.IHandler)">
            <summary>Sets the stub of DefaultKernel.WrapParentHandler(IHandler parentHandler)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubDefaultKernel.WrapParentHandlerIHandler">
            <summary>Sets the stub of DefaultKernel.WrapParentHandler(IHandler parentHandler)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubDefaultKernel.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubDefaultKernel.ConfigurationStore">
            <summary>Sets the stub of DefaultKernel.get_ConfigurationStore()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubDefaultKernel.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubDefaultKernel.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubDefaultKernel.Item(System.String)">
            <summary>Sets the stub of DefaultKernel.get_Item(String key)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubDefaultKernel.Item(System.Type)">
            <summary>Sets the stub of DefaultKernel.get_Item(Type service)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubDefaultKernel.Parent">
            <summary>Sets the stub of DefaultKernel.get_Parent()</summary>
        </member>
        <member name="T:Castle.MicroKernel.Fakes.StubIComponentActivator">
            <summary>Stub type of Castle.MicroKernel.IComponentActivator</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIComponentActivator.#ctor">
            <summary>Initializes a new instance of type StubIComponentActivator</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIComponentActivator.cw::Castle#MicroKernel#IComponentActivator#Create(Castle.MicroKernel.Context.CreationContext,Castle.MicroKernel.Burden)">
            <summary>Sets the stub of IComponentActivator.Create(CreationContext context, Burden burden)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIComponentActivator.cw::Castle#MicroKernel#IComponentActivator#Destroy(System.Object)">
            <summary>Sets the stub of IComponentActivator.Destroy(Object instance)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIComponentActivator.CreateCreationContextBurden">
            <summary>Sets the stub of IComponentActivator.Create(CreationContext context, Burden burden)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIComponentActivator.DestroyObject">
            <summary>Sets the stub of IComponentActivator.Destroy(Object instance)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Fakes.StubIComponentModelBuilder">
            <summary>Stub type of Castle.MicroKernel.IComponentModelBuilder</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIComponentModelBuilder.#ctor">
            <summary>Initializes a new instance of type StubIComponentModelBuilder</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIComponentModelBuilder.AddContributorIContributeComponentModelConstruction">
            <summary>Sets the stub of IComponentModelBuilder.AddContributor(IContributeComponentModelConstruction contributor)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIComponentModelBuilder.BuildModelComponentNameTypeArrayTypeIDictionary">
            <summary>Sets the stub of IComponentModelBuilder.BuildModel(ComponentName name, Type[] services, Type classType, IDictionary extendedProperties)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIComponentModelBuilder.BuildModelIComponentModelDescriptorArray">
            <summary>Sets the stub of IComponentModelBuilder.BuildModel(IComponentModelDescriptor[] customContributors)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIComponentModelBuilder.cw::Castle#MicroKernel#IComponentModelBuilder#AddContributor(Castle.MicroKernel.ModelBuilder.IContributeComponentModelConstruction)">
            <summary>Sets the stub of IComponentModelBuilder.AddContributor(IContributeComponentModelConstruction contributor)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIComponentModelBuilder.cw::Castle#MicroKernel#IComponentModelBuilder#BuildModel(Castle.MicroKernel.ModelBuilder.IComponentModelDescriptor[])">
            <summary>Sets the stub of IComponentModelBuilder.BuildModel(IComponentModelDescriptor[] customContributors)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIComponentModelBuilder.cw::Castle#MicroKernel#IComponentModelBuilder#BuildModel(Castle.Core.ComponentName,System.Type[],System.Type,System.Collections.IDictionary)">
            <summary>Sets the stub of IComponentModelBuilder.BuildModel(ComponentName name, Type[] services, Type classType, IDictionary extendedProperties)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIComponentModelBuilder.cw::Castle#MicroKernel#IComponentModelBuilder#RemoveContributor(Castle.MicroKernel.ModelBuilder.IContributeComponentModelConstruction)">
            <summary>Sets the stub of IComponentModelBuilder.RemoveContributor(IContributeComponentModelConstruction contributor)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIComponentModelBuilder.ContributorsGet">
            <summary>Sets the stub of IComponentModelBuilder.get_Contributors()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIComponentModelBuilder.RemoveContributorIContributeComponentModelConstruction">
            <summary>Sets the stub of IComponentModelBuilder.RemoveContributor(IContributeComponentModelConstruction contributor)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubIComponentModelBuilder.cw::Castle#MicroKernel#IComponentModelBuilder#Contributors">
            <summary>Sets the stub of IComponentModelBuilder.get_Contributors()</summary>
        </member>
        <member name="T:Castle.MicroKernel.Fakes.StubIContextLifestyleManager">
            <summary>Stub type of Castle.MicroKernel.IContextLifestyleManager</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIContextLifestyleManager.#ctor">
            <summary>Initializes a new instance of type StubIContextLifestyleManager</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIContextLifestyleManager.cw::Castle#MicroKernel#IContextLifestyleManager#GetContextInstance(Castle.MicroKernel.Context.CreationContext)">
            <summary>Sets the stub of IContextLifestyleManager.GetContextInstance(CreationContext context)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIContextLifestyleManager.GetContextInstanceCreationContext">
            <summary>Sets the stub of IContextLifestyleManager.GetContextInstance(CreationContext context)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Fakes.StubIDependencyResolver">
            <summary>Stub type of Castle.MicroKernel.IDependencyResolver</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIDependencyResolver.#ctor">
            <summary>Initializes a new instance of type StubIDependencyResolver</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIDependencyResolver.AddSubResolverISubDependencyResolver">
            <summary>Sets the stub of IDependencyResolver.AddSubResolver(ISubDependencyResolver subResolver)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIDependencyResolver.CanResolveCreationContextISubDependencyResolverComponentModelDependencyModel">
            <summary>Sets the stub of ISubDependencyResolver.CanResolve(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model, DependencyModel dependency)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIDependencyResolver.cw::Castle#MicroKernel#IDependencyResolver#AddSubResolver(Castle.MicroKernel.ISubDependencyResolver)">
            <summary>Sets the stub of IDependencyResolver.AddSubResolver(ISubDependencyResolver subResolver)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIDependencyResolver.cw::Castle#MicroKernel#IDependencyResolver#Initialize(Castle.MicroKernel.IKernelInternal,Castle.MicroKernel.DependencyDelegate)">
            <summary>Sets the stub of IDependencyResolver.Initialize(IKernelInternal kernel, DependencyDelegate resolving)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIDependencyResolver.cw::Castle#MicroKernel#IDependencyResolver#RemoveSubResolver(Castle.MicroKernel.ISubDependencyResolver)">
            <summary>Sets the stub of IDependencyResolver.RemoveSubResolver(ISubDependencyResolver subResolver)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIDependencyResolver.cw::Castle#MicroKernel#ISubDependencyResolver#CanResolve(Castle.MicroKernel.Context.CreationContext,Castle.MicroKernel.ISubDependencyResolver,Castle.Core.ComponentModel,Castle.Core.DependencyModel)">
            <summary>Sets the stub of ISubDependencyResolver.CanResolve(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model, DependencyModel dependency)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIDependencyResolver.cw::Castle#MicroKernel#ISubDependencyResolver#Resolve(Castle.MicroKernel.Context.CreationContext,Castle.MicroKernel.ISubDependencyResolver,Castle.Core.ComponentModel,Castle.Core.DependencyModel)">
            <summary>Sets the stub of ISubDependencyResolver.Resolve(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model, DependencyModel dependency)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIDependencyResolver.InitializeIKernelInternalDependencyDelegate">
            <summary>Sets the stub of IDependencyResolver.Initialize(IKernelInternal kernel, DependencyDelegate resolving)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIDependencyResolver.RemoveSubResolverISubDependencyResolver">
            <summary>Sets the stub of IDependencyResolver.RemoveSubResolver(ISubDependencyResolver subResolver)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIDependencyResolver.ResolveCreationContextISubDependencyResolverComponentModelDependencyModel">
            <summary>Sets the stub of ISubDependencyResolver.Resolve(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model, DependencyModel dependency)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Fakes.StubIFacility">
            <summary>Stub type of Castle.MicroKernel.IFacility</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIFacility.#ctor">
            <summary>Initializes a new instance of type StubIFacility</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIFacility.cw::Castle#MicroKernel#IFacility#Init(Castle.MicroKernel.IKernel,Castle.Core.Configuration.IConfiguration)">
            <summary>Sets the stub of IFacility.Init(IKernel kernel, IConfiguration facilityConfig)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIFacility.cw::Castle#MicroKernel#IFacility#Terminate">
            <summary>Sets the stub of IFacility.Terminate()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIFacility.InitIKernelIConfiguration">
            <summary>Sets the stub of IFacility.Init(IKernel kernel, IConfiguration facilityConfig)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIFacility.Terminate">
            <summary>Sets the stub of IFacility.Terminate()</summary>
        </member>
        <member name="T:Castle.MicroKernel.Fakes.StubIHandler">
            <summary>Stub type of Castle.MicroKernel.IHandler</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIHandler.#ctor">
            <summary>Initializes a new instance of type StubIHandler</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIHandler.CanResolveCreationContextISubDependencyResolverComponentModelDependencyModel">
            <summary>Sets the stub of ISubDependencyResolver.CanResolve(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model, DependencyModel dependency)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIHandler.cw::Castle#MicroKernel#IHandler#Init(Castle.MicroKernel.IKernelInternal)">
            <summary>Sets the stub of IHandler.Init(IKernelInternal kernel)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIHandler.cw::Castle#MicroKernel#IHandler#IsBeingResolvedInContext(Castle.MicroKernel.Context.CreationContext)">
            <summary>Sets the stub of IHandler.IsBeingResolvedInContext(CreationContext context)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIHandler.cw::Castle#MicroKernel#IHandler#Release(Castle.MicroKernel.Burden)">
            <summary>Sets the stub of IHandler.Release(Burden burden)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIHandler.cw::Castle#MicroKernel#IHandler#Resolve(Castle.MicroKernel.Context.CreationContext)">
            <summary>Sets the stub of IHandler.Resolve(CreationContext context)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIHandler.cw::Castle#MicroKernel#IHandler#Supports(System.Type)">
            <summary>Sets the stub of IHandler.Supports(Type service)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIHandler.cw::Castle#MicroKernel#IHandler#SupportsAssignable(System.Type)">
            <summary>Sets the stub of IHandler.SupportsAssignable(Type service)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIHandler.cw::Castle#MicroKernel#IHandler#TryResolve(Castle.MicroKernel.Context.CreationContext)">
            <summary>Sets the stub of IHandler.TryResolve(CreationContext context)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIHandler.cw::Castle#MicroKernel#ISubDependencyResolver#CanResolve(Castle.MicroKernel.Context.CreationContext,Castle.MicroKernel.ISubDependencyResolver,Castle.Core.ComponentModel,Castle.Core.DependencyModel)">
            <summary>Sets the stub of ISubDependencyResolver.CanResolve(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model, DependencyModel dependency)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIHandler.cw::Castle#MicroKernel#ISubDependencyResolver#Resolve(Castle.MicroKernel.Context.CreationContext,Castle.MicroKernel.ISubDependencyResolver,Castle.Core.ComponentModel,Castle.Core.DependencyModel)">
            <summary>Sets the stub of ISubDependencyResolver.Resolve(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model, DependencyModel dependency)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIHandler.ComponentModelGet">
            <summary>Sets the stub of IHandler.get_ComponentModel()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIHandler.CurrentStateGet">
            <summary>Sets the stub of IHandler.get_CurrentState()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIHandler.InitIKernelInternal">
            <summary>Sets the stub of IHandler.Init(IKernelInternal kernel)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIHandler.IsBeingResolvedInContextCreationContext">
            <summary>Sets the stub of IHandler.IsBeingResolvedInContext(CreationContext context)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIHandler.ReleaseBurden">
            <summary>Sets the stub of IHandler.Release(Burden burden)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIHandler.ResolveCreationContext">
            <summary>Sets the stub of IHandler.Resolve(CreationContext context)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIHandler.ResolveCreationContextISubDependencyResolverComponentModelDependencyModel">
            <summary>Sets the stub of ISubDependencyResolver.Resolve(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model, DependencyModel dependency)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIHandler.SupportsAssignableType">
            <summary>Sets the stub of IHandler.SupportsAssignable(Type service)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIHandler.SupportsType">
            <summary>Sets the stub of IHandler.Supports(Type service)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIHandler.TryResolveCreationContext">
            <summary>Sets the stub of IHandler.TryResolve(CreationContext context)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubIHandler.cw::Castle#MicroKernel#IHandler#ComponentModel">
            <summary>Sets the stub of IHandler.get_ComponentModel()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubIHandler.cw::Castle#MicroKernel#IHandler#CurrentState">
            <summary>Sets the stub of IHandler.get_CurrentState()</summary>
        </member>
        <member name="T:Castle.MicroKernel.Fakes.StubIHandlerFactory">
            <summary>Stub type of Castle.MicroKernel.IHandlerFactory</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIHandlerFactory.#ctor">
            <summary>Initializes a new instance of type StubIHandlerFactory</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIHandlerFactory.cw::Castle#MicroKernel#IHandlerFactory#Create(Castle.Core.ComponentModel)">
            <summary>Sets the stub of IHandlerFactory.Create(ComponentModel model)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIHandlerFactory.CreateComponentModel">
            <summary>Sets the stub of IHandlerFactory.Create(ComponentModel model)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Fakes.StubIHandlerSelector">
            <summary>Stub type of Castle.MicroKernel.IHandlerSelector</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIHandlerSelector.#ctor">
            <summary>Initializes a new instance of type StubIHandlerSelector</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIHandlerSelector.cw::Castle#MicroKernel#IHandlerSelector#HasOpinionAbout(System.String,System.Type)">
            <summary>Sets the stub of IHandlerSelector.HasOpinionAbout(String key, Type service)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIHandlerSelector.cw::Castle#MicroKernel#IHandlerSelector#SelectHandler(System.String,System.Type,Castle.MicroKernel.IHandler[])">
            <summary>Sets the stub of IHandlerSelector.SelectHandler(String key, Type service, IHandler[] handlers)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIHandlerSelector.HasOpinionAboutStringType">
            <summary>Sets the stub of IHandlerSelector.HasOpinionAbout(String key, Type service)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIHandlerSelector.SelectHandlerStringTypeIHandlerArray">
            <summary>Sets the stub of IHandlerSelector.SelectHandler(String key, Type service, IHandler[] handlers)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Fakes.StubIHandlersFilter">
            <summary>Stub type of Castle.MicroKernel.IHandlersFilter</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIHandlersFilter.#ctor">
            <summary>Initializes a new instance of type StubIHandlersFilter</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIHandlersFilter.cw::Castle#MicroKernel#IHandlersFilter#HasOpinionAbout(System.Type)">
            <summary>Sets the stub of IHandlersFilter.HasOpinionAbout(Type service)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIHandlersFilter.cw::Castle#MicroKernel#IHandlersFilter#SelectHandlers(System.Type,Castle.MicroKernel.IHandler[])">
            <summary>Sets the stub of IHandlersFilter.SelectHandlers(Type service, IHandler[] handlers)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIHandlersFilter.HasOpinionAboutType">
            <summary>Sets the stub of IHandlersFilter.HasOpinionAbout(Type service)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIHandlersFilter.SelectHandlersTypeIHandlerArray">
            <summary>Sets the stub of IHandlersFilter.SelectHandlers(Type service, IHandler[] handlers)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Fakes.StubIKernel">
            <summary>Stub type of Castle.MicroKernel.IKernel</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.#ctor">
            <summary>Initializes a new instance of type StubIKernel</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.AddChildKernelIKernel">
            <summary>Sets the stub of IKernel.AddChildKernel(IKernel kernel)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.AddComponentInstanceOf1Object``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.Object})">
            <summary>Sets stubs of AddComponentInstance(Object instance)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.AddComponentInstanceOf1TypeObject``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.Type,System.Object})">
            <summary>Sets stubs of AddComponentInstance(Type serviceType, Object instance)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.AddComponentInstanceStringObject">
            <summary>Sets the stub of IKernel.AddComponentInstance(String key, Object instance)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.AddComponentInstanceStringTypeObject">
            <summary>Sets the stub of IKernel.AddComponentInstance(String key, Type serviceType, Object instance)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.AddComponentInstanceStringTypeTypeObject">
            <summary>Sets the stub of IKernel.AddComponentInstance(String key, Type serviceType, Type classType, Object instance)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.AddComponentOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action)">
            <summary>Sets stubs of AddComponent()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.AddComponentOf1LifestyleType``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{Castle.Core.LifestyleType})">
            <summary>Sets stubs of AddComponent(LifestyleType lifestyle)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.AddComponentOf1LifestyleTypeBoolean``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{Castle.Core.LifestyleType,System.Boolean})">
            <summary>Sets stubs of AddComponent(LifestyleType lifestyle, Boolean overwriteLifestyle)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.AddComponentOf1Type``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.Type})">
            <summary>Sets stubs of AddComponent(Type serviceType)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.AddComponentOf1TypeLifestyleType``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.Type,Castle.Core.LifestyleType})">
            <summary>Sets stubs of AddComponent(Type serviceType, LifestyleType lifestyle)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.AddComponentOf1TypeLifestyleTypeBoolean``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.Type,Castle.Core.LifestyleType,System.Boolean})">
            <summary>Sets stubs of AddComponent(Type serviceType, LifestyleType lifestyle, Boolean overwriteLifestyle)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.AddComponentStringType">
            <summary>Sets the stub of IKernel.AddComponent(String key, Type classType)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.AddComponentStringTypeLifestyleType">
            <summary>Sets the stub of IKernel.AddComponent(String key, Type classType, LifestyleType lifestyle)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.AddComponentStringTypeLifestyleTypeBoolean">
            <summary>Sets the stub of IKernel.AddComponent(String key, Type classType, LifestyleType lifestyle, Boolean overwriteLifestyle)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.AddComponentStringTypeType">
            <summary>Sets the stub of IKernel.AddComponent(String key, Type serviceType, Type classType)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.AddComponentStringTypeTypeLifestyleType">
            <summary>Sets the stub of IKernel.AddComponent(String key, Type serviceType, Type classType, LifestyleType lifestyle)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.AddComponentStringTypeTypeLifestyleTypeBoolean">
            <summary>Sets the stub of IKernel.AddComponent(String key, Type serviceType, Type classType, LifestyleType lifestyle, Boolean overwriteLifestyle)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.AddComponentWithExtendedPropertiesStringTypeIDictionary">
            <summary>Sets the stub of IKernel.AddComponentWithExtendedProperties(String key, Type classType, IDictionary extendedProperties)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.AddComponentWithExtendedPropertiesStringTypeTypeIDictionary">
            <summary>Sets the stub of IKernel.AddComponentWithExtendedProperties(String key, Type serviceType, Type classType, IDictionary extendedProperties)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.AddFacilityIFacility">
            <summary>Sets the stub of IKernel.AddFacility(IFacility facility)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.AddFacilityOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.IKernel})">
            <summary>Sets stubs of AddFacility()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.AddFacilityOf1ActionOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Action{``0},Castle.MicroKernel.IKernel})">
            <summary>Sets stubs of AddFacility(Action`1&lt;!!0&gt; onCreate)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.AddFacilityOf1String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,Castle.MicroKernel.IKernel})">
            <summary>Sets stubs of AddFacility(String key)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.AddFacilityOf1StringActionOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,System.Action{``0},Castle.MicroKernel.IKernel})">
            <summary>Sets stubs of AddFacility(String key, Action`1&lt;!!0&gt; onCreate)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.AddFacilityStringIFacility">
            <summary>Sets the stub of IKernel.AddFacility(String key, IFacility facility)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.AddHandlerSelectorIHandlerSelector">
            <summary>Sets the stub of IKernel.AddHandlerSelector(IHandlerSelector selector)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.AddHandlersFilterIHandlersFilter">
            <summary>Sets the stub of IKernel.AddHandlersFilter(IHandlersFilter filter)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.AddSubSystemStringISubSystem">
            <summary>Sets the stub of IKernel.AddSubSystem(String name, ISubSystem subsystem)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.AttachBackingFieldToConfigurationStore">
            <summary>Attaches delegates to emulate StubIKernel.ConfigurationStore as a property with a backing field.</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.AttachBackingFieldToParent">
            <summary>Attaches delegates to emulate StubIKernel.Parent as a property with a backing field.</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.AttachBackingFieldToProxyFactory">
            <summary>Attaches delegates to emulate StubIKernel.ProxyFactory as a property with a backing field.</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.AttachBackingFieldToReleasePolicy">
            <summary>Attaches delegates to emulate StubIKernel.ReleasePolicy as a property with a backing field.</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.cw::Castle#MicroKernel#IKernel#AddChildKernel(Castle.MicroKernel.IKernel)">
            <summary>Sets the stub of IKernel.AddChildKernel(IKernel kernel)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.cw::Castle#MicroKernel#IKernel#AddComponent``1">
            <summary>Sets the stub of IKernel.AddComponent()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.cw::Castle#MicroKernel#IKernel#AddComponent``1(System.Type)">
            <summary>Sets the stub of IKernel.AddComponent(Type serviceType)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.cw::Castle#MicroKernel#IKernel#AddComponent``1(Castle.Core.LifestyleType)">
            <summary>Sets the stub of IKernel.AddComponent(LifestyleType lifestyle)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.cw::Castle#MicroKernel#IKernel#AddComponent(System.String,System.Type)">
            <summary>Sets the stub of IKernel.AddComponent(String key, Type classType)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.cw::Castle#MicroKernel#IKernel#AddComponent``1(System.Type,Castle.Core.LifestyleType)">
            <summary>Sets the stub of IKernel.AddComponent(Type serviceType, LifestyleType lifestyle)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.cw::Castle#MicroKernel#IKernel#AddComponent``1(Castle.Core.LifestyleType,System.Boolean)">
            <summary>Sets the stub of IKernel.AddComponent(LifestyleType lifestyle, Boolean overwriteLifestyle)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.cw::Castle#MicroKernel#IKernel#AddComponent(System.String,System.Type,Castle.Core.LifestyleType)">
            <summary>Sets the stub of IKernel.AddComponent(String key, Type classType, LifestyleType lifestyle)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.cw::Castle#MicroKernel#IKernel#AddComponent(System.String,System.Type,System.Type)">
            <summary>Sets the stub of IKernel.AddComponent(String key, Type serviceType, Type classType)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.cw::Castle#MicroKernel#IKernel#AddComponent``1(System.Type,Castle.Core.LifestyleType,System.Boolean)">
            <summary>Sets the stub of IKernel.AddComponent(Type serviceType, LifestyleType lifestyle, Boolean overwriteLifestyle)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.cw::Castle#MicroKernel#IKernel#AddComponent(System.String,System.Type,System.Type,Castle.Core.LifestyleType)">
            <summary>Sets the stub of IKernel.AddComponent(String key, Type serviceType, Type classType, LifestyleType lifestyle)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.cw::Castle#MicroKernel#IKernel#AddComponent(System.String,System.Type,Castle.Core.LifestyleType,System.Boolean)">
            <summary>Sets the stub of IKernel.AddComponent(String key, Type classType, LifestyleType lifestyle, Boolean overwriteLifestyle)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.cw::Castle#MicroKernel#IKernel#AddComponent(System.String,System.Type,System.Type,Castle.Core.LifestyleType,System.Boolean)">
            <summary>Sets the stub of IKernel.AddComponent(String key, Type serviceType, Type classType, LifestyleType lifestyle, Boolean overwriteLifestyle)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.cw::Castle#MicroKernel#IKernel#AddComponentInstance``1(System.Object)">
            <summary>Sets the stub of IKernel.AddComponentInstance(Object instance)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.cw::Castle#MicroKernel#IKernel#AddComponentInstance(System.String,System.Object)">
            <summary>Sets the stub of IKernel.AddComponentInstance(String key, Object instance)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.cw::Castle#MicroKernel#IKernel#AddComponentInstance``1(System.Type,System.Object)">
            <summary>Sets the stub of IKernel.AddComponentInstance(Type serviceType, Object instance)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.cw::Castle#MicroKernel#IKernel#AddComponentInstance(System.String,System.Type,System.Object)">
            <summary>Sets the stub of IKernel.AddComponentInstance(String key, Type serviceType, Object instance)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.cw::Castle#MicroKernel#IKernel#AddComponentInstance(System.String,System.Type,System.Type,System.Object)">
            <summary>Sets the stub of IKernel.AddComponentInstance(String key, Type serviceType, Type classType, Object instance)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.cw::Castle#MicroKernel#IKernel#AddComponentWithExtendedProperties(System.String,System.Type,System.Collections.IDictionary)">
            <summary>Sets the stub of IKernel.AddComponentWithExtendedProperties(String key, Type classType, IDictionary extendedProperties)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.cw::Castle#MicroKernel#IKernel#AddComponentWithExtendedProperties(System.String,System.Type,System.Type,System.Collections.IDictionary)">
            <summary>Sets the stub of IKernel.AddComponentWithExtendedProperties(String key, Type serviceType, Type classType, IDictionary extendedProperties)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.cw::Castle#MicroKernel#IKernel#AddFacility``1">
            <summary>Sets the stub of IKernel.AddFacility()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.cw::Castle#MicroKernel#IKernel#AddFacility(Castle.MicroKernel.IFacility)">
            <summary>Sets the stub of IKernel.AddFacility(IFacility facility)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.cw::Castle#MicroKernel#IKernel#AddFacility``1(System.String)">
            <summary>Sets the stub of IKernel.AddFacility(String key)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.cw::Castle#MicroKernel#IKernel#AddFacility``1(System.Action{``0})">
            <summary>Sets the stub of IKernel.AddFacility(Action`1&lt;!!0&gt; onCreate)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.cw::Castle#MicroKernel#IKernel#AddFacility(System.String,Castle.MicroKernel.IFacility)">
            <summary>Sets the stub of IKernel.AddFacility(String key, IFacility facility)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.cw::Castle#MicroKernel#IKernel#AddFacility``1(System.String,System.Action{``0})">
            <summary>Sets the stub of IKernel.AddFacility(String key, Action`1&lt;!!0&gt; onCreate)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.cw::Castle#MicroKernel#IKernel#AddHandlerSelector(Castle.MicroKernel.IHandlerSelector)">
            <summary>Sets the stub of IKernel.AddHandlerSelector(IHandlerSelector selector)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.cw::Castle#MicroKernel#IKernel#AddHandlersFilter(Castle.MicroKernel.IHandlersFilter)">
            <summary>Sets the stub of IKernel.AddHandlersFilter(IHandlersFilter filter)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.cw::Castle#MicroKernel#IKernel#AddSubSystem(System.String,Castle.MicroKernel.ISubSystem)">
            <summary>Sets the stub of IKernel.AddSubSystem(String name, ISubSystem subsystem)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.cw::Castle#MicroKernel#IKernel#GetAssignableHandlers(System.Type)">
            <summary>Sets the stub of IKernel.GetAssignableHandlers(Type service)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.cw::Castle#MicroKernel#IKernel#GetFacilities">
            <summary>Sets the stub of IKernel.GetFacilities()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.cw::Castle#MicroKernel#IKernel#GetHandler(System.String)">
            <summary>Sets the stub of IKernel.GetHandler(String name)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.cw::Castle#MicroKernel#IKernel#GetHandler(System.Type)">
            <summary>Sets the stub of IKernel.GetHandler(Type service)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.cw::Castle#MicroKernel#IKernel#GetHandlers(System.Type)">
            <summary>Sets the stub of IKernel.GetHandlers(Type service)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.cw::Castle#MicroKernel#IKernel#GetSubSystem(System.String)">
            <summary>Sets the stub of IKernel.GetSubSystem(String name)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.cw::Castle#MicroKernel#IKernel#HasComponent(System.String)">
            <summary>Sets the stub of IKernel.HasComponent(String name)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.cw::Castle#MicroKernel#IKernel#HasComponent(System.Type)">
            <summary>Sets the stub of IKernel.HasComponent(Type service)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.cw::Castle#MicroKernel#IKernel#Register(Castle.MicroKernel.Registration.IRegistration[])">
            <summary>Sets the stub of IKernel.Register(IRegistration[] registrations)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.cw::Castle#MicroKernel#IKernel#ReleaseComponent(System.Object)">
            <summary>Sets the stub of IKernel.ReleaseComponent(Object instance)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.cw::Castle#MicroKernel#IKernel#RemoveChildKernel(Castle.MicroKernel.IKernel)">
            <summary>Sets the stub of IKernel.RemoveChildKernel(IKernel kernel)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.cw::Castle#MicroKernel#IKernel#Resolve``1">
            <summary>Sets the stub of IKernel.Resolve()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.cw::Castle#MicroKernel#IKernel#Resolve``1(System.Object)">
            <summary>Sets the stub of IKernel.Resolve(Object argumentsAsAnonymousType)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.cw::Castle#MicroKernel#IKernel#Resolve``1(System.String)">
            <summary>Sets the stub of IKernel.Resolve(String key)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.cw::Castle#MicroKernel#IKernel#Resolve(System.Type)">
            <summary>Sets the stub of IKernel.Resolve(Type service)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.cw::Castle#MicroKernel#IKernel#Resolve``1(System.String,System.Collections.IDictionary)">
            <summary>Sets the stub of IKernel.Resolve(String key, IDictionary arguments)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.cw::Castle#MicroKernel#IKernel#Resolve(System.String,System.Object)">
            <summary>Sets the stub of IKernel.Resolve(String key, Object argumentsAsAnonymousType)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.cw::Castle#MicroKernel#IKernel#Resolve(System.String,System.Type)">
            <summary>Sets the stub of IKernel.Resolve(String key, Type service)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.cw::Castle#MicroKernel#IKernel#Resolve(System.String,System.Collections.IDictionary)">
            <summary>Sets the stub of IKernel.Resolve(String key, IDictionary arguments)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.cw::Castle#MicroKernel#IKernel#Resolve(System.Type,System.Object)">
            <summary>Sets the stub of IKernel.Resolve(Type service, Object argumentsAsAnonymousType)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.cw::Castle#MicroKernel#IKernel#Resolve``1(System.Collections.IDictionary)">
            <summary>Sets the stub of IKernel.Resolve(IDictionary arguments)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.cw::Castle#MicroKernel#IKernel#Resolve(System.Type,System.Collections.IDictionary)">
            <summary>Sets the stub of IKernel.Resolve(Type service, IDictionary arguments)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.cw::Castle#MicroKernel#IKernel#Resolve(System.String,System.Type,System.Collections.IDictionary)">
            <summary>Sets the stub of IKernel.Resolve(String key, Type service, IDictionary arguments)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.cw::Castle#MicroKernel#IKernel#ResolveAll``1">
            <summary>Sets the stub of IKernel.ResolveAll()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.cw::Castle#MicroKernel#IKernel#ResolveAll(System.Type)">
            <summary>Sets the stub of IKernel.ResolveAll(Type service)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.cw::Castle#MicroKernel#IKernel#ResolveAll``1(System.Object)">
            <summary>Sets the stub of IKernel.ResolveAll(Object argumentsAsAnonymousType)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.cw::Castle#MicroKernel#IKernel#ResolveAll``1(System.Collections.IDictionary)">
            <summary>Sets the stub of IKernel.ResolveAll(IDictionary arguments)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.cw::Castle#MicroKernel#IKernel#ResolveAll(System.Type,System.Object)">
            <summary>Sets the stub of IKernel.ResolveAll(Type service, Object argumentsAsAnonymousType)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.cw::Castle#MicroKernel#IKernel#ResolveAll(System.Type,System.Collections.IDictionary)">
            <summary>Sets the stub of IKernel.ResolveAll(Type service, IDictionary arguments)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.ComponentModelBuilderGet">
            <summary>Sets the stub of IKernel.get_ComponentModelBuilder()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.ConfigurationStoreGet">
            <summary>Sets the stub of IKernel.get_ConfigurationStore()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.ConfigurationStoreSetIConfigurationStore">
            <summary>Sets the stub of IKernel.set_ConfigurationStore(IConfigurationStore value)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.Dispose">
            <summary>Sets the stub of IDisposable.Dispose()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.GetAssignableHandlersType">
            <summary>Sets the stub of IKernel.GetAssignableHandlers(Type service)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.GetFacilities">
            <summary>Sets the stub of IKernel.GetFacilities()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.GetHandlerString">
            <summary>Sets the stub of IKernel.GetHandler(String name)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.GetHandlerType">
            <summary>Sets the stub of IKernel.GetHandler(Type service)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.GetHandlersType">
            <summary>Sets the stub of IKernel.GetHandlers(Type service)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.GetSubSystemString">
            <summary>Sets the stub of IKernel.GetSubSystem(String name)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.GraphNodesGet">
            <summary>Sets the stub of IKernel.get_GraphNodes()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.HandlerFactoryGet">
            <summary>Sets the stub of IKernel.get_HandlerFactory()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.HasComponentString">
            <summary>Sets the stub of IKernel.HasComponent(String name)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.HasComponentType">
            <summary>Sets the stub of IKernel.HasComponent(Type service)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.ItemGetString">
            <summary>Sets the stub of IKernel.get_Item(String key)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.ItemGetType">
            <summary>Sets the stub of IKernel.get_Item(Type service)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.ParentGet">
            <summary>Sets the stub of IKernel.get_Parent()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.ParentSetIKernel">
            <summary>Sets the stub of IKernel.set_Parent(IKernel value)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.ProxyFactoryGet">
            <summary>Sets the stub of IKernel.get_ProxyFactory()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.ProxyFactorySetIProxyFactory">
            <summary>Sets the stub of IKernel.set_ProxyFactory(IProxyFactory value)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.RegisterIRegistrationArray">
            <summary>Sets the stub of IKernel.Register(IRegistration[] registrations)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.ReleaseComponentObject">
            <summary>Sets the stub of IKernel.ReleaseComponent(Object instance)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.ReleasePolicyGet">
            <summary>Sets the stub of IKernel.get_ReleasePolicy()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.ReleasePolicySetIReleasePolicy">
            <summary>Sets the stub of IKernel.set_ReleasePolicy(IReleasePolicy value)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.RemoveChildKernelIKernel">
            <summary>Sets the stub of IKernel.RemoveChildKernel(IKernel kernel)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.ResolveAllOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0[]})">
            <summary>Sets stubs of ResolveAll()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.ResolveAllOf1IDictionary``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.IDictionary,``0[]})">
            <summary>Sets stubs of ResolveAll(IDictionary arguments)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.ResolveAllOf1Object``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Object,``0[]})">
            <summary>Sets stubs of ResolveAll(Object argumentsAsAnonymousType)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.ResolveAllType">
            <summary>Sets the stub of IKernel.ResolveAll(Type service)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.ResolveAllTypeIDictionary">
            <summary>Sets the stub of IKernel.ResolveAll(Type service, IDictionary arguments)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.ResolveAllTypeObject">
            <summary>Sets the stub of IKernel.ResolveAll(Type service, Object argumentsAsAnonymousType)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.ResolveOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0})">
            <summary>Sets stubs of Resolve()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.ResolveOf1IDictionary``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.IDictionary,``0})">
            <summary>Sets stubs of Resolve(IDictionary arguments)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.ResolveOf1Object``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Object,``0})">
            <summary>Sets stubs of Resolve(Object argumentsAsAnonymousType)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.ResolveOf1String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,``0})">
            <summary>Sets stubs of Resolve(String key)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.ResolveOf1StringIDictionary``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,System.Collections.IDictionary,``0})">
            <summary>Sets stubs of Resolve(String key, IDictionary arguments)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.ResolveStringIDictionary">
            <summary>Sets the stub of IKernel.Resolve(String key, IDictionary arguments)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.ResolveStringObject">
            <summary>Sets the stub of IKernel.Resolve(String key, Object argumentsAsAnonymousType)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.ResolveStringType">
            <summary>Sets the stub of IKernel.Resolve(String key, Type service)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.ResolveStringTypeIDictionary">
            <summary>Sets the stub of IKernel.Resolve(String key, Type service, IDictionary arguments)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.ResolveType">
            <summary>Sets the stub of IKernel.Resolve(Type service)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.ResolveTypeIDictionary">
            <summary>Sets the stub of IKernel.Resolve(Type service, IDictionary arguments)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.ResolveTypeObject">
            <summary>Sets the stub of IKernel.Resolve(Type service, Object argumentsAsAnonymousType)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.ResolverGet">
            <summary>Sets the stub of IKernel.get_Resolver()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.global::System#IDisposable#Dispose">
            <summary>Sets the stub of IDisposable.Dispose()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubIKernel.cw::Castle#MicroKernel#IKernel#ComponentModelBuilder">
            <summary>Sets the stub of IKernel.get_ComponentModelBuilder()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubIKernel.cw::Castle#MicroKernel#IKernel#ConfigurationStore">
            <summary>Sets the stub of IKernel.get_ConfigurationStore()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubIKernel.cw::Castle#MicroKernel#IKernel#GraphNodes">
            <summary>Sets the stub of IKernel.get_GraphNodes()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubIKernel.cw::Castle#MicroKernel#IKernel#HandlerFactory">
            <summary>Sets the stub of IKernel.get_HandlerFactory()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubIKernel.Castle#MicroKernel#IKernel#Item(System.String)">
            <summary>Sets the stub of IKernel.get_Item(String key)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubIKernel.Castle#MicroKernel#IKernel#Item(System.Type)">
            <summary>Sets the stub of IKernel.get_Item(Type service)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubIKernel.cw::Castle#MicroKernel#IKernel#Parent">
            <summary>Sets the stub of IKernel.get_Parent()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubIKernel.cw::Castle#MicroKernel#IKernel#ProxyFactory">
            <summary>Sets the stub of IKernel.get_ProxyFactory()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubIKernel.cw::Castle#MicroKernel#IKernel#ReleasePolicy">
            <summary>Sets the stub of IKernel.get_ReleasePolicy()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubIKernel.cw::Castle#MicroKernel#IKernel#Resolver">
            <summary>Sets the stub of IKernel.get_Resolver()</summary>
        </member>
        <member name="T:Castle.MicroKernel.Fakes.StubIKernelEvents">
            <summary>Stub type of Castle.MicroKernel.IKernelEvents</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelEvents.#ctor">
            <summary>Initializes a new instance of type StubIKernelEvents</summary>
        </member>
        <member name="T:Castle.MicroKernel.Fakes.StubIKernelInternal">
            <summary>Stub type of Castle.MicroKernel.IKernelInternal</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelInternal.#ctor">
            <summary>Initializes a new instance of type StubIKernelInternal</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernelInternal.AddChildKernelIKernel">
            <summary>Sets the stub of IKernel.AddChildKernel(IKernel kernel)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelInternal.AddComponentInstanceOf1Object``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.Object})">
            <summary>Sets stubs of AddComponentInstance(Object instance)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelInternal.AddComponentInstanceOf1TypeObject``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.Type,System.Object})">
            <summary>Sets stubs of AddComponentInstance(Type serviceType, Object instance)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernelInternal.AddComponentInstanceStringObject">
            <summary>Sets the stub of IKernel.AddComponentInstance(String key, Object instance)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernelInternal.AddComponentInstanceStringTypeObject">
            <summary>Sets the stub of IKernel.AddComponentInstance(String key, Type serviceType, Object instance)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernelInternal.AddComponentInstanceStringTypeTypeObject">
            <summary>Sets the stub of IKernel.AddComponentInstance(String key, Type serviceType, Type classType, Object instance)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelInternal.AddComponentOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action)">
            <summary>Sets stubs of AddComponent()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelInternal.AddComponentOf1LifestyleType``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{Castle.Core.LifestyleType})">
            <summary>Sets stubs of AddComponent(LifestyleType lifestyle)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelInternal.AddComponentOf1LifestyleTypeBoolean``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{Castle.Core.LifestyleType,System.Boolean})">
            <summary>Sets stubs of AddComponent(LifestyleType lifestyle, Boolean overwriteLifestyle)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelInternal.AddComponentOf1Type``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.Type})">
            <summary>Sets stubs of AddComponent(Type serviceType)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelInternal.AddComponentOf1TypeLifestyleType``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.Type,Castle.Core.LifestyleType})">
            <summary>Sets stubs of AddComponent(Type serviceType, LifestyleType lifestyle)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelInternal.AddComponentOf1TypeLifestyleTypeBoolean``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.Type,Castle.Core.LifestyleType,System.Boolean})">
            <summary>Sets stubs of AddComponent(Type serviceType, LifestyleType lifestyle, Boolean overwriteLifestyle)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernelInternal.AddComponentStringType">
            <summary>Sets the stub of IKernel.AddComponent(String key, Type classType)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernelInternal.AddComponentStringTypeLifestyleType">
            <summary>Sets the stub of IKernel.AddComponent(String key, Type classType, LifestyleType lifestyle)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernelInternal.AddComponentStringTypeLifestyleTypeBoolean">
            <summary>Sets the stub of IKernel.AddComponent(String key, Type classType, LifestyleType lifestyle, Boolean overwriteLifestyle)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernelInternal.AddComponentStringTypeType">
            <summary>Sets the stub of IKernel.AddComponent(String key, Type serviceType, Type classType)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernelInternal.AddComponentStringTypeTypeLifestyleType">
            <summary>Sets the stub of IKernel.AddComponent(String key, Type serviceType, Type classType, LifestyleType lifestyle)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernelInternal.AddComponentStringTypeTypeLifestyleTypeBoolean">
            <summary>Sets the stub of IKernel.AddComponent(String key, Type serviceType, Type classType, LifestyleType lifestyle, Boolean overwriteLifestyle)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernelInternal.AddComponentWithExtendedPropertiesStringTypeIDictionary">
            <summary>Sets the stub of IKernel.AddComponentWithExtendedProperties(String key, Type classType, IDictionary extendedProperties)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernelInternal.AddComponentWithExtendedPropertiesStringTypeTypeIDictionary">
            <summary>Sets the stub of IKernel.AddComponentWithExtendedProperties(String key, Type serviceType, Type classType, IDictionary extendedProperties)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernelInternal.AddCustomComponentComponentModel">
            <summary>Sets the stub of IKernelInternal.AddCustomComponent(ComponentModel model)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernelInternal.AddFacilityIFacility">
            <summary>Sets the stub of IKernel.AddFacility(IFacility facility)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelInternal.AddFacilityOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.IKernel})">
            <summary>Sets stubs of AddFacility()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelInternal.AddFacilityOf1ActionOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Action{``0},Castle.MicroKernel.IKernel})">
            <summary>Sets stubs of AddFacility(Action`1&lt;!!0&gt; onCreate)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelInternal.AddFacilityOf1String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,Castle.MicroKernel.IKernel})">
            <summary>Sets stubs of AddFacility(String key)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelInternal.AddFacilityOf1StringActionOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,System.Action{``0},Castle.MicroKernel.IKernel})">
            <summary>Sets stubs of AddFacility(String key, Action`1&lt;!!0&gt; onCreate)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernelInternal.AddFacilityStringIFacility">
            <summary>Sets the stub of IKernel.AddFacility(String key, IFacility facility)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernelInternal.AddHandlerSelectorIHandlerSelector">
            <summary>Sets the stub of IKernel.AddHandlerSelector(IHandlerSelector selector)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernelInternal.AddHandlersFilterIHandlersFilter">
            <summary>Sets the stub of IKernel.AddHandlersFilter(IHandlersFilter filter)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernelInternal.AddSubSystemStringISubSystem">
            <summary>Sets the stub of IKernel.AddSubSystem(String name, ISubSystem subsystem)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelInternal.AttachBackingFieldToConfigurationStore">
            <summary>Attaches delegates to emulate StubIKernelInternal.ConfigurationStore as a property with a backing field.</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelInternal.AttachBackingFieldToLogger">
            <summary>Attaches delegates to emulate StubIKernelInternal.Logger as a property with a backing field.</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelInternal.AttachBackingFieldToParent">
            <summary>Attaches delegates to emulate StubIKernelInternal.Parent as a property with a backing field.</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelInternal.AttachBackingFieldToProxyFactory">
            <summary>Attaches delegates to emulate StubIKernelInternal.ProxyFactory as a property with a backing field.</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelInternal.AttachBackingFieldToReleasePolicy">
            <summary>Attaches delegates to emulate StubIKernelInternal.ReleasePolicy as a property with a backing field.</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelInternal.cw::Castle#MicroKernel#IKernel#AddChildKernel(Castle.MicroKernel.IKernel)">
            <summary>Sets the stub of IKernel.AddChildKernel(IKernel kernel)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelInternal.cw::Castle#MicroKernel#IKernel#AddComponent``1">
            <summary>Sets the stub of IKernel.AddComponent()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelInternal.cw::Castle#MicroKernel#IKernel#AddComponent``1(Castle.Core.LifestyleType)">
            <summary>Sets the stub of IKernel.AddComponent(LifestyleType lifestyle)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelInternal.cw::Castle#MicroKernel#IKernel#AddComponent``1(System.Type)">
            <summary>Sets the stub of IKernel.AddComponent(Type serviceType)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelInternal.cw::Castle#MicroKernel#IKernel#AddComponent(System.String,System.Type)">
            <summary>Sets the stub of IKernel.AddComponent(String key, Type classType)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelInternal.cw::Castle#MicroKernel#IKernel#AddComponent``1(System.Type,Castle.Core.LifestyleType)">
            <summary>Sets the stub of IKernel.AddComponent(Type serviceType, LifestyleType lifestyle)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelInternal.cw::Castle#MicroKernel#IKernel#AddComponent``1(Castle.Core.LifestyleType,System.Boolean)">
            <summary>Sets the stub of IKernel.AddComponent(LifestyleType lifestyle, Boolean overwriteLifestyle)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelInternal.cw::Castle#MicroKernel#IKernel#AddComponent(System.String,System.Type,Castle.Core.LifestyleType)">
            <summary>Sets the stub of IKernel.AddComponent(String key, Type classType, LifestyleType lifestyle)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelInternal.cw::Castle#MicroKernel#IKernel#AddComponent(System.String,System.Type,System.Type)">
            <summary>Sets the stub of IKernel.AddComponent(String key, Type serviceType, Type classType)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelInternal.cw::Castle#MicroKernel#IKernel#AddComponent``1(System.Type,Castle.Core.LifestyleType,System.Boolean)">
            <summary>Sets the stub of IKernel.AddComponent(Type serviceType, LifestyleType lifestyle, Boolean overwriteLifestyle)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelInternal.cw::Castle#MicroKernel#IKernel#AddComponent(System.String,System.Type,System.Type,Castle.Core.LifestyleType)">
            <summary>Sets the stub of IKernel.AddComponent(String key, Type serviceType, Type classType, LifestyleType lifestyle)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelInternal.cw::Castle#MicroKernel#IKernel#AddComponent(System.String,System.Type,Castle.Core.LifestyleType,System.Boolean)">
            <summary>Sets the stub of IKernel.AddComponent(String key, Type classType, LifestyleType lifestyle, Boolean overwriteLifestyle)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelInternal.cw::Castle#MicroKernel#IKernel#AddComponent(System.String,System.Type,System.Type,Castle.Core.LifestyleType,System.Boolean)">
            <summary>Sets the stub of IKernel.AddComponent(String key, Type serviceType, Type classType, LifestyleType lifestyle, Boolean overwriteLifestyle)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelInternal.cw::Castle#MicroKernel#IKernel#AddComponentInstance``1(System.Object)">
            <summary>Sets the stub of IKernel.AddComponentInstance(Object instance)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelInternal.cw::Castle#MicroKernel#IKernel#AddComponentInstance(System.String,System.Object)">
            <summary>Sets the stub of IKernel.AddComponentInstance(String key, Object instance)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelInternal.cw::Castle#MicroKernel#IKernel#AddComponentInstance``1(System.Type,System.Object)">
            <summary>Sets the stub of IKernel.AddComponentInstance(Type serviceType, Object instance)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelInternal.cw::Castle#MicroKernel#IKernel#AddComponentInstance(System.String,System.Type,System.Object)">
            <summary>Sets the stub of IKernel.AddComponentInstance(String key, Type serviceType, Object instance)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelInternal.cw::Castle#MicroKernel#IKernel#AddComponentInstance(System.String,System.Type,System.Type,System.Object)">
            <summary>Sets the stub of IKernel.AddComponentInstance(String key, Type serviceType, Type classType, Object instance)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelInternal.cw::Castle#MicroKernel#IKernel#AddComponentWithExtendedProperties(System.String,System.Type,System.Collections.IDictionary)">
            <summary>Sets the stub of IKernel.AddComponentWithExtendedProperties(String key, Type classType, IDictionary extendedProperties)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelInternal.cw::Castle#MicroKernel#IKernel#AddComponentWithExtendedProperties(System.String,System.Type,System.Type,System.Collections.IDictionary)">
            <summary>Sets the stub of IKernel.AddComponentWithExtendedProperties(String key, Type serviceType, Type classType, IDictionary extendedProperties)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelInternal.cw::Castle#MicroKernel#IKernel#AddFacility``1">
            <summary>Sets the stub of IKernel.AddFacility()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelInternal.cw::Castle#MicroKernel#IKernel#AddFacility(Castle.MicroKernel.IFacility)">
            <summary>Sets the stub of IKernel.AddFacility(IFacility facility)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelInternal.cw::Castle#MicroKernel#IKernel#AddFacility``1(System.String)">
            <summary>Sets the stub of IKernel.AddFacility(String key)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelInternal.cw::Castle#MicroKernel#IKernel#AddFacility``1(System.Action{``0})">
            <summary>Sets the stub of IKernel.AddFacility(Action`1&lt;!!0&gt; onCreate)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelInternal.cw::Castle#MicroKernel#IKernel#AddFacility(System.String,Castle.MicroKernel.IFacility)">
            <summary>Sets the stub of IKernel.AddFacility(String key, IFacility facility)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelInternal.cw::Castle#MicroKernel#IKernel#AddFacility``1(System.String,System.Action{``0})">
            <summary>Sets the stub of IKernel.AddFacility(String key, Action`1&lt;!!0&gt; onCreate)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelInternal.cw::Castle#MicroKernel#IKernel#AddHandlerSelector(Castle.MicroKernel.IHandlerSelector)">
            <summary>Sets the stub of IKernel.AddHandlerSelector(IHandlerSelector selector)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelInternal.cw::Castle#MicroKernel#IKernel#AddHandlersFilter(Castle.MicroKernel.IHandlersFilter)">
            <summary>Sets the stub of IKernel.AddHandlersFilter(IHandlersFilter filter)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelInternal.cw::Castle#MicroKernel#IKernel#AddSubSystem(System.String,Castle.MicroKernel.ISubSystem)">
            <summary>Sets the stub of IKernel.AddSubSystem(String name, ISubSystem subsystem)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelInternal.cw::Castle#MicroKernel#IKernel#GetAssignableHandlers(System.Type)">
            <summary>Sets the stub of IKernel.GetAssignableHandlers(Type service)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelInternal.cw::Castle#MicroKernel#IKernel#GetFacilities">
            <summary>Sets the stub of IKernel.GetFacilities()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelInternal.cw::Castle#MicroKernel#IKernel#GetHandler(System.String)">
            <summary>Sets the stub of IKernel.GetHandler(String name)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelInternal.cw::Castle#MicroKernel#IKernel#GetHandler(System.Type)">
            <summary>Sets the stub of IKernel.GetHandler(Type service)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelInternal.cw::Castle#MicroKernel#IKernel#GetHandlers(System.Type)">
            <summary>Sets the stub of IKernel.GetHandlers(Type service)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelInternal.cw::Castle#MicroKernel#IKernel#GetSubSystem(System.String)">
            <summary>Sets the stub of IKernel.GetSubSystem(String name)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelInternal.cw::Castle#MicroKernel#IKernel#HasComponent(System.String)">
            <summary>Sets the stub of IKernel.HasComponent(String name)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelInternal.cw::Castle#MicroKernel#IKernel#HasComponent(System.Type)">
            <summary>Sets the stub of IKernel.HasComponent(Type service)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelInternal.cw::Castle#MicroKernel#IKernel#Register(Castle.MicroKernel.Registration.IRegistration[])">
            <summary>Sets the stub of IKernel.Register(IRegistration[] registrations)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelInternal.cw::Castle#MicroKernel#IKernel#ReleaseComponent(System.Object)">
            <summary>Sets the stub of IKernel.ReleaseComponent(Object instance)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelInternal.cw::Castle#MicroKernel#IKernel#RemoveChildKernel(Castle.MicroKernel.IKernel)">
            <summary>Sets the stub of IKernel.RemoveChildKernel(IKernel kernel)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelInternal.cw::Castle#MicroKernel#IKernel#Resolve(System.Type)">
            <summary>Sets the stub of IKernel.Resolve(Type service)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelInternal.cw::Castle#MicroKernel#IKernel#Resolve``1(System.String)">
            <summary>Sets the stub of IKernel.Resolve(String key)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelInternal.cw::Castle#MicroKernel#IKernel#Resolve(System.String,System.Type)">
            <summary>Sets the stub of IKernel.Resolve(String key, Type service)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelInternal.cw::Castle#MicroKernel#IKernel#Resolve``1(System.Collections.IDictionary)">
            <summary>Sets the stub of IKernel.Resolve(IDictionary arguments)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelInternal.cw::Castle#MicroKernel#IKernel#Resolve(System.String,System.Object)">
            <summary>Sets the stub of IKernel.Resolve(String key, Object argumentsAsAnonymousType)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelInternal.cw::Castle#MicroKernel#IKernel#Resolve(System.String,System.Collections.IDictionary)">
            <summary>Sets the stub of IKernel.Resolve(String key, IDictionary arguments)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelInternal.cw::Castle#MicroKernel#IKernel#Resolve(System.Type,System.Object)">
            <summary>Sets the stub of IKernel.Resolve(Type service, Object argumentsAsAnonymousType)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelInternal.cw::Castle#MicroKernel#IKernel#Resolve(System.Type,System.Collections.IDictionary)">
            <summary>Sets the stub of IKernel.Resolve(Type service, IDictionary arguments)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelInternal.cw::Castle#MicroKernel#IKernel#Resolve``1">
            <summary>Sets the stub of IKernel.Resolve()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelInternal.cw::Castle#MicroKernel#IKernel#Resolve``1(System.Object)">
            <summary>Sets the stub of IKernel.Resolve(Object argumentsAsAnonymousType)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelInternal.cw::Castle#MicroKernel#IKernel#Resolve``1(System.String,System.Collections.IDictionary)">
            <summary>Sets the stub of IKernel.Resolve(String key, IDictionary arguments)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelInternal.cw::Castle#MicroKernel#IKernel#Resolve(System.String,System.Type,System.Collections.IDictionary)">
            <summary>Sets the stub of IKernel.Resolve(String key, Type service, IDictionary arguments)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelInternal.cw::Castle#MicroKernel#IKernel#ResolveAll(System.Type)">
            <summary>Sets the stub of IKernel.ResolveAll(Type service)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelInternal.cw::Castle#MicroKernel#IKernel#ResolveAll``1">
            <summary>Sets the stub of IKernel.ResolveAll()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelInternal.cw::Castle#MicroKernel#IKernel#ResolveAll(System.Type,System.Object)">
            <summary>Sets the stub of IKernel.ResolveAll(Type service, Object argumentsAsAnonymousType)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelInternal.cw::Castle#MicroKernel#IKernel#ResolveAll``1(System.Object)">
            <summary>Sets the stub of IKernel.ResolveAll(Object argumentsAsAnonymousType)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelInternal.cw::Castle#MicroKernel#IKernel#ResolveAll(System.Type,System.Collections.IDictionary)">
            <summary>Sets the stub of IKernel.ResolveAll(Type service, IDictionary arguments)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelInternal.cw::Castle#MicroKernel#IKernel#ResolveAll``1(System.Collections.IDictionary)">
            <summary>Sets the stub of IKernel.ResolveAll(IDictionary arguments)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelInternal.cw::Castle#MicroKernel#IKernelInternal#AddCustomComponent(Castle.Core.ComponentModel)">
            <summary>Sets the stub of IKernelInternal.AddCustomComponent(ComponentModel model)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelInternal.cw::Castle#MicroKernel#IKernelInternal#CreateComponentActivator(Castle.Core.ComponentModel)">
            <summary>Sets the stub of IKernelInternal.CreateComponentActivator(ComponentModel model)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelInternal.cw::Castle#MicroKernel#IKernelInternal#CreateHandler(Castle.Core.ComponentModel)">
            <summary>Sets the stub of IKernelInternal.CreateHandler(ComponentModel model)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelInternal.cw::Castle#MicroKernel#IKernelInternal#CreateLifestyleManager(Castle.Core.ComponentModel,Castle.MicroKernel.IComponentActivator)">
            <summary>Sets the stub of IKernelInternal.CreateLifestyleManager(ComponentModel model, IComponentActivator activator)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelInternal.cw::Castle#MicroKernel#IKernelInternal#LoadHandlerByName(System.String,System.Type,System.Collections.IDictionary)">
            <summary>Sets the stub of IKernelInternal.LoadHandlerByName(String key, Type service, IDictionary arguments)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelInternal.cw::Castle#MicroKernel#IKernelInternal#LoadHandlerByType(System.String,System.Type,System.Collections.IDictionary)">
            <summary>Sets the stub of IKernelInternal.LoadHandlerByType(String key, Type service, IDictionary arguments)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelInternal.cw::Castle#MicroKernel#IKernelInternal#OptimizeDependencyResolution">
            <summary>Sets the stub of IKernelInternal.OptimizeDependencyResolution()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelInternal.cw::Castle#MicroKernel#IKernelInternal#RaiseEventsOnHandlerCreated(Castle.MicroKernel.IHandler)">
            <summary>Sets the stub of IKernelInternal.RaiseEventsOnHandlerCreated(IHandler handler)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelInternal.cw::Castle#MicroKernel#IKernelInternal#Resolve(System.Type,System.Collections.IDictionary,Castle.MicroKernel.IReleasePolicy)">
            <summary>Sets the stub of IKernelInternal.Resolve(Type service, IDictionary arguments, IReleasePolicy policy)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelInternal.cw::Castle#MicroKernel#IKernelInternal#Resolve(System.String,System.Type,System.Collections.IDictionary,Castle.MicroKernel.IReleasePolicy)">
            <summary>Sets the stub of IKernelInternal.Resolve(String key, Type service, IDictionary arguments, IReleasePolicy policy)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelInternal.cw::Castle#MicroKernel#IKernelInternal#ResolveAll(System.Type,System.Collections.IDictionary,Castle.MicroKernel.IReleasePolicy)">
            <summary>Sets the stub of IKernelInternal.ResolveAll(Type service, IDictionary arguments, IReleasePolicy policy)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernelInternal.ComponentModelBuilderGet">
            <summary>Sets the stub of IKernel.get_ComponentModelBuilder()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernelInternal.ConfigurationStoreGet">
            <summary>Sets the stub of IKernel.get_ConfigurationStore()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernelInternal.ConfigurationStoreSetIConfigurationStore">
            <summary>Sets the stub of IKernel.set_ConfigurationStore(IConfigurationStore value)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernelInternal.CreateComponentActivatorComponentModel">
            <summary>Sets the stub of IKernelInternal.CreateComponentActivator(ComponentModel model)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernelInternal.CreateHandlerComponentModel">
            <summary>Sets the stub of IKernelInternal.CreateHandler(ComponentModel model)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernelInternal.CreateLifestyleManagerComponentModelIComponentActivator">
            <summary>Sets the stub of IKernelInternal.CreateLifestyleManager(ComponentModel model, IComponentActivator activator)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernelInternal.Dispose">
            <summary>Sets the stub of IDisposable.Dispose()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernelInternal.GetAssignableHandlersType">
            <summary>Sets the stub of IKernel.GetAssignableHandlers(Type service)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernelInternal.GetFacilities">
            <summary>Sets the stub of IKernel.GetFacilities()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernelInternal.GetHandlerString">
            <summary>Sets the stub of IKernel.GetHandler(String name)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernelInternal.GetHandlerType">
            <summary>Sets the stub of IKernel.GetHandler(Type service)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernelInternal.GetHandlersType">
            <summary>Sets the stub of IKernel.GetHandlers(Type service)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernelInternal.GetSubSystemString">
            <summary>Sets the stub of IKernel.GetSubSystem(String name)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernelInternal.GraphNodesGet">
            <summary>Sets the stub of IKernel.get_GraphNodes()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernelInternal.HandlerFactoryGet">
            <summary>Sets the stub of IKernel.get_HandlerFactory()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernelInternal.HasComponentString">
            <summary>Sets the stub of IKernel.HasComponent(String name)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernelInternal.HasComponentType">
            <summary>Sets the stub of IKernel.HasComponent(Type service)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernelInternal.ItemGetString">
            <summary>Sets the stub of IKernel.get_Item(String key)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernelInternal.ItemGetType">
            <summary>Sets the stub of IKernel.get_Item(Type service)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernelInternal.LoadHandlerByNameStringTypeIDictionary">
            <summary>Sets the stub of IKernelInternal.LoadHandlerByName(String key, Type service, IDictionary arguments)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernelInternal.LoadHandlerByTypeStringTypeIDictionary">
            <summary>Sets the stub of IKernelInternal.LoadHandlerByType(String key, Type service, IDictionary arguments)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernelInternal.LoggerGet">
            <summary>Sets the stub of IKernelInternal.get_Logger()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernelInternal.LoggerSetILogger">
            <summary>Sets the stub of IKernelInternal.set_Logger(ILogger value)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernelInternal.OptimizeDependencyResolution">
            <summary>Sets the stub of IKernelInternal.OptimizeDependencyResolution()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernelInternal.ParentGet">
            <summary>Sets the stub of IKernel.get_Parent()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernelInternal.ParentSetIKernel">
            <summary>Sets the stub of IKernel.set_Parent(IKernel value)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernelInternal.ProxyFactoryGet">
            <summary>Sets the stub of IKernel.get_ProxyFactory()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernelInternal.ProxyFactorySetIProxyFactory">
            <summary>Sets the stub of IKernel.set_ProxyFactory(IProxyFactory value)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernelInternal.RaiseEventsOnHandlerCreatedIHandler">
            <summary>Sets the stub of IKernelInternal.RaiseEventsOnHandlerCreated(IHandler handler)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernelInternal.RegisterIRegistrationArray">
            <summary>Sets the stub of IKernel.Register(IRegistration[] registrations)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernelInternal.ReleaseComponentObject">
            <summary>Sets the stub of IKernel.ReleaseComponent(Object instance)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernelInternal.ReleasePolicyGet">
            <summary>Sets the stub of IKernel.get_ReleasePolicy()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernelInternal.ReleasePolicySetIReleasePolicy">
            <summary>Sets the stub of IKernel.set_ReleasePolicy(IReleasePolicy value)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernelInternal.RemoveChildKernelIKernel">
            <summary>Sets the stub of IKernel.RemoveChildKernel(IKernel kernel)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelInternal.ResolveAllOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0[]})">
            <summary>Sets stubs of ResolveAll()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelInternal.ResolveAllOf1IDictionary``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.IDictionary,``0[]})">
            <summary>Sets stubs of ResolveAll(IDictionary arguments)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelInternal.ResolveAllOf1Object``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Object,``0[]})">
            <summary>Sets stubs of ResolveAll(Object argumentsAsAnonymousType)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernelInternal.ResolveAllType">
            <summary>Sets the stub of IKernel.ResolveAll(Type service)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernelInternal.ResolveAllTypeIDictionary">
            <summary>Sets the stub of IKernel.ResolveAll(Type service, IDictionary arguments)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernelInternal.ResolveAllTypeIDictionaryIReleasePolicy">
            <summary>Sets the stub of IKernelInternal.ResolveAll(Type service, IDictionary arguments, IReleasePolicy policy)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernelInternal.ResolveAllTypeObject">
            <summary>Sets the stub of IKernel.ResolveAll(Type service, Object argumentsAsAnonymousType)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelInternal.ResolveOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0})">
            <summary>Sets stubs of Resolve()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelInternal.ResolveOf1IDictionary``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.IDictionary,``0})">
            <summary>Sets stubs of Resolve(IDictionary arguments)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelInternal.ResolveOf1Object``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Object,``0})">
            <summary>Sets stubs of Resolve(Object argumentsAsAnonymousType)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelInternal.ResolveOf1String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,``0})">
            <summary>Sets stubs of Resolve(String key)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelInternal.ResolveOf1StringIDictionary``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,System.Collections.IDictionary,``0})">
            <summary>Sets stubs of Resolve(String key, IDictionary arguments)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernelInternal.ResolveStringIDictionary">
            <summary>Sets the stub of IKernel.Resolve(String key, IDictionary arguments)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernelInternal.ResolveStringObject">
            <summary>Sets the stub of IKernel.Resolve(String key, Object argumentsAsAnonymousType)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernelInternal.ResolveStringType">
            <summary>Sets the stub of IKernel.Resolve(String key, Type service)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernelInternal.ResolveStringTypeIDictionary">
            <summary>Sets the stub of IKernel.Resolve(String key, Type service, IDictionary arguments)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernelInternal.ResolveStringTypeIDictionaryIReleasePolicy">
            <summary>Sets the stub of IKernelInternal.Resolve(String key, Type service, IDictionary arguments, IReleasePolicy policy)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernelInternal.ResolveType">
            <summary>Sets the stub of IKernel.Resolve(Type service)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernelInternal.ResolveTypeIDictionary">
            <summary>Sets the stub of IKernel.Resolve(Type service, IDictionary arguments)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernelInternal.ResolveTypeIDictionaryIReleasePolicy">
            <summary>Sets the stub of IKernelInternal.Resolve(Type service, IDictionary arguments, IReleasePolicy policy)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernelInternal.ResolveTypeObject">
            <summary>Sets the stub of IKernel.Resolve(Type service, Object argumentsAsAnonymousType)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernelInternal.ResolverGet">
            <summary>Sets the stub of IKernel.get_Resolver()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelInternal.global::System#IDisposable#Dispose">
            <summary>Sets the stub of IDisposable.Dispose()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubIKernelInternal.cw::Castle#MicroKernel#IKernel#ComponentModelBuilder">
            <summary>Sets the stub of IKernel.get_ComponentModelBuilder()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubIKernelInternal.cw::Castle#MicroKernel#IKernel#ConfigurationStore">
            <summary>Sets the stub of IKernel.get_ConfigurationStore()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubIKernelInternal.cw::Castle#MicroKernel#IKernel#GraphNodes">
            <summary>Sets the stub of IKernel.get_GraphNodes()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubIKernelInternal.cw::Castle#MicroKernel#IKernel#HandlerFactory">
            <summary>Sets the stub of IKernel.get_HandlerFactory()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubIKernelInternal.Castle#MicroKernel#IKernel#Item(System.String)">
            <summary>Sets the stub of IKernel.get_Item(String key)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubIKernelInternal.Castle#MicroKernel#IKernel#Item(System.Type)">
            <summary>Sets the stub of IKernel.get_Item(Type service)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubIKernelInternal.cw::Castle#MicroKernel#IKernelInternal#Logger">
            <summary>Sets the stub of IKernelInternal.get_Logger()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubIKernelInternal.cw::Castle#MicroKernel#IKernel#Parent">
            <summary>Sets the stub of IKernel.get_Parent()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubIKernelInternal.cw::Castle#MicroKernel#IKernel#ProxyFactory">
            <summary>Sets the stub of IKernel.get_ProxyFactory()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubIKernelInternal.cw::Castle#MicroKernel#IKernel#ReleasePolicy">
            <summary>Sets the stub of IKernel.get_ReleasePolicy()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubIKernelInternal.cw::Castle#MicroKernel#IKernel#Resolver">
            <summary>Sets the stub of IKernel.get_Resolver()</summary>
        </member>
        <member name="T:Castle.MicroKernel.Fakes.StubILifestyleManager">
            <summary>Stub type of Castle.MicroKernel.ILifestyleManager</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubILifestyleManager.#ctor">
            <summary>Initializes a new instance of type StubILifestyleManager</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubILifestyleManager.cw::Castle#MicroKernel#ILifestyleManager#Init(Castle.MicroKernel.IComponentActivator,Castle.MicroKernel.IKernel,Castle.Core.ComponentModel)">
            <summary>Sets the stub of ILifestyleManager.Init(IComponentActivator componentActivator, IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubILifestyleManager.cw::Castle#MicroKernel#ILifestyleManager#Release(System.Object)">
            <summary>Sets the stub of ILifestyleManager.Release(Object instance)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubILifestyleManager.cw::Castle#MicroKernel#ILifestyleManager#Resolve(Castle.MicroKernel.Context.CreationContext,Castle.MicroKernel.IReleasePolicy)">
            <summary>Sets the stub of ILifestyleManager.Resolve(CreationContext context, IReleasePolicy releasePolicy)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubILifestyleManager.Dispose">
            <summary>Sets the stub of IDisposable.Dispose()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubILifestyleManager.InitIComponentActivatorIKernelComponentModel">
            <summary>Sets the stub of ILifestyleManager.Init(IComponentActivator componentActivator, IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubILifestyleManager.ReleaseObject">
            <summary>Sets the stub of ILifestyleManager.Release(Object instance)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubILifestyleManager.ResolveCreationContextIReleasePolicy">
            <summary>Sets the stub of ILifestyleManager.Resolve(CreationContext context, IReleasePolicy releasePolicy)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubILifestyleManager.global::System#IDisposable#Dispose">
            <summary>Sets the stub of IDisposable.Dispose()</summary>
        </member>
        <member name="T:Castle.MicroKernel.Fakes.StubIProxyFactory">
            <summary>Stub type of Castle.MicroKernel.IProxyFactory</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIProxyFactory.#ctor">
            <summary>Initializes a new instance of type StubIProxyFactory</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIProxyFactory.AddInterceptorSelectorIModelInterceptorsSelector">
            <summary>Sets the stub of IProxyFactory.AddInterceptorSelector(IModelInterceptorsSelector selector)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIProxyFactory.cw::Castle#MicroKernel#IProxyFactory#AddInterceptorSelector(Castle.MicroKernel.Proxy.IModelInterceptorsSelector)">
            <summary>Sets the stub of IProxyFactory.AddInterceptorSelector(IModelInterceptorsSelector selector)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIProxyFactory.cw::Castle#MicroKernel#IProxyFactory#Create(Castle.MicroKernel.IKernel,System.Object,Castle.Core.ComponentModel,Castle.MicroKernel.Context.CreationContext,System.Object[])">
            <summary>Sets the stub of IProxyFactory.Create(IKernel kernel, Object instance, ComponentModel model, CreationContext context, Object[] constructorArguments)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIProxyFactory.cw::Castle#MicroKernel#IProxyFactory#Create(Castle.MicroKernel.IProxyFactoryExtension,Castle.MicroKernel.IKernel,Castle.Core.ComponentModel,Castle.MicroKernel.Context.CreationContext,System.Object[])">
            <summary>Sets the stub of IProxyFactory.Create(IProxyFactoryExtension customFactory, IKernel kernel, ComponentModel model, CreationContext context, Object[] constructorArguments)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIProxyFactory.cw::Castle#MicroKernel#IProxyFactory#RequiresTargetInstance(Castle.MicroKernel.IKernel,Castle.Core.ComponentModel)">
            <summary>Sets the stub of IProxyFactory.RequiresTargetInstance(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIProxyFactory.cw::Castle#MicroKernel#IProxyFactory#ShouldCreateProxy(Castle.Core.ComponentModel)">
            <summary>Sets the stub of IProxyFactory.ShouldCreateProxy(ComponentModel model)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIProxyFactory.CreateIKernelObjectComponentModelCreationContextObjectArray">
            <summary>Sets the stub of IProxyFactory.Create(IKernel kernel, Object instance, ComponentModel model, CreationContext context, Object[] constructorArguments)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIProxyFactory.CreateIProxyFactoryExtensionIKernelComponentModelCreationContextObjectArray">
            <summary>Sets the stub of IProxyFactory.Create(IProxyFactoryExtension customFactory, IKernel kernel, ComponentModel model, CreationContext context, Object[] constructorArguments)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIProxyFactory.RequiresTargetInstanceIKernelComponentModel">
            <summary>Sets the stub of IProxyFactory.RequiresTargetInstance(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIProxyFactory.ShouldCreateProxyComponentModel">
            <summary>Sets the stub of IProxyFactory.ShouldCreateProxy(ComponentModel model)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Fakes.StubIProxyFactoryExtension">
            <summary>Stub type of Castle.MicroKernel.IProxyFactoryExtension</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIProxyFactoryExtension.#ctor">
            <summary>Initializes a new instance of type StubIProxyFactoryExtension</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIProxyFactoryExtension.cw::Castle#MicroKernel#IProxyFactoryExtension#Generate(Castle.DynamicProxy.IProxyBuilder,Castle.DynamicProxy.ProxyGenerationOptions,Castle.DynamicProxy.IInterceptor[],Castle.Core.ComponentModel,Castle.MicroKernel.Context.CreationContext)">
            <summary>Sets the stub of IProxyFactoryExtension.Generate(IProxyBuilder builder, ProxyGenerationOptions options, IInterceptor[] interceptors, ComponentModel model, CreationContext context)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIProxyFactoryExtension.GenerateIProxyBuilderProxyGenerationOptionsIInterceptorArrayComponentModelCreationContext">
            <summary>Sets the stub of IProxyFactoryExtension.Generate(IProxyBuilder builder, ProxyGenerationOptions options, IInterceptor[] interceptors, ComponentModel model, CreationContext context)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Fakes.StubIReference`1">
            <summary>Stub type of Castle.MicroKernel.IReference`1</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIReference`1.#ctor">
            <summary>Initializes a new instance of type StubIReference</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIReference`1.AttachComponentModel">
            <summary>Sets the stub of IReference`1.Attach(ComponentModel component)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIReference`1.cw::Castle#MicroKernel#IReference{T}#Attach(Castle.Core.ComponentModel)">
            <summary>Sets the stub of IReference`1.Attach(ComponentModel component)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIReference`1.cw::Castle#MicroKernel#IReference{T}#Detach(Castle.Core.ComponentModel)">
            <summary>Sets the stub of IReference`1.Detach(ComponentModel component)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIReference`1.cw::Castle#MicroKernel#IReference{T}#Resolve(Castle.MicroKernel.IKernel,Castle.MicroKernel.Context.CreationContext)">
            <summary>Sets the stub of IReference`1.Resolve(IKernel kernel, CreationContext context)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIReference`1.DetachComponentModel">
            <summary>Sets the stub of IReference`1.Detach(ComponentModel component)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIReference`1.ResolveIKernelCreationContext">
            <summary>Sets the stub of IReference`1.Resolve(IKernel kernel, CreationContext context)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Fakes.StubIReleasePolicy">
            <summary>Stub type of Castle.MicroKernel.IReleasePolicy</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIReleasePolicy.#ctor">
            <summary>Initializes a new instance of type StubIReleasePolicy</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIReleasePolicy.cw::Castle#MicroKernel#IReleasePolicy#CreateSubPolicy">
            <summary>Sets the stub of IReleasePolicy.CreateSubPolicy()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIReleasePolicy.cw::Castle#MicroKernel#IReleasePolicy#HasTrack(System.Object)">
            <summary>Sets the stub of IReleasePolicy.HasTrack(Object instance)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIReleasePolicy.cw::Castle#MicroKernel#IReleasePolicy#Release(System.Object)">
            <summary>Sets the stub of IReleasePolicy.Release(Object instance)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIReleasePolicy.cw::Castle#MicroKernel#IReleasePolicy#Track(System.Object,Castle.MicroKernel.Burden)">
            <summary>Sets the stub of IReleasePolicy.Track(Object instance, Burden burden)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIReleasePolicy.CreateSubPolicy">
            <summary>Sets the stub of IReleasePolicy.CreateSubPolicy()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIReleasePolicy.Dispose">
            <summary>Sets the stub of IDisposable.Dispose()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIReleasePolicy.HasTrackObject">
            <summary>Sets the stub of IReleasePolicy.HasTrack(Object instance)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIReleasePolicy.ReleaseObject">
            <summary>Sets the stub of IReleasePolicy.Release(Object instance)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIReleasePolicy.global::System#IDisposable#Dispose">
            <summary>Sets the stub of IDisposable.Dispose()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIReleasePolicy.TrackObjectBurden">
            <summary>Sets the stub of IReleasePolicy.Track(Object instance, Burden burden)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Fakes.StubISubDependencyResolver">
            <summary>Stub type of Castle.MicroKernel.ISubDependencyResolver</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubISubDependencyResolver.#ctor">
            <summary>Initializes a new instance of type StubISubDependencyResolver</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubISubDependencyResolver.CanResolveCreationContextISubDependencyResolverComponentModelDependencyModel">
            <summary>Sets the stub of ISubDependencyResolver.CanResolve(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model, DependencyModel dependency)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubISubDependencyResolver.cw::Castle#MicroKernel#ISubDependencyResolver#CanResolve(Castle.MicroKernel.Context.CreationContext,Castle.MicroKernel.ISubDependencyResolver,Castle.Core.ComponentModel,Castle.Core.DependencyModel)">
            <summary>Sets the stub of ISubDependencyResolver.CanResolve(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model, DependencyModel dependency)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubISubDependencyResolver.cw::Castle#MicroKernel#ISubDependencyResolver#Resolve(Castle.MicroKernel.Context.CreationContext,Castle.MicroKernel.ISubDependencyResolver,Castle.Core.ComponentModel,Castle.Core.DependencyModel)">
            <summary>Sets the stub of ISubDependencyResolver.Resolve(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model, DependencyModel dependency)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubISubDependencyResolver.ResolveCreationContextISubDependencyResolverComponentModelDependencyModel">
            <summary>Sets the stub of ISubDependencyResolver.Resolve(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model, DependencyModel dependency)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Fakes.StubISubSystem">
            <summary>Stub type of Castle.MicroKernel.ISubSystem</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubISubSystem.#ctor">
            <summary>Initializes a new instance of type StubISubSystem</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubISubSystem.cw::Castle#MicroKernel#ISubSystem#Init(Castle.MicroKernel.IKernelInternal)">
            <summary>Sets the stub of ISubSystem.Init(IKernelInternal kernel)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubISubSystem.cw::Castle#MicroKernel#ISubSystem#Terminate">
            <summary>Sets the stub of ISubSystem.Terminate()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubISubSystem.InitIKernelInternal">
            <summary>Sets the stub of ISubSystem.Init(IKernelInternal kernel)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubISubSystem.Terminate">
            <summary>Sets the stub of ISubSystem.Terminate()</summary>
        </member>
        <member name="T:Castle.MicroKernel.Fakes.StubInstanceReference`1">
            <summary>Stub type of Castle.MicroKernel.InstanceReference`1</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubInstanceReference`1.#ctor(`0)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubInstanceReference`1.InitializeStub">
            <summary>Initializes a new instance of type StubInstanceReference</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubInstanceReference`1.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubInstanceReference`1.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubInstanceReference`1.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.Fakes.StubKernelException">
            <summary>Stub type of Castle.MicroKernel.KernelException</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubKernelException.#ctor(System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubKernelException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubKernelException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubKernelException.AttachBackingFieldToHelpLink">
            <summary>Attaches delegates to emulate StubKernelException.HelpLink as a property with a backing field.</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubKernelException.AttachBackingFieldToSource">
            <summary>Attaches delegates to emulate StubKernelException.Source as a property with a backing field.</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubKernelException.DataGet">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubKernelException.GetBaseException">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubKernelException.GetBaseException01">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubKernelException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubKernelException.GetObjectDataSerializationInfoStreamingContext">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubKernelException.HelpLinkGet">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubKernelException.HelpLinkSetString">
            <summary>Sets the stub of Exception.set_HelpLink(String value)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubKernelException.InitializeStub">
            <summary>Initializes a new instance of type StubKernelException</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubKernelException.MessageGet">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubKernelException.SourceGet">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubKernelException.SourceSetString">
            <summary>Sets the stub of Exception.set_Source(String value)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubKernelException.StackTraceGet">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubKernelException.ToString">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubKernelException.ToString01">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubKernelException.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubKernelException.Data">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubKernelException.HelpLink">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubKernelException.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubKernelException.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubKernelException.Message">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubKernelException.Source">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubKernelException.StackTrace">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="T:Castle.MicroKernel.Fakes.StubSubSystemConstants">
            <summary>Stub type of Castle.MicroKernel.SubSystemConstants</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubSubSystemConstants.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubSubSystemConstants.InitializeStub">
            <summary>Initializes a new instance of type StubSubSystemConstants</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubSubSystemConstants.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubSubSystemConstants.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubSubSystemConstants.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler">
            <summary>Shim type of Castle.MicroKernel.Handlers.AbstractHandler</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.#ctor(Castle.MicroKernel.Handlers.AbstractHandler)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.Bind(Castle.MicroKernel.IHandler)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.Bind(Castle.MicroKernel.ISubDependencyResolver)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.Bind(Castle.MicroKernel.Handlers.IExposeDependencyInfo)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.AddDependencyDependencyModel">
            <summary>Sets the shim of AbstractHandler.AddDependency(DependencyModel dependency)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.AddGraphDependencyDependencyModel">
            <summary>Sets the shim of AbstractHandler.AddGraphDependency(DependencyModel dependency)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.AddMissingDependencyDependencyModel">
            <summary>Sets the shim of AbstractHandler.AddMissingDependency(DependencyModel dependency)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.AddOptionalDependencyDependencyModel">
            <summary>Sets the shim of AbstractHandler.AddOptionalDependency(DependencyModel dependency)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.AddResolvableDependencyDependencyModel">
            <summary>Sets the shim of AbstractHandler.AddResolvableDependency(DependencyModel dependency)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.AllRequiredDependenciesResolvable">
            <summary>Sets the shim of AbstractHandler.AllRequiredDependenciesResolvable()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.CanProvideDependenciesDynamicallyCreationContext">
            <summary>Sets the shim of AbstractHandler.CanProvideDependenciesDynamically(CreationContext context)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.CanResolveCreationContextISubDependencyResolverComponentModelDependencyModel">
            <summary>Sets the shim of AbstractHandler.CanResolve(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model, DependencyModel dependency)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.CanResolvePendingDependenciesCreationContext">
            <summary>Sets the shim of AbstractHandler.CanResolvePendingDependencies(CreationContext context)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.ComponentModelGet">
            <summary>Sets the shim of AbstractHandler.get_ComponentModel()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.ConstructorComponentModel">
            <summary>Sets the shim of AbstractHandler.AbstractHandler(ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.CurrentStateGet">
            <summary>Sets the shim of AbstractHandler.get_CurrentState()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.DependencySatisfiedBooleanRef">
            <summary>Sets the shim of AbstractHandler.DependencySatisfied(Boolean&amp; stateChanged)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.DisconnectEvents">
            <summary>Sets the shim of AbstractHandler.DisconnectEvents()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.Dispose">
            <summary>Sets the shim of AbstractHandler.Dispose()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.GetDependencyHandlerDependencyModel">
            <summary>Sets the shim of AbstractHandler.GetDependencyHandler(DependencyModel dependency)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.HasCustomParameterObject">
            <summary>Sets the shim of AbstractHandler.HasCustomParameter(Object key)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.HasValidComponentFromResolverDependencyModel">
            <summary>Sets the shim of AbstractHandler.HasValidComponentFromResolver(DependencyModel dependency)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.InitDependencies">
            <summary>Sets the shim of AbstractHandler.InitDependencies()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.InitIKernelInternal">
            <summary>Sets the shim of AbstractHandler.Init(IKernelInternal kernel)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.IsBeingResolvedInContextCreationContext">
            <summary>Sets the shim of AbstractHandler.IsBeingResolvedInContext(CreationContext context)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.KernelGet">
            <summary>Sets the shim of AbstractHandler.get_Kernel()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.MissingDependenciesGet">
            <summary>Sets the shim of AbstractHandler.get_MissingDependencies()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.ObtainDependencyDetailsIDependencyInspector">
            <summary>Sets the shim of AbstractHandler.ObtainDependencyDetails(IDependencyInspector inspector)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.OnAddedAsChildKernelObjectEventArgs">
            <summary>Sets the shim of AbstractHandler.OnAddedAsChildKernel(Object sender, EventArgs e)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.ReleaseBurden">
            <summary>Sets the shim of AbstractHandler.Release(Burden burden)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.ResolveCreationContext">
            <summary>Sets the shim of AbstractHandler.Resolve(CreationContext context)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.ResolveCreationContextISubDependencyResolverComponentModelDependencyModel">
            <summary>Sets the shim of AbstractHandler.Resolve(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model, DependencyModel dependency)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.SetNewStateHandlerState">
            <summary>Sets the shim of AbstractHandler.SetNewState(HandlerState newState)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.SupportsAssignableType">
            <summary>Sets the shim of AbstractHandler.SupportsAssignable(Type service)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.SupportsType">
            <summary>Sets the shim of AbstractHandler.Supports(Type service)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.ToString">
            <summary>Sets the shim of AbstractHandler.ToString()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.TryResolveCreationContext">
            <summary>Sets the shim of AbstractHandler.TryResolve(CreationContext context)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler._AllRequiredDependenciesResolvableb__0ConstructorDependencyModel">
            <summary>Sets the shim of AbstractHandler.&lt;AllRequiredDependenciesResolvable&gt;b__0(ConstructorDependencyModel d)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.AllInstances.AddDependencyDependencyModel">
            <summary>Sets the shim of AbstractHandler.AddDependency(DependencyModel dependency)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.AllInstances.AddGraphDependencyDependencyModel">
            <summary>Sets the shim of AbstractHandler.AddGraphDependency(DependencyModel dependency)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.AllInstances.AddMissingDependencyDependencyModel">
            <summary>Sets the shim of AbstractHandler.AddMissingDependency(DependencyModel dependency)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.AllInstances.AddOptionalDependencyDependencyModel">
            <summary>Sets the shim of AbstractHandler.AddOptionalDependency(DependencyModel dependency)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.AllInstances.AddResolvableDependencyDependencyModel">
            <summary>Sets the shim of AbstractHandler.AddResolvableDependency(DependencyModel dependency)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.AllInstances.AllRequiredDependenciesResolvable">
            <summary>Sets the shim of AbstractHandler.AllRequiredDependenciesResolvable()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.AllInstances.CanProvideDependenciesDynamicallyCreationContext">
            <summary>Sets the shim of AbstractHandler.CanProvideDependenciesDynamically(CreationContext context)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.AllInstances.CanResolveCreationContextISubDependencyResolverComponentModelDependencyModel">
            <summary>Sets the shim of AbstractHandler.CanResolve(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model, DependencyModel dependency)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.AllInstances.CanResolvePendingDependenciesCreationContext">
            <summary>Sets the shim of AbstractHandler.CanResolvePendingDependencies(CreationContext context)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.AllInstances.ComponentModelGet">
            <summary>Sets the shim of AbstractHandler.get_ComponentModel()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.AllInstances.CurrentStateGet">
            <summary>Sets the shim of AbstractHandler.get_CurrentState()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.AllInstances.DependencySatisfiedBooleanRef">
            <summary>Sets the shim of AbstractHandler.DependencySatisfied(Boolean&amp; stateChanged)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.AllInstances.DisconnectEvents">
            <summary>Sets the shim of AbstractHandler.DisconnectEvents()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.AllInstances.Dispose">
            <summary>Sets the shim of AbstractHandler.Dispose()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.AllInstances.GetDependencyHandlerDependencyModel">
            <summary>Sets the shim of AbstractHandler.GetDependencyHandler(DependencyModel dependency)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.AllInstances.HasCustomParameterObject">
            <summary>Sets the shim of AbstractHandler.HasCustomParameter(Object key)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.AllInstances.HasValidComponentFromResolverDependencyModel">
            <summary>Sets the shim of AbstractHandler.HasValidComponentFromResolver(DependencyModel dependency)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.AllInstances.InitDependencies">
            <summary>Sets the shim of AbstractHandler.InitDependencies()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.AllInstances.InitIKernelInternal">
            <summary>Sets the shim of AbstractHandler.Init(IKernelInternal kernel)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.AllInstances.IsBeingResolvedInContextCreationContext">
            <summary>Sets the shim of AbstractHandler.IsBeingResolvedInContext(CreationContext context)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.AllInstances.KernelGet">
            <summary>Sets the shim of AbstractHandler.get_Kernel()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.AllInstances.MissingDependenciesGet">
            <summary>Sets the shim of AbstractHandler.get_MissingDependencies()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.AllInstances.ObtainDependencyDetailsIDependencyInspector">
            <summary>Sets the shim of AbstractHandler.ObtainDependencyDetails(IDependencyInspector inspector)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.AllInstances.OnAddedAsChildKernelObjectEventArgs">
            <summary>Sets the shim of AbstractHandler.OnAddedAsChildKernel(Object sender, EventArgs e)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.AllInstances.ReleaseBurden">
            <summary>Sets the shim of AbstractHandler.Release(Burden burden)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.AllInstances.ResolveCreationContext">
            <summary>Sets the shim of AbstractHandler.Resolve(CreationContext context)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.AllInstances.ResolveCreationContextISubDependencyResolverComponentModelDependencyModel">
            <summary>Sets the shim of AbstractHandler.Resolve(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model, DependencyModel dependency)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.AllInstances.SetNewStateHandlerState">
            <summary>Sets the shim of AbstractHandler.SetNewState(HandlerState newState)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.AllInstances.SupportsAssignableType">
            <summary>Sets the shim of AbstractHandler.SupportsAssignable(Type service)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.AllInstances.SupportsType">
            <summary>Sets the shim of AbstractHandler.Supports(Type service)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.AllInstances.ToString01">
            <summary>Sets the shim of AbstractHandler.ToString()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.AllInstances.TryResolveCreationContext">
            <summary>Sets the shim of AbstractHandler.TryResolve(CreationContext context)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Handlers.Fakes.ShimComponentLifecycleExtension">
            <summary>Shim type of Castle.MicroKernel.Handlers.ComponentLifecycleExtension</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimComponentLifecycleExtension.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimComponentLifecycleExtension.#ctor(Castle.MicroKernel.Handlers.ComponentLifecycleExtension)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimComponentLifecycleExtension.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimComponentLifecycleExtension.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimComponentLifecycleExtension.Bind(Castle.MicroKernel.Handlers.IResolveExtension)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimComponentLifecycleExtension.AddHandlerComponentResolvingDelegate">
            <summary>Sets the shim of ComponentLifecycleExtension.AddHandler(ComponentResolvingDelegate handler)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimComponentLifecycleExtension.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimComponentLifecycleExtension.Constructor">
            <summary>Sets the shim of ComponentLifecycleExtension.ComponentLifecycleExtension()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimComponentLifecycleExtension.InitIKernelIHandler">
            <summary>Sets the shim of ComponentLifecycleExtension.Init(IKernel kernel, IHandler handler)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimComponentLifecycleExtension.InterceptResolveInvocation">
            <summary>Sets the shim of ComponentLifecycleExtension.Intercept(ResolveInvocation invocation)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Handlers.Fakes.ShimComponentLifecycleExtension.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimComponentLifecycleExtension.AllInstances.AddHandlerComponentResolvingDelegate">
            <summary>Sets the shim of ComponentLifecycleExtension.AddHandler(ComponentResolvingDelegate handler)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimComponentLifecycleExtension.AllInstances.InitIKernelIHandler">
            <summary>Sets the shim of ComponentLifecycleExtension.Init(IKernel kernel, IHandler handler)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimComponentLifecycleExtension.AllInstances.InterceptResolveInvocation">
            <summary>Sets the shim of ComponentLifecycleExtension.Intercept(ResolveInvocation invocation)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Handlers.Fakes.ShimDefaultGenericHandler">
            <summary>Shim type of Castle.MicroKernel.Handlers.DefaultGenericHandler</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimDefaultGenericHandler.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimDefaultGenericHandler.#ctor(Castle.MicroKernel.Handlers.DefaultGenericHandler)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimDefaultGenericHandler.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimDefaultGenericHandler.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimDefaultGenericHandler.Bind(Castle.MicroKernel.IHandler)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimDefaultGenericHandler.Bind(Castle.MicroKernel.ISubDependencyResolver)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimDefaultGenericHandler.Bind(Castle.MicroKernel.Handlers.IExposeDependencyInfo)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimDefaultGenericHandler.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDefaultGenericHandler.AdaptClassServicesTypeListOfTypeTypeArray">
            <summary>Sets the shim of DefaultGenericHandler.AdaptClassServices(Type closedImplementationType, List`1&lt;Type&gt; closedServices, Type[] openServices)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDefaultGenericHandler.AdaptInterfaceServicesTypeListOfTypeTypeArrayInt32">
            <summary>Sets the shim of DefaultGenericHandler.AdaptInterfaceServices(Type closedImplementationType, List`1&lt;Type&gt; closedServices, Type[] openServices, Int32 index)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDefaultGenericHandler.AdaptServicesTypeType">
            <summary>Sets the shim of DefaultGenericHandler.AdaptServices(Type closedImplementationType, Type requestedType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDefaultGenericHandler.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDefaultGenericHandler.BuildSubHandlerTypeType">
            <summary>Sets the shim of DefaultGenericHandler.BuildSubHandler(Type closedImplementationType, Type requestedType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDefaultGenericHandler.CloneParentPropertiesComponentModel">
            <summary>Sets the shim of DefaultGenericHandler.CloneParentProperties(ComponentModel newModel)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDefaultGenericHandler.ConstructorComponentModelIGenericImplementationMatchingStrategyIGenericServiceStrategy">
            <summary>Sets the shim of DefaultGenericHandler.DefaultGenericHandler(ComponentModel model, IGenericImplementationMatchingStrategy implementationMatchingStrategy, IGenericServiceStrategy serviceStrategy)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDefaultGenericHandler.Dispose">
            <summary>Sets the shim of DefaultGenericHandler.Dispose()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDefaultGenericHandler.EnsureClassMappingInitializedTypeIDictionaryOfTypeTypeRef">
            <summary>Sets the shim of DefaultGenericHandler.EnsureClassMappingInitialized(Type closedImplementationType, IDictionary`2&lt;Type,Type&gt;&amp; genericDefinitionToClass)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDefaultGenericHandler.EnsureInterfaceMappingInitializedTypeIDictionaryOfTypeTypeRef">
            <summary>Sets the shim of DefaultGenericHandler.EnsureInterfaceMappingInitialized(Type closedImplementationType, IDictionary`2&lt;Type,Type&gt;&amp; genericDefinitionToInterface)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDefaultGenericHandler.GetClosedImplementationTypeCreationContextBoolean">
            <summary>Sets the shim of DefaultGenericHandler.GetClosedImplementationType(CreationContext context, Boolean instanceRequired)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDefaultGenericHandler.GetExtendedProperties">
            <summary>Sets the shim of DefaultGenericHandler.GetExtendedProperties()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDefaultGenericHandler.GetGenericArgumentsCreationContext">
            <summary>Sets the shim of DefaultGenericHandler.GetGenericArguments(CreationContext context)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDefaultGenericHandler.GetSubHandlerTypeType">
            <summary>Sets the shim of DefaultGenericHandler.GetSubHandler(Type genericType, Type requestedType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDefaultGenericHandler.ImplementationMatchingStrategyGet">
            <summary>Sets the shim of DefaultGenericHandler.get_ImplementationMatchingStrategy()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDefaultGenericHandler.InitDependencies">
            <summary>Sets the shim of DefaultGenericHandler.InitDependencies()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDefaultGenericHandler.ReleaseCoreBurden">
            <summary>Sets the shim of DefaultGenericHandler.ReleaseCore(Burden burden)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDefaultGenericHandler.ResolveCreationContextBoolean">
            <summary>Sets the shim of DefaultGenericHandler.Resolve(CreationContext context, Boolean instanceRequired)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDefaultGenericHandler.ServiceStrategyGet">
            <summary>Sets the shim of DefaultGenericHandler.get_ServiceStrategy()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDefaultGenericHandler.SupportsAssignableType">
            <summary>Sets the shim of DefaultGenericHandler.SupportsAssignable(Type service)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDefaultGenericHandler.SupportsAssignableTypeTypeTypeArray">
            <summary>Sets the shim of DefaultGenericHandler.SupportsAssignable(Type service, Type modelService, Type[] serviceArguments)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDefaultGenericHandler.SupportsType">
            <summary>Sets the shim of DefaultGenericHandler.Supports(Type service)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDefaultGenericHandler._EnsureInterfaceMappingInitializedb__aType">
            <summary>Sets the shim of DefaultGenericHandler.&lt;EnsureInterfaceMappingInitialized&gt;b__a(Type i)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDefaultGenericHandler._EnsureInterfaceMappingInitializedb__bType">
            <summary>Sets the shim of DefaultGenericHandler.&lt;EnsureInterfaceMappingInitialized&gt;b__b(Type i)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDefaultGenericHandler._GetClosedImplementationTypeb__6Type">
            <summary>Sets the shim of DefaultGenericHandler.&lt;GetClosedImplementationType&gt;b__6(Type a)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDefaultGenericHandler._GetClosedImplementationTypeb__7Type">
            <summary>Sets the shim of DefaultGenericHandler.&lt;GetClosedImplementationType&gt;b__7(Type t)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Handlers.Fakes.ShimDefaultGenericHandler.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDefaultGenericHandler.AllInstances.AdaptServicesTypeType">
            <summary>Sets the shim of DefaultGenericHandler.AdaptServices(Type closedImplementationType, Type requestedType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDefaultGenericHandler.AllInstances.BuildSubHandlerTypeType">
            <summary>Sets the shim of DefaultGenericHandler.BuildSubHandler(Type closedImplementationType, Type requestedType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDefaultGenericHandler.AllInstances.CloneParentPropertiesComponentModel">
            <summary>Sets the shim of DefaultGenericHandler.CloneParentProperties(ComponentModel newModel)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDefaultGenericHandler.AllInstances.Dispose">
            <summary>Sets the shim of DefaultGenericHandler.Dispose()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDefaultGenericHandler.AllInstances.GetClosedImplementationTypeCreationContextBoolean">
            <summary>Sets the shim of DefaultGenericHandler.GetClosedImplementationType(CreationContext context, Boolean instanceRequired)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDefaultGenericHandler.AllInstances.GetExtendedProperties">
            <summary>Sets the shim of DefaultGenericHandler.GetExtendedProperties()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDefaultGenericHandler.AllInstances.GetGenericArgumentsCreationContext">
            <summary>Sets the shim of DefaultGenericHandler.GetGenericArguments(CreationContext context)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDefaultGenericHandler.AllInstances.GetSubHandlerTypeType">
            <summary>Sets the shim of DefaultGenericHandler.GetSubHandler(Type genericType, Type requestedType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDefaultGenericHandler.AllInstances.ImplementationMatchingStrategyGet">
            <summary>Sets the shim of DefaultGenericHandler.get_ImplementationMatchingStrategy()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDefaultGenericHandler.AllInstances.InitDependencies">
            <summary>Sets the shim of DefaultGenericHandler.InitDependencies()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDefaultGenericHandler.AllInstances.ReleaseCoreBurden">
            <summary>Sets the shim of DefaultGenericHandler.ReleaseCore(Burden burden)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDefaultGenericHandler.AllInstances.ResolveCreationContextBoolean">
            <summary>Sets the shim of DefaultGenericHandler.Resolve(CreationContext context, Boolean instanceRequired)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDefaultGenericHandler.AllInstances.ServiceStrategyGet">
            <summary>Sets the shim of DefaultGenericHandler.get_ServiceStrategy()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDefaultGenericHandler.AllInstances.SupportsAssignableType">
            <summary>Sets the shim of DefaultGenericHandler.SupportsAssignable(Type service)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDefaultGenericHandler.AllInstances.SupportsAssignableTypeTypeTypeArray">
            <summary>Sets the shim of DefaultGenericHandler.SupportsAssignable(Type service, Type modelService, Type[] serviceArguments)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDefaultGenericHandler.AllInstances.SupportsType">
            <summary>Sets the shim of DefaultGenericHandler.Supports(Type service)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Handlers.Fakes.ShimDefaultHandler">
            <summary>Shim type of Castle.MicroKernel.Handlers.DefaultHandler</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimDefaultHandler.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimDefaultHandler.#ctor(Castle.MicroKernel.Handlers.DefaultHandler)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimDefaultHandler.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimDefaultHandler.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimDefaultHandler.Bind(Castle.MicroKernel.IHandler)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimDefaultHandler.Bind(Castle.MicroKernel.ISubDependencyResolver)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimDefaultHandler.Bind(Castle.MicroKernel.Handlers.IExposeDependencyInfo)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimDefaultHandler.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDefaultHandler.AssertNotWaitingForDependency">
            <summary>Sets the shim of DefaultHandler.AssertNotWaitingForDependency()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDefaultHandler.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDefaultHandler.ConstructorComponentModel">
            <summary>Sets the shim of DefaultHandler.DefaultHandler(ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDefaultHandler.Dispose">
            <summary>Sets the shim of DefaultHandler.Dispose()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDefaultHandler.InitDependencies">
            <summary>Sets the shim of DefaultHandler.InitDependencies()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDefaultHandler.LifestyleManagerGet">
            <summary>Sets the shim of DefaultHandler.get_LifestyleManager()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDefaultHandler.ReleaseCoreBurden">
            <summary>Sets the shim of DefaultHandler.ReleaseCore(Burden burden)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDefaultHandler.ResolveCoreCreationContextBooleanBooleanBurdenOut">
            <summary>Sets the shim of DefaultHandler.ResolveCore(CreationContext context, Boolean requiresDecommission, Boolean instanceRequired, Burden&amp; burden)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDefaultHandler.ResolveCreationContextBoolean">
            <summary>Sets the shim of DefaultHandler.Resolve(CreationContext context, Boolean instanceRequired)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDefaultHandler.UnresolvableHandlerException">
            <summary>Sets the shim of DefaultHandler.UnresolvableHandlerException()</summary>
        </member>
        <member name="T:Castle.MicroKernel.Handlers.Fakes.ShimDefaultHandler.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDefaultHandler.AllInstances.AssertNotWaitingForDependency">
            <summary>Sets the shim of DefaultHandler.AssertNotWaitingForDependency()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDefaultHandler.AllInstances.Dispose">
            <summary>Sets the shim of DefaultHandler.Dispose()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDefaultHandler.AllInstances.InitDependencies">
            <summary>Sets the shim of DefaultHandler.InitDependencies()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDefaultHandler.AllInstances.LifestyleManagerGet">
            <summary>Sets the shim of DefaultHandler.get_LifestyleManager()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDefaultHandler.AllInstances.ReleaseCoreBurden">
            <summary>Sets the shim of DefaultHandler.ReleaseCore(Burden burden)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDefaultHandler.AllInstances.ResolveCoreCreationContextBooleanBooleanBurdenOut">
            <summary>Sets the shim of DefaultHandler.ResolveCore(CreationContext context, Boolean requiresDecommission, Boolean instanceRequired, Burden&amp; burden)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDefaultHandler.AllInstances.ResolveCreationContextBoolean">
            <summary>Sets the shim of DefaultHandler.Resolve(CreationContext context, Boolean instanceRequired)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDefaultHandler.AllInstances.UnresolvableHandlerException">
            <summary>Sets the shim of DefaultHandler.UnresolvableHandlerException()</summary>
        </member>
        <member name="T:Castle.MicroKernel.Handlers.Fakes.ShimDefaultHandlerFactory">
            <summary>Shim type of Castle.MicroKernel.Handlers.DefaultHandlerFactory</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimDefaultHandlerFactory.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimDefaultHandlerFactory.#ctor(Castle.MicroKernel.Handlers.DefaultHandlerFactory)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimDefaultHandlerFactory.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimDefaultHandlerFactory.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimDefaultHandlerFactory.Bind(Castle.MicroKernel.IHandlerFactory)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDefaultHandlerFactory.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDefaultHandlerFactory.ConstructorIKernelInternal">
            <summary>Sets the shim of DefaultHandlerFactory.DefaultHandlerFactory(IKernelInternal kernel)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDefaultHandlerFactory.CreateComponentModel">
            <summary>Sets the shim of DefaultHandlerFactory.Create(ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDefaultHandlerFactory.CreateHandlerComponentModel">
            <summary>Sets the shim of DefaultHandlerFactory.CreateHandler(ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDefaultHandlerFactory.GenericImplementationMatchingStrategyComponentModel">
            <summary>Sets the shim of DefaultHandlerFactory.GenericImplementationMatchingStrategy(ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDefaultHandlerFactory.GenericServiceStrategyComponentModel">
            <summary>Sets the shim of DefaultHandlerFactory.GenericServiceStrategy(ComponentModel model)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Handlers.Fakes.ShimDefaultHandlerFactory.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDefaultHandlerFactory.AllInstances.CreateComponentModel">
            <summary>Sets the shim of DefaultHandlerFactory.Create(ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDefaultHandlerFactory.AllInstances.CreateHandlerComponentModel">
            <summary>Sets the shim of DefaultHandlerFactory.CreateHandler(ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDefaultHandlerFactory.AllInstances.GenericImplementationMatchingStrategyComponentModel">
            <summary>Sets the shim of DefaultHandlerFactory.GenericImplementationMatchingStrategy(ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDefaultHandlerFactory.AllInstances.GenericServiceStrategyComponentModel">
            <summary>Sets the shim of DefaultHandlerFactory.GenericServiceStrategy(ComponentModel model)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Handlers.Fakes.ShimDependencyInspector">
            <summary>Shim type of Castle.MicroKernel.Handlers.DependencyInspector</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimDependencyInspector.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimDependencyInspector.#ctor(Castle.MicroKernel.Handlers.DependencyInspector)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimDependencyInspector.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimDependencyInspector.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimDependencyInspector.Bind(Castle.MicroKernel.Handlers.IDependencyInspector)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDependencyInspector.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDependencyInspector.ConstructorStringBuilder">
            <summary>Sets the shim of DependencyInspector.DependencyInspector(StringBuilder message)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDependencyInspector.InspectIHandlerDependencyModelArrayIKernel">
            <summary>Sets the shim of DependencyInspector.Inspect(IHandler handler, DependencyModel[] missingDependencies, IKernel kernel)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDependencyInspector.InspectParameterDependencyDependencyModel">
            <summary>Sets the shim of DependencyInspector.InspectParameterDependency(DependencyModel dependency)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDependencyInspector.InspectServiceDependencyIHandlerDependencyModelIKernel">
            <summary>Sets the shim of DependencyInspector.InspectServiceDependency(IHandler inspectingHandler, DependencyModel dependency, IKernel kernel)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDependencyInspector.InspectServiceOverrideDependencyDependencyModelIKernel">
            <summary>Sets the shim of DependencyInspector.InspectServiceOverrideDependency(DependencyModel dependency, IKernel kernel)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDependencyInspector.MessageGet">
            <summary>Sets the shim of DependencyInspector.get_Message()</summary>
        </member>
        <member name="T:Castle.MicroKernel.Handlers.Fakes.ShimDependencyInspector.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDependencyInspector.AllInstances.InspectIHandlerDependencyModelArrayIKernel">
            <summary>Sets the shim of DependencyInspector.Inspect(IHandler handler, DependencyModel[] missingDependencies, IKernel kernel)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDependencyInspector.AllInstances.InspectParameterDependencyDependencyModel">
            <summary>Sets the shim of DependencyInspector.InspectParameterDependency(DependencyModel dependency)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDependencyInspector.AllInstances.InspectServiceDependencyIHandlerDependencyModelIKernel">
            <summary>Sets the shim of DependencyInspector.InspectServiceDependency(IHandler inspectingHandler, DependencyModel dependency, IKernel kernel)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDependencyInspector.AllInstances.InspectServiceOverrideDependencyDependencyModelIKernel">
            <summary>Sets the shim of DependencyInspector.InspectServiceOverrideDependency(DependencyModel dependency, IKernel kernel)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDependencyInspector.AllInstances.MessageGet">
            <summary>Sets the shim of DependencyInspector.get_Message()</summary>
        </member>
        <member name="T:Castle.MicroKernel.Handlers.Fakes.ShimExtendedHandler">
            <summary>Shim type of Castle.MicroKernel.Handlers.ExtendedHandler</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimExtendedHandler.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimExtendedHandler.#ctor(Castle.MicroKernel.Handlers.ExtendedHandler)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimExtendedHandler.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimExtendedHandler.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimExtendedHandler.Bind(Castle.MicroKernel.IHandler)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimExtendedHandler.Bind(Castle.MicroKernel.ISubDependencyResolver)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimExtendedHandler.Bind(Castle.MicroKernel.Handlers.IExposeDependencyInfo)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimExtendedHandler.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimExtendedHandler.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimExtendedHandler.ConstructorComponentModelICollectionOfIResolveExtensionICollectionOfIReleaseExtension">
            <summary>Sets the shim of ExtendedHandler.ExtendedHandler(ComponentModel model, ICollection`1&lt;IResolveExtension&gt; resolveExtensions, ICollection`1&lt;IReleaseExtension&gt; releaseExtensions)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimExtendedHandler.InitIKernelInternal">
            <summary>Sets the shim of ExtendedHandler.Init(IKernelInternal kernel)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimExtendedHandler.InvokeReleasePipelineInt32ReleaseInvocation">
            <summary>Sets the shim of ExtendedHandler.InvokeReleasePipeline(Int32 extensionIndex, ReleaseInvocation invocation)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimExtendedHandler.InvokeResolvePipelineInt32ResolveInvocation">
            <summary>Sets the shim of ExtendedHandler.InvokeResolvePipeline(Int32 extensionIndex, ResolveInvocation invocation)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimExtendedHandler.ReleaseBurden">
            <summary>Sets the shim of ExtendedHandler.Release(Burden burden)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimExtendedHandler.ResolveCreationContextBoolean">
            <summary>Sets the shim of ExtendedHandler.Resolve(CreationContext context, Boolean instanceRequired)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Handlers.Fakes.ShimExtendedHandler.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimExtendedHandler.AllInstances.InitIKernelInternal">
            <summary>Sets the shim of ExtendedHandler.Init(IKernelInternal kernel)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimExtendedHandler.AllInstances.InvokeReleasePipelineInt32ReleaseInvocation">
            <summary>Sets the shim of ExtendedHandler.InvokeReleasePipeline(Int32 extensionIndex, ReleaseInvocation invocation)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimExtendedHandler.AllInstances.InvokeResolvePipelineInt32ResolveInvocation">
            <summary>Sets the shim of ExtendedHandler.InvokeResolvePipeline(Int32 extensionIndex, ResolveInvocation invocation)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimExtendedHandler.AllInstances.ReleaseBurden">
            <summary>Sets the shim of ExtendedHandler.Release(Burden burden)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimExtendedHandler.AllInstances.ResolveCreationContextBoolean">
            <summary>Sets the shim of ExtendedHandler.Resolve(CreationContext context, Boolean instanceRequired)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Handlers.Fakes.ShimGenericHandlerTypeMismatchException">
            <summary>Shim type of Castle.MicroKernel.Handlers.GenericHandlerTypeMismatchException</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimGenericHandlerTypeMismatchException.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimGenericHandlerTypeMismatchException.#ctor(Castle.MicroKernel.Handlers.GenericHandlerTypeMismatchException)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimGenericHandlerTypeMismatchException.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimGenericHandlerTypeMismatchException.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimGenericHandlerTypeMismatchException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimGenericHandlerTypeMismatchException.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimGenericHandlerTypeMismatchException.BuildMessageStringArrayComponentModelDefaultGenericHandler">
            <summary>Sets the shim of GenericHandlerTypeMismatchException.BuildMessage(String[] argumentsUsed, ComponentModel componentModel, DefaultGenericHandler handler)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimGenericHandlerTypeMismatchException.ConstructorIEnumerableOfTypeComponentModelDefaultGenericHandler">
            <summary>Sets the shim of GenericHandlerTypeMismatchException.GenericHandlerTypeMismatchException(IEnumerable`1&lt;Type&gt; argumentsUsed, ComponentModel componentModel, DefaultGenericHandler handler)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimGenericHandlerTypeMismatchException.ConstructorSerializationInfoStreamingContext">
            <summary>Sets the shim of GenericHandlerTypeMismatchException.GenericHandlerTypeMismatchException(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimGenericHandlerTypeMismatchException.ConstructorStringComponentName">
            <summary>Sets the shim of GenericHandlerTypeMismatchException.GenericHandlerTypeMismatchException(String message, ComponentName name)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimGenericHandlerTypeMismatchException.ConstructorStringComponentNameException">
            <summary>Sets the shim of GenericHandlerTypeMismatchException.GenericHandlerTypeMismatchException(String message, ComponentName name, Exception innerException)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimGenericHandlerTypeMismatchException._ctorb__0Type">
            <summary>Sets the shim of GenericHandlerTypeMismatchException.&lt;.ctor&gt;b__0(Type a)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Handlers.Fakes.ShimGenericHandlerTypeMismatchException.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="T:Castle.MicroKernel.Handlers.Fakes.ShimHandlerException">
            <summary>Shim type of Castle.MicroKernel.Handlers.HandlerException</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimHandlerException.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimHandlerException.#ctor(Castle.MicroKernel.Handlers.HandlerException)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimHandlerException.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimHandlerException.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimHandlerException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimHandlerException.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimHandlerException.ConstructorSerializationInfoStreamingContext">
            <summary>Sets the shim of HandlerException.HandlerException(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimHandlerException.ConstructorStringComponentName">
            <summary>Sets the shim of HandlerException.HandlerException(String message, ComponentName name)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimHandlerException.ConstructorStringComponentNameException">
            <summary>Sets the shim of HandlerException.HandlerException(String message, ComponentName name, Exception innerException)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimHandlerException.NameGet">
            <summary>Sets the shim of HandlerException.get_Name()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimHandlerException.NameSetComponentName">
            <summary>Sets the shim of HandlerException.set_Name(ComponentName value)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Handlers.Fakes.ShimHandlerException.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimHandlerException.AllInstances.NameGet">
            <summary>Sets the shim of HandlerException.get_Name()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimHandlerException.AllInstances.NameSetComponentName">
            <summary>Sets the shim of HandlerException.set_Name(ComponentName value)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Handlers.Fakes.ShimHandlerExtensionsUtil">
            <summary>Shim type of Castle.MicroKernel.Handlers.HandlerExtensionsUtil</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimHandlerExtensionsUtil.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimHandlerExtensionsUtil.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimHandlerExtensionsUtil.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimHandlerExtensionsUtil.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimHandlerExtensionsUtil.ReleaseExtensionsComponentModelBoolean">
            <summary>Sets the shim of HandlerExtensionsUtil.ReleaseExtensions(ComponentModel model, Boolean ensureExists)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimHandlerExtensionsUtil.ResolveExtensionsComponentModelBoolean">
            <summary>Sets the shim of HandlerExtensionsUtil.ResolveExtensions(ComponentModel model, Boolean ensureExists)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimHandlerExtensionsUtil.StaticConstructor">
            <summary>Sets the shim of HandlerExtensionsUtil.HandlerExtensionsUtil()</summary>
        </member>
        <member name="T:Castle.MicroKernel.Handlers.Fakes.ShimParentHandlerWrapper">
            <summary>Shim type of Castle.MicroKernel.Handlers.ParentHandlerWrapper</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimParentHandlerWrapper.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimParentHandlerWrapper.#ctor(Castle.MicroKernel.Handlers.ParentHandlerWrapper)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimParentHandlerWrapper.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimParentHandlerWrapper.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimParentHandlerWrapper.Bind(Castle.MicroKernel.IHandler)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimParentHandlerWrapper.Bind(Castle.MicroKernel.ISubDependencyResolver)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimParentHandlerWrapper.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimParentHandlerWrapper.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimParentHandlerWrapper.CanResolveCreationContextISubDependencyResolverComponentModelDependencyModel">
            <summary>Sets the shim of ParentHandlerWrapper.CanResolve(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model, DependencyModel dependency)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimParentHandlerWrapper.ComponentModelGet">
            <summary>Sets the shim of ParentHandlerWrapper.get_ComponentModel()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimParentHandlerWrapper.ConstructorIHandlerISubDependencyResolverIReleasePolicy">
            <summary>Sets the shim of ParentHandlerWrapper.ParentHandlerWrapper(IHandler parentHandler, ISubDependencyResolver childResolver, IReleasePolicy parentReleasePolicy)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimParentHandlerWrapper.CurrentStateGet">
            <summary>Sets the shim of ParentHandlerWrapper.get_CurrentState()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimParentHandlerWrapper.Dispose">
            <summary>Sets the shim of ParentHandlerWrapper.Dispose()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimParentHandlerWrapper.DisposeBoolean">
            <summary>Sets the shim of ParentHandlerWrapper.Dispose(Boolean disposing)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimParentHandlerWrapper.InitIKernelInternal">
            <summary>Sets the shim of ParentHandlerWrapper.Init(IKernelInternal kernel)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimParentHandlerWrapper.IsBeingResolvedInContextCreationContext">
            <summary>Sets the shim of ParentHandlerWrapper.IsBeingResolvedInContext(CreationContext context)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimParentHandlerWrapper.ReleaseBurden">
            <summary>Sets the shim of ParentHandlerWrapper.Release(Burden burden)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimParentHandlerWrapper.ResolveCreationContext">
            <summary>Sets the shim of ParentHandlerWrapper.Resolve(CreationContext context)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimParentHandlerWrapper.ResolveCreationContextISubDependencyResolverComponentModelDependencyModel">
            <summary>Sets the shim of ParentHandlerWrapper.Resolve(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model, DependencyModel dependency)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimParentHandlerWrapper.SupportsAssignableType">
            <summary>Sets the shim of ParentHandlerWrapper.SupportsAssignable(Type service)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimParentHandlerWrapper.SupportsType">
            <summary>Sets the shim of ParentHandlerWrapper.Supports(Type service)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimParentHandlerWrapper.TryResolveCreationContext">
            <summary>Sets the shim of ParentHandlerWrapper.TryResolve(CreationContext context)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Handlers.Fakes.ShimParentHandlerWrapper.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimParentHandlerWrapper.AllInstances.CanResolveCreationContextISubDependencyResolverComponentModelDependencyModel">
            <summary>Sets the shim of ParentHandlerWrapper.CanResolve(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model, DependencyModel dependency)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimParentHandlerWrapper.AllInstances.ComponentModelGet">
            <summary>Sets the shim of ParentHandlerWrapper.get_ComponentModel()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimParentHandlerWrapper.AllInstances.CurrentStateGet">
            <summary>Sets the shim of ParentHandlerWrapper.get_CurrentState()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimParentHandlerWrapper.AllInstances.Dispose">
            <summary>Sets the shim of ParentHandlerWrapper.Dispose()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimParentHandlerWrapper.AllInstances.DisposeBoolean">
            <summary>Sets the shim of ParentHandlerWrapper.Dispose(Boolean disposing)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimParentHandlerWrapper.AllInstances.InitIKernelInternal">
            <summary>Sets the shim of ParentHandlerWrapper.Init(IKernelInternal kernel)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimParentHandlerWrapper.AllInstances.IsBeingResolvedInContextCreationContext">
            <summary>Sets the shim of ParentHandlerWrapper.IsBeingResolvedInContext(CreationContext context)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimParentHandlerWrapper.AllInstances.ReleaseBurden">
            <summary>Sets the shim of ParentHandlerWrapper.Release(Burden burden)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimParentHandlerWrapper.AllInstances.ResolveCreationContext">
            <summary>Sets the shim of ParentHandlerWrapper.Resolve(CreationContext context)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimParentHandlerWrapper.AllInstances.ResolveCreationContextISubDependencyResolverComponentModelDependencyModel">
            <summary>Sets the shim of ParentHandlerWrapper.Resolve(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model, DependencyModel dependency)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimParentHandlerWrapper.AllInstances.SupportsAssignableType">
            <summary>Sets the shim of ParentHandlerWrapper.SupportsAssignable(Type service)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimParentHandlerWrapper.AllInstances.SupportsType">
            <summary>Sets the shim of ParentHandlerWrapper.Supports(Type service)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimParentHandlerWrapper.AllInstances.TryResolveCreationContext">
            <summary>Sets the shim of ParentHandlerWrapper.TryResolve(CreationContext context)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Handlers.Fakes.ShimReleaseInvocation">
            <summary>Shim type of Castle.MicroKernel.Handlers.ReleaseInvocation</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimReleaseInvocation.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimReleaseInvocation.#ctor(Castle.MicroKernel.Handlers.ReleaseInvocation)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimReleaseInvocation.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimReleaseInvocation.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimReleaseInvocation.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimReleaseInvocation.BurdenGet">
            <summary>Sets the shim of ReleaseInvocation.get_Burden()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimReleaseInvocation.BurdenSetBurden">
            <summary>Sets the shim of ReleaseInvocation.set_Burden(Burden value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimReleaseInvocation.ConstructorBurden">
            <summary>Sets the shim of ReleaseInvocation.ReleaseInvocation(Burden burden)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimReleaseInvocation.InstanceGet">
            <summary>Sets the shim of ReleaseInvocation.get_Instance()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimReleaseInvocation.Proceed">
            <summary>Sets the shim of ReleaseInvocation.Proceed()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimReleaseInvocation.ReturnValueGet">
            <summary>Sets the shim of ReleaseInvocation.get_ReturnValue()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimReleaseInvocation.ReturnValueSetBoolean">
            <summary>Sets the shim of ReleaseInvocation.set_ReturnValue(Boolean value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimReleaseInvocation.SetProceedDelegateAction">
            <summary>Sets the shim of ReleaseInvocation.SetProceedDelegate(Action value)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Handlers.Fakes.ShimReleaseInvocation.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimReleaseInvocation.AllInstances.BurdenGet">
            <summary>Sets the shim of ReleaseInvocation.get_Burden()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimReleaseInvocation.AllInstances.BurdenSetBurden">
            <summary>Sets the shim of ReleaseInvocation.set_Burden(Burden value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimReleaseInvocation.AllInstances.InstanceGet">
            <summary>Sets the shim of ReleaseInvocation.get_Instance()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimReleaseInvocation.AllInstances.Proceed">
            <summary>Sets the shim of ReleaseInvocation.Proceed()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimReleaseInvocation.AllInstances.ReturnValueGet">
            <summary>Sets the shim of ReleaseInvocation.get_ReturnValue()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimReleaseInvocation.AllInstances.ReturnValueSetBoolean">
            <summary>Sets the shim of ReleaseInvocation.set_ReturnValue(Boolean value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimReleaseInvocation.AllInstances.SetProceedDelegateAction">
            <summary>Sets the shim of ReleaseInvocation.SetProceedDelegate(Action value)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Handlers.Fakes.ShimResolveInvocation">
            <summary>Shim type of Castle.MicroKernel.Handlers.ResolveInvocation</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimResolveInvocation.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimResolveInvocation.#ctor(Castle.MicroKernel.Handlers.ResolveInvocation)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimResolveInvocation.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimResolveInvocation.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimResolveInvocation.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimResolveInvocation.BurdenGet">
            <summary>Sets the shim of ResolveInvocation.get_Burden()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimResolveInvocation.BurdenSetBurden">
            <summary>Sets the shim of ResolveInvocation.set_Burden(Burden value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimResolveInvocation.ConstructorCreationContextBoolean">
            <summary>Sets the shim of ResolveInvocation.ResolveInvocation(CreationContext context, Boolean instanceRequired)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimResolveInvocation.ContextGet">
            <summary>Sets the shim of ResolveInvocation.get_Context()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimResolveInvocation.ContextSetCreationContext">
            <summary>Sets the shim of ResolveInvocation.set_Context(CreationContext value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimResolveInvocation.DecommissionRequiredGet">
            <summary>Sets the shim of ResolveInvocation.get_DecommissionRequired()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimResolveInvocation.InstanceRequiredGet">
            <summary>Sets the shim of ResolveInvocation.get_InstanceRequired()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimResolveInvocation.InstanceRequiredSetBoolean">
            <summary>Sets the shim of ResolveInvocation.set_InstanceRequired(Boolean value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimResolveInvocation.Proceed">
            <summary>Sets the shim of ResolveInvocation.Proceed()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimResolveInvocation.RequireDecommission">
            <summary>Sets the shim of ResolveInvocation.RequireDecommission()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimResolveInvocation.ResolvedInstanceGet">
            <summary>Sets the shim of ResolveInvocation.get_ResolvedInstance()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimResolveInvocation.ResolvedInstanceSetObject">
            <summary>Sets the shim of ResolveInvocation.set_ResolvedInstance(Object value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimResolveInvocation.SetProceedDelegateAction">
            <summary>Sets the shim of ResolveInvocation.SetProceedDelegate(Action value)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Handlers.Fakes.ShimResolveInvocation.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimResolveInvocation.AllInstances.BurdenGet">
            <summary>Sets the shim of ResolveInvocation.get_Burden()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimResolveInvocation.AllInstances.BurdenSetBurden">
            <summary>Sets the shim of ResolveInvocation.set_Burden(Burden value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimResolveInvocation.AllInstances.ContextGet">
            <summary>Sets the shim of ResolveInvocation.get_Context()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimResolveInvocation.AllInstances.ContextSetCreationContext">
            <summary>Sets the shim of ResolveInvocation.set_Context(CreationContext value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimResolveInvocation.AllInstances.DecommissionRequiredGet">
            <summary>Sets the shim of ResolveInvocation.get_DecommissionRequired()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimResolveInvocation.AllInstances.InstanceRequiredGet">
            <summary>Sets the shim of ResolveInvocation.get_InstanceRequired()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimResolveInvocation.AllInstances.InstanceRequiredSetBoolean">
            <summary>Sets the shim of ResolveInvocation.set_InstanceRequired(Boolean value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimResolveInvocation.AllInstances.Proceed">
            <summary>Sets the shim of ResolveInvocation.Proceed()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimResolveInvocation.AllInstances.RequireDecommission">
            <summary>Sets the shim of ResolveInvocation.RequireDecommission()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimResolveInvocation.AllInstances.ResolvedInstanceGet">
            <summary>Sets the shim of ResolveInvocation.get_ResolvedInstance()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimResolveInvocation.AllInstances.ResolvedInstanceSetObject">
            <summary>Sets the shim of ResolveInvocation.set_ResolvedInstance(Object value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimResolveInvocation.AllInstances.SetProceedDelegateAction">
            <summary>Sets the shim of ResolveInvocation.SetProceedDelegate(Action value)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Handlers.Fakes.StubAbstractHandler">
            <summary>Stub type of Castle.MicroKernel.Handlers.AbstractHandler</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubAbstractHandler.#ctor(Castle.Core.ComponentModel)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubAbstractHandler.CanResolve(Castle.MicroKernel.Context.CreationContext,Castle.MicroKernel.ISubDependencyResolver,Castle.Core.ComponentModel,Castle.Core.DependencyModel)">
            <summary>Sets the stub of AbstractHandler.CanResolve(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model, DependencyModel dependency)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubAbstractHandler.CanResolveCreationContextISubDependencyResolverComponentModelDependencyModel">
            <summary>Sets the stub of AbstractHandler.CanResolve(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model, DependencyModel dependency)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubAbstractHandler.Dispose">
            <summary>Sets the stub of AbstractHandler.Dispose()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubAbstractHandler.Dispose01">
            <summary>Sets the stub of AbstractHandler.Dispose()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubAbstractHandler.Init(Castle.MicroKernel.IKernelInternal)">
            <summary>Sets the stub of AbstractHandler.Init(IKernelInternal kernel)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubAbstractHandler.InitDependencies">
            <summary>Sets the stub of AbstractHandler.InitDependencies()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubAbstractHandler.InitDependencies01">
            <summary>Sets the stub of AbstractHandler.InitDependencies()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubAbstractHandler.InitIKernelInternal">
            <summary>Sets the stub of AbstractHandler.Init(IKernelInternal kernel)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubAbstractHandler.InitializeStub">
            <summary>Initializes a new instance of type StubAbstractHandler</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubAbstractHandler.Release(Castle.MicroKernel.Burden)">
            <summary>Sets the stub of AbstractHandler.Release(Burden burden)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubAbstractHandler.ReleaseBurden">
            <summary>Sets the stub of AbstractHandler.Release(Burden burden)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubAbstractHandler.ReleaseCore(Castle.MicroKernel.Burden)">
            <summary>Sets the stub of AbstractHandler.ReleaseCore(Burden burden)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubAbstractHandler.ReleaseCoreBurden">
            <summary>Sets the stub of AbstractHandler.ReleaseCore(Burden burden)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubAbstractHandler.Resolve(Castle.MicroKernel.Context.CreationContext,System.Boolean)">
            <summary>Sets the stub of AbstractHandler.Resolve(CreationContext context, Boolean instanceRequired)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubAbstractHandler.Resolve(Castle.MicroKernel.Context.CreationContext,Castle.MicroKernel.ISubDependencyResolver,Castle.Core.ComponentModel,Castle.Core.DependencyModel)">
            <summary>Sets the stub of AbstractHandler.Resolve(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model, DependencyModel dependency)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubAbstractHandler.ResolveCreationContextBoolean">
            <summary>Sets the stub of AbstractHandler.Resolve(CreationContext context, Boolean instanceRequired)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubAbstractHandler.ResolveCreationContextISubDependencyResolverComponentModelDependencyModel">
            <summary>Sets the stub of AbstractHandler.Resolve(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model, DependencyModel dependency)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubAbstractHandler.Supports(System.Type)">
            <summary>Sets the stub of AbstractHandler.Supports(Type service)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubAbstractHandler.SupportsAssignable(System.Type)">
            <summary>Sets the stub of AbstractHandler.SupportsAssignable(Type service)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubAbstractHandler.SupportsAssignableType">
            <summary>Sets the stub of AbstractHandler.SupportsAssignable(Type service)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubAbstractHandler.SupportsType">
            <summary>Sets the stub of AbstractHandler.Supports(Type service)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubAbstractHandler.ToString">
            <summary>Sets the stub of AbstractHandler.ToString()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubAbstractHandler.ToString01">
            <summary>Sets the stub of AbstractHandler.ToString()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.StubAbstractHandler.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.StubAbstractHandler.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.StubAbstractHandler.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.Handlers.Fakes.StubComponentLifecycleExtension">
            <summary>Stub type of Castle.MicroKernel.Handlers.ComponentLifecycleExtension</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubComponentLifecycleExtension.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubComponentLifecycleExtension.InitializeStub">
            <summary>Initializes a new instance of type StubComponentLifecycleExtension</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.StubComponentLifecycleExtension.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.StubComponentLifecycleExtension.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.StubComponentLifecycleExtension.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.Handlers.Fakes.StubDefaultGenericHandler">
            <summary>Stub type of Castle.MicroKernel.Handlers.DefaultGenericHandler</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubDefaultGenericHandler.#ctor(Castle.Core.ComponentModel,Castle.MicroKernel.Handlers.IGenericImplementationMatchingStrategy,Castle.MicroKernel.Handlers.IGenericServiceStrategy)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubDefaultGenericHandler.AdaptServices(System.Type,System.Type)">
            <summary>Sets the stub of DefaultGenericHandler.AdaptServices(Type closedImplementationType, Type requestedType)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubDefaultGenericHandler.AdaptServicesTypeType">
            <summary>Sets the stub of DefaultGenericHandler.AdaptServices(Type closedImplementationType, Type requestedType)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubDefaultGenericHandler.BuildSubHandler(System.Type,System.Type)">
            <summary>Sets the stub of DefaultGenericHandler.BuildSubHandler(Type closedImplementationType, Type requestedType)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubDefaultGenericHandler.BuildSubHandlerTypeType">
            <summary>Sets the stub of DefaultGenericHandler.BuildSubHandler(Type closedImplementationType, Type requestedType)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubDefaultGenericHandler.CanResolve(Castle.MicroKernel.Context.CreationContext,Castle.MicroKernel.ISubDependencyResolver,Castle.Core.ComponentModel,Castle.Core.DependencyModel)">
            <summary>Sets the stub of AbstractHandler.CanResolve(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model, DependencyModel dependency)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubDefaultGenericHandler.CanResolveCreationContextISubDependencyResolverComponentModelDependencyModel">
            <summary>Sets the stub of AbstractHandler.CanResolve(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model, DependencyModel dependency)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubDefaultGenericHandler.Dispose">
            <summary>Sets the stub of DefaultGenericHandler.Dispose()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubDefaultGenericHandler.Dispose01">
            <summary>Sets the stub of DefaultGenericHandler.Dispose()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubDefaultGenericHandler.Init(Castle.MicroKernel.IKernelInternal)">
            <summary>Sets the stub of AbstractHandler.Init(IKernelInternal kernel)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubDefaultGenericHandler.InitDependencies">
            <summary>Sets the stub of DefaultGenericHandler.InitDependencies()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubDefaultGenericHandler.InitDependencies01">
            <summary>Sets the stub of DefaultGenericHandler.InitDependencies()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubDefaultGenericHandler.InitIKernelInternal">
            <summary>Sets the stub of AbstractHandler.Init(IKernelInternal kernel)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubDefaultGenericHandler.InitializeStub">
            <summary>Initializes a new instance of type StubDefaultGenericHandler</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubDefaultGenericHandler.Release(Castle.MicroKernel.Burden)">
            <summary>Sets the stub of AbstractHandler.Release(Burden burden)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubDefaultGenericHandler.ReleaseBurden">
            <summary>Sets the stub of AbstractHandler.Release(Burden burden)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubDefaultGenericHandler.ReleaseCore(Castle.MicroKernel.Burden)">
            <summary>Sets the stub of DefaultGenericHandler.ReleaseCore(Burden burden)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubDefaultGenericHandler.ReleaseCoreBurden">
            <summary>Sets the stub of DefaultGenericHandler.ReleaseCore(Burden burden)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubDefaultGenericHandler.Resolve(Castle.MicroKernel.Context.CreationContext,System.Boolean)">
            <summary>Sets the stub of DefaultGenericHandler.Resolve(CreationContext context, Boolean instanceRequired)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubDefaultGenericHandler.Resolve(Castle.MicroKernel.Context.CreationContext,Castle.MicroKernel.ISubDependencyResolver,Castle.Core.ComponentModel,Castle.Core.DependencyModel)">
            <summary>Sets the stub of AbstractHandler.Resolve(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model, DependencyModel dependency)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubDefaultGenericHandler.ResolveCreationContextBoolean">
            <summary>Sets the stub of DefaultGenericHandler.Resolve(CreationContext context, Boolean instanceRequired)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubDefaultGenericHandler.ResolveCreationContextISubDependencyResolverComponentModelDependencyModel">
            <summary>Sets the stub of AbstractHandler.Resolve(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model, DependencyModel dependency)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubDefaultGenericHandler.Supports(System.Type)">
            <summary>Sets the stub of DefaultGenericHandler.Supports(Type service)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubDefaultGenericHandler.SupportsAssignable(System.Type)">
            <summary>Sets the stub of DefaultGenericHandler.SupportsAssignable(Type service)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubDefaultGenericHandler.SupportsAssignableType">
            <summary>Sets the stub of DefaultGenericHandler.SupportsAssignable(Type service)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubDefaultGenericHandler.SupportsType">
            <summary>Sets the stub of DefaultGenericHandler.Supports(Type service)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubDefaultGenericHandler.ToString">
            <summary>Sets the stub of AbstractHandler.ToString()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubDefaultGenericHandler.ToString01">
            <summary>Sets the stub of AbstractHandler.ToString()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.StubDefaultGenericHandler.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.StubDefaultGenericHandler.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.StubDefaultGenericHandler.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.Handlers.Fakes.StubDefaultHandler">
            <summary>Stub type of Castle.MicroKernel.Handlers.DefaultHandler</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubDefaultHandler.#ctor(Castle.Core.ComponentModel)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubDefaultHandler.CanResolve(Castle.MicroKernel.Context.CreationContext,Castle.MicroKernel.ISubDependencyResolver,Castle.Core.ComponentModel,Castle.Core.DependencyModel)">
            <summary>Sets the stub of AbstractHandler.CanResolve(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model, DependencyModel dependency)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubDefaultHandler.CanResolveCreationContextISubDependencyResolverComponentModelDependencyModel">
            <summary>Sets the stub of AbstractHandler.CanResolve(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model, DependencyModel dependency)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubDefaultHandler.Dispose">
            <summary>Sets the stub of DefaultHandler.Dispose()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubDefaultHandler.Dispose01">
            <summary>Sets the stub of DefaultHandler.Dispose()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubDefaultHandler.Init(Castle.MicroKernel.IKernelInternal)">
            <summary>Sets the stub of AbstractHandler.Init(IKernelInternal kernel)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubDefaultHandler.InitDependencies">
            <summary>Sets the stub of DefaultHandler.InitDependencies()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubDefaultHandler.InitDependencies01">
            <summary>Sets the stub of DefaultHandler.InitDependencies()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubDefaultHandler.InitIKernelInternal">
            <summary>Sets the stub of AbstractHandler.Init(IKernelInternal kernel)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubDefaultHandler.InitializeStub">
            <summary>Initializes a new instance of type StubDefaultHandler</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubDefaultHandler.Release(Castle.MicroKernel.Burden)">
            <summary>Sets the stub of AbstractHandler.Release(Burden burden)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubDefaultHandler.ReleaseBurden">
            <summary>Sets the stub of AbstractHandler.Release(Burden burden)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubDefaultHandler.ReleaseCore(Castle.MicroKernel.Burden)">
            <summary>Sets the stub of DefaultHandler.ReleaseCore(Burden burden)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubDefaultHandler.ReleaseCoreBurden">
            <summary>Sets the stub of DefaultHandler.ReleaseCore(Burden burden)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubDefaultHandler.Resolve(Castle.MicroKernel.Context.CreationContext,System.Boolean)">
            <summary>Sets the stub of DefaultHandler.Resolve(CreationContext context, Boolean instanceRequired)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubDefaultHandler.Resolve(Castle.MicroKernel.Context.CreationContext,Castle.MicroKernel.ISubDependencyResolver,Castle.Core.ComponentModel,Castle.Core.DependencyModel)">
            <summary>Sets the stub of AbstractHandler.Resolve(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model, DependencyModel dependency)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubDefaultHandler.ResolveCreationContextBoolean">
            <summary>Sets the stub of DefaultHandler.Resolve(CreationContext context, Boolean instanceRequired)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubDefaultHandler.ResolveCreationContextISubDependencyResolverComponentModelDependencyModel">
            <summary>Sets the stub of AbstractHandler.Resolve(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model, DependencyModel dependency)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubDefaultHandler.Supports(System.Type)">
            <summary>Sets the stub of AbstractHandler.Supports(Type service)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubDefaultHandler.SupportsAssignable(System.Type)">
            <summary>Sets the stub of AbstractHandler.SupportsAssignable(Type service)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubDefaultHandler.SupportsAssignableType">
            <summary>Sets the stub of AbstractHandler.SupportsAssignable(Type service)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubDefaultHandler.SupportsType">
            <summary>Sets the stub of AbstractHandler.Supports(Type service)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubDefaultHandler.ToString">
            <summary>Sets the stub of AbstractHandler.ToString()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubDefaultHandler.ToString01">
            <summary>Sets the stub of AbstractHandler.ToString()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.StubDefaultHandler.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.StubDefaultHandler.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.StubDefaultHandler.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.Handlers.Fakes.StubDefaultHandlerFactory">
            <summary>Stub type of Castle.MicroKernel.Handlers.DefaultHandlerFactory</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubDefaultHandlerFactory.#ctor(Castle.MicroKernel.IKernelInternal)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubDefaultHandlerFactory.Create(Castle.Core.ComponentModel)">
            <summary>Sets the stub of DefaultHandlerFactory.Create(ComponentModel model)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubDefaultHandlerFactory.CreateComponentModel">
            <summary>Sets the stub of DefaultHandlerFactory.Create(ComponentModel model)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubDefaultHandlerFactory.InitializeStub">
            <summary>Initializes a new instance of type StubDefaultHandlerFactory</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.StubDefaultHandlerFactory.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.StubDefaultHandlerFactory.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.StubDefaultHandlerFactory.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.Handlers.Fakes.StubDependencyInspector">
            <summary>Stub type of Castle.MicroKernel.Handlers.DependencyInspector</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubDependencyInspector.#ctor(System.Text.StringBuilder)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubDependencyInspector.InitializeStub">
            <summary>Initializes a new instance of type StubDependencyInspector</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.StubDependencyInspector.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.StubDependencyInspector.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.StubDependencyInspector.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.Handlers.Fakes.StubExtendedHandler">
            <summary>Stub type of Castle.MicroKernel.Handlers.ExtendedHandler</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubExtendedHandler.#ctor(Castle.Core.ComponentModel,System.Collections.Generic.ICollection{Castle.MicroKernel.Handlers.IResolveExtension},System.Collections.Generic.ICollection{Castle.MicroKernel.Handlers.IReleaseExtension})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubExtendedHandler.CanResolve(Castle.MicroKernel.Context.CreationContext,Castle.MicroKernel.ISubDependencyResolver,Castle.Core.ComponentModel,Castle.Core.DependencyModel)">
            <summary>Sets the stub of AbstractHandler.CanResolve(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model, DependencyModel dependency)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubExtendedHandler.CanResolveCreationContextISubDependencyResolverComponentModelDependencyModel">
            <summary>Sets the stub of AbstractHandler.CanResolve(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model, DependencyModel dependency)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubExtendedHandler.Dispose">
            <summary>Sets the stub of DefaultHandler.Dispose()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubExtendedHandler.Dispose01">
            <summary>Sets the stub of DefaultHandler.Dispose()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubExtendedHandler.Init(Castle.MicroKernel.IKernelInternal)">
            <summary>Sets the stub of ExtendedHandler.Init(IKernelInternal kernel)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubExtendedHandler.InitDependencies">
            <summary>Sets the stub of DefaultHandler.InitDependencies()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubExtendedHandler.InitDependencies01">
            <summary>Sets the stub of DefaultHandler.InitDependencies()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubExtendedHandler.InitIKernelInternal">
            <summary>Sets the stub of ExtendedHandler.Init(IKernelInternal kernel)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubExtendedHandler.InitializeStub">
            <summary>Initializes a new instance of type StubExtendedHandler</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubExtendedHandler.Release(Castle.MicroKernel.Burden)">
            <summary>Sets the stub of ExtendedHandler.Release(Burden burden)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubExtendedHandler.ReleaseBurden">
            <summary>Sets the stub of ExtendedHandler.Release(Burden burden)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubExtendedHandler.ReleaseCore(Castle.MicroKernel.Burden)">
            <summary>Sets the stub of DefaultHandler.ReleaseCore(Burden burden)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubExtendedHandler.ReleaseCoreBurden">
            <summary>Sets the stub of DefaultHandler.ReleaseCore(Burden burden)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubExtendedHandler.Resolve(Castle.MicroKernel.Context.CreationContext,System.Boolean)">
            <summary>Sets the stub of ExtendedHandler.Resolve(CreationContext context, Boolean instanceRequired)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubExtendedHandler.Resolve(Castle.MicroKernel.Context.CreationContext,Castle.MicroKernel.ISubDependencyResolver,Castle.Core.ComponentModel,Castle.Core.DependencyModel)">
            <summary>Sets the stub of AbstractHandler.Resolve(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model, DependencyModel dependency)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubExtendedHandler.ResolveCreationContextBoolean">
            <summary>Sets the stub of ExtendedHandler.Resolve(CreationContext context, Boolean instanceRequired)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubExtendedHandler.ResolveCreationContextISubDependencyResolverComponentModelDependencyModel">
            <summary>Sets the stub of AbstractHandler.Resolve(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model, DependencyModel dependency)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubExtendedHandler.Supports(System.Type)">
            <summary>Sets the stub of AbstractHandler.Supports(Type service)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubExtendedHandler.SupportsAssignable(System.Type)">
            <summary>Sets the stub of AbstractHandler.SupportsAssignable(Type service)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubExtendedHandler.SupportsAssignableType">
            <summary>Sets the stub of AbstractHandler.SupportsAssignable(Type service)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubExtendedHandler.SupportsType">
            <summary>Sets the stub of AbstractHandler.Supports(Type service)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubExtendedHandler.ToString">
            <summary>Sets the stub of AbstractHandler.ToString()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubExtendedHandler.ToString01">
            <summary>Sets the stub of AbstractHandler.ToString()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.StubExtendedHandler.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.StubExtendedHandler.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.StubExtendedHandler.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.Handlers.Fakes.StubGenericHandlerTypeMismatchException">
            <summary>Stub type of Castle.MicroKernel.Handlers.GenericHandlerTypeMismatchException</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubGenericHandlerTypeMismatchException.#ctor(System.String,Castle.Core.ComponentName)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubGenericHandlerTypeMismatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubGenericHandlerTypeMismatchException.#ctor(System.String,Castle.Core.ComponentName,System.Exception)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubGenericHandlerTypeMismatchException.#ctor(System.Collections.Generic.IEnumerable{System.Type},Castle.Core.ComponentModel,Castle.MicroKernel.Handlers.DefaultGenericHandler)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubGenericHandlerTypeMismatchException.AttachBackingFieldToHelpLink">
            <summary>Attaches delegates to emulate StubGenericHandlerTypeMismatchException.HelpLink as a property with a backing field.</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubGenericHandlerTypeMismatchException.AttachBackingFieldToSource">
            <summary>Attaches delegates to emulate StubGenericHandlerTypeMismatchException.Source as a property with a backing field.</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubGenericHandlerTypeMismatchException.DataGet">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubGenericHandlerTypeMismatchException.GetBaseException">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubGenericHandlerTypeMismatchException.GetBaseException01">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubGenericHandlerTypeMismatchException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubGenericHandlerTypeMismatchException.GetObjectDataSerializationInfoStreamingContext">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubGenericHandlerTypeMismatchException.HelpLinkGet">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubGenericHandlerTypeMismatchException.HelpLinkSetString">
            <summary>Sets the stub of Exception.set_HelpLink(String value)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubGenericHandlerTypeMismatchException.InitializeStub">
            <summary>Initializes a new instance of type StubGenericHandlerTypeMismatchException</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubGenericHandlerTypeMismatchException.MessageGet">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubGenericHandlerTypeMismatchException.SourceGet">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubGenericHandlerTypeMismatchException.SourceSetString">
            <summary>Sets the stub of Exception.set_Source(String value)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubGenericHandlerTypeMismatchException.StackTraceGet">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubGenericHandlerTypeMismatchException.ToString">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubGenericHandlerTypeMismatchException.ToString01">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.StubGenericHandlerTypeMismatchException.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.StubGenericHandlerTypeMismatchException.Data">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.StubGenericHandlerTypeMismatchException.HelpLink">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.StubGenericHandlerTypeMismatchException.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.StubGenericHandlerTypeMismatchException.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.StubGenericHandlerTypeMismatchException.Message">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.StubGenericHandlerTypeMismatchException.Source">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.StubGenericHandlerTypeMismatchException.StackTrace">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="T:Castle.MicroKernel.Handlers.Fakes.StubHandlerException">
            <summary>Stub type of Castle.MicroKernel.Handlers.HandlerException</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubHandlerException.#ctor(System.String,Castle.Core.ComponentName)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubHandlerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubHandlerException.#ctor(System.String,Castle.Core.ComponentName,System.Exception)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubHandlerException.AttachBackingFieldToHelpLink">
            <summary>Attaches delegates to emulate StubHandlerException.HelpLink as a property with a backing field.</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubHandlerException.AttachBackingFieldToSource">
            <summary>Attaches delegates to emulate StubHandlerException.Source as a property with a backing field.</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubHandlerException.DataGet">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubHandlerException.GetBaseException">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubHandlerException.GetBaseException01">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubHandlerException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubHandlerException.GetObjectDataSerializationInfoStreamingContext">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubHandlerException.HelpLinkGet">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubHandlerException.HelpLinkSetString">
            <summary>Sets the stub of Exception.set_HelpLink(String value)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubHandlerException.InitializeStub">
            <summary>Initializes a new instance of type StubHandlerException</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubHandlerException.MessageGet">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubHandlerException.SourceGet">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubHandlerException.SourceSetString">
            <summary>Sets the stub of Exception.set_Source(String value)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubHandlerException.StackTraceGet">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubHandlerException.ToString">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubHandlerException.ToString01">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.StubHandlerException.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.StubHandlerException.Data">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.StubHandlerException.HelpLink">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.StubHandlerException.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.StubHandlerException.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.StubHandlerException.Message">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.StubHandlerException.Source">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.StubHandlerException.StackTrace">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="T:Castle.MicroKernel.Handlers.Fakes.StubIDependencyInspector">
            <summary>Stub type of Castle.MicroKernel.Handlers.IDependencyInspector</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubIDependencyInspector.#ctor">
            <summary>Initializes a new instance of type StubIDependencyInspector</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubIDependencyInspector.cw::Castle#MicroKernel#Handlers#IDependencyInspector#Inspect(Castle.MicroKernel.IHandler,Castle.Core.DependencyModel[],Castle.MicroKernel.IKernel)">
            <summary>Sets the stub of IDependencyInspector.Inspect(IHandler handler, DependencyModel[] missingDependencies, IKernel kernel)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubIDependencyInspector.InspectIHandlerDependencyModelArrayIKernel">
            <summary>Sets the stub of IDependencyInspector.Inspect(IHandler handler, DependencyModel[] missingDependencies, IKernel kernel)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Handlers.Fakes.StubIExposeDependencyInfo">
            <summary>Stub type of Castle.MicroKernel.Handlers.IExposeDependencyInfo</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubIExposeDependencyInfo.#ctor">
            <summary>Initializes a new instance of type StubIExposeDependencyInfo</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubIExposeDependencyInfo.cw::Castle#MicroKernel#Handlers#IExposeDependencyInfo#ObtainDependencyDetails(Castle.MicroKernel.Handlers.IDependencyInspector)">
            <summary>Sets the stub of IExposeDependencyInfo.ObtainDependencyDetails(IDependencyInspector inspector)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubIExposeDependencyInfo.ObtainDependencyDetailsIDependencyInspector">
            <summary>Sets the stub of IExposeDependencyInfo.ObtainDependencyDetails(IDependencyInspector inspector)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Handlers.Fakes.StubIGenericImplementationMatchingStrategy">
            <summary>Stub type of Castle.MicroKernel.Handlers.IGenericImplementationMatchingStrategy</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubIGenericImplementationMatchingStrategy.#ctor">
            <summary>Initializes a new instance of type StubIGenericImplementationMatchingStrategy</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubIGenericImplementationMatchingStrategy.cw::Castle#MicroKernel#Handlers#IGenericImplementationMatchingStrategy#GetGenericArguments(Castle.Core.ComponentModel,Castle.MicroKernel.Context.CreationContext)">
            <summary>Sets the stub of IGenericImplementationMatchingStrategy.GetGenericArguments(ComponentModel model, CreationContext context)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubIGenericImplementationMatchingStrategy.GetGenericArgumentsComponentModelCreationContext">
            <summary>Sets the stub of IGenericImplementationMatchingStrategy.GetGenericArguments(ComponentModel model, CreationContext context)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Handlers.Fakes.StubIGenericServiceStrategy">
            <summary>Stub type of Castle.MicroKernel.Handlers.IGenericServiceStrategy</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubIGenericServiceStrategy.#ctor">
            <summary>Initializes a new instance of type StubIGenericServiceStrategy</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubIGenericServiceStrategy.cw::Castle#MicroKernel#Handlers#IGenericServiceStrategy#Supports(System.Type,Castle.Core.ComponentModel)">
            <summary>Sets the stub of IGenericServiceStrategy.Supports(Type service, ComponentModel component)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubIGenericServiceStrategy.SupportsTypeComponentModel">
            <summary>Sets the stub of IGenericServiceStrategy.Supports(Type service, ComponentModel component)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Handlers.Fakes.StubIReleaseExtension">
            <summary>Stub type of Castle.MicroKernel.Handlers.IReleaseExtension</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubIReleaseExtension.#ctor">
            <summary>Initializes a new instance of type StubIReleaseExtension</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubIReleaseExtension.cw::Castle#MicroKernel#Handlers#IReleaseExtension#Init(Castle.MicroKernel.IKernel,Castle.MicroKernel.IHandler)">
            <summary>Sets the stub of IReleaseExtension.Init(IKernel kernel, IHandler handler)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubIReleaseExtension.cw::Castle#MicroKernel#Handlers#IReleaseExtension#Intercept(Castle.MicroKernel.Handlers.ReleaseInvocation)">
            <summary>Sets the stub of IReleaseExtension.Intercept(ReleaseInvocation invocation)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubIReleaseExtension.InitIKernelIHandler">
            <summary>Sets the stub of IReleaseExtension.Init(IKernel kernel, IHandler handler)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubIReleaseExtension.InterceptReleaseInvocation">
            <summary>Sets the stub of IReleaseExtension.Intercept(ReleaseInvocation invocation)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Handlers.Fakes.StubIResolveExtension">
            <summary>Stub type of Castle.MicroKernel.Handlers.IResolveExtension</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubIResolveExtension.#ctor">
            <summary>Initializes a new instance of type StubIResolveExtension</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubIResolveExtension.cw::Castle#MicroKernel#Handlers#IResolveExtension#Init(Castle.MicroKernel.IKernel,Castle.MicroKernel.IHandler)">
            <summary>Sets the stub of IResolveExtension.Init(IKernel kernel, IHandler handler)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubIResolveExtension.cw::Castle#MicroKernel#Handlers#IResolveExtension#Intercept(Castle.MicroKernel.Handlers.ResolveInvocation)">
            <summary>Sets the stub of IResolveExtension.Intercept(ResolveInvocation invocation)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubIResolveExtension.InitIKernelIHandler">
            <summary>Sets the stub of IResolveExtension.Init(IKernel kernel, IHandler handler)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubIResolveExtension.InterceptResolveInvocation">
            <summary>Sets the stub of IResolveExtension.Intercept(ResolveInvocation invocation)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Handlers.Fakes.StubParentHandlerWrapper">
            <summary>Stub type of Castle.MicroKernel.Handlers.ParentHandlerWrapper</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubParentHandlerWrapper.#ctor(Castle.MicroKernel.IHandler,Castle.MicroKernel.ISubDependencyResolver,Castle.MicroKernel.IReleasePolicy)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubParentHandlerWrapper.CanResolve(Castle.MicroKernel.Context.CreationContext,Castle.MicroKernel.ISubDependencyResolver,Castle.Core.ComponentModel,Castle.Core.DependencyModel)">
            <summary>Sets the stub of ParentHandlerWrapper.CanResolve(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model, DependencyModel dependency)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubParentHandlerWrapper.CanResolveCreationContextISubDependencyResolverComponentModelDependencyModel">
            <summary>Sets the stub of ParentHandlerWrapper.CanResolve(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model, DependencyModel dependency)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubParentHandlerWrapper.ComponentModelGet">
            <summary>Sets the stub of ParentHandlerWrapper.get_ComponentModel()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubParentHandlerWrapper.CurrentStateGet">
            <summary>Sets the stub of ParentHandlerWrapper.get_CurrentState()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubParentHandlerWrapper.Dispose(System.Boolean)">
            <summary>Sets the stub of ParentHandlerWrapper.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubParentHandlerWrapper.DisposeBoolean">
            <summary>Sets the stub of ParentHandlerWrapper.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubParentHandlerWrapper.Init(Castle.MicroKernel.IKernelInternal)">
            <summary>Sets the stub of ParentHandlerWrapper.Init(IKernelInternal kernel)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubParentHandlerWrapper.InitIKernelInternal">
            <summary>Sets the stub of ParentHandlerWrapper.Init(IKernelInternal kernel)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubParentHandlerWrapper.InitializeStub">
            <summary>Initializes a new instance of type StubParentHandlerWrapper</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubParentHandlerWrapper.Release(Castle.MicroKernel.Burden)">
            <summary>Sets the stub of ParentHandlerWrapper.Release(Burden burden)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubParentHandlerWrapper.ReleaseBurden">
            <summary>Sets the stub of ParentHandlerWrapper.Release(Burden burden)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubParentHandlerWrapper.Resolve(Castle.MicroKernel.Context.CreationContext)">
            <summary>Sets the stub of ParentHandlerWrapper.Resolve(CreationContext context)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubParentHandlerWrapper.Resolve(Castle.MicroKernel.Context.CreationContext,Castle.MicroKernel.ISubDependencyResolver,Castle.Core.ComponentModel,Castle.Core.DependencyModel)">
            <summary>Sets the stub of ParentHandlerWrapper.Resolve(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model, DependencyModel dependency)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubParentHandlerWrapper.ResolveCreationContext">
            <summary>Sets the stub of ParentHandlerWrapper.Resolve(CreationContext context)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubParentHandlerWrapper.ResolveCreationContextISubDependencyResolverComponentModelDependencyModel">
            <summary>Sets the stub of ParentHandlerWrapper.Resolve(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model, DependencyModel dependency)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.StubParentHandlerWrapper.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.StubParentHandlerWrapper.ComponentModel">
            <summary>Sets the stub of ParentHandlerWrapper.get_ComponentModel()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.StubParentHandlerWrapper.CurrentState">
            <summary>Sets the stub of ParentHandlerWrapper.get_CurrentState()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.StubParentHandlerWrapper.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.StubParentHandlerWrapper.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.Handlers.Fakes.StubReleaseInvocation">
            <summary>Stub type of Castle.MicroKernel.Handlers.ReleaseInvocation</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubReleaseInvocation.#ctor(Castle.MicroKernel.Burden)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubReleaseInvocation.InitializeStub">
            <summary>Initializes a new instance of type StubReleaseInvocation</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.StubReleaseInvocation.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.StubReleaseInvocation.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.StubReleaseInvocation.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.Handlers.Fakes.StubResolveInvocation">
            <summary>Stub type of Castle.MicroKernel.Handlers.ResolveInvocation</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubResolveInvocation.#ctor(Castle.MicroKernel.Context.CreationContext,System.Boolean)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubResolveInvocation.InitializeStub">
            <summary>Initializes a new instance of type StubResolveInvocation</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.StubResolveInvocation.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.StubResolveInvocation.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.StubResolveInvocation.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.Internal.Fakes.ShimLazyEx`1">
            <summary>Shim type of Castle.MicroKernel.Internal.LazyEx`1</summary>
        </member>
        <member name="M:Castle.MicroKernel.Internal.Fakes.ShimLazyEx`1.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Internal.Fakes.ShimLazyEx`1.#ctor(Castle.MicroKernel.Internal.LazyEx{`0})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Internal.Fakes.ShimLazyEx`1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Internal.Fakes.ShimLazyEx`1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Internal.Fakes.ShimLazyEx`1.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Internal.Fakes.ShimLazyEx`1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Internal.Fakes.ShimLazyEx`1.ConstructorIKernel">
            <summary>Sets the shim of LazyEx`1.LazyEx`1(IKernel kernel)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Internal.Fakes.ShimLazyEx`1.ConstructorIKernelIDictionary">
            <summary>Sets the shim of LazyEx`1.LazyEx`1(IKernel kernel, IDictionary arguments)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Internal.Fakes.ShimLazyEx`1.ConstructorIKernelString">
            <summary>Sets the shim of LazyEx`1.LazyEx`1(IKernel kernel, String overrideComponentName)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Internal.Fakes.ShimLazyEx`1.ConstructorIKernelStringIDictionary">
            <summary>Sets the shim of LazyEx`1.LazyEx`1(IKernel kernel, String overrideComponentName, IDictionary arguments)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Internal.Fakes.ShimLazyEx`1.Dispose">
            <summary>Sets the shim of LazyEx`1.Dispose()</summary>
        </member>
        <member name="T:Castle.MicroKernel.Internal.Fakes.ShimLazyEx`1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.Internal.Fakes.ShimLazyEx`1.AllInstances.Dispose">
            <summary>Sets the shim of LazyEx`1.Dispose()</summary>
        </member>
        <member name="T:Castle.MicroKernel.Internal.Fakes.ShimLazyServiceStrategy">
            <summary>Shim type of Castle.MicroKernel.Internal.LazyServiceStrategy</summary>
        </member>
        <member name="M:Castle.MicroKernel.Internal.Fakes.ShimLazyServiceStrategy.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Internal.Fakes.ShimLazyServiceStrategy.#ctor(Castle.MicroKernel.Internal.LazyServiceStrategy)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Internal.Fakes.ShimLazyServiceStrategy.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Internal.Fakes.ShimLazyServiceStrategy.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Internal.Fakes.ShimLazyServiceStrategy.Bind(Castle.MicroKernel.Handlers.IGenericServiceStrategy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Internal.Fakes.ShimLazyServiceStrategy.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Internal.Fakes.ShimLazyServiceStrategy.Constructor">
            <summary>Sets the shim of LazyServiceStrategy.LazyServiceStrategy()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Internal.Fakes.ShimLazyServiceStrategy.StaticConstructor">
            <summary>Sets the shim of LazyServiceStrategy.LazyServiceStrategy()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Internal.Fakes.ShimLazyServiceStrategy.SupportsTypeComponentModel">
            <summary>Sets the shim of LazyServiceStrategy.Supports(Type service, ComponentModel component)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Internal.Fakes.ShimLazyServiceStrategy.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.Internal.Fakes.ShimLazyServiceStrategy.AllInstances.SupportsTypeComponentModel">
            <summary>Sets the shim of LazyServiceStrategy.Supports(Type service, ComponentModel component)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Internal.Fakes.StubLazyEx`1">
            <summary>Stub type of Castle.MicroKernel.Internal.LazyEx`1</summary>
        </member>
        <member name="M:Castle.MicroKernel.Internal.Fakes.StubLazyEx`1.#ctor(Castle.MicroKernel.IKernel)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Internal.Fakes.StubLazyEx`1.#ctor(Castle.MicroKernel.IKernel,System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Internal.Fakes.StubLazyEx`1.#ctor(Castle.MicroKernel.IKernel,System.Collections.IDictionary)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Internal.Fakes.StubLazyEx`1.#ctor(Castle.MicroKernel.IKernel,System.String,System.Collections.IDictionary)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Internal.Fakes.StubLazyEx`1.InitializeStub">
            <summary>Initializes a new instance of type StubLazyEx</summary>
        </member>
        <member name="M:Castle.MicroKernel.Internal.Fakes.StubLazyEx`1.ToString">
            <summary>Sets the stub of Lazy`1.ToString()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Internal.Fakes.StubLazyEx`1.ToString01">
            <summary>Sets the stub of Lazy`1.ToString()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Internal.Fakes.StubLazyEx`1.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.Internal.Fakes.StubLazyEx`1.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Internal.Fakes.StubLazyEx`1.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimDisposalConcern">
            <summary>Shim type of Castle.MicroKernel.LifecycleConcerns.DisposalConcern</summary>
        </member>
        <member name="M:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimDisposalConcern.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimDisposalConcern.#ctor(Castle.MicroKernel.LifecycleConcerns.DisposalConcern)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimDisposalConcern.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimDisposalConcern.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimDisposalConcern.Bind(Castle.Core.IDecommissionConcern)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimDisposalConcern.ApplyComponentModelObject">
            <summary>Sets the shim of DisposalConcern.Apply(ComponentModel model, Object component)</summary>
        </member>
        <member name="P:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimDisposalConcern.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimDisposalConcern.Constructor">
            <summary>Sets the shim of DisposalConcern.DisposalConcern()</summary>
        </member>
        <member name="P:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimDisposalConcern.InstanceGet">
            <summary>Sets the shim of DisposalConcern.get_Instance()</summary>
        </member>
        <member name="P:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimDisposalConcern.StaticConstructor">
            <summary>Sets the shim of DisposalConcern.DisposalConcern()</summary>
        </member>
        <member name="T:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimDisposalConcern.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimDisposalConcern.AllInstances.ApplyComponentModelObject">
            <summary>Sets the shim of DisposalConcern.Apply(ComponentModel model, Object component)</summary>
        </member>
        <member name="T:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimInitializationConcern">
            <summary>Shim type of Castle.MicroKernel.LifecycleConcerns.InitializationConcern</summary>
        </member>
        <member name="M:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimInitializationConcern.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimInitializationConcern.#ctor(Castle.MicroKernel.LifecycleConcerns.InitializationConcern)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimInitializationConcern.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimInitializationConcern.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimInitializationConcern.Bind(Castle.Core.ICommissionConcern)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimInitializationConcern.ApplyComponentModelObject">
            <summary>Sets the shim of InitializationConcern.Apply(ComponentModel model, Object component)</summary>
        </member>
        <member name="P:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimInitializationConcern.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimInitializationConcern.Constructor">
            <summary>Sets the shim of InitializationConcern.InitializationConcern()</summary>
        </member>
        <member name="P:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimInitializationConcern.InstanceGet">
            <summary>Sets the shim of InitializationConcern.get_Instance()</summary>
        </member>
        <member name="P:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimInitializationConcern.StaticConstructor">
            <summary>Sets the shim of InitializationConcern.InitializationConcern()</summary>
        </member>
        <member name="T:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimInitializationConcern.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimInitializationConcern.AllInstances.ApplyComponentModelObject">
            <summary>Sets the shim of InitializationConcern.Apply(ComponentModel model, Object component)</summary>
        </member>
        <member name="T:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimLateBoundCommissionConcerns">
            <summary>Shim type of Castle.MicroKernel.LifecycleConcerns.LateBoundCommissionConcerns</summary>
        </member>
        <member name="M:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimLateBoundCommissionConcerns.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimLateBoundCommissionConcerns.#ctor(Castle.MicroKernel.LifecycleConcerns.LateBoundCommissionConcerns)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimLateBoundCommissionConcerns.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimLateBoundCommissionConcerns.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimLateBoundCommissionConcerns.Bind(Castle.Core.ICommissionConcern)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimLateBoundCommissionConcerns.ApplyComponentModelObject">
            <summary>Sets the shim of LateBoundCommissionConcerns.Apply(ComponentModel model, Object component)</summary>
        </member>
        <member name="P:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimLateBoundCommissionConcerns.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimLateBoundCommissionConcerns.Constructor">
            <summary>Sets the shim of LateBoundCommissionConcerns.LateBoundCommissionConcerns()</summary>
        </member>
        <member name="T:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimLateBoundCommissionConcerns.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimLateBoundCommissionConcerns.AllInstances.ApplyComponentModelObject">
            <summary>Sets the shim of LateBoundCommissionConcerns.Apply(ComponentModel model, Object component)</summary>
        </member>
        <member name="T:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimLateBoundConcerns`1">
            <summary>Shim type of Castle.MicroKernel.LifecycleConcerns.LateBoundConcerns`1</summary>
        </member>
        <member name="M:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimLateBoundConcerns`1.#ctor(Castle.MicroKernel.LifecycleConcerns.LateBoundConcerns{`0})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimLateBoundConcerns`1.AddConcernOf1T0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{`0})">
            <summary>Sets the shim of LateBoundConcerns`1.AddConcern(!0 lifecycleConcern)</summary>
        </member>
        <member name="M:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimLateBoundConcerns`1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimLateBoundConcerns`1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimLateBoundConcerns`1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimLateBoundConcerns`1.BuildConcernCacheType">
            <summary>Sets the shim of LateBoundConcerns`1.BuildConcernCache(Type type)</summary>
        </member>
        <member name="P:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimLateBoundConcerns`1.Constructor">
            <summary>Sets the shim of LateBoundConcerns`1.LateBoundConcerns`1()</summary>
        </member>
        <member name="P:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimLateBoundConcerns`1.GetComponentConcernsType">
            <summary>Sets the shim of LateBoundConcerns`1.GetComponentConcerns(Type type)</summary>
        </member>
        <member name="P:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimLateBoundConcerns`1.HasConcernsGet">
            <summary>Sets the shim of LateBoundConcerns`1.get_HasConcerns()</summary>
        </member>
        <member name="T:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimLateBoundConcerns`1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimLateBoundConcerns`1.AllInstances.AddConcernOf1T0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{Castle.MicroKernel.LifecycleConcerns.LateBoundConcerns{`0},`0})">
            <summary>Sets the shim of LateBoundConcerns`1.AddConcern(!0 lifecycleConcern)</summary>
        </member>
        <member name="P:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimLateBoundConcerns`1.AllInstances.BuildConcernCacheType">
            <summary>Sets the shim of LateBoundConcerns`1.BuildConcernCache(Type type)</summary>
        </member>
        <member name="P:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimLateBoundConcerns`1.AllInstances.GetComponentConcernsType">
            <summary>Sets the shim of LateBoundConcerns`1.GetComponentConcerns(Type type)</summary>
        </member>
        <member name="P:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimLateBoundConcerns`1.AllInstances.HasConcernsGet">
            <summary>Sets the shim of LateBoundConcerns`1.get_HasConcerns()</summary>
        </member>
        <member name="T:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimLateBoundDecommissionConcerns">
            <summary>Shim type of Castle.MicroKernel.LifecycleConcerns.LateBoundDecommissionConcerns</summary>
        </member>
        <member name="M:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimLateBoundDecommissionConcerns.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimLateBoundDecommissionConcerns.#ctor(Castle.MicroKernel.LifecycleConcerns.LateBoundDecommissionConcerns)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimLateBoundDecommissionConcerns.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimLateBoundDecommissionConcerns.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimLateBoundDecommissionConcerns.Bind(Castle.Core.IDecommissionConcern)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimLateBoundDecommissionConcerns.ApplyComponentModelObject">
            <summary>Sets the shim of LateBoundDecommissionConcerns.Apply(ComponentModel model, Object component)</summary>
        </member>
        <member name="P:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimLateBoundDecommissionConcerns.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimLateBoundDecommissionConcerns.Constructor">
            <summary>Sets the shim of LateBoundDecommissionConcerns.LateBoundDecommissionConcerns()</summary>
        </member>
        <member name="T:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimLateBoundDecommissionConcerns.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimLateBoundDecommissionConcerns.AllInstances.ApplyComponentModelObject">
            <summary>Sets the shim of LateBoundDecommissionConcerns.Apply(ComponentModel model, Object component)</summary>
        </member>
        <member name="T:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimOnCreatedConcern`1">
            <summary>Shim type of Castle.MicroKernel.LifecycleConcerns.OnCreatedConcern`1</summary>
        </member>
        <member name="M:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimOnCreatedConcern`1.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimOnCreatedConcern`1.#ctor(Castle.MicroKernel.LifecycleConcerns.OnCreatedConcern{`0})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimOnCreatedConcern`1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimOnCreatedConcern`1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimOnCreatedConcern`1.Bind(Castle.Core.ICommissionConcern)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimOnCreatedConcern`1.ApplyComponentModelObject">
            <summary>Sets the shim of OnCreatedConcern`1.Apply(ComponentModel model, Object component)</summary>
        </member>
        <member name="P:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimOnCreatedConcern`1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimOnCreatedConcern`1.ConstructorLifecycleActionDelegateOfT0IKernel">
            <summary>Sets the shim of OnCreatedConcern`1.OnCreatedConcern`1(LifecycleActionDelegate`1&lt;!0&gt; action, IKernel kernel)</summary>
        </member>
        <member name="T:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimOnCreatedConcern`1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimOnCreatedConcern`1.AllInstances.ApplyComponentModelObject">
            <summary>Sets the shim of OnCreatedConcern`1.Apply(ComponentModel model, Object component)</summary>
        </member>
        <member name="T:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimOnDestroyConcern`1">
            <summary>Shim type of Castle.MicroKernel.LifecycleConcerns.OnDestroyConcern`1</summary>
        </member>
        <member name="M:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimOnDestroyConcern`1.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimOnDestroyConcern`1.#ctor(Castle.MicroKernel.LifecycleConcerns.OnDestroyConcern{`0})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimOnDestroyConcern`1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimOnDestroyConcern`1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimOnDestroyConcern`1.Bind(Castle.Core.IDecommissionConcern)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimOnDestroyConcern`1.ApplyComponentModelObject">
            <summary>Sets the shim of OnDestroyConcern`1.Apply(ComponentModel model, Object component)</summary>
        </member>
        <member name="P:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimOnDestroyConcern`1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimOnDestroyConcern`1.ConstructorLifecycleActionDelegateOfT0IKernel">
            <summary>Sets the shim of OnDestroyConcern`1.OnDestroyConcern`1(LifecycleActionDelegate`1&lt;!0&gt; action, IKernel kernel)</summary>
        </member>
        <member name="T:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimOnDestroyConcern`1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimOnDestroyConcern`1.AllInstances.ApplyComponentModelObject">
            <summary>Sets the shim of OnDestroyConcern`1.Apply(ComponentModel model, Object component)</summary>
        </member>
        <member name="T:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimSupportInitializeConcern">
            <summary>Shim type of Castle.MicroKernel.LifecycleConcerns.SupportInitializeConcern</summary>
        </member>
        <member name="M:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimSupportInitializeConcern.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimSupportInitializeConcern.#ctor(Castle.MicroKernel.LifecycleConcerns.SupportInitializeConcern)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimSupportInitializeConcern.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimSupportInitializeConcern.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimSupportInitializeConcern.Bind(Castle.Core.ICommissionConcern)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimSupportInitializeConcern.ApplyComponentModelObject">
            <summary>Sets the shim of SupportInitializeConcern.Apply(ComponentModel model, Object component)</summary>
        </member>
        <member name="P:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimSupportInitializeConcern.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimSupportInitializeConcern.Constructor">
            <summary>Sets the shim of SupportInitializeConcern.SupportInitializeConcern()</summary>
        </member>
        <member name="P:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimSupportInitializeConcern.InstanceGet">
            <summary>Sets the shim of SupportInitializeConcern.get_Instance()</summary>
        </member>
        <member name="P:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimSupportInitializeConcern.StaticConstructor">
            <summary>Sets the shim of SupportInitializeConcern.SupportInitializeConcern()</summary>
        </member>
        <member name="T:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimSupportInitializeConcern.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimSupportInitializeConcern.AllInstances.ApplyComponentModelObject">
            <summary>Sets the shim of SupportInitializeConcern.Apply(ComponentModel model, Object component)</summary>
        </member>
        <member name="T:Castle.MicroKernel.LifecycleConcerns.Fakes.StubDisposalConcern">
            <summary>Stub type of Castle.MicroKernel.LifecycleConcerns.DisposalConcern</summary>
        </member>
        <member name="M:Castle.MicroKernel.LifecycleConcerns.Fakes.StubDisposalConcern.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.LifecycleConcerns.Fakes.StubDisposalConcern.InitializeStub">
            <summary>Initializes a new instance of type StubDisposalConcern</summary>
        </member>
        <member name="P:Castle.MicroKernel.LifecycleConcerns.Fakes.StubDisposalConcern.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.LifecycleConcerns.Fakes.StubDisposalConcern.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.LifecycleConcerns.Fakes.StubDisposalConcern.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.LifecycleConcerns.Fakes.StubInitializationConcern">
            <summary>Stub type of Castle.MicroKernel.LifecycleConcerns.InitializationConcern</summary>
        </member>
        <member name="M:Castle.MicroKernel.LifecycleConcerns.Fakes.StubInitializationConcern.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.LifecycleConcerns.Fakes.StubInitializationConcern.InitializeStub">
            <summary>Initializes a new instance of type StubInitializationConcern</summary>
        </member>
        <member name="P:Castle.MicroKernel.LifecycleConcerns.Fakes.StubInitializationConcern.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.LifecycleConcerns.Fakes.StubInitializationConcern.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.LifecycleConcerns.Fakes.StubInitializationConcern.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.LifecycleConcerns.Fakes.StubLateBoundCommissionConcerns">
            <summary>Stub type of Castle.MicroKernel.LifecycleConcerns.LateBoundCommissionConcerns</summary>
        </member>
        <member name="M:Castle.MicroKernel.LifecycleConcerns.Fakes.StubLateBoundCommissionConcerns.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.LifecycleConcerns.Fakes.StubLateBoundCommissionConcerns.Apply(Castle.Core.ComponentModel,System.Object)">
            <summary>Sets the stub of LateBoundCommissionConcerns.Apply(ComponentModel model, Object component)</summary>
        </member>
        <member name="F:Castle.MicroKernel.LifecycleConcerns.Fakes.StubLateBoundCommissionConcerns.ApplyComponentModelObject">
            <summary>Sets the stub of LateBoundCommissionConcerns.Apply(ComponentModel model, Object component)</summary>
        </member>
        <member name="M:Castle.MicroKernel.LifecycleConcerns.Fakes.StubLateBoundCommissionConcerns.InitializeStub">
            <summary>Initializes a new instance of type StubLateBoundCommissionConcerns</summary>
        </member>
        <member name="P:Castle.MicroKernel.LifecycleConcerns.Fakes.StubLateBoundCommissionConcerns.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.LifecycleConcerns.Fakes.StubLateBoundCommissionConcerns.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.LifecycleConcerns.Fakes.StubLateBoundCommissionConcerns.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.LifecycleConcerns.Fakes.StubLateBoundConcerns`1">
            <summary>Stub type of Castle.MicroKernel.LifecycleConcerns.LateBoundConcerns`1</summary>
        </member>
        <member name="M:Castle.MicroKernel.LifecycleConcerns.Fakes.StubLateBoundConcerns`1.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.LifecycleConcerns.Fakes.StubLateBoundConcerns`1.Apply(Castle.Core.ComponentModel,System.Object)">
            <summary>Sets the stub of LateBoundConcerns`1.Apply(ComponentModel model, Object component)</summary>
        </member>
        <member name="F:Castle.MicroKernel.LifecycleConcerns.Fakes.StubLateBoundConcerns`1.ApplyComponentModelObject">
            <summary>Sets the stub of LateBoundConcerns`1.Apply(ComponentModel model, Object component)</summary>
        </member>
        <member name="M:Castle.MicroKernel.LifecycleConcerns.Fakes.StubLateBoundConcerns`1.InitializeStub">
            <summary>Initializes a new instance of type StubLateBoundConcerns</summary>
        </member>
        <member name="P:Castle.MicroKernel.LifecycleConcerns.Fakes.StubLateBoundConcerns`1.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.LifecycleConcerns.Fakes.StubLateBoundConcerns`1.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.LifecycleConcerns.Fakes.StubLateBoundConcerns`1.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.LifecycleConcerns.Fakes.StubLateBoundDecommissionConcerns">
            <summary>Stub type of Castle.MicroKernel.LifecycleConcerns.LateBoundDecommissionConcerns</summary>
        </member>
        <member name="M:Castle.MicroKernel.LifecycleConcerns.Fakes.StubLateBoundDecommissionConcerns.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.LifecycleConcerns.Fakes.StubLateBoundDecommissionConcerns.Apply(Castle.Core.ComponentModel,System.Object)">
            <summary>Sets the stub of LateBoundDecommissionConcerns.Apply(ComponentModel model, Object component)</summary>
        </member>
        <member name="F:Castle.MicroKernel.LifecycleConcerns.Fakes.StubLateBoundDecommissionConcerns.ApplyComponentModelObject">
            <summary>Sets the stub of LateBoundDecommissionConcerns.Apply(ComponentModel model, Object component)</summary>
        </member>
        <member name="M:Castle.MicroKernel.LifecycleConcerns.Fakes.StubLateBoundDecommissionConcerns.InitializeStub">
            <summary>Initializes a new instance of type StubLateBoundDecommissionConcerns</summary>
        </member>
        <member name="P:Castle.MicroKernel.LifecycleConcerns.Fakes.StubLateBoundDecommissionConcerns.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.LifecycleConcerns.Fakes.StubLateBoundDecommissionConcerns.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.LifecycleConcerns.Fakes.StubLateBoundDecommissionConcerns.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.LifecycleConcerns.Fakes.StubOnCreatedConcern`1">
            <summary>Stub type of Castle.MicroKernel.LifecycleConcerns.OnCreatedConcern`1</summary>
        </member>
        <member name="M:Castle.MicroKernel.LifecycleConcerns.Fakes.StubOnCreatedConcern`1.#ctor(Castle.MicroKernel.LifecycleConcerns.LifecycleActionDelegate{`0},Castle.MicroKernel.IKernel)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.LifecycleConcerns.Fakes.StubOnCreatedConcern`1.InitializeStub">
            <summary>Initializes a new instance of type StubOnCreatedConcern</summary>
        </member>
        <member name="P:Castle.MicroKernel.LifecycleConcerns.Fakes.StubOnCreatedConcern`1.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.LifecycleConcerns.Fakes.StubOnCreatedConcern`1.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.LifecycleConcerns.Fakes.StubOnCreatedConcern`1.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.LifecycleConcerns.Fakes.StubOnDestroyConcern`1">
            <summary>Stub type of Castle.MicroKernel.LifecycleConcerns.OnDestroyConcern`1</summary>
        </member>
        <member name="M:Castle.MicroKernel.LifecycleConcerns.Fakes.StubOnDestroyConcern`1.#ctor(Castle.MicroKernel.LifecycleConcerns.LifecycleActionDelegate{`0},Castle.MicroKernel.IKernel)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.LifecycleConcerns.Fakes.StubOnDestroyConcern`1.InitializeStub">
            <summary>Initializes a new instance of type StubOnDestroyConcern</summary>
        </member>
        <member name="P:Castle.MicroKernel.LifecycleConcerns.Fakes.StubOnDestroyConcern`1.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.LifecycleConcerns.Fakes.StubOnDestroyConcern`1.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.LifecycleConcerns.Fakes.StubOnDestroyConcern`1.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.LifecycleConcerns.Fakes.StubSupportInitializeConcern">
            <summary>Stub type of Castle.MicroKernel.LifecycleConcerns.SupportInitializeConcern</summary>
        </member>
        <member name="M:Castle.MicroKernel.LifecycleConcerns.Fakes.StubSupportInitializeConcern.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.LifecycleConcerns.Fakes.StubSupportInitializeConcern.InitializeStub">
            <summary>Initializes a new instance of type StubSupportInitializeConcern</summary>
        </member>
        <member name="P:Castle.MicroKernel.LifecycleConcerns.Fakes.StubSupportInitializeConcern.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.LifecycleConcerns.Fakes.StubSupportInitializeConcern.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.LifecycleConcerns.Fakes.StubSupportInitializeConcern.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.Lifestyle.Fakes.ShimAbstractLifestyleManager">
            <summary>Shim type of Castle.MicroKernel.Lifestyle.AbstractLifestyleManager</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimAbstractLifestyleManager.#ctor(Castle.MicroKernel.Lifestyle.AbstractLifestyleManager)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimAbstractLifestyleManager.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimAbstractLifestyleManager.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimAbstractLifestyleManager.Bind(Castle.MicroKernel.ILifestyleManager)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimAbstractLifestyleManager.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimAbstractLifestyleManager.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimAbstractLifestyleManager.ComponentActivatorGet">
            <summary>Sets the shim of AbstractLifestyleManager.get_ComponentActivator()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimAbstractLifestyleManager.Constructor">
            <summary>Sets the shim of AbstractLifestyleManager.AbstractLifestyleManager()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimAbstractLifestyleManager.CreateInstanceCreationContextBoolean">
            <summary>Sets the shim of AbstractLifestyleManager.CreateInstance(CreationContext context, Boolean trackedExternally)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimAbstractLifestyleManager.InitIComponentActivatorIKernelComponentModel">
            <summary>Sets the shim of AbstractLifestyleManager.Init(IComponentActivator componentActivator, IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimAbstractLifestyleManager.KernelGet">
            <summary>Sets the shim of AbstractLifestyleManager.get_Kernel()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimAbstractLifestyleManager.ModelGet">
            <summary>Sets the shim of AbstractLifestyleManager.get_Model()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimAbstractLifestyleManager.ReleaseObject">
            <summary>Sets the shim of AbstractLifestyleManager.Release(Object instance)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimAbstractLifestyleManager.ResolveCreationContextIReleasePolicy">
            <summary>Sets the shim of AbstractLifestyleManager.Resolve(CreationContext context, IReleasePolicy releasePolicy)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimAbstractLifestyleManager.TrackBurdenIReleasePolicy">
            <summary>Sets the shim of AbstractLifestyleManager.Track(Burden burden, IReleasePolicy releasePolicy)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Lifestyle.Fakes.ShimAbstractLifestyleManager.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimAbstractLifestyleManager.AllInstances.ComponentActivatorGet">
            <summary>Sets the shim of AbstractLifestyleManager.get_ComponentActivator()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimAbstractLifestyleManager.AllInstances.CreateInstanceCreationContextBoolean">
            <summary>Sets the shim of AbstractLifestyleManager.CreateInstance(CreationContext context, Boolean trackedExternally)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimAbstractLifestyleManager.AllInstances.InitIComponentActivatorIKernelComponentModel">
            <summary>Sets the shim of AbstractLifestyleManager.Init(IComponentActivator componentActivator, IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimAbstractLifestyleManager.AllInstances.KernelGet">
            <summary>Sets the shim of AbstractLifestyleManager.get_Kernel()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimAbstractLifestyleManager.AllInstances.ModelGet">
            <summary>Sets the shim of AbstractLifestyleManager.get_Model()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimAbstractLifestyleManager.AllInstances.ReleaseObject">
            <summary>Sets the shim of AbstractLifestyleManager.Release(Object instance)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimAbstractLifestyleManager.AllInstances.ResolveCreationContextIReleasePolicy">
            <summary>Sets the shim of AbstractLifestyleManager.Resolve(CreationContext context, IReleasePolicy releasePolicy)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimAbstractLifestyleManager.AllInstances.TrackBurdenIReleasePolicy">
            <summary>Sets the shim of AbstractLifestyleManager.Track(Burden burden, IReleasePolicy releasePolicy)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Lifestyle.Fakes.ShimLifestyleExtensions">
            <summary>Shim type of Castle.MicroKernel.Lifestyle.LifestyleExtensions</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimLifestyleExtensions.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimLifestyleExtensions.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimLifestyleExtensions.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimLifestyleExtensions.BeginScopeIKernel">
            <summary>Sets the shim of LifestyleExtensions.BeginScope(IKernel kernel)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimLifestyleExtensions.BeginScopeIWindsorContainer">
            <summary>Sets the shim of LifestyleExtensions.BeginScope(IWindsorContainer container)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimLifestyleExtensions.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimLifestyleExtensions.RequireScopeIKernel">
            <summary>Sets the shim of LifestyleExtensions.RequireScope(IKernel kernel)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimLifestyleExtensions.RequireScopeIWindsorContainer">
            <summary>Sets the shim of LifestyleExtensions.RequireScope(IWindsorContainer container)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Lifestyle.Fakes.ShimLifetimeScopeAccessor">
            <summary>Shim type of Castle.MicroKernel.Lifestyle.LifetimeScopeAccessor</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimLifetimeScopeAccessor.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimLifetimeScopeAccessor.#ctor(Castle.MicroKernel.Lifestyle.LifetimeScopeAccessor)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimLifetimeScopeAccessor.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimLifetimeScopeAccessor.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimLifetimeScopeAccessor.Bind(Castle.MicroKernel.Lifestyle.Scoped.IScopeAccessor)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimLifetimeScopeAccessor.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimLifetimeScopeAccessor.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimLifetimeScopeAccessor.Constructor">
            <summary>Sets the shim of LifetimeScopeAccessor.LifetimeScopeAccessor()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimLifetimeScopeAccessor.Dispose">
            <summary>Sets the shim of LifetimeScopeAccessor.Dispose()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimLifetimeScopeAccessor.GetScopeCreationContext">
            <summary>Sets the shim of LifetimeScopeAccessor.GetScope(CreationContext context)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Lifestyle.Fakes.ShimLifetimeScopeAccessor.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimLifetimeScopeAccessor.AllInstances.Dispose">
            <summary>Sets the shim of LifetimeScopeAccessor.Dispose()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimLifetimeScopeAccessor.AllInstances.GetScopeCreationContext">
            <summary>Sets the shim of LifetimeScopeAccessor.GetScope(CreationContext context)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Lifestyle.Fakes.ShimPerWebRequestLifestyleModule">
            <summary>Shim type of Castle.MicroKernel.Lifestyle.PerWebRequestLifestyleModule</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimPerWebRequestLifestyleModule.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimPerWebRequestLifestyleModule.#ctor(Castle.MicroKernel.Lifestyle.PerWebRequestLifestyleModule)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimPerWebRequestLifestyleModule.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimPerWebRequestLifestyleModule.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimPerWebRequestLifestyleModule.Bind(System.Web.IHttpModule)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimPerWebRequestLifestyleModule.Application_EndRequestObjectEventArgs">
            <summary>Sets the shim of PerWebRequestLifestyleModule.Application_EndRequest(Object sender, EventArgs e)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimPerWebRequestLifestyleModule.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimPerWebRequestLifestyleModule.Constructor">
            <summary>Sets the shim of PerWebRequestLifestyleModule.PerWebRequestLifestyleModule()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimPerWebRequestLifestyleModule.Dispose">
            <summary>Sets the shim of PerWebRequestLifestyleModule.Dispose()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimPerWebRequestLifestyleModule.EnsureInitialized">
            <summary>Sets the shim of PerWebRequestLifestyleModule.EnsureInitialized()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimPerWebRequestLifestyleModule.GetScope">
            <summary>Sets the shim of PerWebRequestLifestyleModule.GetScope()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimPerWebRequestLifestyleModule.GetScopeHttpContextBoolean">
            <summary>Sets the shim of PerWebRequestLifestyleModule.GetScope(HttpContext context, Boolean createIfNotPresent)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimPerWebRequestLifestyleModule.InitHttpApplication">
            <summary>Sets the shim of PerWebRequestLifestyleModule.Init(HttpApplication context)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimPerWebRequestLifestyleModule.YieldScope">
            <summary>Sets the shim of PerWebRequestLifestyleModule.YieldScope()</summary>
        </member>
        <member name="T:Castle.MicroKernel.Lifestyle.Fakes.ShimPerWebRequestLifestyleModule.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimPerWebRequestLifestyleModule.AllInstances.Application_EndRequestObjectEventArgs">
            <summary>Sets the shim of PerWebRequestLifestyleModule.Application_EndRequest(Object sender, EventArgs e)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimPerWebRequestLifestyleModule.AllInstances.Dispose">
            <summary>Sets the shim of PerWebRequestLifestyleModule.Dispose()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimPerWebRequestLifestyleModule.AllInstances.InitHttpApplication">
            <summary>Sets the shim of PerWebRequestLifestyleModule.Init(HttpApplication context)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Lifestyle.Fakes.ShimPerWebRequestLifestyleModuleRegistration">
            <summary>Shim type of Castle.MicroKernel.Lifestyle.PerWebRequestLifestyleModuleRegistration</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimPerWebRequestLifestyleModuleRegistration.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimPerWebRequestLifestyleModuleRegistration.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimPerWebRequestLifestyleModuleRegistration.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimPerWebRequestLifestyleModuleRegistration.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimPerWebRequestLifestyleModuleRegistration.Run">
            <summary>Sets the shim of PerWebRequestLifestyleModuleRegistration.Run()</summary>
        </member>
        <member name="T:Castle.MicroKernel.Lifestyle.Fakes.ShimPoolableLifestyleManager">
            <summary>Shim type of Castle.MicroKernel.Lifestyle.PoolableLifestyleManager</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimPoolableLifestyleManager.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimPoolableLifestyleManager.#ctor(Castle.MicroKernel.Lifestyle.PoolableLifestyleManager)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimPoolableLifestyleManager.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimPoolableLifestyleManager.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimPoolableLifestyleManager.Bind(Castle.MicroKernel.ILifestyleManager)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimPoolableLifestyleManager.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimPoolableLifestyleManager.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimPoolableLifestyleManager.ConstructorInt32Int32">
            <summary>Sets the shim of PoolableLifestyleManager.PoolableLifestyleManager(Int32 initialSize, Int32 maxSize)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimPoolableLifestyleManager.CreatePoolInt32Int32">
            <summary>Sets the shim of PoolableLifestyleManager.CreatePool(Int32 initialSize, Int32 maxSize)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimPoolableLifestyleManager.Dispose">
            <summary>Sets the shim of PoolableLifestyleManager.Dispose()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimPoolableLifestyleManager.PoolCreationCallbackCreationContextIReleasePolicy">
            <summary>Sets the shim of PoolableLifestyleManager.PoolCreationCallback(CreationContext context, IReleasePolicy releasePolicy)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimPoolableLifestyleManager.PoolGet">
            <summary>Sets the shim of PoolableLifestyleManager.get_Pool()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimPoolableLifestyleManager.ReleaseObject">
            <summary>Sets the shim of PoolableLifestyleManager.Release(Object instance)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimPoolableLifestyleManager.ResolveCreationContextIReleasePolicy">
            <summary>Sets the shim of PoolableLifestyleManager.Resolve(CreationContext context, IReleasePolicy releasePolicy)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimPoolableLifestyleManager.TrackBurdenIReleasePolicy">
            <summary>Sets the shim of PoolableLifestyleManager.Track(Burden burden, IReleasePolicy releasePolicy)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Lifestyle.Fakes.ShimPoolableLifestyleManager.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimPoolableLifestyleManager.AllInstances.CreatePoolInt32Int32">
            <summary>Sets the shim of PoolableLifestyleManager.CreatePool(Int32 initialSize, Int32 maxSize)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimPoolableLifestyleManager.AllInstances.Dispose">
            <summary>Sets the shim of PoolableLifestyleManager.Dispose()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimPoolableLifestyleManager.AllInstances.PoolCreationCallbackCreationContextIReleasePolicy">
            <summary>Sets the shim of PoolableLifestyleManager.PoolCreationCallback(CreationContext context, IReleasePolicy releasePolicy)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimPoolableLifestyleManager.AllInstances.PoolGet">
            <summary>Sets the shim of PoolableLifestyleManager.get_Pool()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimPoolableLifestyleManager.AllInstances.ReleaseObject">
            <summary>Sets the shim of PoolableLifestyleManager.Release(Object instance)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimPoolableLifestyleManager.AllInstances.ResolveCreationContextIReleasePolicy">
            <summary>Sets the shim of PoolableLifestyleManager.Resolve(CreationContext context, IReleasePolicy releasePolicy)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimPoolableLifestyleManager.AllInstances.TrackBurdenIReleasePolicy">
            <summary>Sets the shim of PoolableLifestyleManager.Track(Burden burden, IReleasePolicy releasePolicy)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Lifestyle.Fakes.ShimScopedLifestyleManager">
            <summary>Shim type of Castle.MicroKernel.Lifestyle.ScopedLifestyleManager</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimScopedLifestyleManager.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimScopedLifestyleManager.#ctor(Castle.MicroKernel.Lifestyle.ScopedLifestyleManager)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimScopedLifestyleManager.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimScopedLifestyleManager.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimScopedLifestyleManager.Bind(Castle.MicroKernel.ILifestyleManager)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimScopedLifestyleManager.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimScopedLifestyleManager.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimScopedLifestyleManager.Constructor">
            <summary>Sets the shim of ScopedLifestyleManager.ScopedLifestyleManager()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimScopedLifestyleManager.ConstructorIScopeAccessor">
            <summary>Sets the shim of ScopedLifestyleManager.ScopedLifestyleManager(IScopeAccessor accessor)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimScopedLifestyleManager.Dispose">
            <summary>Sets the shim of ScopedLifestyleManager.Dispose()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimScopedLifestyleManager.GetScopeCreationContext">
            <summary>Sets the shim of ScopedLifestyleManager.GetScope(CreationContext context)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimScopedLifestyleManager.ResolveCreationContextIReleasePolicy">
            <summary>Sets the shim of ScopedLifestyleManager.Resolve(CreationContext context, IReleasePolicy releasePolicy)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimScopedLifestyleManager._n__FabricatedMethod3CreationContextBoolean">
            <summary>Sets the shim of ScopedLifestyleManager.&lt;&gt;n__FabricatedMethod3(CreationContext , Boolean )</summary>
        </member>
        <member name="T:Castle.MicroKernel.Lifestyle.Fakes.ShimScopedLifestyleManager.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimScopedLifestyleManager.AllInstances.Dispose">
            <summary>Sets the shim of ScopedLifestyleManager.Dispose()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimScopedLifestyleManager.AllInstances.GetScopeCreationContext">
            <summary>Sets the shim of ScopedLifestyleManager.GetScope(CreationContext context)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimScopedLifestyleManager.AllInstances.ResolveCreationContextIReleasePolicy">
            <summary>Sets the shim of ScopedLifestyleManager.Resolve(CreationContext context, IReleasePolicy releasePolicy)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimScopedLifestyleManager.AllInstances._n__FabricatedMethod3CreationContextBoolean">
            <summary>Sets the shim of ScopedLifestyleManager.&lt;&gt;n__FabricatedMethod3(CreationContext , Boolean )</summary>
        </member>
        <member name="T:Castle.MicroKernel.Lifestyle.Fakes.ShimSingletonLifestyleManager">
            <summary>Shim type of Castle.MicroKernel.Lifestyle.SingletonLifestyleManager</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimSingletonLifestyleManager.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimSingletonLifestyleManager.#ctor(Castle.MicroKernel.Lifestyle.SingletonLifestyleManager)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimSingletonLifestyleManager.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimSingletonLifestyleManager.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimSingletonLifestyleManager.Bind(Castle.MicroKernel.IContextLifestyleManager)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimSingletonLifestyleManager.Bind(Castle.MicroKernel.ILifestyleManager)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimSingletonLifestyleManager.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimSingletonLifestyleManager.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimSingletonLifestyleManager.Constructor">
            <summary>Sets the shim of SingletonLifestyleManager.SingletonLifestyleManager()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimSingletonLifestyleManager.Dispose">
            <summary>Sets the shim of SingletonLifestyleManager.Dispose()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimSingletonLifestyleManager.GetContextInstanceCreationContext">
            <summary>Sets the shim of SingletonLifestyleManager.GetContextInstance(CreationContext context)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimSingletonLifestyleManager.ResolveCreationContextIReleasePolicy">
            <summary>Sets the shim of SingletonLifestyleManager.Resolve(CreationContext context, IReleasePolicy releasePolicy)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Lifestyle.Fakes.ShimSingletonLifestyleManager.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimSingletonLifestyleManager.AllInstances.Dispose">
            <summary>Sets the shim of SingletonLifestyleManager.Dispose()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimSingletonLifestyleManager.AllInstances.GetContextInstanceCreationContext">
            <summary>Sets the shim of SingletonLifestyleManager.GetContextInstance(CreationContext context)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimSingletonLifestyleManager.AllInstances.ResolveCreationContextIReleasePolicy">
            <summary>Sets the shim of SingletonLifestyleManager.Resolve(CreationContext context, IReleasePolicy releasePolicy)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Lifestyle.Fakes.ShimThreadScopeAccessor">
            <summary>Shim type of Castle.MicroKernel.Lifestyle.ThreadScopeAccessor</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimThreadScopeAccessor.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimThreadScopeAccessor.#ctor(Castle.MicroKernel.Lifestyle.ThreadScopeAccessor)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimThreadScopeAccessor.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimThreadScopeAccessor.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimThreadScopeAccessor.Bind(Castle.MicroKernel.Lifestyle.Scoped.IScopeAccessor)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimThreadScopeAccessor.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimThreadScopeAccessor.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimThreadScopeAccessor.Constructor">
            <summary>Sets the shim of ThreadScopeAccessor.ThreadScopeAccessor()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimThreadScopeAccessor.Dispose">
            <summary>Sets the shim of ThreadScopeAccessor.Dispose()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimThreadScopeAccessor.GetCurrentThreadId">
            <summary>Sets the shim of ThreadScopeAccessor.GetCurrentThreadId()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimThreadScopeAccessor.GetScopeCreationContext">
            <summary>Sets the shim of ThreadScopeAccessor.GetScope(CreationContext context)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimThreadScopeAccessor._GetScopeb__0Int32">
            <summary>Sets the shim of ThreadScopeAccessor.&lt;GetScope&gt;b__0(Int32 id)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Lifestyle.Fakes.ShimThreadScopeAccessor.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimThreadScopeAccessor.AllInstances.Dispose">
            <summary>Sets the shim of ThreadScopeAccessor.Dispose()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimThreadScopeAccessor.AllInstances.GetCurrentThreadId">
            <summary>Sets the shim of ThreadScopeAccessor.GetCurrentThreadId()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimThreadScopeAccessor.AllInstances.GetScopeCreationContext">
            <summary>Sets the shim of ThreadScopeAccessor.GetScope(CreationContext context)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Lifestyle.Fakes.ShimTransientLifestyleManager">
            <summary>Shim type of Castle.MicroKernel.Lifestyle.TransientLifestyleManager</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimTransientLifestyleManager.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimTransientLifestyleManager.#ctor(Castle.MicroKernel.Lifestyle.TransientLifestyleManager)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimTransientLifestyleManager.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimTransientLifestyleManager.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimTransientLifestyleManager.Bind(Castle.MicroKernel.ILifestyleManager)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimTransientLifestyleManager.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimTransientLifestyleManager.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimTransientLifestyleManager.Constructor">
            <summary>Sets the shim of TransientLifestyleManager.TransientLifestyleManager()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimTransientLifestyleManager.Dispose">
            <summary>Sets the shim of TransientLifestyleManager.Dispose()</summary>
        </member>
        <member name="T:Castle.MicroKernel.Lifestyle.Fakes.ShimTransientLifestyleManager.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimTransientLifestyleManager.AllInstances.Dispose">
            <summary>Sets the shim of TransientLifestyleManager.Dispose()</summary>
        </member>
        <member name="T:Castle.MicroKernel.Lifestyle.Fakes.ShimWebRequestScopeAccessor">
            <summary>Shim type of Castle.MicroKernel.Lifestyle.WebRequestScopeAccessor</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimWebRequestScopeAccessor.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimWebRequestScopeAccessor.#ctor(Castle.MicroKernel.Lifestyle.WebRequestScopeAccessor)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimWebRequestScopeAccessor.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimWebRequestScopeAccessor.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimWebRequestScopeAccessor.Bind(Castle.MicroKernel.Lifestyle.Scoped.IScopeAccessor)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimWebRequestScopeAccessor.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimWebRequestScopeAccessor.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimWebRequestScopeAccessor.Constructor">
            <summary>Sets the shim of WebRequestScopeAccessor.WebRequestScopeAccessor()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimWebRequestScopeAccessor.Dispose">
            <summary>Sets the shim of WebRequestScopeAccessor.Dispose()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimWebRequestScopeAccessor.GetScopeCreationContext">
            <summary>Sets the shim of WebRequestScopeAccessor.GetScope(CreationContext context)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Lifestyle.Fakes.ShimWebRequestScopeAccessor.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimWebRequestScopeAccessor.AllInstances.Dispose">
            <summary>Sets the shim of WebRequestScopeAccessor.Dispose()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimWebRequestScopeAccessor.AllInstances.GetScopeCreationContext">
            <summary>Sets the shim of WebRequestScopeAccessor.GetScope(CreationContext context)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Lifestyle.Fakes.StubAbstractLifestyleManager">
            <summary>Stub type of Castle.MicroKernel.Lifestyle.AbstractLifestyleManager</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.StubAbstractLifestyleManager.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.StubAbstractLifestyleManager.CreateInstance(Castle.MicroKernel.Context.CreationContext,System.Boolean)">
            <summary>Sets the stub of AbstractLifestyleManager.CreateInstance(CreationContext context, Boolean trackedExternally)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Fakes.StubAbstractLifestyleManager.CreateInstanceCreationContextBoolean">
            <summary>Sets the stub of AbstractLifestyleManager.CreateInstance(CreationContext context, Boolean trackedExternally)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.StubAbstractLifestyleManager.Dispose">
            <summary>Sets the stub of AbstractLifestyleManager.Dispose()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Fakes.StubAbstractLifestyleManager.Dispose01">
            <summary>Sets the stub of AbstractLifestyleManager.Dispose()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.StubAbstractLifestyleManager.Init(Castle.MicroKernel.IComponentActivator,Castle.MicroKernel.IKernel,Castle.Core.ComponentModel)">
            <summary>Sets the stub of AbstractLifestyleManager.Init(IComponentActivator componentActivator, IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Fakes.StubAbstractLifestyleManager.InitIComponentActivatorIKernelComponentModel">
            <summary>Sets the stub of AbstractLifestyleManager.Init(IComponentActivator componentActivator, IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.StubAbstractLifestyleManager.InitializeStub">
            <summary>Initializes a new instance of type StubAbstractLifestyleManager</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.StubAbstractLifestyleManager.Release(System.Object)">
            <summary>Sets the stub of AbstractLifestyleManager.Release(Object instance)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Fakes.StubAbstractLifestyleManager.ReleaseObject">
            <summary>Sets the stub of AbstractLifestyleManager.Release(Object instance)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.StubAbstractLifestyleManager.Resolve(Castle.MicroKernel.Context.CreationContext,Castle.MicroKernel.IReleasePolicy)">
            <summary>Sets the stub of AbstractLifestyleManager.Resolve(CreationContext context, IReleasePolicy releasePolicy)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Fakes.StubAbstractLifestyleManager.ResolveCreationContextIReleasePolicy">
            <summary>Sets the stub of AbstractLifestyleManager.Resolve(CreationContext context, IReleasePolicy releasePolicy)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.StubAbstractLifestyleManager.Track(Castle.MicroKernel.Burden,Castle.MicroKernel.IReleasePolicy)">
            <summary>Sets the stub of AbstractLifestyleManager.Track(Burden burden, IReleasePolicy releasePolicy)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Fakes.StubAbstractLifestyleManager.TrackBurdenIReleasePolicy">
            <summary>Sets the stub of AbstractLifestyleManager.Track(Burden burden, IReleasePolicy releasePolicy)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.StubAbstractLifestyleManager.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.StubAbstractLifestyleManager.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.StubAbstractLifestyleManager.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.Lifestyle.Fakes.StubLifetimeScopeAccessor">
            <summary>Stub type of Castle.MicroKernel.Lifestyle.LifetimeScopeAccessor</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.StubLifetimeScopeAccessor.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.StubLifetimeScopeAccessor.InitializeStub">
            <summary>Initializes a new instance of type StubLifetimeScopeAccessor</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.StubLifetimeScopeAccessor.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.StubLifetimeScopeAccessor.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.StubLifetimeScopeAccessor.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.Lifestyle.Fakes.StubPerWebRequestLifestyleModule">
            <summary>Stub type of Castle.MicroKernel.Lifestyle.PerWebRequestLifestyleModule</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.StubPerWebRequestLifestyleModule.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.StubPerWebRequestLifestyleModule.InitializeStub">
            <summary>Initializes a new instance of type StubPerWebRequestLifestyleModule</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.StubPerWebRequestLifestyleModule.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.StubPerWebRequestLifestyleModule.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.StubPerWebRequestLifestyleModule.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.Lifestyle.Fakes.StubPoolableLifestyleManager">
            <summary>Stub type of Castle.MicroKernel.Lifestyle.PoolableLifestyleManager</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.StubPoolableLifestyleManager.#ctor(System.Int32,System.Int32)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.StubPoolableLifestyleManager.CreateInstance(Castle.MicroKernel.Context.CreationContext,System.Boolean)">
            <summary>Sets the stub of AbstractLifestyleManager.CreateInstance(CreationContext context, Boolean trackedExternally)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Fakes.StubPoolableLifestyleManager.CreateInstanceCreationContextBoolean">
            <summary>Sets the stub of AbstractLifestyleManager.CreateInstance(CreationContext context, Boolean trackedExternally)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.StubPoolableLifestyleManager.Dispose">
            <summary>Sets the stub of PoolableLifestyleManager.Dispose()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Fakes.StubPoolableLifestyleManager.Dispose01">
            <summary>Sets the stub of PoolableLifestyleManager.Dispose()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.StubPoolableLifestyleManager.Init(Castle.MicroKernel.IComponentActivator,Castle.MicroKernel.IKernel,Castle.Core.ComponentModel)">
            <summary>Sets the stub of AbstractLifestyleManager.Init(IComponentActivator componentActivator, IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Fakes.StubPoolableLifestyleManager.InitIComponentActivatorIKernelComponentModel">
            <summary>Sets the stub of AbstractLifestyleManager.Init(IComponentActivator componentActivator, IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.StubPoolableLifestyleManager.InitializeStub">
            <summary>Initializes a new instance of type StubPoolableLifestyleManager</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.StubPoolableLifestyleManager.PoolCreationCallback(Castle.MicroKernel.Context.CreationContext,Castle.MicroKernel.IReleasePolicy)">
            <summary>Sets the stub of PoolableLifestyleManager.PoolCreationCallback(CreationContext context, IReleasePolicy releasePolicy)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Fakes.StubPoolableLifestyleManager.PoolCreationCallbackCreationContextIReleasePolicy">
            <summary>Sets the stub of PoolableLifestyleManager.PoolCreationCallback(CreationContext context, IReleasePolicy releasePolicy)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.StubPoolableLifestyleManager.Release(System.Object)">
            <summary>Sets the stub of PoolableLifestyleManager.Release(Object instance)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Fakes.StubPoolableLifestyleManager.ReleaseObject">
            <summary>Sets the stub of PoolableLifestyleManager.Release(Object instance)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.StubPoolableLifestyleManager.Resolve(Castle.MicroKernel.Context.CreationContext,Castle.MicroKernel.IReleasePolicy)">
            <summary>Sets the stub of PoolableLifestyleManager.Resolve(CreationContext context, IReleasePolicy releasePolicy)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Fakes.StubPoolableLifestyleManager.ResolveCreationContextIReleasePolicy">
            <summary>Sets the stub of PoolableLifestyleManager.Resolve(CreationContext context, IReleasePolicy releasePolicy)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.StubPoolableLifestyleManager.Track(Castle.MicroKernel.Burden,Castle.MicroKernel.IReleasePolicy)">
            <summary>Sets the stub of PoolableLifestyleManager.Track(Burden burden, IReleasePolicy releasePolicy)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Fakes.StubPoolableLifestyleManager.TrackBurdenIReleasePolicy">
            <summary>Sets the stub of PoolableLifestyleManager.Track(Burden burden, IReleasePolicy releasePolicy)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.StubPoolableLifestyleManager.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.StubPoolableLifestyleManager.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.StubPoolableLifestyleManager.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.Lifestyle.Fakes.StubScopedLifestyleManager">
            <summary>Stub type of Castle.MicroKernel.Lifestyle.ScopedLifestyleManager</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.StubScopedLifestyleManager.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.StubScopedLifestyleManager.#ctor(Castle.MicroKernel.Lifestyle.Scoped.IScopeAccessor)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.StubScopedLifestyleManager.CreateInstance(Castle.MicroKernel.Context.CreationContext,System.Boolean)">
            <summary>Sets the stub of AbstractLifestyleManager.CreateInstance(CreationContext context, Boolean trackedExternally)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Fakes.StubScopedLifestyleManager.CreateInstanceCreationContextBoolean">
            <summary>Sets the stub of AbstractLifestyleManager.CreateInstance(CreationContext context, Boolean trackedExternally)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.StubScopedLifestyleManager.Dispose">
            <summary>Sets the stub of ScopedLifestyleManager.Dispose()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Fakes.StubScopedLifestyleManager.Dispose01">
            <summary>Sets the stub of ScopedLifestyleManager.Dispose()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.StubScopedLifestyleManager.Init(Castle.MicroKernel.IComponentActivator,Castle.MicroKernel.IKernel,Castle.Core.ComponentModel)">
            <summary>Sets the stub of AbstractLifestyleManager.Init(IComponentActivator componentActivator, IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Fakes.StubScopedLifestyleManager.InitIComponentActivatorIKernelComponentModel">
            <summary>Sets the stub of AbstractLifestyleManager.Init(IComponentActivator componentActivator, IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.StubScopedLifestyleManager.InitializeStub">
            <summary>Initializes a new instance of type StubScopedLifestyleManager</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.StubScopedLifestyleManager.Release(System.Object)">
            <summary>Sets the stub of AbstractLifestyleManager.Release(Object instance)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Fakes.StubScopedLifestyleManager.ReleaseObject">
            <summary>Sets the stub of AbstractLifestyleManager.Release(Object instance)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.StubScopedLifestyleManager.Resolve(Castle.MicroKernel.Context.CreationContext,Castle.MicroKernel.IReleasePolicy)">
            <summary>Sets the stub of ScopedLifestyleManager.Resolve(CreationContext context, IReleasePolicy releasePolicy)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Fakes.StubScopedLifestyleManager.ResolveCreationContextIReleasePolicy">
            <summary>Sets the stub of ScopedLifestyleManager.Resolve(CreationContext context, IReleasePolicy releasePolicy)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.StubScopedLifestyleManager.Track(Castle.MicroKernel.Burden,Castle.MicroKernel.IReleasePolicy)">
            <summary>Sets the stub of AbstractLifestyleManager.Track(Burden burden, IReleasePolicy releasePolicy)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Fakes.StubScopedLifestyleManager.TrackBurdenIReleasePolicy">
            <summary>Sets the stub of AbstractLifestyleManager.Track(Burden burden, IReleasePolicy releasePolicy)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.StubScopedLifestyleManager.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.StubScopedLifestyleManager.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.StubScopedLifestyleManager.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.Lifestyle.Fakes.StubSingletonLifestyleManager">
            <summary>Stub type of Castle.MicroKernel.Lifestyle.SingletonLifestyleManager</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.StubSingletonLifestyleManager.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.StubSingletonLifestyleManager.CreateInstance(Castle.MicroKernel.Context.CreationContext,System.Boolean)">
            <summary>Sets the stub of AbstractLifestyleManager.CreateInstance(CreationContext context, Boolean trackedExternally)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Fakes.StubSingletonLifestyleManager.CreateInstanceCreationContextBoolean">
            <summary>Sets the stub of AbstractLifestyleManager.CreateInstance(CreationContext context, Boolean trackedExternally)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.StubSingletonLifestyleManager.Dispose">
            <summary>Sets the stub of SingletonLifestyleManager.Dispose()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Fakes.StubSingletonLifestyleManager.Dispose01">
            <summary>Sets the stub of SingletonLifestyleManager.Dispose()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.StubSingletonLifestyleManager.Init(Castle.MicroKernel.IComponentActivator,Castle.MicroKernel.IKernel,Castle.Core.ComponentModel)">
            <summary>Sets the stub of AbstractLifestyleManager.Init(IComponentActivator componentActivator, IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Fakes.StubSingletonLifestyleManager.InitIComponentActivatorIKernelComponentModel">
            <summary>Sets the stub of AbstractLifestyleManager.Init(IComponentActivator componentActivator, IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.StubSingletonLifestyleManager.InitializeStub">
            <summary>Initializes a new instance of type StubSingletonLifestyleManager</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.StubSingletonLifestyleManager.Release(System.Object)">
            <summary>Sets the stub of AbstractLifestyleManager.Release(Object instance)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Fakes.StubSingletonLifestyleManager.ReleaseObject">
            <summary>Sets the stub of AbstractLifestyleManager.Release(Object instance)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.StubSingletonLifestyleManager.Resolve(Castle.MicroKernel.Context.CreationContext,Castle.MicroKernel.IReleasePolicy)">
            <summary>Sets the stub of SingletonLifestyleManager.Resolve(CreationContext context, IReleasePolicy releasePolicy)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Fakes.StubSingletonLifestyleManager.ResolveCreationContextIReleasePolicy">
            <summary>Sets the stub of SingletonLifestyleManager.Resolve(CreationContext context, IReleasePolicy releasePolicy)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.StubSingletonLifestyleManager.Track(Castle.MicroKernel.Burden,Castle.MicroKernel.IReleasePolicy)">
            <summary>Sets the stub of AbstractLifestyleManager.Track(Burden burden, IReleasePolicy releasePolicy)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Fakes.StubSingletonLifestyleManager.TrackBurdenIReleasePolicy">
            <summary>Sets the stub of AbstractLifestyleManager.Track(Burden burden, IReleasePolicy releasePolicy)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.StubSingletonLifestyleManager.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.StubSingletonLifestyleManager.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.StubSingletonLifestyleManager.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.Lifestyle.Fakes.StubThreadScopeAccessor">
            <summary>Stub type of Castle.MicroKernel.Lifestyle.ThreadScopeAccessor</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.StubThreadScopeAccessor.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.StubThreadScopeAccessor.GetCurrentThreadId">
            <summary>Sets the stub of ThreadScopeAccessor.GetCurrentThreadId()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Fakes.StubThreadScopeAccessor.GetCurrentThreadId01">
            <summary>Sets the stub of ThreadScopeAccessor.GetCurrentThreadId()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.StubThreadScopeAccessor.InitializeStub">
            <summary>Initializes a new instance of type StubThreadScopeAccessor</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.StubThreadScopeAccessor.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.StubThreadScopeAccessor.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.StubThreadScopeAccessor.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.Lifestyle.Fakes.StubTransientLifestyleManager">
            <summary>Stub type of Castle.MicroKernel.Lifestyle.TransientLifestyleManager</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.StubTransientLifestyleManager.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.StubTransientLifestyleManager.CreateInstance(Castle.MicroKernel.Context.CreationContext,System.Boolean)">
            <summary>Sets the stub of AbstractLifestyleManager.CreateInstance(CreationContext context, Boolean trackedExternally)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Fakes.StubTransientLifestyleManager.CreateInstanceCreationContextBoolean">
            <summary>Sets the stub of AbstractLifestyleManager.CreateInstance(CreationContext context, Boolean trackedExternally)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.StubTransientLifestyleManager.Dispose">
            <summary>Sets the stub of TransientLifestyleManager.Dispose()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Fakes.StubTransientLifestyleManager.Dispose01">
            <summary>Sets the stub of TransientLifestyleManager.Dispose()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.StubTransientLifestyleManager.Init(Castle.MicroKernel.IComponentActivator,Castle.MicroKernel.IKernel,Castle.Core.ComponentModel)">
            <summary>Sets the stub of AbstractLifestyleManager.Init(IComponentActivator componentActivator, IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Fakes.StubTransientLifestyleManager.InitIComponentActivatorIKernelComponentModel">
            <summary>Sets the stub of AbstractLifestyleManager.Init(IComponentActivator componentActivator, IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.StubTransientLifestyleManager.InitializeStub">
            <summary>Initializes a new instance of type StubTransientLifestyleManager</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.StubTransientLifestyleManager.Release(System.Object)">
            <summary>Sets the stub of AbstractLifestyleManager.Release(Object instance)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Fakes.StubTransientLifestyleManager.ReleaseObject">
            <summary>Sets the stub of AbstractLifestyleManager.Release(Object instance)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.StubTransientLifestyleManager.Resolve(Castle.MicroKernel.Context.CreationContext,Castle.MicroKernel.IReleasePolicy)">
            <summary>Sets the stub of AbstractLifestyleManager.Resolve(CreationContext context, IReleasePolicy releasePolicy)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Fakes.StubTransientLifestyleManager.ResolveCreationContextIReleasePolicy">
            <summary>Sets the stub of AbstractLifestyleManager.Resolve(CreationContext context, IReleasePolicy releasePolicy)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.StubTransientLifestyleManager.Track(Castle.MicroKernel.Burden,Castle.MicroKernel.IReleasePolicy)">
            <summary>Sets the stub of AbstractLifestyleManager.Track(Burden burden, IReleasePolicy releasePolicy)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Fakes.StubTransientLifestyleManager.TrackBurdenIReleasePolicy">
            <summary>Sets the stub of AbstractLifestyleManager.Track(Burden burden, IReleasePolicy releasePolicy)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.StubTransientLifestyleManager.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.StubTransientLifestyleManager.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.StubTransientLifestyleManager.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.Lifestyle.Fakes.StubWebRequestScopeAccessor">
            <summary>Stub type of Castle.MicroKernel.Lifestyle.WebRequestScopeAccessor</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.StubWebRequestScopeAccessor.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.StubWebRequestScopeAccessor.InitializeStub">
            <summary>Initializes a new instance of type StubWebRequestScopeAccessor</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.StubWebRequestScopeAccessor.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.StubWebRequestScopeAccessor.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.StubWebRequestScopeAccessor.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.Lifestyle.Pool.Fakes.ShimDefaultPool">
            <summary>Shim type of Castle.MicroKernel.Lifestyle.Pool.DefaultPool</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Pool.Fakes.ShimDefaultPool.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Pool.Fakes.ShimDefaultPool.#ctor(Castle.MicroKernel.Lifestyle.Pool.DefaultPool)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Pool.Fakes.ShimDefaultPool.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Pool.Fakes.ShimDefaultPool.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Pool.Fakes.ShimDefaultPool.Bind(Castle.MicroKernel.Lifestyle.Pool.IPool)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Pool.Fakes.ShimDefaultPool.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Pool.Fakes.ShimDefaultPool.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Pool.Fakes.ShimDefaultPool.ConstructorInt32Int32IComponentActivator">
            <summary>Sets the shim of DefaultPool.DefaultPool(Int32 initialSize, Int32 maxsize, IComponentActivator componentActivator)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Pool.Fakes.ShimDefaultPool.Dispose">
            <summary>Sets the shim of DefaultPool.Dispose()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Pool.Fakes.ShimDefaultPool.IntitializeFuncOfCreationContextBurdenCreationContext">
            <summary>Sets the shim of DefaultPool.Intitialize(Func`2&lt;CreationContext,Burden&gt; createCallback, CreationContext c)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Pool.Fakes.ShimDefaultPool.ReleaseObject">
            <summary>Sets the shim of DefaultPool.Release(Object instance)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Pool.Fakes.ShimDefaultPool.RequestCreationContextFuncOfCreationContextBurden">
            <summary>Sets the shim of DefaultPool.Request(CreationContext context, Func`2&lt;CreationContext,Burden&gt; creationCallback)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Lifestyle.Pool.Fakes.ShimDefaultPool.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Pool.Fakes.ShimDefaultPool.AllInstances.Dispose">
            <summary>Sets the shim of DefaultPool.Dispose()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Pool.Fakes.ShimDefaultPool.AllInstances.IntitializeFuncOfCreationContextBurdenCreationContext">
            <summary>Sets the shim of DefaultPool.Intitialize(Func`2&lt;CreationContext,Burden&gt; createCallback, CreationContext c)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Pool.Fakes.ShimDefaultPool.AllInstances.ReleaseObject">
            <summary>Sets the shim of DefaultPool.Release(Object instance)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Pool.Fakes.ShimDefaultPool.AllInstances.RequestCreationContextFuncOfCreationContextBurden">
            <summary>Sets the shim of DefaultPool.Request(CreationContext context, Func`2&lt;CreationContext,Burden&gt; creationCallback)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Lifestyle.Pool.Fakes.ShimDefaultPoolFactory">
            <summary>Shim type of Castle.MicroKernel.Lifestyle.Pool.DefaultPoolFactory</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Pool.Fakes.ShimDefaultPoolFactory.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Pool.Fakes.ShimDefaultPoolFactory.#ctor(Castle.MicroKernel.Lifestyle.Pool.DefaultPoolFactory)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Pool.Fakes.ShimDefaultPoolFactory.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Pool.Fakes.ShimDefaultPoolFactory.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Pool.Fakes.ShimDefaultPoolFactory.Bind(Castle.MicroKernel.Lifestyle.Pool.IPoolFactory)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Pool.Fakes.ShimDefaultPoolFactory.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Pool.Fakes.ShimDefaultPoolFactory.Constructor">
            <summary>Sets the shim of DefaultPoolFactory.DefaultPoolFactory()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Pool.Fakes.ShimDefaultPoolFactory.CreateInt32Int32IComponentActivator">
            <summary>Sets the shim of DefaultPoolFactory.Create(Int32 initialsize, Int32 maxSize, IComponentActivator activator)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Lifestyle.Pool.Fakes.ShimDefaultPoolFactory.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Pool.Fakes.ShimDefaultPoolFactory.AllInstances.CreateInt32Int32IComponentActivator">
            <summary>Sets the shim of DefaultPoolFactory.Create(Int32 initialsize, Int32 maxSize, IComponentActivator activator)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Lifestyle.Pool.Fakes.ShimPoolException">
            <summary>Shim type of Castle.MicroKernel.Lifestyle.Pool.PoolException</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Pool.Fakes.ShimPoolException.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Pool.Fakes.ShimPoolException.#ctor(Castle.MicroKernel.Lifestyle.Pool.PoolException)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Pool.Fakes.ShimPoolException.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Pool.Fakes.ShimPoolException.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Pool.Fakes.ShimPoolException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Pool.Fakes.ShimPoolException.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Pool.Fakes.ShimPoolException.ConstructorSerializationInfoStreamingContext">
            <summary>Sets the shim of PoolException.PoolException(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Pool.Fakes.ShimPoolException.ConstructorString">
            <summary>Sets the shim of PoolException.PoolException(String message)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Lifestyle.Pool.Fakes.ShimPoolException.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="T:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubDefaultPool">
            <summary>Stub type of Castle.MicroKernel.Lifestyle.Pool.DefaultPool</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubDefaultPool.#ctor(System.Int32,System.Int32,Castle.MicroKernel.IComponentActivator)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubDefaultPool.Dispose">
            <summary>Sets the stub of DefaultPool.Dispose()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubDefaultPool.Dispose01">
            <summary>Sets the stub of DefaultPool.Dispose()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubDefaultPool.InitializeStub">
            <summary>Initializes a new instance of type StubDefaultPool</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubDefaultPool.Intitialize(System.Func{Castle.MicroKernel.Context.CreationContext,Castle.MicroKernel.Burden},Castle.MicroKernel.Context.CreationContext)">
            <summary>Sets the stub of DefaultPool.Intitialize(Func`2&lt;CreationContext,Burden&gt; createCallback, CreationContext c)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubDefaultPool.IntitializeFuncOfCreationContextBurdenCreationContext">
            <summary>Sets the stub of DefaultPool.Intitialize(Func`2&lt;CreationContext,Burden&gt; createCallback, CreationContext c)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubDefaultPool.Release(System.Object)">
            <summary>Sets the stub of DefaultPool.Release(Object instance)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubDefaultPool.ReleaseObject">
            <summary>Sets the stub of DefaultPool.Release(Object instance)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubDefaultPool.Request(Castle.MicroKernel.Context.CreationContext,System.Func{Castle.MicroKernel.Context.CreationContext,Castle.MicroKernel.Burden})">
            <summary>Sets the stub of DefaultPool.Request(CreationContext context, Func`2&lt;CreationContext,Burden&gt; creationCallback)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubDefaultPool.RequestCreationContextFuncOfCreationContextBurden">
            <summary>Sets the stub of DefaultPool.Request(CreationContext context, Func`2&lt;CreationContext,Burden&gt; creationCallback)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubDefaultPool.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubDefaultPool.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubDefaultPool.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubDefaultPoolFactory">
            <summary>Stub type of Castle.MicroKernel.Lifestyle.Pool.DefaultPoolFactory</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubDefaultPoolFactory.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubDefaultPoolFactory.InitializeStub">
            <summary>Initializes a new instance of type StubDefaultPoolFactory</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubDefaultPoolFactory.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubDefaultPoolFactory.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubDefaultPoolFactory.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubIPool">
            <summary>Stub type of Castle.MicroKernel.Lifestyle.Pool.IPool</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubIPool.#ctor">
            <summary>Initializes a new instance of type StubIPool</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubIPool.cw::Castle#MicroKernel#Lifestyle#Pool#IPool#Release(System.Object)">
            <summary>Sets the stub of IPool.Release(Object instance)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubIPool.cw::Castle#MicroKernel#Lifestyle#Pool#IPool#Request(Castle.MicroKernel.Context.CreationContext,System.Func{Castle.MicroKernel.Context.CreationContext,Castle.MicroKernel.Burden})">
            <summary>Sets the stub of IPool.Request(CreationContext context, Func`2&lt;CreationContext,Burden&gt; creationCallback)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubIPool.Dispose">
            <summary>Sets the stub of IDisposable.Dispose()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubIPool.ReleaseObject">
            <summary>Sets the stub of IPool.Release(Object instance)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubIPool.RequestCreationContextFuncOfCreationContextBurden">
            <summary>Sets the stub of IPool.Request(CreationContext context, Func`2&lt;CreationContext,Burden&gt; creationCallback)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubIPool.global::System#IDisposable#Dispose">
            <summary>Sets the stub of IDisposable.Dispose()</summary>
        </member>
        <member name="T:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubIPoolFactory">
            <summary>Stub type of Castle.MicroKernel.Lifestyle.Pool.IPoolFactory</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubIPoolFactory.#ctor">
            <summary>Initializes a new instance of type StubIPoolFactory</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubIPoolFactory.cw::Castle#MicroKernel#Lifestyle#Pool#IPoolFactory#Create(System.Int32,System.Int32,Castle.MicroKernel.IComponentActivator)">
            <summary>Sets the stub of IPoolFactory.Create(Int32 initialsize, Int32 maxSize, IComponentActivator activator)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubIPoolFactory.CreateInt32Int32IComponentActivator">
            <summary>Sets the stub of IPoolFactory.Create(Int32 initialsize, Int32 maxSize, IComponentActivator activator)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubPoolException">
            <summary>Stub type of Castle.MicroKernel.Lifestyle.Pool.PoolException</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubPoolException.#ctor(System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubPoolException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubPoolException.AttachBackingFieldToHelpLink">
            <summary>Attaches delegates to emulate StubPoolException.HelpLink as a property with a backing field.</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubPoolException.AttachBackingFieldToSource">
            <summary>Attaches delegates to emulate StubPoolException.Source as a property with a backing field.</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubPoolException.DataGet">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubPoolException.GetBaseException">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubPoolException.GetBaseException01">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubPoolException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubPoolException.GetObjectDataSerializationInfoStreamingContext">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubPoolException.HelpLinkGet">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubPoolException.HelpLinkSetString">
            <summary>Sets the stub of Exception.set_HelpLink(String value)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubPoolException.InitializeStub">
            <summary>Initializes a new instance of type StubPoolException</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubPoolException.MessageGet">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubPoolException.SourceGet">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubPoolException.SourceSetString">
            <summary>Sets the stub of Exception.set_Source(String value)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubPoolException.StackTraceGet">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubPoolException.ToString">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubPoolException.ToString01">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubPoolException.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubPoolException.Data">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubPoolException.HelpLink">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubPoolException.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubPoolException.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubPoolException.Message">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubPoolException.Source">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubPoolException.StackTrace">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="T:Castle.MicroKernel.Lifestyle.Scoped.Fakes.ShimCallContextLifetimeScope">
            <summary>Shim type of Castle.MicroKernel.Lifestyle.Scoped.CallContextLifetimeScope</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Scoped.Fakes.ShimCallContextLifetimeScope.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Scoped.Fakes.ShimCallContextLifetimeScope.#ctor(Castle.MicroKernel.Lifestyle.Scoped.CallContextLifetimeScope)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Scoped.Fakes.ShimCallContextLifetimeScope.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Scoped.Fakes.ShimCallContextLifetimeScope.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Scoped.Fakes.ShimCallContextLifetimeScope.Bind(Castle.MicroKernel.Lifestyle.Scoped.ILifetimeScope)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Scoped.Fakes.ShimCallContextLifetimeScope.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Scoped.Fakes.ShimCallContextLifetimeScope.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Scoped.Fakes.ShimCallContextLifetimeScope.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Scoped.Fakes.ShimCallContextLifetimeScope.ConstructorIKernel">
            <summary>Sets the shim of CallContextLifetimeScope.CallContextLifetimeScope(IKernel container)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Scoped.Fakes.ShimCallContextLifetimeScope.ConstructorIWindsorContainer">
            <summary>Sets the shim of CallContextLifetimeScope.CallContextLifetimeScope(IWindsorContainer container)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Scoped.Fakes.ShimCallContextLifetimeScope.Dispose">
            <summary>Sets the shim of CallContextLifetimeScope.Dispose()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Scoped.Fakes.ShimCallContextLifetimeScope.GetCachedInstanceComponentModelScopedInstanceActivationCallback">
            <summary>Sets the shim of CallContextLifetimeScope.GetCachedInstance(ComponentModel model, ScopedInstanceActivationCallback createInstance)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Scoped.Fakes.ShimCallContextLifetimeScope.ObtainCurrentScope">
            <summary>Sets the shim of CallContextLifetimeScope.ObtainCurrentScope()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Scoped.Fakes.ShimCallContextLifetimeScope.SetCurrentScopeCallContextLifetimeScope">
            <summary>Sets the shim of CallContextLifetimeScope.SetCurrentScope(CallContextLifetimeScope lifetimeScope)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Scoped.Fakes.ShimCallContextLifetimeScope.StaticConstructor">
            <summary>Sets the shim of CallContextLifetimeScope.CallContextLifetimeScope()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Scoped.Fakes.ShimCallContextLifetimeScope.SystemRuntimeSerializationISerializableGetObjectDataSerializationInfoStreamingContext">
            <summary>Sets the shim of CallContextLifetimeScope.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Scoped.Fakes.ShimCallContextLifetimeScope._GetCachedInstanceb__0Burden">
            <summary>Sets the shim of CallContextLifetimeScope.&lt;GetCachedInstance&gt;b__0(Burden param0)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Lifestyle.Scoped.Fakes.ShimCallContextLifetimeScope.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Scoped.Fakes.ShimCallContextLifetimeScope.AllInstances.Dispose">
            <summary>Sets the shim of CallContextLifetimeScope.Dispose()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Scoped.Fakes.ShimCallContextLifetimeScope.AllInstances.GetCachedInstanceComponentModelScopedInstanceActivationCallback">
            <summary>Sets the shim of CallContextLifetimeScope.GetCachedInstance(ComponentModel model, ScopedInstanceActivationCallback createInstance)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Scoped.Fakes.ShimCallContextLifetimeScope.AllInstances.SetCurrentScopeCallContextLifetimeScope">
            <summary>Sets the shim of CallContextLifetimeScope.SetCurrentScope(CallContextLifetimeScope lifetimeScope)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Scoped.Fakes.ShimCallContextLifetimeScope.AllInstances.SystemRuntimeSerializationISerializableGetObjectDataSerializationInfoStreamingContext">
            <summary>Sets the shim of CallContextLifetimeScope.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Lifestyle.Scoped.Fakes.ShimCreationContextScopeAccessor">
            <summary>Shim type of Castle.MicroKernel.Lifestyle.Scoped.CreationContextScopeAccessor</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Scoped.Fakes.ShimCreationContextScopeAccessor.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Scoped.Fakes.ShimCreationContextScopeAccessor.#ctor(Castle.MicroKernel.Lifestyle.Scoped.CreationContextScopeAccessor)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Scoped.Fakes.ShimCreationContextScopeAccessor.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Scoped.Fakes.ShimCreationContextScopeAccessor.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Scoped.Fakes.ShimCreationContextScopeAccessor.Bind(Castle.MicroKernel.Lifestyle.Scoped.IScopeAccessor)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Scoped.Fakes.ShimCreationContextScopeAccessor.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Scoped.Fakes.ShimCreationContextScopeAccessor.DefaultScopeRootSelectorOf1IHandlerArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.IHandler[],Castle.MicroKernel.IHandler})">
            <summary>Sets the shim of CreationContextScopeAccessor.DefaultScopeRootSelector(IHandler[] resolutionStack)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Scoped.Fakes.ShimCreationContextScopeAccessor.NearestScopeRootSelectorOf1IHandlerArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.IHandler[],Castle.MicroKernel.IHandler})">
            <summary>Sets the shim of CreationContextScopeAccessor.NearestScopeRootSelector(IHandler[] resolutionStack)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Scoped.Fakes.ShimCreationContextScopeAccessor._DefaultScopeRootSelectorb__7Of1IHandler``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.IHandler,System.Boolean})">
            <summary>Sets the shim of CreationContextScopeAccessor.&lt;DefaultScopeRootSelector&gt;b__7(IHandler h)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Scoped.Fakes.ShimCreationContextScopeAccessor._NearestScopeRootSelectorb__8Of1IHandler``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.IHandler,System.Boolean})">
            <summary>Sets the shim of CreationContextScopeAccessor.&lt;NearestScopeRootSelector&gt;b__8(IHandler h)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Scoped.Fakes.ShimCreationContextScopeAccessor.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Scoped.Fakes.ShimCreationContextScopeAccessor.ConstructorComponentModelFuncOfIHandlerArrayIHandler">
            <summary>Sets the shim of CreationContextScopeAccessor.CreationContextScopeAccessor(ComponentModel componentModel, Func`2&lt;IHandler[],IHandler&gt; scopeRootSelector)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Scoped.Fakes.ShimCreationContextScopeAccessor.Dispose">
            <summary>Sets the shim of CreationContextScopeAccessor.Dispose()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Scoped.Fakes.ShimCreationContextScopeAccessor.GetScopeCreationContext">
            <summary>Sets the shim of CreationContextScopeAccessor.GetScope(CreationContext context)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Lifestyle.Scoped.Fakes.ShimCreationContextScopeAccessor.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Scoped.Fakes.ShimCreationContextScopeAccessor.AllInstances.Dispose">
            <summary>Sets the shim of CreationContextScopeAccessor.Dispose()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Scoped.Fakes.ShimCreationContextScopeAccessor.AllInstances.GetScopeCreationContext">
            <summary>Sets the shim of CreationContextScopeAccessor.GetScope(CreationContext context)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Lifestyle.Scoped.Fakes.ShimDefaultLifetimeScope">
            <summary>Shim type of Castle.MicroKernel.Lifestyle.Scoped.DefaultLifetimeScope</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Scoped.Fakes.ShimDefaultLifetimeScope.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Scoped.Fakes.ShimDefaultLifetimeScope.#ctor(Castle.MicroKernel.Lifestyle.Scoped.DefaultLifetimeScope)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Scoped.Fakes.ShimDefaultLifetimeScope.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Scoped.Fakes.ShimDefaultLifetimeScope.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Scoped.Fakes.ShimDefaultLifetimeScope.Bind(Castle.MicroKernel.Lifestyle.Scoped.ILifetimeScope)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Scoped.Fakes.ShimDefaultLifetimeScope.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Scoped.Fakes.ShimDefaultLifetimeScope.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Scoped.Fakes.ShimDefaultLifetimeScope.ConstructorIScopeCacheActionOfBurden">
            <summary>Sets the shim of DefaultLifetimeScope.DefaultLifetimeScope(IScopeCache scopeCache, Action`1&lt;Burden&gt; onAfterCreated)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Scoped.Fakes.ShimDefaultLifetimeScope.Dispose">
            <summary>Sets the shim of DefaultLifetimeScope.Dispose()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Scoped.Fakes.ShimDefaultLifetimeScope.GetCachedInstanceComponentModelScopedInstanceActivationCallback">
            <summary>Sets the shim of DefaultLifetimeScope.GetCachedInstance(ComponentModel model, ScopedInstanceActivationCallback createInstance)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Scoped.Fakes.ShimDefaultLifetimeScope.StaticConstructor">
            <summary>Sets the shim of DefaultLifetimeScope.DefaultLifetimeScope()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Scoped.Fakes.ShimDefaultLifetimeScope._cctorb__0Burden">
            <summary>Sets the shim of DefaultLifetimeScope.&lt;.cctor&gt;b__0(Burden param0)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Lifestyle.Scoped.Fakes.ShimDefaultLifetimeScope.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Scoped.Fakes.ShimDefaultLifetimeScope.AllInstances.Dispose">
            <summary>Sets the shim of DefaultLifetimeScope.Dispose()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Scoped.Fakes.ShimDefaultLifetimeScope.AllInstances.GetCachedInstanceComponentModelScopedInstanceActivationCallback">
            <summary>Sets the shim of DefaultLifetimeScope.GetCachedInstance(ComponentModel model, ScopedInstanceActivationCallback createInstance)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Lifestyle.Scoped.Fakes.ShimScopeCache">
            <summary>Shim type of Castle.MicroKernel.Lifestyle.Scoped.ScopeCache</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Scoped.Fakes.ShimScopeCache.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Scoped.Fakes.ShimScopeCache.#ctor(Castle.MicroKernel.Lifestyle.Scoped.ScopeCache)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Scoped.Fakes.ShimScopeCache.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Scoped.Fakes.ShimScopeCache.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Scoped.Fakes.ShimScopeCache.Bind(Castle.MicroKernel.Lifestyle.Scoped.IScopeCache)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Scoped.Fakes.ShimScopeCache.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Scoped.Fakes.ShimScopeCache.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Scoped.Fakes.ShimScopeCache.Constructor">
            <summary>Sets the shim of ScopeCache.ScopeCache()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Scoped.Fakes.ShimScopeCache.Dispose">
            <summary>Sets the shim of ScopeCache.Dispose()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Scoped.Fakes.ShimScopeCache.ItemGetObject">
            <summary>Sets the shim of ScopeCache.get_Item(Object id)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Scoped.Fakes.ShimScopeCache.ItemSetObjectBurden">
            <summary>Sets the shim of ScopeCache.set_Item(Object id, Burden value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Scoped.Fakes.ShimScopeCache._Disposeb__0Burden">
            <summary>Sets the shim of ScopeCache.&lt;Dispose&gt;b__0(Burden b)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Lifestyle.Scoped.Fakes.ShimScopeCache.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Scoped.Fakes.ShimScopeCache.AllInstances.Dispose">
            <summary>Sets the shim of ScopeCache.Dispose()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Scoped.Fakes.ShimScopeCache.AllInstances.ItemGetObject">
            <summary>Sets the shim of ScopeCache.get_Item(Object id)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Scoped.Fakes.ShimScopeCache.AllInstances.ItemSetObjectBurden">
            <summary>Sets the shim of ScopeCache.set_Item(Object id, Burden value)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Lifestyle.Scoped.Fakes.StubCallContextLifetimeScope">
            <summary>Stub type of Castle.MicroKernel.Lifestyle.Scoped.CallContextLifetimeScope</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Scoped.Fakes.StubCallContextLifetimeScope.#ctor(Castle.MicroKernel.IKernel)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Scoped.Fakes.StubCallContextLifetimeScope.#ctor(Castle.Windsor.IWindsorContainer)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Scoped.Fakes.StubCallContextLifetimeScope.InitializeStub">
            <summary>Initializes a new instance of type StubCallContextLifetimeScope</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Scoped.Fakes.StubCallContextLifetimeScope.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Scoped.Fakes.StubCallContextLifetimeScope.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Scoped.Fakes.StubCallContextLifetimeScope.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.Lifestyle.Scoped.Fakes.StubCreationContextScopeAccessor">
            <summary>Stub type of Castle.MicroKernel.Lifestyle.Scoped.CreationContextScopeAccessor</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Scoped.Fakes.StubCreationContextScopeAccessor.#ctor(Castle.Core.ComponentModel,System.Func{Castle.MicroKernel.IHandler[],Castle.MicroKernel.IHandler})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Scoped.Fakes.StubCreationContextScopeAccessor.InitializeStub">
            <summary>Initializes a new instance of type StubCreationContextScopeAccessor</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Scoped.Fakes.StubCreationContextScopeAccessor.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Scoped.Fakes.StubCreationContextScopeAccessor.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Scoped.Fakes.StubCreationContextScopeAccessor.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.Lifestyle.Scoped.Fakes.StubDefaultLifetimeScope">
            <summary>Stub type of Castle.MicroKernel.Lifestyle.Scoped.DefaultLifetimeScope</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Scoped.Fakes.StubDefaultLifetimeScope.#ctor(Castle.MicroKernel.Lifestyle.Scoped.IScopeCache,System.Action{Castle.MicroKernel.Burden})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Scoped.Fakes.StubDefaultLifetimeScope.InitializeStub">
            <summary>Initializes a new instance of type StubDefaultLifetimeScope</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Scoped.Fakes.StubDefaultLifetimeScope.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Scoped.Fakes.StubDefaultLifetimeScope.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Scoped.Fakes.StubDefaultLifetimeScope.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.Lifestyle.Scoped.Fakes.StubILifetimeScope">
            <summary>Stub type of Castle.MicroKernel.Lifestyle.Scoped.ILifetimeScope</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Scoped.Fakes.StubILifetimeScope.#ctor">
            <summary>Initializes a new instance of type StubILifetimeScope</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Scoped.Fakes.StubILifetimeScope.cw::Castle#MicroKernel#Lifestyle#Scoped#ILifetimeScope#GetCachedInstance(Castle.Core.ComponentModel,Castle.MicroKernel.Lifestyle.Scoped.ScopedInstanceActivationCallback)">
            <summary>Sets the stub of ILifetimeScope.GetCachedInstance(ComponentModel model, ScopedInstanceActivationCallback createInstance)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Scoped.Fakes.StubILifetimeScope.Dispose">
            <summary>Sets the stub of IDisposable.Dispose()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Scoped.Fakes.StubILifetimeScope.GetCachedInstanceComponentModelScopedInstanceActivationCallback">
            <summary>Sets the stub of ILifetimeScope.GetCachedInstance(ComponentModel model, ScopedInstanceActivationCallback createInstance)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Scoped.Fakes.StubILifetimeScope.global::System#IDisposable#Dispose">
            <summary>Sets the stub of IDisposable.Dispose()</summary>
        </member>
        <member name="T:Castle.MicroKernel.Lifestyle.Scoped.Fakes.StubIScopeAccessor">
            <summary>Stub type of Castle.MicroKernel.Lifestyle.Scoped.IScopeAccessor</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Scoped.Fakes.StubIScopeAccessor.#ctor">
            <summary>Initializes a new instance of type StubIScopeAccessor</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Scoped.Fakes.StubIScopeAccessor.cw::Castle#MicroKernel#Lifestyle#Scoped#IScopeAccessor#GetScope(Castle.MicroKernel.Context.CreationContext)">
            <summary>Sets the stub of IScopeAccessor.GetScope(CreationContext context)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Scoped.Fakes.StubIScopeAccessor.Dispose">
            <summary>Sets the stub of IDisposable.Dispose()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Scoped.Fakes.StubIScopeAccessor.GetScopeCreationContext">
            <summary>Sets the stub of IScopeAccessor.GetScope(CreationContext context)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Scoped.Fakes.StubIScopeAccessor.global::System#IDisposable#Dispose">
            <summary>Sets the stub of IDisposable.Dispose()</summary>
        </member>
        <member name="T:Castle.MicroKernel.Lifestyle.Scoped.Fakes.StubIScopeCache">
            <summary>Stub type of Castle.MicroKernel.Lifestyle.Scoped.IScopeCache</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Scoped.Fakes.StubIScopeCache.#ctor">
            <summary>Initializes a new instance of type StubIScopeCache</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Scoped.Fakes.StubIScopeCache.ItemGetObject">
            <summary>Sets the stub of IScopeCache.get_Item(Object id)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Scoped.Fakes.StubIScopeCache.ItemSetObjectBurden">
            <summary>Sets the stub of IScopeCache.set_Item(Object id, Burden value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Scoped.Fakes.StubIScopeCache.Castle#MicroKernel#Lifestyle#Scoped#IScopeCache#Item(System.Object)">
            <summary>Sets the stub of IScopeCache.get_Item(Object id)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Lifestyle.Scoped.Fakes.StubScopeCache">
            <summary>Stub type of Castle.MicroKernel.Lifestyle.Scoped.ScopeCache</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Scoped.Fakes.StubScopeCache.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Scoped.Fakes.StubScopeCache.InitializeStub">
            <summary>Initializes a new instance of type StubScopeCache</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Scoped.Fakes.StubScopeCache.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Scoped.Fakes.StubScopeCache.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Scoped.Fakes.StubScopeCache.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimAbstractOverwriteableDescriptor`1">
            <summary>Shim type of Castle.MicroKernel.ModelBuilder.Descriptors.AbstractOverwriteableDescriptor`1</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimAbstractOverwriteableDescriptor`1.#ctor(Castle.MicroKernel.ModelBuilder.Descriptors.AbstractOverwriteableDescriptor{`0})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimAbstractOverwriteableDescriptor`1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimAbstractOverwriteableDescriptor`1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimAbstractOverwriteableDescriptor`1.Bind(Castle.MicroKernel.ModelBuilder.IComponentModelDescriptor)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimAbstractOverwriteableDescriptor`1.ApplyToConfigurationIKernelIConfiguration">
            <summary>Sets the shim of AbstractOverwriteableDescriptor`1.ApplyToConfiguration(IKernel kernel, IConfiguration configuration)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimAbstractOverwriteableDescriptor`1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimAbstractOverwriteableDescriptor`1.BuildComponentModelIKernelComponentModel">
            <summary>Sets the shim of AbstractOverwriteableDescriptor`1.BuildComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimAbstractOverwriteableDescriptor`1.ConfigureComponentModelIKernelComponentModel">
            <summary>Sets the shim of AbstractOverwriteableDescriptor`1.ConfigureComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimAbstractOverwriteableDescriptor`1.Constructor">
            <summary>Sets the shim of AbstractOverwriteableDescriptor`1.AbstractOverwriteableDescriptor`1()</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimAbstractOverwriteableDescriptor`1.IsOverWriteGet">
            <summary>Sets the shim of AbstractOverwriteableDescriptor`1.get_IsOverWrite()</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimAbstractOverwriteableDescriptor`1.RegistrationGet">
            <summary>Sets the shim of AbstractOverwriteableDescriptor`1.get_Registration()</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimAbstractOverwriteableDescriptor`1.RegistrationSetComponentRegistrationOfT0">
            <summary>Sets the shim of AbstractOverwriteableDescriptor`1.set_Registration(ComponentRegistration`1&lt;!0&gt; value)</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimAbstractOverwriteableDescriptor`1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimAbstractOverwriteableDescriptor`1.AllInstances.ApplyToConfigurationIKernelIConfiguration">
            <summary>Sets the shim of AbstractOverwriteableDescriptor`1.ApplyToConfiguration(IKernel kernel, IConfiguration configuration)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimAbstractOverwriteableDescriptor`1.AllInstances.BuildComponentModelIKernelComponentModel">
            <summary>Sets the shim of AbstractOverwriteableDescriptor`1.BuildComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimAbstractOverwriteableDescriptor`1.AllInstances.ConfigureComponentModelIKernelComponentModel">
            <summary>Sets the shim of AbstractOverwriteableDescriptor`1.ConfigureComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimAbstractOverwriteableDescriptor`1.AllInstances.IsOverWriteGet">
            <summary>Sets the shim of AbstractOverwriteableDescriptor`1.get_IsOverWrite()</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimAbstractOverwriteableDescriptor`1.AllInstances.RegistrationGet">
            <summary>Sets the shim of AbstractOverwriteableDescriptor`1.get_Registration()</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimAbstractOverwriteableDescriptor`1.AllInstances.RegistrationSetComponentRegistrationOfT0">
            <summary>Sets the shim of AbstractOverwriteableDescriptor`1.set_Registration(ComponentRegistration`1&lt;!0&gt; value)</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimAbstractPropertyDescriptor">
            <summary>Shim type of Castle.MicroKernel.ModelBuilder.Descriptors.AbstractPropertyDescriptor</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimAbstractPropertyDescriptor.#ctor(Castle.MicroKernel.ModelBuilder.Descriptors.AbstractPropertyDescriptor)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimAbstractPropertyDescriptor.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimAbstractPropertyDescriptor.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimAbstractPropertyDescriptor.Bind(Castle.MicroKernel.ModelBuilder.IComponentModelDescriptor)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimAbstractPropertyDescriptor.AddParameterComponentModelStringIConfiguration">
            <summary>Sets the shim of AbstractPropertyDescriptor.AddParameter(ComponentModel model, String name, IConfiguration value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimAbstractPropertyDescriptor.AddParameterComponentModelStringString">
            <summary>Sets the shim of AbstractPropertyDescriptor.AddParameter(ComponentModel model, String name, String value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimAbstractPropertyDescriptor.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimAbstractPropertyDescriptor.ConfigureComponentModelIKernelComponentModel">
            <summary>Sets the shim of AbstractPropertyDescriptor.ConfigureComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimAbstractPropertyDescriptor.Constructor">
            <summary>Sets the shim of AbstractPropertyDescriptor.AbstractPropertyDescriptor()</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimAbstractPropertyDescriptor.EnsureParametersConfigurationComponentModel">
            <summary>Sets the shim of AbstractPropertyDescriptor.EnsureParametersConfiguration(ComponentModel model)</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimAbstractPropertyDescriptor.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimAbstractPropertyDescriptor.AllInstances.AddParameterComponentModelStringIConfiguration">
            <summary>Sets the shim of AbstractPropertyDescriptor.AddParameter(ComponentModel model, String name, IConfiguration value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimAbstractPropertyDescriptor.AllInstances.AddParameterComponentModelStringString">
            <summary>Sets the shim of AbstractPropertyDescriptor.AddParameter(ComponentModel model, String name, String value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimAbstractPropertyDescriptor.AllInstances.ConfigureComponentModelIKernelComponentModel">
            <summary>Sets the shim of AbstractPropertyDescriptor.ConfigureComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimAbstractPropertyDescriptor.AllInstances.EnsureParametersConfigurationComponentModel">
            <summary>Sets the shim of AbstractPropertyDescriptor.EnsureParametersConfiguration(ComponentModel model)</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimAttributeDescriptor`1">
            <summary>Shim type of Castle.MicroKernel.ModelBuilder.Descriptors.AttributeDescriptor`1</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimAttributeDescriptor`1.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimAttributeDescriptor`1.#ctor(Castle.MicroKernel.ModelBuilder.Descriptors.AttributeDescriptor{`0})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimAttributeDescriptor`1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimAttributeDescriptor`1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimAttributeDescriptor`1.Bind(Castle.MicroKernel.ModelBuilder.IComponentModelDescriptor)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimAttributeDescriptor`1.ApplyToConfigurationIKernelIConfiguration">
            <summary>Sets the shim of AttributeDescriptor`1.ApplyToConfiguration(IKernel kernel, IConfiguration configuration)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimAttributeDescriptor`1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimAttributeDescriptor`1.ConstructorStringString">
            <summary>Sets the shim of AttributeDescriptor`1.AttributeDescriptor`1(String name, String value)</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimAttributeDescriptor`1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimAttributeDescriptor`1.AllInstances.ApplyToConfigurationIKernelIConfiguration">
            <summary>Sets the shim of AttributeDescriptor`1.ApplyToConfiguration(IKernel kernel, IConfiguration configuration)</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimAttributeKeyDescriptor`1">
            <summary>Shim type of Castle.MicroKernel.ModelBuilder.Descriptors.AttributeKeyDescriptor`1</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimAttributeKeyDescriptor`1.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimAttributeKeyDescriptor`1.#ctor(Castle.MicroKernel.ModelBuilder.Descriptors.AttributeKeyDescriptor{`0})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimAttributeKeyDescriptor`1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimAttributeKeyDescriptor`1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimAttributeKeyDescriptor`1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimAttributeKeyDescriptor`1.ConstructorComponentRegistrationOfT0String">
            <summary>Sets the shim of AttributeKeyDescriptor`1.AttributeKeyDescriptor`1(ComponentRegistration`1&lt;!0&gt; component, String name)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimAttributeKeyDescriptor`1.EqObject">
            <summary>Sets the shim of AttributeKeyDescriptor`1.Eq(Object value)</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimAttributeKeyDescriptor`1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimAttributeKeyDescriptor`1.AllInstances.EqObject">
            <summary>Sets the shim of AttributeKeyDescriptor`1.Eq(Object value)</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimConfigurationDescriptor">
            <summary>Shim type of Castle.MicroKernel.ModelBuilder.Descriptors.ConfigurationDescriptor</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimConfigurationDescriptor.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimConfigurationDescriptor.#ctor(Castle.MicroKernel.ModelBuilder.Descriptors.ConfigurationDescriptor)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimConfigurationDescriptor.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimConfigurationDescriptor.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimConfigurationDescriptor.Bind(Castle.MicroKernel.ModelBuilder.IComponentModelDescriptor)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimConfigurationDescriptor.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimConfigurationDescriptor.BuildComponentModelIKernelComponentModel">
            <summary>Sets the shim of ConfigurationDescriptor.BuildComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimConfigurationDescriptor.ConfigureComponentModelIKernelComponentModel">
            <summary>Sets the shim of ConfigurationDescriptor.ConfigureComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimConfigurationDescriptor.ConstructorIConfiguration">
            <summary>Sets the shim of ConfigurationDescriptor.ConfigurationDescriptor(IConfiguration configuration)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimConfigurationDescriptor.ConstructorNodeArray">
            <summary>Sets the shim of ConfigurationDescriptor.ConfigurationDescriptor(Node[] configNodes)</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimConfigurationDescriptor.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimConfigurationDescriptor.AllInstances.BuildComponentModelIKernelComponentModel">
            <summary>Sets the shim of ConfigurationDescriptor.BuildComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimConfigurationDescriptor.AllInstances.ConfigureComponentModelIKernelComponentModel">
            <summary>Sets the shim of ConfigurationDescriptor.ConfigureComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimCustomDependencyDescriptor">
            <summary>Shim type of Castle.MicroKernel.ModelBuilder.Descriptors.CustomDependencyDescriptor</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimCustomDependencyDescriptor.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimCustomDependencyDescriptor.#ctor(Castle.MicroKernel.ModelBuilder.Descriptors.CustomDependencyDescriptor)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimCustomDependencyDescriptor.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimCustomDependencyDescriptor.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimCustomDependencyDescriptor.Bind(Castle.MicroKernel.ModelBuilder.IComponentModelDescriptor)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimCustomDependencyDescriptor.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimCustomDependencyDescriptor.BuildComponentModelIKernelComponentModel">
            <summary>Sets the shim of CustomDependencyDescriptor.BuildComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimCustomDependencyDescriptor.ConfigureComponentModelIKernelComponentModel">
            <summary>Sets the shim of CustomDependencyDescriptor.ConfigureComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimCustomDependencyDescriptor.ConstructorIDictionary">
            <summary>Sets the shim of CustomDependencyDescriptor.CustomDependencyDescriptor(IDictionary dictionary)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimCustomDependencyDescriptor.ConstructorPropertyArray">
            <summary>Sets the shim of CustomDependencyDescriptor.CustomDependencyDescriptor(Property[] properties)</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimCustomDependencyDescriptor.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimCustomDependencyDescriptor.AllInstances.BuildComponentModelIKernelComponentModel">
            <summary>Sets the shim of CustomDependencyDescriptor.BuildComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimCustomDependencyDescriptor.AllInstances.ConfigureComponentModelIKernelComponentModel">
            <summary>Sets the shim of CustomDependencyDescriptor.ConfigureComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimDefaultsDescriptor">
            <summary>Shim type of Castle.MicroKernel.ModelBuilder.Descriptors.DefaultsDescriptor</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimDefaultsDescriptor.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimDefaultsDescriptor.#ctor(Castle.MicroKernel.ModelBuilder.Descriptors.DefaultsDescriptor)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimDefaultsDescriptor.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimDefaultsDescriptor.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimDefaultsDescriptor.Bind(Castle.MicroKernel.ModelBuilder.IComponentModelDescriptor)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimDefaultsDescriptor.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimDefaultsDescriptor.BuildComponentModelIKernelComponentModel">
            <summary>Sets the shim of DefaultsDescriptor.BuildComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimDefaultsDescriptor.ConfigureComponentModelIKernelComponentModel">
            <summary>Sets the shim of DefaultsDescriptor.ConfigureComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimDefaultsDescriptor.ConstructorComponentNameType">
            <summary>Sets the shim of DefaultsDescriptor.DefaultsDescriptor(ComponentName name, Type implementation)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimDefaultsDescriptor.EnsureComponentConfigurationIKernelComponentModel">
            <summary>Sets the shim of DefaultsDescriptor.EnsureComponentConfiguration(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimDefaultsDescriptor.EnsureComponentNameComponentModel">
            <summary>Sets the shim of DefaultsDescriptor.EnsureComponentName(ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimDefaultsDescriptor.FirstServiceComponentModel">
            <summary>Sets the shim of DefaultsDescriptor.FirstService(ComponentModel model)</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimDefaultsDescriptor.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimDefaultsDescriptor.AllInstances.BuildComponentModelIKernelComponentModel">
            <summary>Sets the shim of DefaultsDescriptor.BuildComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimDefaultsDescriptor.AllInstances.ConfigureComponentModelIKernelComponentModel">
            <summary>Sets the shim of DefaultsDescriptor.ConfigureComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimDefaultsDescriptor.AllInstances.EnsureComponentConfigurationIKernelComponentModel">
            <summary>Sets the shim of DefaultsDescriptor.EnsureComponentConfiguration(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimDefaultsDescriptor.AllInstances.EnsureComponentNameComponentModel">
            <summary>Sets the shim of DefaultsDescriptor.EnsureComponentName(ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimDefaultsDescriptor.AllInstances.FirstServiceComponentModel">
            <summary>Sets the shim of DefaultsDescriptor.FirstService(ComponentModel model)</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimDelegatingModelDescriptor">
            <summary>Shim type of Castle.MicroKernel.ModelBuilder.Descriptors.DelegatingModelDescriptor</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimDelegatingModelDescriptor.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimDelegatingModelDescriptor.#ctor(Castle.MicroKernel.ModelBuilder.Descriptors.DelegatingModelDescriptor)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimDelegatingModelDescriptor.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimDelegatingModelDescriptor.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimDelegatingModelDescriptor.Bind(Castle.MicroKernel.ModelBuilder.IComponentModelDescriptor)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimDelegatingModelDescriptor.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimDelegatingModelDescriptor.BuildComponentModelIKernelComponentModel">
            <summary>Sets the shim of DelegatingModelDescriptor.BuildComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimDelegatingModelDescriptor.ConfigureComponentModelIKernelComponentModel">
            <summary>Sets the shim of DelegatingModelDescriptor.ConfigureComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimDelegatingModelDescriptor.ConstructorActionOfIKernelComponentModelActionOfIKernelComponentModel">
            <summary>Sets the shim of DelegatingModelDescriptor.DelegatingModelDescriptor(Action`2&lt;IKernel,ComponentModel&gt; builder, Action`2&lt;IKernel,ComponentModel&gt; configurer)</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimDelegatingModelDescriptor.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimDelegatingModelDescriptor.AllInstances.BuildComponentModelIKernelComponentModel">
            <summary>Sets the shim of DelegatingModelDescriptor.BuildComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimDelegatingModelDescriptor.AllInstances.ConfigureComponentModelIKernelComponentModel">
            <summary>Sets the shim of DelegatingModelDescriptor.ConfigureComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimDynamicParametersDescriptor">
            <summary>Shim type of Castle.MicroKernel.ModelBuilder.Descriptors.DynamicParametersDescriptor</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimDynamicParametersDescriptor.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimDynamicParametersDescriptor.#ctor(Castle.MicroKernel.ModelBuilder.Descriptors.DynamicParametersDescriptor)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimDynamicParametersDescriptor.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimDynamicParametersDescriptor.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimDynamicParametersDescriptor.Bind(Castle.MicroKernel.ModelBuilder.IComponentModelDescriptor)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimDynamicParametersDescriptor.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimDynamicParametersDescriptor.BuildComponentModelIKernelComponentModel">
            <summary>Sets the shim of DynamicParametersDescriptor.BuildComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimDynamicParametersDescriptor.ConfigureComponentModelIKernelComponentModel">
            <summary>Sets the shim of DynamicParametersDescriptor.ConfigureComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimDynamicParametersDescriptor.ConstructorDynamicParametersWithContextResolveDelegate">
            <summary>Sets the shim of DynamicParametersDescriptor.DynamicParametersDescriptor(DynamicParametersWithContextResolveDelegate resolve)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimDynamicParametersDescriptor.GetDynamicParametersExtensionComponentModel">
            <summary>Sets the shim of DynamicParametersDescriptor.GetDynamicParametersExtension(ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimDynamicParametersDescriptor.StaticConstructor">
            <summary>Sets the shim of DynamicParametersDescriptor.DynamicParametersDescriptor()</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimDynamicParametersDescriptor._BuildComponentModelb__0IKernelCreationContext">
            <summary>Sets the shim of DynamicParametersDescriptor.&lt;BuildComponentModel&gt;b__0(IKernel k, CreationContext c)</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimDynamicParametersDescriptor.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimDynamicParametersDescriptor.AllInstances.BuildComponentModelIKernelComponentModel">
            <summary>Sets the shim of DynamicParametersDescriptor.BuildComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimDynamicParametersDescriptor.AllInstances.ConfigureComponentModelIKernelComponentModel">
            <summary>Sets the shim of DynamicParametersDescriptor.ConfigureComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimDynamicParametersDescriptor.AllInstances.GetDynamicParametersExtensionComponentModel">
            <summary>Sets the shim of DynamicParametersDescriptor.GetDynamicParametersExtension(ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimDynamicParametersDescriptor.AllInstances._BuildComponentModelb__0IKernelCreationContext">
            <summary>Sets the shim of DynamicParametersDescriptor.&lt;BuildComponentModel&gt;b__0(IKernel k, CreationContext c)</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimExtendedPropertiesDescriptor">
            <summary>Shim type of Castle.MicroKernel.ModelBuilder.Descriptors.ExtendedPropertiesDescriptor</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimExtendedPropertiesDescriptor.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimExtendedPropertiesDescriptor.#ctor(Castle.MicroKernel.ModelBuilder.Descriptors.ExtendedPropertiesDescriptor)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimExtendedPropertiesDescriptor.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimExtendedPropertiesDescriptor.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimExtendedPropertiesDescriptor.Bind(Castle.MicroKernel.ModelBuilder.IComponentModelDescriptor)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimExtendedPropertiesDescriptor.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimExtendedPropertiesDescriptor.BuildComponentModelIKernelComponentModel">
            <summary>Sets the shim of ExtendedPropertiesDescriptor.BuildComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimExtendedPropertiesDescriptor.ConfigureComponentModelIKernelComponentModel">
            <summary>Sets the shim of ExtendedPropertiesDescriptor.ConfigureComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimExtendedPropertiesDescriptor.ConstructorIDictionary">
            <summary>Sets the shim of ExtendedPropertiesDescriptor.ExtendedPropertiesDescriptor(IDictionary dictionary)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimExtendedPropertiesDescriptor.ConstructorPropertyArray">
            <summary>Sets the shim of ExtendedPropertiesDescriptor.ExtendedPropertiesDescriptor(Property[] properties)</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimExtendedPropertiesDescriptor.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimExtendedPropertiesDescriptor.AllInstances.BuildComponentModelIKernelComponentModel">
            <summary>Sets the shim of ExtendedPropertiesDescriptor.BuildComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimExtendedPropertiesDescriptor.AllInstances.ConfigureComponentModelIKernelComponentModel">
            <summary>Sets the shim of ExtendedPropertiesDescriptor.ConfigureComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimInterceptorDescriptor">
            <summary>Shim type of Castle.MicroKernel.ModelBuilder.Descriptors.InterceptorDescriptor</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimInterceptorDescriptor.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimInterceptorDescriptor.#ctor(Castle.MicroKernel.ModelBuilder.Descriptors.InterceptorDescriptor)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimInterceptorDescriptor.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimInterceptorDescriptor.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimInterceptorDescriptor.Bind(Castle.MicroKernel.ModelBuilder.IComponentModelDescriptor)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimInterceptorDescriptor.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimInterceptorDescriptor.BuildComponentModelIKernelComponentModel">
            <summary>Sets the shim of InterceptorDescriptor.BuildComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimInterceptorDescriptor.ConfigureComponentModelIKernelComponentModel">
            <summary>Sets the shim of InterceptorDescriptor.ConfigureComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimInterceptorDescriptor.ConstructorInterceptorReferenceArray">
            <summary>Sets the shim of InterceptorDescriptor.InterceptorDescriptor(InterceptorReference[] interceptors)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimInterceptorDescriptor.ConstructorInterceptorReferenceArrayInt32">
            <summary>Sets the shim of InterceptorDescriptor.InterceptorDescriptor(InterceptorReference[] interceptors, Int32 insertIndex)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimInterceptorDescriptor.ConstructorInterceptorReferenceArrayInterceptorDescriptorWhere">
            <summary>Sets the shim of InterceptorDescriptor.InterceptorDescriptor(InterceptorReference[] interceptors, Where where)</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimInterceptorDescriptor.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimInterceptorDescriptor.AllInstances.BuildComponentModelIKernelComponentModel">
            <summary>Sets the shim of InterceptorDescriptor.BuildComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimInterceptorDescriptor.AllInstances.ConfigureComponentModelIKernelComponentModel">
            <summary>Sets the shim of InterceptorDescriptor.ConfigureComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimInterceptorSelectorDescriptor">
            <summary>Shim type of Castle.MicroKernel.ModelBuilder.Descriptors.InterceptorSelectorDescriptor</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimInterceptorSelectorDescriptor.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimInterceptorSelectorDescriptor.#ctor(Castle.MicroKernel.ModelBuilder.Descriptors.InterceptorSelectorDescriptor)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimInterceptorSelectorDescriptor.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimInterceptorSelectorDescriptor.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimInterceptorSelectorDescriptor.Bind(Castle.MicroKernel.ModelBuilder.IComponentModelDescriptor)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimInterceptorSelectorDescriptor.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimInterceptorSelectorDescriptor.BuildComponentModelIKernelComponentModel">
            <summary>Sets the shim of InterceptorSelectorDescriptor.BuildComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimInterceptorSelectorDescriptor.ConfigureComponentModelIKernelComponentModel">
            <summary>Sets the shim of InterceptorSelectorDescriptor.ConfigureComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimInterceptorSelectorDescriptor.ConstructorIReferenceOfIInterceptorSelector">
            <summary>Sets the shim of InterceptorSelectorDescriptor.InterceptorSelectorDescriptor(IReference`1&lt;IInterceptorSelector&gt; selector)</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimInterceptorSelectorDescriptor.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimInterceptorSelectorDescriptor.AllInstances.BuildComponentModelIKernelComponentModel">
            <summary>Sets the shim of InterceptorSelectorDescriptor.BuildComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimInterceptorSelectorDescriptor.AllInstances.ConfigureComponentModelIKernelComponentModel">
            <summary>Sets the shim of InterceptorSelectorDescriptor.ConfigureComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimLifestyleDescriptor`1">
            <summary>Shim type of Castle.MicroKernel.ModelBuilder.Descriptors.LifestyleDescriptor`1</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimLifestyleDescriptor`1.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimLifestyleDescriptor`1.#ctor(Castle.MicroKernel.ModelBuilder.Descriptors.LifestyleDescriptor{`0})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimLifestyleDescriptor`1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimLifestyleDescriptor`1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimLifestyleDescriptor`1.Bind(Castle.MicroKernel.ModelBuilder.IComponentModelDescriptor)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimLifestyleDescriptor`1.ApplyToConfigurationIKernelIConfiguration">
            <summary>Sets the shim of LifestyleDescriptor`1.ApplyToConfiguration(IKernel kernel, IConfiguration configuration)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimLifestyleDescriptor`1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimLifestyleDescriptor`1.ConstructorLifestyleType">
            <summary>Sets the shim of LifestyleDescriptor`1.LifestyleDescriptor`1(LifestyleType lifestyle)</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimLifestyleDescriptor`1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimLifestyleDescriptor`1.AllInstances.ApplyToConfigurationIKernelIConfiguration">
            <summary>Sets the shim of LifestyleDescriptor`1.ApplyToConfiguration(IKernel kernel, IConfiguration configuration)</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimOnCreateComponentDescriptor`1">
            <summary>Shim type of Castle.MicroKernel.ModelBuilder.Descriptors.OnCreateComponentDescriptor`1</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimOnCreateComponentDescriptor`1.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimOnCreateComponentDescriptor`1.#ctor(Castle.MicroKernel.ModelBuilder.Descriptors.OnCreateComponentDescriptor{`0})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimOnCreateComponentDescriptor`1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimOnCreateComponentDescriptor`1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimOnCreateComponentDescriptor`1.Bind(Castle.MicroKernel.ModelBuilder.IComponentModelDescriptor)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimOnCreateComponentDescriptor`1.Bind(Castle.MicroKernel.ModelBuilder.IMetaComponentModelDescriptor)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimOnCreateComponentDescriptor`1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimOnCreateComponentDescriptor`1.BuildComponentModelIKernelComponentModel">
            <summary>Sets the shim of OnCreateComponentDescriptor`1.BuildComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimOnCreateComponentDescriptor`1.ConfigureComponentModelIKernelComponentModel">
            <summary>Sets the shim of OnCreateComponentDescriptor`1.ConfigureComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimOnCreateComponentDescriptor`1.ConstructorLifecycleActionDelegateOfT0">
            <summary>Sets the shim of OnCreateComponentDescriptor`1.OnCreateComponentDescriptor`1(LifecycleActionDelegate`1&lt;!0&gt; action)</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimOnCreateComponentDescriptor`1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimOnCreateComponentDescriptor`1.AllInstances.BuildComponentModelIKernelComponentModel">
            <summary>Sets the shim of OnCreateComponentDescriptor`1.BuildComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimOnCreateComponentDescriptor`1.AllInstances.ConfigureComponentModelIKernelComponentModel">
            <summary>Sets the shim of OnCreateComponentDescriptor`1.ConfigureComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimOnDestroyComponentDescriptor`1">
            <summary>Shim type of Castle.MicroKernel.ModelBuilder.Descriptors.OnDestroyComponentDescriptor`1</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimOnDestroyComponentDescriptor`1.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimOnDestroyComponentDescriptor`1.#ctor(Castle.MicroKernel.ModelBuilder.Descriptors.OnDestroyComponentDescriptor{`0})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimOnDestroyComponentDescriptor`1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimOnDestroyComponentDescriptor`1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimOnDestroyComponentDescriptor`1.Bind(Castle.MicroKernel.ModelBuilder.IComponentModelDescriptor)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimOnDestroyComponentDescriptor`1.Bind(Castle.MicroKernel.ModelBuilder.IMetaComponentModelDescriptor)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimOnDestroyComponentDescriptor`1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimOnDestroyComponentDescriptor`1.BuildComponentModelIKernelComponentModel">
            <summary>Sets the shim of OnDestroyComponentDescriptor`1.BuildComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimOnDestroyComponentDescriptor`1.ConfigureComponentModelIKernelComponentModel">
            <summary>Sets the shim of OnDestroyComponentDescriptor`1.ConfigureComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimOnDestroyComponentDescriptor`1.ConstructorLifecycleActionDelegateOfT0">
            <summary>Sets the shim of OnDestroyComponentDescriptor`1.OnDestroyComponentDescriptor`1(LifecycleActionDelegate`1&lt;!0&gt; action)</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimOnDestroyComponentDescriptor`1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimOnDestroyComponentDescriptor`1.AllInstances.BuildComponentModelIKernelComponentModel">
            <summary>Sets the shim of OnDestroyComponentDescriptor`1.BuildComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimOnDestroyComponentDescriptor`1.AllInstances.ConfigureComponentModelIKernelComponentModel">
            <summary>Sets the shim of OnDestroyComponentDescriptor`1.ConfigureComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimParametersDescriptor">
            <summary>Shim type of Castle.MicroKernel.ModelBuilder.Descriptors.ParametersDescriptor</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimParametersDescriptor.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimParametersDescriptor.#ctor(Castle.MicroKernel.ModelBuilder.Descriptors.ParametersDescriptor)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimParametersDescriptor.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimParametersDescriptor.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimParametersDescriptor.Bind(Castle.MicroKernel.ModelBuilder.IComponentModelDescriptor)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimParametersDescriptor.ApplyComponentModelParameter">
            <summary>Sets the shim of ParametersDescriptor.Apply(ComponentModel model, Parameter parameter)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimParametersDescriptor.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimParametersDescriptor.BuildComponentModelIKernelComponentModel">
            <summary>Sets the shim of ParametersDescriptor.BuildComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimParametersDescriptor.ConstructorParameterArray">
            <summary>Sets the shim of ParametersDescriptor.ParametersDescriptor(Parameter[] parameters)</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimParametersDescriptor.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimParametersDescriptor.AllInstances.ApplyComponentModelParameter">
            <summary>Sets the shim of ParametersDescriptor.Apply(ComponentModel model, Parameter parameter)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimParametersDescriptor.AllInstances.BuildComponentModelIKernelComponentModel">
            <summary>Sets the shim of ParametersDescriptor.BuildComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimProxyHookDescriptor">
            <summary>Shim type of Castle.MicroKernel.ModelBuilder.Descriptors.ProxyHookDescriptor</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimProxyHookDescriptor.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimProxyHookDescriptor.#ctor(Castle.MicroKernel.ModelBuilder.Descriptors.ProxyHookDescriptor)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimProxyHookDescriptor.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimProxyHookDescriptor.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimProxyHookDescriptor.Bind(Castle.MicroKernel.ModelBuilder.IComponentModelDescriptor)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimProxyHookDescriptor.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimProxyHookDescriptor.BuildComponentModelIKernelComponentModel">
            <summary>Sets the shim of ProxyHookDescriptor.BuildComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimProxyHookDescriptor.ConfigureComponentModelIKernelComponentModel">
            <summary>Sets the shim of ProxyHookDescriptor.ConfigureComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimProxyHookDescriptor.ConstructorIReferenceOfIProxyGenerationHook">
            <summary>Sets the shim of ProxyHookDescriptor.ProxyHookDescriptor(IReference`1&lt;IProxyGenerationHook&gt; hook)</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimProxyHookDescriptor.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimProxyHookDescriptor.AllInstances.BuildComponentModelIKernelComponentModel">
            <summary>Sets the shim of ProxyHookDescriptor.BuildComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimProxyHookDescriptor.AllInstances.ConfigureComponentModelIKernelComponentModel">
            <summary>Sets the shim of ProxyHookDescriptor.ConfigureComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimProxyInterfacesDescriptor">
            <summary>Shim type of Castle.MicroKernel.ModelBuilder.Descriptors.ProxyInterfacesDescriptor</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimProxyInterfacesDescriptor.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimProxyInterfacesDescriptor.#ctor(Castle.MicroKernel.ModelBuilder.Descriptors.ProxyInterfacesDescriptor)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimProxyInterfacesDescriptor.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimProxyInterfacesDescriptor.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimProxyInterfacesDescriptor.Bind(Castle.MicroKernel.ModelBuilder.IComponentModelDescriptor)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimProxyInterfacesDescriptor.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimProxyInterfacesDescriptor.BuildComponentModelIKernelComponentModel">
            <summary>Sets the shim of ProxyInterfacesDescriptor.BuildComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimProxyInterfacesDescriptor.ConfigureComponentModelIKernelComponentModel">
            <summary>Sets the shim of ProxyInterfacesDescriptor.ConfigureComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimProxyInterfacesDescriptor.ConstructorTypeArray">
            <summary>Sets the shim of ProxyInterfacesDescriptor.ProxyInterfacesDescriptor(Type[] interfaces)</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimProxyInterfacesDescriptor.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimProxyInterfacesDescriptor.AllInstances.BuildComponentModelIKernelComponentModel">
            <summary>Sets the shim of ProxyInterfacesDescriptor.BuildComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimProxyInterfacesDescriptor.AllInstances.ConfigureComponentModelIKernelComponentModel">
            <summary>Sets the shim of ProxyInterfacesDescriptor.ConfigureComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimProxyMixInsDescriptor">
            <summary>Shim type of Castle.MicroKernel.ModelBuilder.Descriptors.ProxyMixInsDescriptor</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimProxyMixInsDescriptor.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimProxyMixInsDescriptor.#ctor(Castle.MicroKernel.ModelBuilder.Descriptors.ProxyMixInsDescriptor)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimProxyMixInsDescriptor.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimProxyMixInsDescriptor.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimProxyMixInsDescriptor.Bind(Castle.MicroKernel.ModelBuilder.IComponentModelDescriptor)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimProxyMixInsDescriptor.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimProxyMixInsDescriptor.BuildComponentModelIKernelComponentModel">
            <summary>Sets the shim of ProxyMixInsDescriptor.BuildComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimProxyMixInsDescriptor.ConfigureComponentModelIKernelComponentModel">
            <summary>Sets the shim of ProxyMixInsDescriptor.ConfigureComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimProxyMixInsDescriptor.ConstructorIEnumerableOfIReferenceOfObject">
            <summary>Sets the shim of ProxyMixInsDescriptor.ProxyMixInsDescriptor(IEnumerable`1&lt;IReference`1&lt;Object&gt;&gt; mixIns)</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimProxyMixInsDescriptor.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimProxyMixInsDescriptor.AllInstances.BuildComponentModelIKernelComponentModel">
            <summary>Sets the shim of ProxyMixInsDescriptor.BuildComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimProxyMixInsDescriptor.AllInstances.ConfigureComponentModelIKernelComponentModel">
            <summary>Sets the shim of ProxyMixInsDescriptor.ConfigureComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimReferenceDependencyDescriptor">
            <summary>Shim type of Castle.MicroKernel.ModelBuilder.Descriptors.ReferenceDependencyDescriptor</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimReferenceDependencyDescriptor.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimReferenceDependencyDescriptor.#ctor(Castle.MicroKernel.ModelBuilder.Descriptors.ReferenceDependencyDescriptor)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimReferenceDependencyDescriptor.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimReferenceDependencyDescriptor.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimReferenceDependencyDescriptor.Bind(Castle.MicroKernel.ModelBuilder.IComponentModelDescriptor)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimReferenceDependencyDescriptor.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimReferenceDependencyDescriptor.BuildComponentModelIKernelComponentModel">
            <summary>Sets the shim of ReferenceDependencyDescriptor.BuildComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimReferenceDependencyDescriptor.ConfigureComponentModelIKernelComponentModel">
            <summary>Sets the shim of ReferenceDependencyDescriptor.ConfigureComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimReferenceDependencyDescriptor.ConstructorIReferenceOfObject">
            <summary>Sets the shim of ReferenceDependencyDescriptor.ReferenceDependencyDescriptor(IReference`1&lt;Object&gt; dependency)</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimReferenceDependencyDescriptor.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimReferenceDependencyDescriptor.AllInstances.BuildComponentModelIKernelComponentModel">
            <summary>Sets the shim of ReferenceDependencyDescriptor.BuildComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimReferenceDependencyDescriptor.AllInstances.ConfigureComponentModelIKernelComponentModel">
            <summary>Sets the shim of ReferenceDependencyDescriptor.ConfigureComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimServiceOverrideDescriptor">
            <summary>Shim type of Castle.MicroKernel.ModelBuilder.Descriptors.ServiceOverrideDescriptor</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimServiceOverrideDescriptor.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimServiceOverrideDescriptor.#ctor(Castle.MicroKernel.ModelBuilder.Descriptors.ServiceOverrideDescriptor)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimServiceOverrideDescriptor.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimServiceOverrideDescriptor.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimServiceOverrideDescriptor.Bind(Castle.MicroKernel.ModelBuilder.IComponentModelDescriptor)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimServiceOverrideDescriptor.ApplyComponentModelObjectObjectServiceOverride">
            <summary>Sets the shim of ServiceOverrideDescriptor.Apply(ComponentModel model, Object dependencyKey, Object dependencyValue, ServiceOverride override)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimServiceOverrideDescriptor.ApplyReferenceListComponentModelObjectIEnumerableOfStringServiceOverride">
            <summary>Sets the shim of ServiceOverrideDescriptor.ApplyReferenceList(ComponentModel model, Object name, IEnumerable`1&lt;String&gt; items, ServiceOverride serviceOverride)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimServiceOverrideDescriptor.ApplySimpleReferenceComponentModelObjectString">
            <summary>Sets the shim of ServiceOverrideDescriptor.ApplySimpleReference(ComponentModel model, Object dependencyName, String componentKey)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimServiceOverrideDescriptor.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimServiceOverrideDescriptor.BuildComponentModelIKernelComponentModel">
            <summary>Sets the shim of ServiceOverrideDescriptor.BuildComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimServiceOverrideDescriptor.ConstructorIDictionary">
            <summary>Sets the shim of ServiceOverrideDescriptor.ServiceOverrideDescriptor(IDictionary dictionary)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimServiceOverrideDescriptor.ConstructorServiceOverrideArray">
            <summary>Sets the shim of ServiceOverrideDescriptor.ServiceOverrideDescriptor(ServiceOverride[] overrides)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimServiceOverrideDescriptor.GetNameStringObject">
            <summary>Sets the shim of ServiceOverrideDescriptor.GetNameString(Object key)</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimServiceOverrideDescriptor.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimServiceOverrideDescriptor.AllInstances.ApplyComponentModelObjectObjectServiceOverride">
            <summary>Sets the shim of ServiceOverrideDescriptor.Apply(ComponentModel model, Object dependencyKey, Object dependencyValue, ServiceOverride override)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimServiceOverrideDescriptor.AllInstances.ApplyReferenceListComponentModelObjectIEnumerableOfStringServiceOverride">
            <summary>Sets the shim of ServiceOverrideDescriptor.ApplyReferenceList(ComponentModel model, Object name, IEnumerable`1&lt;String&gt; items, ServiceOverride serviceOverride)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimServiceOverrideDescriptor.AllInstances.ApplySimpleReferenceComponentModelObjectString">
            <summary>Sets the shim of ServiceOverrideDescriptor.ApplySimpleReference(ComponentModel model, Object dependencyName, String componentKey)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimServiceOverrideDescriptor.AllInstances.BuildComponentModelIKernelComponentModel">
            <summary>Sets the shim of ServiceOverrideDescriptor.BuildComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimServiceOverrideDescriptor.AllInstances.GetNameStringObject">
            <summary>Sets the shim of ServiceOverrideDescriptor.GetNameString(Object key)</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimServicesDescriptor">
            <summary>Shim type of Castle.MicroKernel.ModelBuilder.Descriptors.ServicesDescriptor</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimServicesDescriptor.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimServicesDescriptor.#ctor(Castle.MicroKernel.ModelBuilder.Descriptors.ServicesDescriptor)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimServicesDescriptor.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimServicesDescriptor.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimServicesDescriptor.Bind(Castle.MicroKernel.ModelBuilder.IComponentModelDescriptor)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimServicesDescriptor.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimServicesDescriptor.BuildComponentModelIKernelComponentModel">
            <summary>Sets the shim of ServicesDescriptor.BuildComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimServicesDescriptor.ConfigureComponentModelIKernelComponentModel">
            <summary>Sets the shim of ServicesDescriptor.ConfigureComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimServicesDescriptor.ConstructorTypeArray">
            <summary>Sets the shim of ServicesDescriptor.ServicesDescriptor(Type[] services)</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimServicesDescriptor.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimServicesDescriptor.AllInstances.BuildComponentModelIKernelComponentModel">
            <summary>Sets the shim of ServicesDescriptor.BuildComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.ShimServicesDescriptor.AllInstances.ConfigureComponentModelIKernelComponentModel">
            <summary>Sets the shim of ServicesDescriptor.ConfigureComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubAbstractOverwriteableDescriptor`1">
            <summary>Stub type of Castle.MicroKernel.ModelBuilder.Descriptors.AbstractOverwriteableDescriptor`1</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubAbstractOverwriteableDescriptor`1.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubAbstractOverwriteableDescriptor`1.ApplyToConfiguration(Castle.MicroKernel.IKernel,Castle.Core.Configuration.IConfiguration)">
            <summary>Sets the stub of AbstractOverwriteableDescriptor`1.ApplyToConfiguration(IKernel kernel, IConfiguration configuration)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubAbstractOverwriteableDescriptor`1.ApplyToConfigurationIKernelIConfiguration">
            <summary>Sets the stub of AbstractOverwriteableDescriptor`1.ApplyToConfiguration(IKernel kernel, IConfiguration configuration)</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubAbstractOverwriteableDescriptor`1.BuildComponentModel(Castle.MicroKernel.IKernel,Castle.Core.ComponentModel)">
            <summary>Sets the stub of AbstractOverwriteableDescriptor`1.BuildComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubAbstractOverwriteableDescriptor`1.BuildComponentModelIKernelComponentModel">
            <summary>Sets the stub of AbstractOverwriteableDescriptor`1.BuildComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubAbstractOverwriteableDescriptor`1.ConfigureComponentModel(Castle.MicroKernel.IKernel,Castle.Core.ComponentModel)">
            <summary>Sets the stub of AbstractOverwriteableDescriptor`1.ConfigureComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubAbstractOverwriteableDescriptor`1.ConfigureComponentModelIKernelComponentModel">
            <summary>Sets the stub of AbstractOverwriteableDescriptor`1.ConfigureComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubAbstractOverwriteableDescriptor`1.InitializeStub">
            <summary>Initializes a new instance of type StubAbstractOverwriteableDescriptor</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubAbstractOverwriteableDescriptor`1.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubAbstractOverwriteableDescriptor`1.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubAbstractOverwriteableDescriptor`1.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubAbstractPropertyDescriptor">
            <summary>Stub type of Castle.MicroKernel.ModelBuilder.Descriptors.AbstractPropertyDescriptor</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubAbstractPropertyDescriptor.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubAbstractPropertyDescriptor.BuildComponentModel(Castle.MicroKernel.IKernel,Castle.Core.ComponentModel)">
            <summary>Sets the stub of AbstractPropertyDescriptor.BuildComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubAbstractPropertyDescriptor.BuildComponentModelIKernelComponentModel">
            <summary>Sets the stub of AbstractPropertyDescriptor.BuildComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubAbstractPropertyDescriptor.ConfigureComponentModel(Castle.MicroKernel.IKernel,Castle.Core.ComponentModel)">
            <summary>Sets the stub of AbstractPropertyDescriptor.ConfigureComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubAbstractPropertyDescriptor.ConfigureComponentModelIKernelComponentModel">
            <summary>Sets the stub of AbstractPropertyDescriptor.ConfigureComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubAbstractPropertyDescriptor.InitializeStub">
            <summary>Initializes a new instance of type StubAbstractPropertyDescriptor</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubAbstractPropertyDescriptor.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubAbstractPropertyDescriptor.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubAbstractPropertyDescriptor.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubAttributeDescriptor`1">
            <summary>Stub type of Castle.MicroKernel.ModelBuilder.Descriptors.AttributeDescriptor`1</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubAttributeDescriptor`1.#ctor(System.String,System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubAttributeDescriptor`1.ApplyToConfiguration(Castle.MicroKernel.IKernel,Castle.Core.Configuration.IConfiguration)">
            <summary>Sets the stub of AttributeDescriptor`1.ApplyToConfiguration(IKernel kernel, IConfiguration configuration)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubAttributeDescriptor`1.ApplyToConfigurationIKernelIConfiguration">
            <summary>Sets the stub of AttributeDescriptor`1.ApplyToConfiguration(IKernel kernel, IConfiguration configuration)</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubAttributeDescriptor`1.BuildComponentModel(Castle.MicroKernel.IKernel,Castle.Core.ComponentModel)">
            <summary>Sets the stub of AbstractOverwriteableDescriptor`1.BuildComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubAttributeDescriptor`1.BuildComponentModelIKernelComponentModel">
            <summary>Sets the stub of AbstractOverwriteableDescriptor`1.BuildComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubAttributeDescriptor`1.ConfigureComponentModel(Castle.MicroKernel.IKernel,Castle.Core.ComponentModel)">
            <summary>Sets the stub of AbstractOverwriteableDescriptor`1.ConfigureComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubAttributeDescriptor`1.ConfigureComponentModelIKernelComponentModel">
            <summary>Sets the stub of AbstractOverwriteableDescriptor`1.ConfigureComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubAttributeDescriptor`1.InitializeStub">
            <summary>Initializes a new instance of type StubAttributeDescriptor</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubAttributeDescriptor`1.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubAttributeDescriptor`1.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubAttributeDescriptor`1.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubAttributeKeyDescriptor`1">
            <summary>Stub type of Castle.MicroKernel.ModelBuilder.Descriptors.AttributeKeyDescriptor`1</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubAttributeKeyDescriptor`1.#ctor(Castle.MicroKernel.Registration.ComponentRegistration{`0},System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubAttributeKeyDescriptor`1.InitializeStub">
            <summary>Initializes a new instance of type StubAttributeKeyDescriptor</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubAttributeKeyDescriptor`1.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubAttributeKeyDescriptor`1.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubAttributeKeyDescriptor`1.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubConfigurationDescriptor">
            <summary>Stub type of Castle.MicroKernel.ModelBuilder.Descriptors.ConfigurationDescriptor</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubConfigurationDescriptor.#ctor(Castle.MicroKernel.Registration.Node[])">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubConfigurationDescriptor.#ctor(Castle.Core.Configuration.IConfiguration)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubConfigurationDescriptor.InitializeStub">
            <summary>Initializes a new instance of type StubConfigurationDescriptor</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubConfigurationDescriptor.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubConfigurationDescriptor.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubConfigurationDescriptor.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubCustomDependencyDescriptor">
            <summary>Stub type of Castle.MicroKernel.ModelBuilder.Descriptors.CustomDependencyDescriptor</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubCustomDependencyDescriptor.#ctor(Castle.MicroKernel.Registration.Property[])">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubCustomDependencyDescriptor.#ctor(System.Collections.IDictionary)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubCustomDependencyDescriptor.InitializeStub">
            <summary>Initializes a new instance of type StubCustomDependencyDescriptor</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubCustomDependencyDescriptor.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubCustomDependencyDescriptor.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubCustomDependencyDescriptor.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubDefaultsDescriptor">
            <summary>Stub type of Castle.MicroKernel.ModelBuilder.Descriptors.DefaultsDescriptor</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubDefaultsDescriptor.#ctor(Castle.Core.ComponentName,System.Type)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubDefaultsDescriptor.InitializeStub">
            <summary>Initializes a new instance of type StubDefaultsDescriptor</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubDefaultsDescriptor.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubDefaultsDescriptor.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubDefaultsDescriptor.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubDelegatingModelDescriptor">
            <summary>Stub type of Castle.MicroKernel.ModelBuilder.Descriptors.DelegatingModelDescriptor</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubDelegatingModelDescriptor.#ctor(System.Action{Castle.MicroKernel.IKernel,Castle.Core.ComponentModel},System.Action{Castle.MicroKernel.IKernel,Castle.Core.ComponentModel})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubDelegatingModelDescriptor.InitializeStub">
            <summary>Initializes a new instance of type StubDelegatingModelDescriptor</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubDelegatingModelDescriptor.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubDelegatingModelDescriptor.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubDelegatingModelDescriptor.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubDynamicParametersDescriptor">
            <summary>Stub type of Castle.MicroKernel.ModelBuilder.Descriptors.DynamicParametersDescriptor</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubDynamicParametersDescriptor.#ctor(Castle.MicroKernel.Registration.DynamicParametersWithContextResolveDelegate)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubDynamicParametersDescriptor.InitializeStub">
            <summary>Initializes a new instance of type StubDynamicParametersDescriptor</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubDynamicParametersDescriptor.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubDynamicParametersDescriptor.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubDynamicParametersDescriptor.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubExtendedPropertiesDescriptor">
            <summary>Stub type of Castle.MicroKernel.ModelBuilder.Descriptors.ExtendedPropertiesDescriptor</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubExtendedPropertiesDescriptor.#ctor(Castle.MicroKernel.Registration.Property[])">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubExtendedPropertiesDescriptor.#ctor(System.Collections.IDictionary)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubExtendedPropertiesDescriptor.InitializeStub">
            <summary>Initializes a new instance of type StubExtendedPropertiesDescriptor</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubExtendedPropertiesDescriptor.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubExtendedPropertiesDescriptor.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubExtendedPropertiesDescriptor.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubInterceptorDescriptor">
            <summary>Stub type of Castle.MicroKernel.ModelBuilder.Descriptors.InterceptorDescriptor</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubInterceptorDescriptor.#ctor(Castle.Core.InterceptorReference[])">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubInterceptorDescriptor.#ctor(Castle.Core.InterceptorReference[],System.Int32)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubInterceptorDescriptor.#ctor(Castle.Core.InterceptorReference[],Castle.MicroKernel.ModelBuilder.Descriptors.InterceptorDescriptor.Where)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubInterceptorDescriptor.InitializeStub">
            <summary>Initializes a new instance of type StubInterceptorDescriptor</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubInterceptorDescriptor.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubInterceptorDescriptor.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubInterceptorDescriptor.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubInterceptorSelectorDescriptor">
            <summary>Stub type of Castle.MicroKernel.ModelBuilder.Descriptors.InterceptorSelectorDescriptor</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubInterceptorSelectorDescriptor.#ctor(Castle.MicroKernel.IReference{Castle.DynamicProxy.IInterceptorSelector})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubInterceptorSelectorDescriptor.InitializeStub">
            <summary>Initializes a new instance of type StubInterceptorSelectorDescriptor</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubInterceptorSelectorDescriptor.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubInterceptorSelectorDescriptor.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubInterceptorSelectorDescriptor.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubLifestyleDescriptor`1">
            <summary>Stub type of Castle.MicroKernel.ModelBuilder.Descriptors.LifestyleDescriptor`1</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubLifestyleDescriptor`1.#ctor(Castle.Core.LifestyleType)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubLifestyleDescriptor`1.ApplyToConfiguration(Castle.MicroKernel.IKernel,Castle.Core.Configuration.IConfiguration)">
            <summary>Sets the stub of LifestyleDescriptor`1.ApplyToConfiguration(IKernel kernel, IConfiguration configuration)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubLifestyleDescriptor`1.ApplyToConfigurationIKernelIConfiguration">
            <summary>Sets the stub of LifestyleDescriptor`1.ApplyToConfiguration(IKernel kernel, IConfiguration configuration)</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubLifestyleDescriptor`1.BuildComponentModel(Castle.MicroKernel.IKernel,Castle.Core.ComponentModel)">
            <summary>Sets the stub of AbstractOverwriteableDescriptor`1.BuildComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubLifestyleDescriptor`1.BuildComponentModelIKernelComponentModel">
            <summary>Sets the stub of AbstractOverwriteableDescriptor`1.BuildComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubLifestyleDescriptor`1.ConfigureComponentModel(Castle.MicroKernel.IKernel,Castle.Core.ComponentModel)">
            <summary>Sets the stub of AbstractOverwriteableDescriptor`1.ConfigureComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubLifestyleDescriptor`1.ConfigureComponentModelIKernelComponentModel">
            <summary>Sets the stub of AbstractOverwriteableDescriptor`1.ConfigureComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubLifestyleDescriptor`1.InitializeStub">
            <summary>Initializes a new instance of type StubLifestyleDescriptor</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubLifestyleDescriptor`1.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubLifestyleDescriptor`1.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubLifestyleDescriptor`1.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubOnCreateComponentDescriptor`1">
            <summary>Stub type of Castle.MicroKernel.ModelBuilder.Descriptors.OnCreateComponentDescriptor`1</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubOnCreateComponentDescriptor`1.#ctor(Castle.MicroKernel.LifecycleConcerns.LifecycleActionDelegate{`0})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubOnCreateComponentDescriptor`1.InitializeStub">
            <summary>Initializes a new instance of type StubOnCreateComponentDescriptor</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubOnCreateComponentDescriptor`1.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubOnCreateComponentDescriptor`1.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubOnCreateComponentDescriptor`1.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubOnDestroyComponentDescriptor`1">
            <summary>Stub type of Castle.MicroKernel.ModelBuilder.Descriptors.OnDestroyComponentDescriptor`1</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubOnDestroyComponentDescriptor`1.#ctor(Castle.MicroKernel.LifecycleConcerns.LifecycleActionDelegate{`0})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubOnDestroyComponentDescriptor`1.InitializeStub">
            <summary>Initializes a new instance of type StubOnDestroyComponentDescriptor</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubOnDestroyComponentDescriptor`1.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubOnDestroyComponentDescriptor`1.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubOnDestroyComponentDescriptor`1.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubParametersDescriptor">
            <summary>Stub type of Castle.MicroKernel.ModelBuilder.Descriptors.ParametersDescriptor</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubParametersDescriptor.#ctor(Castle.MicroKernel.Registration.Parameter[])">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubParametersDescriptor.BuildComponentModel(Castle.MicroKernel.IKernel,Castle.Core.ComponentModel)">
            <summary>Sets the stub of ParametersDescriptor.BuildComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubParametersDescriptor.BuildComponentModelIKernelComponentModel">
            <summary>Sets the stub of ParametersDescriptor.BuildComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubParametersDescriptor.ConfigureComponentModel(Castle.MicroKernel.IKernel,Castle.Core.ComponentModel)">
            <summary>Sets the stub of AbstractPropertyDescriptor.ConfigureComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubParametersDescriptor.ConfigureComponentModelIKernelComponentModel">
            <summary>Sets the stub of AbstractPropertyDescriptor.ConfigureComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubParametersDescriptor.InitializeStub">
            <summary>Initializes a new instance of type StubParametersDescriptor</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubParametersDescriptor.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubParametersDescriptor.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubParametersDescriptor.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubProxyHookDescriptor">
            <summary>Stub type of Castle.MicroKernel.ModelBuilder.Descriptors.ProxyHookDescriptor</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubProxyHookDescriptor.#ctor(Castle.MicroKernel.IReference{Castle.DynamicProxy.IProxyGenerationHook})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubProxyHookDescriptor.InitializeStub">
            <summary>Initializes a new instance of type StubProxyHookDescriptor</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubProxyHookDescriptor.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubProxyHookDescriptor.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubProxyHookDescriptor.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubProxyInterfacesDescriptor">
            <summary>Stub type of Castle.MicroKernel.ModelBuilder.Descriptors.ProxyInterfacesDescriptor</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubProxyInterfacesDescriptor.#ctor(System.Type[])">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubProxyInterfacesDescriptor.InitializeStub">
            <summary>Initializes a new instance of type StubProxyInterfacesDescriptor</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubProxyInterfacesDescriptor.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubProxyInterfacesDescriptor.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubProxyInterfacesDescriptor.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubProxyMixInsDescriptor">
            <summary>Stub type of Castle.MicroKernel.ModelBuilder.Descriptors.ProxyMixInsDescriptor</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubProxyMixInsDescriptor.#ctor(System.Collections.Generic.IEnumerable{Castle.MicroKernel.IReference{System.Object}})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubProxyMixInsDescriptor.InitializeStub">
            <summary>Initializes a new instance of type StubProxyMixInsDescriptor</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubProxyMixInsDescriptor.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubProxyMixInsDescriptor.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubProxyMixInsDescriptor.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubReferenceDependencyDescriptor">
            <summary>Stub type of Castle.MicroKernel.ModelBuilder.Descriptors.ReferenceDependencyDescriptor</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubReferenceDependencyDescriptor.#ctor(Castle.MicroKernel.IReference{System.Object})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubReferenceDependencyDescriptor.InitializeStub">
            <summary>Initializes a new instance of type StubReferenceDependencyDescriptor</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubReferenceDependencyDescriptor.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubReferenceDependencyDescriptor.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubReferenceDependencyDescriptor.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubServiceOverrideDescriptor">
            <summary>Stub type of Castle.MicroKernel.ModelBuilder.Descriptors.ServiceOverrideDescriptor</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubServiceOverrideDescriptor.#ctor(System.Collections.IDictionary)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubServiceOverrideDescriptor.#ctor(Castle.MicroKernel.Registration.ServiceOverride[])">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubServiceOverrideDescriptor.BuildComponentModel(Castle.MicroKernel.IKernel,Castle.Core.ComponentModel)">
            <summary>Sets the stub of ServiceOverrideDescriptor.BuildComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubServiceOverrideDescriptor.BuildComponentModelIKernelComponentModel">
            <summary>Sets the stub of ServiceOverrideDescriptor.BuildComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubServiceOverrideDescriptor.ConfigureComponentModel(Castle.MicroKernel.IKernel,Castle.Core.ComponentModel)">
            <summary>Sets the stub of AbstractPropertyDescriptor.ConfigureComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubServiceOverrideDescriptor.ConfigureComponentModelIKernelComponentModel">
            <summary>Sets the stub of AbstractPropertyDescriptor.ConfigureComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubServiceOverrideDescriptor.InitializeStub">
            <summary>Initializes a new instance of type StubServiceOverrideDescriptor</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubServiceOverrideDescriptor.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubServiceOverrideDescriptor.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubServiceOverrideDescriptor.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubServicesDescriptor">
            <summary>Stub type of Castle.MicroKernel.ModelBuilder.Descriptors.ServicesDescriptor</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubServicesDescriptor.#ctor(System.Type[])">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubServicesDescriptor.InitializeStub">
            <summary>Initializes a new instance of type StubServicesDescriptor</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubServicesDescriptor.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubServicesDescriptor.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Descriptors.Fakes.StubServicesDescriptor.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Fakes.ShimComponentModelDescriptorUtil">
            <summary>Shim type of Castle.MicroKernel.ModelBuilder.ComponentModelDescriptorUtil</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Fakes.ShimComponentModelDescriptorUtil.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Fakes.ShimComponentModelDescriptorUtil.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Fakes.ShimComponentModelDescriptorUtil.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Fakes.ShimComponentModelDescriptorUtil.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Fakes.ShimComponentModelDescriptorUtil.GetMetaDescriptorsComponentModelBoolean">
            <summary>Sets the shim of ComponentModelDescriptorUtil.GetMetaDescriptors(ComponentModel model, Boolean ensureExists)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Fakes.ShimComponentModelDescriptorUtil.RemoveMetaDescriptorsComponentModel">
            <summary>Sets the shim of ComponentModelDescriptorUtil.RemoveMetaDescriptors(ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Fakes.ShimComponentModelDescriptorUtil.StaticConstructor">
            <summary>Sets the shim of ComponentModelDescriptorUtil.ComponentModelDescriptorUtil()</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Fakes.ShimDefaultComponentModelBuilder">
            <summary>Shim type of Castle.MicroKernel.ModelBuilder.DefaultComponentModelBuilder</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Fakes.ShimDefaultComponentModelBuilder.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Fakes.ShimDefaultComponentModelBuilder.#ctor(Castle.MicroKernel.ModelBuilder.DefaultComponentModelBuilder)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Fakes.ShimDefaultComponentModelBuilder.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Fakes.ShimDefaultComponentModelBuilder.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Fakes.ShimDefaultComponentModelBuilder.Bind(Castle.MicroKernel.IComponentModelBuilder)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Fakes.ShimDefaultComponentModelBuilder.AddContributorIContributeComponentModelConstruction">
            <summary>Sets the shim of DefaultComponentModelBuilder.AddContributor(IContributeComponentModelConstruction contributor)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Fakes.ShimDefaultComponentModelBuilder.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Fakes.ShimDefaultComponentModelBuilder.BuildModelComponentNameTypeArrayTypeIDictionary">
            <summary>Sets the shim of DefaultComponentModelBuilder.BuildModel(ComponentName name, Type[] services, Type classType, IDictionary extendedProperties)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Fakes.ShimDefaultComponentModelBuilder.BuildModelIComponentModelDescriptorArray">
            <summary>Sets the shim of DefaultComponentModelBuilder.BuildModel(IComponentModelDescriptor[] customContributors)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Fakes.ShimDefaultComponentModelBuilder.ConstructorIKernel">
            <summary>Sets the shim of DefaultComponentModelBuilder.DefaultComponentModelBuilder(IKernel kernel)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Fakes.ShimDefaultComponentModelBuilder.ContributorsGet">
            <summary>Sets the shim of DefaultComponentModelBuilder.get_Contributors()</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Fakes.ShimDefaultComponentModelBuilder.InitializeContributors">
            <summary>Sets the shim of DefaultComponentModelBuilder.InitializeContributors()</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Fakes.ShimDefaultComponentModelBuilder.RemoveContributorIContributeComponentModelConstruction">
            <summary>Sets the shim of DefaultComponentModelBuilder.RemoveContributor(IContributeComponentModelConstruction contributor)</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Fakes.ShimDefaultComponentModelBuilder.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Fakes.ShimDefaultComponentModelBuilder.AllInstances.AddContributorIContributeComponentModelConstruction">
            <summary>Sets the shim of DefaultComponentModelBuilder.AddContributor(IContributeComponentModelConstruction contributor)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Fakes.ShimDefaultComponentModelBuilder.AllInstances.BuildModelComponentNameTypeArrayTypeIDictionary">
            <summary>Sets the shim of DefaultComponentModelBuilder.BuildModel(ComponentName name, Type[] services, Type classType, IDictionary extendedProperties)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Fakes.ShimDefaultComponentModelBuilder.AllInstances.BuildModelIComponentModelDescriptorArray">
            <summary>Sets the shim of DefaultComponentModelBuilder.BuildModel(IComponentModelDescriptor[] customContributors)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Fakes.ShimDefaultComponentModelBuilder.AllInstances.ContributorsGet">
            <summary>Sets the shim of DefaultComponentModelBuilder.get_Contributors()</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Fakes.ShimDefaultComponentModelBuilder.AllInstances.InitializeContributors">
            <summary>Sets the shim of DefaultComponentModelBuilder.InitializeContributors()</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Fakes.ShimDefaultComponentModelBuilder.AllInstances.RemoveContributorIContributeComponentModelConstruction">
            <summary>Sets the shim of DefaultComponentModelBuilder.RemoveContributor(IContributeComponentModelConstruction contributor)</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Fakes.StubDefaultComponentModelBuilder">
            <summary>Stub type of Castle.MicroKernel.ModelBuilder.DefaultComponentModelBuilder</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Fakes.StubDefaultComponentModelBuilder.#ctor(Castle.MicroKernel.IKernel)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Fakes.StubDefaultComponentModelBuilder.InitializeContributors">
            <summary>Sets the stub of DefaultComponentModelBuilder.InitializeContributors()</summary>
        </member>
        <member name="F:Castle.MicroKernel.ModelBuilder.Fakes.StubDefaultComponentModelBuilder.InitializeContributors01">
            <summary>Sets the stub of DefaultComponentModelBuilder.InitializeContributors()</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Fakes.StubDefaultComponentModelBuilder.InitializeStub">
            <summary>Initializes a new instance of type StubDefaultComponentModelBuilder</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Fakes.StubDefaultComponentModelBuilder.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Fakes.StubDefaultComponentModelBuilder.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Fakes.StubDefaultComponentModelBuilder.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Fakes.StubIComponentModelDescriptor">
            <summary>Stub type of Castle.MicroKernel.ModelBuilder.IComponentModelDescriptor</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Fakes.StubIComponentModelDescriptor.#ctor">
            <summary>Initializes a new instance of type StubIComponentModelDescriptor</summary>
        </member>
        <member name="F:Castle.MicroKernel.ModelBuilder.Fakes.StubIComponentModelDescriptor.BuildComponentModelIKernelComponentModel">
            <summary>Sets the stub of IComponentModelDescriptor.BuildComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Fakes.StubIComponentModelDescriptor.cw::Castle#MicroKernel#ModelBuilder#IComponentModelDescriptor#BuildComponentModel(Castle.MicroKernel.IKernel,Castle.Core.ComponentModel)">
            <summary>Sets the stub of IComponentModelDescriptor.BuildComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Fakes.StubIComponentModelDescriptor.cw::Castle#MicroKernel#ModelBuilder#IComponentModelDescriptor#ConfigureComponentModel(Castle.MicroKernel.IKernel,Castle.Core.ComponentModel)">
            <summary>Sets the stub of IComponentModelDescriptor.ConfigureComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ModelBuilder.Fakes.StubIComponentModelDescriptor.ConfigureComponentModelIKernelComponentModel">
            <summary>Sets the stub of IComponentModelDescriptor.ConfigureComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Fakes.StubIContributeComponentModelConstruction">
            <summary>Stub type of Castle.MicroKernel.ModelBuilder.IContributeComponentModelConstruction</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Fakes.StubIContributeComponentModelConstruction.#ctor">
            <summary>Initializes a new instance of type StubIContributeComponentModelConstruction</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Fakes.StubIContributeComponentModelConstruction.cw::Castle#MicroKernel#ModelBuilder#IContributeComponentModelConstruction#ProcessModel(Castle.MicroKernel.IKernel,Castle.Core.ComponentModel)">
            <summary>Sets the stub of IContributeComponentModelConstruction.ProcessModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ModelBuilder.Fakes.StubIContributeComponentModelConstruction.ProcessModelIKernelComponentModel">
            <summary>Sets the stub of IContributeComponentModelConstruction.ProcessModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Fakes.StubIMetaComponentModelDescriptor">
            <summary>Stub type of Castle.MicroKernel.ModelBuilder.IMetaComponentModelDescriptor</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Fakes.StubIMetaComponentModelDescriptor.#ctor">
            <summary>Initializes a new instance of type StubIMetaComponentModelDescriptor</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Fakes.StubIMetaComponentModelDescriptor.cw::Castle#MicroKernel#ModelBuilder#IMetaComponentModelDescriptor#ConfigureComponentModel(Castle.MicroKernel.IKernel,Castle.Core.ComponentModel)">
            <summary>Sets the stub of IMetaComponentModelDescriptor.ConfigureComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ModelBuilder.Fakes.StubIMetaComponentModelDescriptor.ConfigureComponentModelIKernelComponentModel">
            <summary>Sets the stub of IMetaComponentModelDescriptor.ConfigureComponentModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimComponentActivatorInspector">
            <summary>Shim type of Castle.MicroKernel.ModelBuilder.Inspectors.ComponentActivatorInspector</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimComponentActivatorInspector.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimComponentActivatorInspector.#ctor(Castle.MicroKernel.ModelBuilder.Inspectors.ComponentActivatorInspector)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimComponentActivatorInspector.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimComponentActivatorInspector.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimComponentActivatorInspector.Bind(Castle.MicroKernel.ModelBuilder.IContributeComponentModelConstruction)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimComponentActivatorInspector.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimComponentActivatorInspector.ConstructorIConversionManager">
            <summary>Sets the shim of ComponentActivatorInspector.ComponentActivatorInspector(IConversionManager converter)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimComponentActivatorInspector.ProcessModelIKernelComponentModel">
            <summary>Sets the shim of ComponentActivatorInspector.ProcessModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimComponentActivatorInspector.ReadComponentActivatorFromConfigurationComponentModel">
            <summary>Sets the shim of ComponentActivatorInspector.ReadComponentActivatorFromConfiguration(ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimComponentActivatorInspector.ReadComponentActivatorFromTypeComponentModel">
            <summary>Sets the shim of ComponentActivatorInspector.ReadComponentActivatorFromType(ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimComponentActivatorInspector.ValidateComponentActivatorType">
            <summary>Sets the shim of ComponentActivatorInspector.ValidateComponentActivator(Type customComponentActivator)</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimComponentActivatorInspector.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimComponentActivatorInspector.AllInstances.ProcessModelIKernelComponentModel">
            <summary>Sets the shim of ComponentActivatorInspector.ProcessModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimComponentActivatorInspector.AllInstances.ReadComponentActivatorFromConfigurationComponentModel">
            <summary>Sets the shim of ComponentActivatorInspector.ReadComponentActivatorFromConfiguration(ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimComponentActivatorInspector.AllInstances.ReadComponentActivatorFromTypeComponentModel">
            <summary>Sets the shim of ComponentActivatorInspector.ReadComponentActivatorFromType(ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimComponentActivatorInspector.AllInstances.ValidateComponentActivatorType">
            <summary>Sets the shim of ComponentActivatorInspector.ValidateComponentActivator(Type customComponentActivator)</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimComponentProxyInspector">
            <summary>Shim type of Castle.MicroKernel.ModelBuilder.Inspectors.ComponentProxyInspector</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimComponentProxyInspector.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimComponentProxyInspector.#ctor(Castle.MicroKernel.ModelBuilder.Inspectors.ComponentProxyInspector)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimComponentProxyInspector.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimComponentProxyInspector.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimComponentProxyInspector.Bind(Castle.MicroKernel.ModelBuilder.IContributeComponentModelConstruction)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimComponentProxyInspector.ApplyProxyBehaviorComponentProxyBehaviorAttributeComponentModel">
            <summary>Sets the shim of ComponentProxyInspector.ApplyProxyBehavior(ComponentProxyBehaviorAttribute behavior, ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimComponentProxyInspector.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimComponentProxyInspector.ConstructorIConversionManager">
            <summary>Sets the shim of ComponentProxyInspector.ComponentProxyInspector(IConversionManager converter)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimComponentProxyInspector.EnsureComponentRegisteredWithInterfaceComponentModel">
            <summary>Sets the shim of ComponentProxyInspector.EnsureComponentRegisteredWithInterface(ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimComponentProxyInspector.ProcessModelIKernelComponentModel">
            <summary>Sets the shim of ComponentProxyInspector.ProcessModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimComponentProxyInspector.ReadProxyBehaviorFromConfigComponentModelComponentProxyBehaviorAttribute">
            <summary>Sets the shim of ComponentProxyInspector.ReadProxyBehaviorFromConfig(ComponentModel model, ComponentProxyBehaviorAttribute behavior)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimComponentProxyInspector.ReadProxyBehaviorFromTypeType">
            <summary>Sets the shim of ComponentProxyInspector.ReadProxyBehaviorFromType(Type implementation)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimComponentProxyInspector.ReadProxyBehaviorIKernelComponentModel">
            <summary>Sets the shim of ComponentProxyInspector.ReadProxyBehavior(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimComponentProxyInspector.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimComponentProxyInspector.AllInstances.ProcessModelIKernelComponentModel">
            <summary>Sets the shim of ComponentProxyInspector.ProcessModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimComponentProxyInspector.AllInstances.ReadProxyBehaviorFromConfigComponentModelComponentProxyBehaviorAttribute">
            <summary>Sets the shim of ComponentProxyInspector.ReadProxyBehaviorFromConfig(ComponentModel model, ComponentProxyBehaviorAttribute behavior)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimComponentProxyInspector.AllInstances.ReadProxyBehaviorFromTypeType">
            <summary>Sets the shim of ComponentProxyInspector.ReadProxyBehaviorFromType(Type implementation)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimComponentProxyInspector.AllInstances.ReadProxyBehaviorIKernelComponentModel">
            <summary>Sets the shim of ComponentProxyInspector.ReadProxyBehavior(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimConfigurationModelInspector">
            <summary>Shim type of Castle.MicroKernel.ModelBuilder.Inspectors.ConfigurationModelInspector</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimConfigurationModelInspector.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimConfigurationModelInspector.#ctor(Castle.MicroKernel.ModelBuilder.Inspectors.ConfigurationModelInspector)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimConfigurationModelInspector.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimConfigurationModelInspector.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimConfigurationModelInspector.Bind(Castle.MicroKernel.ModelBuilder.IContributeComponentModelConstruction)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimConfigurationModelInspector.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimConfigurationModelInspector.Constructor">
            <summary>Sets the shim of ConfigurationModelInspector.ConfigurationModelInspector()</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimConfigurationModelInspector.ProcessModelIKernelComponentModel">
            <summary>Sets the shim of ConfigurationModelInspector.ProcessModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimConfigurationModelInspector.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimConfigurationModelInspector.AllInstances.ProcessModelIKernelComponentModel">
            <summary>Sets the shim of ConfigurationModelInspector.ProcessModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimConfigurationParametersInspector">
            <summary>Shim type of Castle.MicroKernel.ModelBuilder.Inspectors.ConfigurationParametersInspector</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimConfigurationParametersInspector.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimConfigurationParametersInspector.#ctor(Castle.MicroKernel.ModelBuilder.Inspectors.ConfigurationParametersInspector)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimConfigurationParametersInspector.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimConfigurationParametersInspector.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimConfigurationParametersInspector.Bind(Castle.MicroKernel.ModelBuilder.IContributeComponentModelConstruction)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimConfigurationParametersInspector.AddAnyServiceOverridesComponentModelIConfigurationParameterModel">
            <summary>Sets the shim of ConfigurationParametersInspector.AddAnyServiceOverrides(ComponentModel model, IConfiguration config, ParameterModel parameter)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimConfigurationParametersInspector.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimConfigurationParametersInspector.Constructor">
            <summary>Sets the shim of ConfigurationParametersInspector.ConfigurationParametersInspector()</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimConfigurationParametersInspector.InspectCollectionsComponentModel">
            <summary>Sets the shim of ConfigurationParametersInspector.InspectCollections(ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimConfigurationParametersInspector.IsArrayParameterModel">
            <summary>Sets the shim of ConfigurationParametersInspector.IsArray(ParameterModel parameter)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimConfigurationParametersInspector.IsListParameterModel">
            <summary>Sets the shim of ConfigurationParametersInspector.IsList(ParameterModel parameter)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimConfigurationParametersInspector.ProcessModelIKernelComponentModel">
            <summary>Sets the shim of ConfigurationParametersInspector.ProcessModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimConfigurationParametersInspector.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimConfigurationParametersInspector.AllInstances.AddAnyServiceOverridesComponentModelIConfigurationParameterModel">
            <summary>Sets the shim of ConfigurationParametersInspector.AddAnyServiceOverrides(ComponentModel model, IConfiguration config, ParameterModel parameter)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimConfigurationParametersInspector.AllInstances.InspectCollectionsComponentModel">
            <summary>Sets the shim of ConfigurationParametersInspector.InspectCollections(ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimConfigurationParametersInspector.AllInstances.IsArrayParameterModel">
            <summary>Sets the shim of ConfigurationParametersInspector.IsArray(ParameterModel parameter)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimConfigurationParametersInspector.AllInstances.IsListParameterModel">
            <summary>Sets the shim of ConfigurationParametersInspector.IsList(ParameterModel parameter)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimConfigurationParametersInspector.AllInstances.ProcessModelIKernelComponentModel">
            <summary>Sets the shim of ConfigurationParametersInspector.ProcessModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimConstructorDependenciesModelInspector">
            <summary>Shim type of Castle.MicroKernel.ModelBuilder.Inspectors.ConstructorDependenciesModelInspector</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimConstructorDependenciesModelInspector.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimConstructorDependenciesModelInspector.#ctor(Castle.MicroKernel.ModelBuilder.Inspectors.ConstructorDependenciesModelInspector)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimConstructorDependenciesModelInspector.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimConstructorDependenciesModelInspector.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimConstructorDependenciesModelInspector.Bind(Castle.MicroKernel.ModelBuilder.IContributeComponentModelConstruction)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimConstructorDependenciesModelInspector.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimConstructorDependenciesModelInspector.BuildParameterDependencyParameterInfo">
            <summary>Sets the shim of ConstructorDependenciesModelInspector.BuildParameterDependency(ParameterInfo parameter)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimConstructorDependenciesModelInspector.Constructor">
            <summary>Sets the shim of ConstructorDependenciesModelInspector.ConstructorDependenciesModelInspector()</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimConstructorDependenciesModelInspector.CreateConstructorCandidateComponentModelConstructorInfo">
            <summary>Sets the shim of ConstructorDependenciesModelInspector.CreateConstructorCandidate(ComponentModel model, ConstructorInfo constructor)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimConstructorDependenciesModelInspector.IsVisibleToContainerConstructorInfo">
            <summary>Sets the shim of ConstructorDependenciesModelInspector.IsVisibleToContainer(ConstructorInfo constructor)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimConstructorDependenciesModelInspector.ProcessModelIKernelComponentModel">
            <summary>Sets the shim of ConstructorDependenciesModelInspector.ProcessModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimConstructorDependenciesModelInspector.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimConstructorDependenciesModelInspector.AllInstances.CreateConstructorCandidateComponentModelConstructorInfo">
            <summary>Sets the shim of ConstructorDependenciesModelInspector.CreateConstructorCandidate(ComponentModel model, ConstructorInfo constructor)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimConstructorDependenciesModelInspector.AllInstances.IsVisibleToContainerConstructorInfo">
            <summary>Sets the shim of ConstructorDependenciesModelInspector.IsVisibleToContainer(ConstructorInfo constructor)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimConstructorDependenciesModelInspector.AllInstances.ProcessModelIKernelComponentModel">
            <summary>Sets the shim of ConstructorDependenciesModelInspector.ProcessModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimGenericInspector">
            <summary>Shim type of Castle.MicroKernel.ModelBuilder.Inspectors.GenericInspector</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimGenericInspector.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimGenericInspector.#ctor(Castle.MicroKernel.ModelBuilder.Inspectors.GenericInspector)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimGenericInspector.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimGenericInspector.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimGenericInspector.Bind(Castle.MicroKernel.ModelBuilder.IContributeComponentModelConstruction)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimGenericInspector.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimGenericInspector.Constructor">
            <summary>Sets the shim of GenericInspector.GenericInspector()</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimGenericInspector.ProcessModelIKernelComponentModel">
            <summary>Sets the shim of GenericInspector.ProcessModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimGenericInspector._ProcessModelb__0Type">
            <summary>Sets the shim of GenericInspector.&lt;ProcessModel&gt;b__0(Type s)</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimGenericInspector.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimGenericInspector.AllInstances.ProcessModelIKernelComponentModel">
            <summary>Sets the shim of GenericInspector.ProcessModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimInterceptorInspector">
            <summary>Shim type of Castle.MicroKernel.ModelBuilder.Inspectors.InterceptorInspector</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimInterceptorInspector.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimInterceptorInspector.#ctor(Castle.MicroKernel.ModelBuilder.Inspectors.InterceptorInspector)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimInterceptorInspector.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimInterceptorInspector.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimInterceptorInspector.Bind(Castle.MicroKernel.ModelBuilder.IContributeComponentModelConstruction)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimInterceptorInspector.AddInterceptorInterceptorReferenceInterceptorReferenceCollection">
            <summary>Sets the shim of InterceptorInspector.AddInterceptor(InterceptorReference interceptorRef, InterceptorReferenceCollection interceptors)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimInterceptorInspector.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimInterceptorInspector.CollectFromAttributesComponentModel">
            <summary>Sets the shim of InterceptorInspector.CollectFromAttributes(ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimInterceptorInspector.CollectFromConfigurationComponentModel">
            <summary>Sets the shim of InterceptorInspector.CollectFromConfiguration(ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimInterceptorInspector.CollectHookIConfigurationProxyOptions">
            <summary>Sets the shim of InterceptorInspector.CollectHook(IConfiguration interceptors, ProxyOptions options)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimInterceptorInspector.CollectInterceptorsComponentModelIConfiguration">
            <summary>Sets the shim of InterceptorInspector.CollectInterceptors(ComponentModel model, IConfiguration interceptors)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimInterceptorInspector.CollectSelectorIConfigurationProxyOptions">
            <summary>Sets the shim of InterceptorInspector.CollectSelector(IConfiguration interceptors, ProxyOptions options)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimInterceptorInspector.Constructor">
            <summary>Sets the shim of InterceptorInspector.InterceptorInspector()</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimInterceptorInspector.ProcessModelIKernelComponentModel">
            <summary>Sets the shim of InterceptorInspector.ProcessModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimInterceptorInspector.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimInterceptorInspector.AllInstances.AddInterceptorInterceptorReferenceInterceptorReferenceCollection">
            <summary>Sets the shim of InterceptorInspector.AddInterceptor(InterceptorReference interceptorRef, InterceptorReferenceCollection interceptors)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimInterceptorInspector.AllInstances.CollectFromAttributesComponentModel">
            <summary>Sets the shim of InterceptorInspector.CollectFromAttributes(ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimInterceptorInspector.AllInstances.CollectFromConfigurationComponentModel">
            <summary>Sets the shim of InterceptorInspector.CollectFromConfiguration(ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimInterceptorInspector.AllInstances.CollectHookIConfigurationProxyOptions">
            <summary>Sets the shim of InterceptorInspector.CollectHook(IConfiguration interceptors, ProxyOptions options)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimInterceptorInspector.AllInstances.CollectInterceptorsComponentModelIConfiguration">
            <summary>Sets the shim of InterceptorInspector.CollectInterceptors(ComponentModel model, IConfiguration interceptors)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimInterceptorInspector.AllInstances.CollectSelectorIConfigurationProxyOptions">
            <summary>Sets the shim of InterceptorInspector.CollectSelector(IConfiguration interceptors, ProxyOptions options)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimInterceptorInspector.AllInstances.ProcessModelIKernelComponentModel">
            <summary>Sets the shim of InterceptorInspector.ProcessModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimLifecycleModelInspector">
            <summary>Shim type of Castle.MicroKernel.ModelBuilder.Inspectors.LifecycleModelInspector</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimLifecycleModelInspector.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimLifecycleModelInspector.#ctor(Castle.MicroKernel.ModelBuilder.Inspectors.LifecycleModelInspector)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimLifecycleModelInspector.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimLifecycleModelInspector.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimLifecycleModelInspector.Bind(Castle.MicroKernel.ModelBuilder.IContributeComponentModelConstruction)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimLifecycleModelInspector.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimLifecycleModelInspector.Constructor">
            <summary>Sets the shim of LifecycleModelInspector.LifecycleModelInspector()</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimLifecycleModelInspector.IsLateBoundComponentComponentModel">
            <summary>Sets the shim of LifecycleModelInspector.IsLateBoundComponent(ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimLifecycleModelInspector.ProcessLateBoundModelComponentModel">
            <summary>Sets the shim of LifecycleModelInspector.ProcessLateBoundModel(ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimLifecycleModelInspector.ProcessModelComponentModel">
            <summary>Sets the shim of LifecycleModelInspector.ProcessModel(ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimLifecycleModelInspector.ProcessModelIKernelComponentModel">
            <summary>Sets the shim of LifecycleModelInspector.ProcessModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimLifecycleModelInspector._ProcessLateBoundModelb__0Type">
            <summary>Sets the shim of LifecycleModelInspector.&lt;ProcessLateBoundModel&gt;b__0(Type s)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimLifecycleModelInspector._ProcessLateBoundModelb__1Type">
            <summary>Sets the shim of LifecycleModelInspector.&lt;ProcessLateBoundModel&gt;b__1(Type s)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimLifecycleModelInspector._ProcessLateBoundModelb__2Type">
            <summary>Sets the shim of LifecycleModelInspector.&lt;ProcessLateBoundModel&gt;b__2(Type s)</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimLifecycleModelInspector.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimLifecycleModelInspector.AllInstances.IsLateBoundComponentComponentModel">
            <summary>Sets the shim of LifecycleModelInspector.IsLateBoundComponent(ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimLifecycleModelInspector.AllInstances.ProcessLateBoundModelComponentModel">
            <summary>Sets the shim of LifecycleModelInspector.ProcessLateBoundModel(ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimLifecycleModelInspector.AllInstances.ProcessModelComponentModel">
            <summary>Sets the shim of LifecycleModelInspector.ProcessModel(ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimLifecycleModelInspector.AllInstances.ProcessModelIKernelComponentModel">
            <summary>Sets the shim of LifecycleModelInspector.ProcessModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimLifestyleModelInspector">
            <summary>Shim type of Castle.MicroKernel.ModelBuilder.Inspectors.LifestyleModelInspector</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimLifestyleModelInspector.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimLifestyleModelInspector.#ctor(Castle.MicroKernel.ModelBuilder.Inspectors.LifestyleModelInspector)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimLifestyleModelInspector.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimLifestyleModelInspector.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimLifestyleModelInspector.Bind(Castle.MicroKernel.ModelBuilder.IContributeComponentModelConstruction)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimLifestyleModelInspector.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimLifestyleModelInspector.ConstructorIConversionManager">
            <summary>Sets the shim of LifestyleModelInspector.LifestyleModelInspector(IConversionManager converter)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimLifestyleModelInspector.ExtractBinderTypeString">
            <summary>Sets the shim of LifestyleModelInspector.ExtractBinder(Type scopeRootBinderType, String name)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimLifestyleModelInspector.ExtractPoolConfigComponentModel">
            <summary>Sets the shim of LifestyleModelInspector.ExtractPoolConfig(ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimLifestyleModelInspector.GetMandatoryTypeFromAttributeComponentModelStringLifestyleType">
            <summary>Sets the shim of LifestyleModelInspector.GetMandatoryTypeFromAttribute(ComponentModel model, String attribute, LifestyleType lifestyleType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimLifestyleModelInspector.GetTypeFromAttributeComponentModelString">
            <summary>Sets the shim of LifestyleModelInspector.GetTypeFromAttribute(ComponentModel model, String attribute)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimLifestyleModelInspector.IsBindMethodMemberInfoObject">
            <summary>Sets the shim of LifestyleModelInspector.IsBindMethod(MemberInfo methodMember, Object _)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimLifestyleModelInspector.ProcessModelIKernelComponentModel">
            <summary>Sets the shim of LifestyleModelInspector.ProcessModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimLifestyleModelInspector.ReadLifestyleFromConfigurationComponentModel">
            <summary>Sets the shim of LifestyleModelInspector.ReadLifestyleFromConfiguration(ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimLifestyleModelInspector.ReadLifestyleFromTypeComponentModel">
            <summary>Sets the shim of LifestyleModelInspector.ReadLifestyleFromType(ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimLifestyleModelInspector.ValidateTypeFromAttributeTypeTypeString">
            <summary>Sets the shim of LifestyleModelInspector.ValidateTypeFromAttribute(Type typeFromAttribute, Type expectedInterface, String attribute)</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimLifestyleModelInspector.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimLifestyleModelInspector.AllInstances.ExtractBinderTypeString">
            <summary>Sets the shim of LifestyleModelInspector.ExtractBinder(Type scopeRootBinderType, String name)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimLifestyleModelInspector.AllInstances.ExtractPoolConfigComponentModel">
            <summary>Sets the shim of LifestyleModelInspector.ExtractPoolConfig(ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimLifestyleModelInspector.AllInstances.GetMandatoryTypeFromAttributeComponentModelStringLifestyleType">
            <summary>Sets the shim of LifestyleModelInspector.GetMandatoryTypeFromAttribute(ComponentModel model, String attribute, LifestyleType lifestyleType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimLifestyleModelInspector.AllInstances.GetTypeFromAttributeComponentModelString">
            <summary>Sets the shim of LifestyleModelInspector.GetTypeFromAttribute(ComponentModel model, String attribute)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimLifestyleModelInspector.AllInstances.IsBindMethodMemberInfoObject">
            <summary>Sets the shim of LifestyleModelInspector.IsBindMethod(MemberInfo methodMember, Object _)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimLifestyleModelInspector.AllInstances.ProcessModelIKernelComponentModel">
            <summary>Sets the shim of LifestyleModelInspector.ProcessModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimLifestyleModelInspector.AllInstances.ReadLifestyleFromConfigurationComponentModel">
            <summary>Sets the shim of LifestyleModelInspector.ReadLifestyleFromConfiguration(ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimLifestyleModelInspector.AllInstances.ReadLifestyleFromTypeComponentModel">
            <summary>Sets the shim of LifestyleModelInspector.ReadLifestyleFromType(ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimLifestyleModelInspector.AllInstances.ValidateTypeFromAttributeTypeTypeString">
            <summary>Sets the shim of LifestyleModelInspector.ValidateTypeFromAttribute(Type typeFromAttribute, Type expectedInterface, String attribute)</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimMethodMetaInspector">
            <summary>Shim type of Castle.MicroKernel.ModelBuilder.Inspectors.MethodMetaInspector</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimMethodMetaInspector.#ctor(Castle.MicroKernel.ModelBuilder.Inspectors.MethodMetaInspector)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimMethodMetaInspector.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimMethodMetaInspector.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimMethodMetaInspector.Bind(Castle.MicroKernel.ModelBuilder.IContributeComponentModelConstruction)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimMethodMetaInspector.AssertNameIsNotNullStringComponentModel">
            <summary>Sets the shim of MethodMetaInspector.AssertNameIsNotNull(String name, ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimMethodMetaInspector.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimMethodMetaInspector.Constructor">
            <summary>Sets the shim of MethodMetaInspector.MethodMetaInspector()</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimMethodMetaInspector.ConvertSignatureString">
            <summary>Sets the shim of MethodMetaInspector.ConvertSignature(String signature)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimMethodMetaInspector.EnsureHasReferenceToConverterIKernel">
            <summary>Sets the shim of MethodMetaInspector.EnsureHasReferenceToConverter(IKernel kernel)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimMethodMetaInspector.GetMethodsTypeStringString">
            <summary>Sets the shim of MethodMetaInspector.GetMethods(Type implementation, String name, String signature)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimMethodMetaInspector.IsValidMetaComponentModelMethodMetaModel">
            <summary>Sets the shim of MethodMetaInspector.IsValidMeta(ComponentModel model, MethodMetaModel metaModel)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimMethodMetaInspector.ProcessMetaComponentModelIListOfMethodInfoMethodMetaModel">
            <summary>Sets the shim of MethodMetaInspector.ProcessMeta(ComponentModel model, IList`1&lt;MethodInfo&gt; methods, MethodMetaModel metaModel)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimMethodMetaInspector.ProcessModelIKernelComponentModel">
            <summary>Sets the shim of MethodMetaInspector.ProcessModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimMethodMetaInspector.ShouldUseMetaModelGet">
            <summary>Sets the shim of MethodMetaInspector.get_ShouldUseMetaModel()</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimMethodMetaInspector.StaticConstructor">
            <summary>Sets the shim of MethodMetaInspector.MethodMetaInspector()</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimMethodMetaInspector.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimMethodMetaInspector.AllInstances.AssertNameIsNotNullStringComponentModel">
            <summary>Sets the shim of MethodMetaInspector.AssertNameIsNotNull(String name, ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimMethodMetaInspector.AllInstances.ConvertSignatureString">
            <summary>Sets the shim of MethodMetaInspector.ConvertSignature(String signature)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimMethodMetaInspector.AllInstances.EnsureHasReferenceToConverterIKernel">
            <summary>Sets the shim of MethodMetaInspector.EnsureHasReferenceToConverter(IKernel kernel)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimMethodMetaInspector.AllInstances.GetMethodsTypeStringString">
            <summary>Sets the shim of MethodMetaInspector.GetMethods(Type implementation, String name, String signature)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimMethodMetaInspector.AllInstances.IsValidMetaComponentModelMethodMetaModel">
            <summary>Sets the shim of MethodMetaInspector.IsValidMeta(ComponentModel model, MethodMetaModel metaModel)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimMethodMetaInspector.AllInstances.ProcessMetaComponentModelIListOfMethodInfoMethodMetaModel">
            <summary>Sets the shim of MethodMetaInspector.ProcessMeta(ComponentModel model, IList`1&lt;MethodInfo&gt; methods, MethodMetaModel metaModel)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimMethodMetaInspector.AllInstances.ProcessModelIKernelComponentModel">
            <summary>Sets the shim of MethodMetaInspector.ProcessModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimMethodMetaInspector.AllInstances.ShouldUseMetaModelGet">
            <summary>Sets the shim of MethodMetaInspector.get_ShouldUseMetaModel()</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimMixinInspector">
            <summary>Shim type of Castle.MicroKernel.ModelBuilder.Inspectors.MixinInspector</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimMixinInspector.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimMixinInspector.#ctor(Castle.MicroKernel.ModelBuilder.Inspectors.MixinInspector)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimMixinInspector.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimMixinInspector.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimMixinInspector.Bind(Castle.MicroKernel.ModelBuilder.IContributeComponentModelConstruction)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimMixinInspector.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimMixinInspector.Constructor">
            <summary>Sets the shim of MixinInspector.MixinInspector()</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimMixinInspector.ProcessModelIKernelComponentModel">
            <summary>Sets the shim of MixinInspector.ProcessModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimMixinInspector.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimMixinInspector.AllInstances.ProcessModelIKernelComponentModel">
            <summary>Sets the shim of MixinInspector.ProcessModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimPropertiesDependenciesModelInspector">
            <summary>Shim type of Castle.MicroKernel.ModelBuilder.Inspectors.PropertiesDependenciesModelInspector</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimPropertiesDependenciesModelInspector.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimPropertiesDependenciesModelInspector.#ctor(Castle.MicroKernel.ModelBuilder.Inspectors.PropertiesDependenciesModelInspector)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimPropertiesDependenciesModelInspector.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimPropertiesDependenciesModelInspector.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimPropertiesDependenciesModelInspector.Bind(Castle.MicroKernel.ModelBuilder.IContributeComponentModelConstruction)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimPropertiesDependenciesModelInspector.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimPropertiesDependenciesModelInspector.BuildDependencyPropertyInfoBoolean">
            <summary>Sets the shim of PropertiesDependenciesModelInspector.BuildDependency(PropertyInfo property, Boolean isOptional)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimPropertiesDependenciesModelInspector.ConstructorIConversionManager">
            <summary>Sets the shim of PropertiesDependenciesModelInspector.PropertiesDependenciesModelInspector(IConversionManager converter)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimPropertiesDependenciesModelInspector.GetInspectionBehaviorFromTheConfigurationIConfiguration">
            <summary>Sets the shim of PropertiesDependenciesModelInspector.GetInspectionBehaviorFromTheConfiguration(IConfiguration config)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimPropertiesDependenciesModelInspector.GetPropertiesComponentModelType">
            <summary>Sets the shim of PropertiesDependenciesModelInspector.GetProperties(ComponentModel model, Type targetType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimPropertiesDependenciesModelInspector.HasDoNotWireAttributePropertyInfo">
            <summary>Sets the shim of PropertiesDependenciesModelInspector.HasDoNotWireAttribute(PropertyInfo property)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimPropertiesDependenciesModelInspector.HasParametersPropertyInfo">
            <summary>Sets the shim of PropertiesDependenciesModelInspector.HasParameters(PropertyInfo property)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimPropertiesDependenciesModelInspector.InspectPropertiesComponentModel">
            <summary>Sets the shim of PropertiesDependenciesModelInspector.InspectProperties(ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimPropertiesDependenciesModelInspector.IsSettablePropertyInfo">
            <summary>Sets the shim of PropertiesDependenciesModelInspector.IsSettable(PropertyInfo property)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimPropertiesDependenciesModelInspector.IsValidPropertyDependencyPropertyInfo">
            <summary>Sets the shim of PropertiesDependenciesModelInspector.IsValidPropertyDependency(PropertyInfo property)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimPropertiesDependenciesModelInspector.ProcessModelIKernelComponentModel">
            <summary>Sets the shim of PropertiesDependenciesModelInspector.ProcessModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimPropertiesDependenciesModelInspector.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimPropertiesDependenciesModelInspector.AllInstances.BuildDependencyPropertyInfoBoolean">
            <summary>Sets the shim of PropertiesDependenciesModelInspector.BuildDependency(PropertyInfo property, Boolean isOptional)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimPropertiesDependenciesModelInspector.AllInstances.GetInspectionBehaviorFromTheConfigurationIConfiguration">
            <summary>Sets the shim of PropertiesDependenciesModelInspector.GetInspectionBehaviorFromTheConfiguration(IConfiguration config)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimPropertiesDependenciesModelInspector.AllInstances.GetPropertiesComponentModelType">
            <summary>Sets the shim of PropertiesDependenciesModelInspector.GetProperties(ComponentModel model, Type targetType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimPropertiesDependenciesModelInspector.AllInstances.InspectPropertiesComponentModel">
            <summary>Sets the shim of PropertiesDependenciesModelInspector.InspectProperties(ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimPropertiesDependenciesModelInspector.AllInstances.ProcessModelIKernelComponentModel">
            <summary>Sets the shim of PropertiesDependenciesModelInspector.ProcessModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubComponentActivatorInspector">
            <summary>Stub type of Castle.MicroKernel.ModelBuilder.Inspectors.ComponentActivatorInspector</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubComponentActivatorInspector.#ctor(Castle.MicroKernel.SubSystems.Conversion.IConversionManager)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubComponentActivatorInspector.InitializeStub">
            <summary>Initializes a new instance of type StubComponentActivatorInspector</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubComponentActivatorInspector.ProcessModel(Castle.MicroKernel.IKernel,Castle.Core.ComponentModel)">
            <summary>Sets the stub of ComponentActivatorInspector.ProcessModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubComponentActivatorInspector.ProcessModelIKernelComponentModel">
            <summary>Sets the stub of ComponentActivatorInspector.ProcessModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubComponentActivatorInspector.ReadComponentActivatorFromConfiguration(Castle.Core.ComponentModel)">
            <summary>Sets the stub of ComponentActivatorInspector.ReadComponentActivatorFromConfiguration(ComponentModel model)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubComponentActivatorInspector.ReadComponentActivatorFromConfigurationComponentModel">
            <summary>Sets the stub of ComponentActivatorInspector.ReadComponentActivatorFromConfiguration(ComponentModel model)</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubComponentActivatorInspector.ReadComponentActivatorFromType(Castle.Core.ComponentModel)">
            <summary>Sets the stub of ComponentActivatorInspector.ReadComponentActivatorFromType(ComponentModel model)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubComponentActivatorInspector.ReadComponentActivatorFromTypeComponentModel">
            <summary>Sets the stub of ComponentActivatorInspector.ReadComponentActivatorFromType(ComponentModel model)</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubComponentActivatorInspector.ValidateComponentActivator(System.Type)">
            <summary>Sets the stub of ComponentActivatorInspector.ValidateComponentActivator(Type customComponentActivator)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubComponentActivatorInspector.ValidateComponentActivatorType">
            <summary>Sets the stub of ComponentActivatorInspector.ValidateComponentActivator(Type customComponentActivator)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubComponentActivatorInspector.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubComponentActivatorInspector.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubComponentActivatorInspector.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubComponentProxyInspector">
            <summary>Stub type of Castle.MicroKernel.ModelBuilder.Inspectors.ComponentProxyInspector</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubComponentProxyInspector.#ctor(Castle.MicroKernel.SubSystems.Conversion.IConversionManager)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubComponentProxyInspector.InitializeStub">
            <summary>Initializes a new instance of type StubComponentProxyInspector</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubComponentProxyInspector.ProcessModel(Castle.MicroKernel.IKernel,Castle.Core.ComponentModel)">
            <summary>Sets the stub of ComponentProxyInspector.ProcessModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubComponentProxyInspector.ProcessModelIKernelComponentModel">
            <summary>Sets the stub of ComponentProxyInspector.ProcessModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubComponentProxyInspector.ReadProxyBehavior(Castle.MicroKernel.IKernel,Castle.Core.ComponentModel)">
            <summary>Sets the stub of ComponentProxyInspector.ReadProxyBehavior(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubComponentProxyInspector.ReadProxyBehaviorFromType(System.Type)">
            <summary>Sets the stub of ComponentProxyInspector.ReadProxyBehaviorFromType(Type implementation)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubComponentProxyInspector.ReadProxyBehaviorFromTypeType">
            <summary>Sets the stub of ComponentProxyInspector.ReadProxyBehaviorFromType(Type implementation)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubComponentProxyInspector.ReadProxyBehaviorIKernelComponentModel">
            <summary>Sets the stub of ComponentProxyInspector.ReadProxyBehavior(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubComponentProxyInspector.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubComponentProxyInspector.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubComponentProxyInspector.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubConfigurationModelInspector">
            <summary>Stub type of Castle.MicroKernel.ModelBuilder.Inspectors.ConfigurationModelInspector</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubConfigurationModelInspector.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubConfigurationModelInspector.InitializeStub">
            <summary>Initializes a new instance of type StubConfigurationModelInspector</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubConfigurationModelInspector.ProcessModel(Castle.MicroKernel.IKernel,Castle.Core.ComponentModel)">
            <summary>Sets the stub of ConfigurationModelInspector.ProcessModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubConfigurationModelInspector.ProcessModelIKernelComponentModel">
            <summary>Sets the stub of ConfigurationModelInspector.ProcessModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubConfigurationModelInspector.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubConfigurationModelInspector.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubConfigurationModelInspector.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubConfigurationParametersInspector">
            <summary>Stub type of Castle.MicroKernel.ModelBuilder.Inspectors.ConfigurationParametersInspector</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubConfigurationParametersInspector.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubConfigurationParametersInspector.InitializeStub">
            <summary>Initializes a new instance of type StubConfigurationParametersInspector</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubConfigurationParametersInspector.ProcessModel(Castle.MicroKernel.IKernel,Castle.Core.ComponentModel)">
            <summary>Sets the stub of ConfigurationParametersInspector.ProcessModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubConfigurationParametersInspector.ProcessModelIKernelComponentModel">
            <summary>Sets the stub of ConfigurationParametersInspector.ProcessModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubConfigurationParametersInspector.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubConfigurationParametersInspector.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubConfigurationParametersInspector.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubConstructorDependenciesModelInspector">
            <summary>Stub type of Castle.MicroKernel.ModelBuilder.Inspectors.ConstructorDependenciesModelInspector</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubConstructorDependenciesModelInspector.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubConstructorDependenciesModelInspector.CreateConstructorCandidate(Castle.Core.ComponentModel,System.Reflection.ConstructorInfo)">
            <summary>Sets the stub of ConstructorDependenciesModelInspector.CreateConstructorCandidate(ComponentModel model, ConstructorInfo constructor)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubConstructorDependenciesModelInspector.CreateConstructorCandidateComponentModelConstructorInfo">
            <summary>Sets the stub of ConstructorDependenciesModelInspector.CreateConstructorCandidate(ComponentModel model, ConstructorInfo constructor)</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubConstructorDependenciesModelInspector.InitializeStub">
            <summary>Initializes a new instance of type StubConstructorDependenciesModelInspector</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubConstructorDependenciesModelInspector.IsVisibleToContainer(System.Reflection.ConstructorInfo)">
            <summary>Sets the stub of ConstructorDependenciesModelInspector.IsVisibleToContainer(ConstructorInfo constructor)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubConstructorDependenciesModelInspector.IsVisibleToContainerConstructorInfo">
            <summary>Sets the stub of ConstructorDependenciesModelInspector.IsVisibleToContainer(ConstructorInfo constructor)</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubConstructorDependenciesModelInspector.ProcessModel(Castle.MicroKernel.IKernel,Castle.Core.ComponentModel)">
            <summary>Sets the stub of ConstructorDependenciesModelInspector.ProcessModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubConstructorDependenciesModelInspector.ProcessModelIKernelComponentModel">
            <summary>Sets the stub of ConstructorDependenciesModelInspector.ProcessModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubConstructorDependenciesModelInspector.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubConstructorDependenciesModelInspector.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubConstructorDependenciesModelInspector.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubGenericInspector">
            <summary>Stub type of Castle.MicroKernel.ModelBuilder.Inspectors.GenericInspector</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubGenericInspector.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubGenericInspector.InitializeStub">
            <summary>Initializes a new instance of type StubGenericInspector</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubGenericInspector.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubGenericInspector.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubGenericInspector.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubInterceptorInspector">
            <summary>Stub type of Castle.MicroKernel.ModelBuilder.Inspectors.InterceptorInspector</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubInterceptorInspector.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubInterceptorInspector.AddInterceptor(Castle.Core.InterceptorReference,Castle.Core.InterceptorReferenceCollection)">
            <summary>Sets the stub of InterceptorInspector.AddInterceptor(InterceptorReference interceptorRef, InterceptorReferenceCollection interceptors)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubInterceptorInspector.AddInterceptorInterceptorReferenceInterceptorReferenceCollection">
            <summary>Sets the stub of InterceptorInspector.AddInterceptor(InterceptorReference interceptorRef, InterceptorReferenceCollection interceptors)</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubInterceptorInspector.CollectFromAttributes(Castle.Core.ComponentModel)">
            <summary>Sets the stub of InterceptorInspector.CollectFromAttributes(ComponentModel model)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubInterceptorInspector.CollectFromAttributesComponentModel">
            <summary>Sets the stub of InterceptorInspector.CollectFromAttributes(ComponentModel model)</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubInterceptorInspector.CollectFromConfiguration(Castle.Core.ComponentModel)">
            <summary>Sets the stub of InterceptorInspector.CollectFromConfiguration(ComponentModel model)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubInterceptorInspector.CollectFromConfigurationComponentModel">
            <summary>Sets the stub of InterceptorInspector.CollectFromConfiguration(ComponentModel model)</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubInterceptorInspector.CollectHook(Castle.Core.Configuration.IConfiguration,Castle.MicroKernel.Proxy.ProxyOptions)">
            <summary>Sets the stub of InterceptorInspector.CollectHook(IConfiguration interceptors, ProxyOptions options)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubInterceptorInspector.CollectHookIConfigurationProxyOptions">
            <summary>Sets the stub of InterceptorInspector.CollectHook(IConfiguration interceptors, ProxyOptions options)</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubInterceptorInspector.CollectSelector(Castle.Core.Configuration.IConfiguration,Castle.MicroKernel.Proxy.ProxyOptions)">
            <summary>Sets the stub of InterceptorInspector.CollectSelector(IConfiguration interceptors, ProxyOptions options)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubInterceptorInspector.CollectSelectorIConfigurationProxyOptions">
            <summary>Sets the stub of InterceptorInspector.CollectSelector(IConfiguration interceptors, ProxyOptions options)</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubInterceptorInspector.InitializeStub">
            <summary>Initializes a new instance of type StubInterceptorInspector</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubInterceptorInspector.ProcessModel(Castle.MicroKernel.IKernel,Castle.Core.ComponentModel)">
            <summary>Sets the stub of InterceptorInspector.ProcessModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubInterceptorInspector.ProcessModelIKernelComponentModel">
            <summary>Sets the stub of InterceptorInspector.ProcessModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubInterceptorInspector.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubInterceptorInspector.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubInterceptorInspector.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubLifecycleModelInspector">
            <summary>Stub type of Castle.MicroKernel.ModelBuilder.Inspectors.LifecycleModelInspector</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubLifecycleModelInspector.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubLifecycleModelInspector.InitializeStub">
            <summary>Initializes a new instance of type StubLifecycleModelInspector</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubLifecycleModelInspector.ProcessModel(Castle.MicroKernel.IKernel,Castle.Core.ComponentModel)">
            <summary>Sets the stub of LifecycleModelInspector.ProcessModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubLifecycleModelInspector.ProcessModelIKernelComponentModel">
            <summary>Sets the stub of LifecycleModelInspector.ProcessModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubLifecycleModelInspector.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubLifecycleModelInspector.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubLifecycleModelInspector.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubLifestyleModelInspector">
            <summary>Stub type of Castle.MicroKernel.ModelBuilder.Inspectors.LifestyleModelInspector</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubLifestyleModelInspector.#ctor(Castle.MicroKernel.SubSystems.Conversion.IConversionManager)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubLifestyleModelInspector.InitializeStub">
            <summary>Initializes a new instance of type StubLifestyleModelInspector</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubLifestyleModelInspector.ProcessModel(Castle.MicroKernel.IKernel,Castle.Core.ComponentModel)">
            <summary>Sets the stub of LifestyleModelInspector.ProcessModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubLifestyleModelInspector.ProcessModelIKernelComponentModel">
            <summary>Sets the stub of LifestyleModelInspector.ProcessModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubLifestyleModelInspector.ReadLifestyleFromConfiguration(Castle.Core.ComponentModel)">
            <summary>Sets the stub of LifestyleModelInspector.ReadLifestyleFromConfiguration(ComponentModel model)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubLifestyleModelInspector.ReadLifestyleFromConfigurationComponentModel">
            <summary>Sets the stub of LifestyleModelInspector.ReadLifestyleFromConfiguration(ComponentModel model)</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubLifestyleModelInspector.ReadLifestyleFromType(Castle.Core.ComponentModel)">
            <summary>Sets the stub of LifestyleModelInspector.ReadLifestyleFromType(ComponentModel model)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubLifestyleModelInspector.ReadLifestyleFromTypeComponentModel">
            <summary>Sets the stub of LifestyleModelInspector.ReadLifestyleFromType(ComponentModel model)</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubLifestyleModelInspector.ValidateTypeFromAttribute(System.Type,System.Type,System.String)">
            <summary>Sets the stub of LifestyleModelInspector.ValidateTypeFromAttribute(Type typeFromAttribute, Type expectedInterface, String attribute)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubLifestyleModelInspector.ValidateTypeFromAttributeTypeTypeString">
            <summary>Sets the stub of LifestyleModelInspector.ValidateTypeFromAttribute(Type typeFromAttribute, Type expectedInterface, String attribute)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubLifestyleModelInspector.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubLifestyleModelInspector.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubLifestyleModelInspector.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubMethodMetaInspector">
            <summary>Stub type of Castle.MicroKernel.ModelBuilder.Inspectors.MethodMetaInspector</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubMethodMetaInspector.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubMethodMetaInspector.InitializeStub">
            <summary>Initializes a new instance of type StubMethodMetaInspector</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubMethodMetaInspector.IsValidMeta(Castle.Core.ComponentModel,Castle.Core.MethodMetaModel)">
            <summary>Sets the stub of MethodMetaInspector.IsValidMeta(ComponentModel model, MethodMetaModel metaModel)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubMethodMetaInspector.IsValidMetaComponentModelMethodMetaModel">
            <summary>Sets the stub of MethodMetaInspector.IsValidMeta(ComponentModel model, MethodMetaModel metaModel)</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubMethodMetaInspector.ObtainNodeName">
            <summary>Sets the stub of MethodMetaInspector.ObtainNodeName()</summary>
        </member>
        <member name="F:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubMethodMetaInspector.ObtainNodeName01">
            <summary>Sets the stub of MethodMetaInspector.ObtainNodeName()</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubMethodMetaInspector.ProcessMeta(Castle.Core.ComponentModel,System.Collections.Generic.IList{System.Reflection.MethodInfo},Castle.Core.MethodMetaModel)">
            <summary>Sets the stub of MethodMetaInspector.ProcessMeta(ComponentModel model, IList`1&lt;MethodInfo&gt; methods, MethodMetaModel metaModel)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubMethodMetaInspector.ProcessMetaComponentModelIListOfMethodInfoMethodMetaModel">
            <summary>Sets the stub of MethodMetaInspector.ProcessMeta(ComponentModel model, IList`1&lt;MethodInfo&gt; methods, MethodMetaModel metaModel)</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubMethodMetaInspector.ProcessModel(Castle.MicroKernel.IKernel,Castle.Core.ComponentModel)">
            <summary>Sets the stub of MethodMetaInspector.ProcessModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubMethodMetaInspector.ProcessModelIKernelComponentModel">
            <summary>Sets the stub of MethodMetaInspector.ProcessModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubMethodMetaInspector.ShouldUseMetaModelGet">
            <summary>Sets the stub of MethodMetaInspector.get_ShouldUseMetaModel()</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubMethodMetaInspector.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubMethodMetaInspector.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubMethodMetaInspector.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubMethodMetaInspector.ShouldUseMetaModel">
            <summary>Sets the stub of MethodMetaInspector.get_ShouldUseMetaModel()</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubMixinInspector">
            <summary>Stub type of Castle.MicroKernel.ModelBuilder.Inspectors.MixinInspector</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubMixinInspector.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubMixinInspector.InitializeStub">
            <summary>Initializes a new instance of type StubMixinInspector</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubMixinInspector.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubMixinInspector.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubMixinInspector.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubPropertiesDependenciesModelInspector">
            <summary>Stub type of Castle.MicroKernel.ModelBuilder.Inspectors.PropertiesDependenciesModelInspector</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubPropertiesDependenciesModelInspector.#ctor(Castle.MicroKernel.SubSystems.Conversion.IConversionManager)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubPropertiesDependenciesModelInspector.InitializeStub">
            <summary>Initializes a new instance of type StubPropertiesDependenciesModelInspector</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubPropertiesDependenciesModelInspector.InspectProperties(Castle.Core.ComponentModel)">
            <summary>Sets the stub of PropertiesDependenciesModelInspector.InspectProperties(ComponentModel model)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubPropertiesDependenciesModelInspector.InspectPropertiesComponentModel">
            <summary>Sets the stub of PropertiesDependenciesModelInspector.InspectProperties(ComponentModel model)</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubPropertiesDependenciesModelInspector.ProcessModel(Castle.MicroKernel.IKernel,Castle.Core.ComponentModel)">
            <summary>Sets the stub of PropertiesDependenciesModelInspector.ProcessModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="F:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubPropertiesDependenciesModelInspector.ProcessModelIKernelComponentModel">
            <summary>Sets the stub of PropertiesDependenciesModelInspector.ProcessModel(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubPropertiesDependenciesModelInspector.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubPropertiesDependenciesModelInspector.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubPropertiesDependenciesModelInspector.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.Proxy.Fakes.ShimNotSupportedProxyFactory">
            <summary>Shim type of Castle.MicroKernel.Proxy.NotSupportedProxyFactory</summary>
        </member>
        <member name="M:Castle.MicroKernel.Proxy.Fakes.ShimNotSupportedProxyFactory.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Proxy.Fakes.ShimNotSupportedProxyFactory.#ctor(Castle.MicroKernel.Proxy.NotSupportedProxyFactory)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Proxy.Fakes.ShimNotSupportedProxyFactory.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Proxy.Fakes.ShimNotSupportedProxyFactory.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Proxy.Fakes.ShimNotSupportedProxyFactory.Bind(Castle.MicroKernel.IProxyFactory)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Proxy.Fakes.ShimNotSupportedProxyFactory.AddInterceptorSelectorIModelInterceptorsSelector">
            <summary>Sets the shim of NotSupportedProxyFactory.AddInterceptorSelector(IModelInterceptorsSelector selector)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Proxy.Fakes.ShimNotSupportedProxyFactory.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Proxy.Fakes.ShimNotSupportedProxyFactory.Constructor">
            <summary>Sets the shim of NotSupportedProxyFactory.NotSupportedProxyFactory()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Proxy.Fakes.ShimNotSupportedProxyFactory.CreateIKernelObjectComponentModelCreationContextObjectArray">
            <summary>Sets the shim of NotSupportedProxyFactory.Create(IKernel kernel, Object instance, ComponentModel mode, CreationContext context, Object[] constructorArguments)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Proxy.Fakes.ShimNotSupportedProxyFactory.CreateIProxyFactoryExtensionIKernelComponentModelCreationContextObjectArray">
            <summary>Sets the shim of NotSupportedProxyFactory.Create(IProxyFactoryExtension customFactory, IKernel kernel, ComponentModel model, CreationContext context, Object[] constructorArguments)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Proxy.Fakes.ShimNotSupportedProxyFactory.RequiresTargetInstanceIKernelComponentModel">
            <summary>Sets the shim of NotSupportedProxyFactory.RequiresTargetInstance(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Proxy.Fakes.ShimNotSupportedProxyFactory.ShouldCreateProxyComponentModel">
            <summary>Sets the shim of NotSupportedProxyFactory.ShouldCreateProxy(ComponentModel model)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Proxy.Fakes.ShimNotSupportedProxyFactory.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.Proxy.Fakes.ShimNotSupportedProxyFactory.AllInstances.AddInterceptorSelectorIModelInterceptorsSelector">
            <summary>Sets the shim of NotSupportedProxyFactory.AddInterceptorSelector(IModelInterceptorsSelector selector)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Proxy.Fakes.ShimNotSupportedProxyFactory.AllInstances.CreateIKernelObjectComponentModelCreationContextObjectArray">
            <summary>Sets the shim of NotSupportedProxyFactory.Create(IKernel kernel, Object instance, ComponentModel mode, CreationContext context, Object[] constructorArguments)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Proxy.Fakes.ShimNotSupportedProxyFactory.AllInstances.CreateIProxyFactoryExtensionIKernelComponentModelCreationContextObjectArray">
            <summary>Sets the shim of NotSupportedProxyFactory.Create(IProxyFactoryExtension customFactory, IKernel kernel, ComponentModel model, CreationContext context, Object[] constructorArguments)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Proxy.Fakes.ShimNotSupportedProxyFactory.AllInstances.RequiresTargetInstanceIKernelComponentModel">
            <summary>Sets the shim of NotSupportedProxyFactory.RequiresTargetInstance(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Proxy.Fakes.ShimNotSupportedProxyFactory.AllInstances.ShouldCreateProxyComponentModel">
            <summary>Sets the shim of NotSupportedProxyFactory.ShouldCreateProxy(ComponentModel model)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Proxy.Fakes.ShimProxyConstants">
            <summary>Shim type of Castle.MicroKernel.Proxy.ProxyConstants</summary>
        </member>
        <member name="M:Castle.MicroKernel.Proxy.Fakes.ShimProxyConstants.#ctor(Castle.MicroKernel.Proxy.ProxyConstants)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Proxy.Fakes.ShimProxyConstants.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Proxy.Fakes.ShimProxyConstants.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Proxy.Fakes.ShimProxyConstants.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Proxy.Fakes.ShimProxyConstants.Constructor">
            <summary>Sets the shim of ProxyConstants.ProxyConstants()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Proxy.Fakes.ShimProxyConstants.StaticConstructor">
            <summary>Sets the shim of ProxyConstants.ProxyConstants()</summary>
        </member>
        <member name="T:Castle.MicroKernel.Proxy.Fakes.ShimProxyConstants.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="T:Castle.MicroKernel.Proxy.Fakes.ShimProxyOptions">
            <summary>Shim type of Castle.MicroKernel.Proxy.ProxyOptions</summary>
        </member>
        <member name="M:Castle.MicroKernel.Proxy.Fakes.ShimProxyOptions.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Proxy.Fakes.ShimProxyOptions.#ctor(Castle.MicroKernel.Proxy.ProxyOptions)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Proxy.Fakes.ShimProxyOptions.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Proxy.Fakes.ShimProxyOptions.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Proxy.Fakes.ShimProxyOptions.AddAdditionalInterfacesTypeArray">
            <summary>Sets the shim of ProxyOptions.AddAdditionalInterfaces(Type[] interfaces)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Proxy.Fakes.ShimProxyOptions.AddMixInsObjectArray">
            <summary>Sets the shim of ProxyOptions.AddMixIns(Object[] mixIns)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Proxy.Fakes.ShimProxyOptions.AddMixinReferenceIReferenceOfObject">
            <summary>Sets the shim of ProxyOptions.AddMixinReference(IReference`1&lt;Object&gt; mixIn)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Proxy.Fakes.ShimProxyOptions.AdditionalInterfacesAreEqualsProxyOptions">
            <summary>Sets the shim of ProxyOptions.AdditionalInterfacesAreEquals(ProxyOptions proxyOptions)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Proxy.Fakes.ShimProxyOptions.AdditionalInterfacesGet">
            <summary>Sets the shim of ProxyOptions.get_AdditionalInterfaces()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Proxy.Fakes.ShimProxyOptions.AllowChangeTargetGet">
            <summary>Sets the shim of ProxyOptions.get_AllowChangeTarget()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Proxy.Fakes.ShimProxyOptions.AllowChangeTargetSetBoolean">
            <summary>Sets the shim of ProxyOptions.set_AllowChangeTarget(Boolean value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Proxy.Fakes.ShimProxyOptions.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Proxy.Fakes.ShimProxyOptions.ConstructorComponentModel">
            <summary>Sets the shim of ProxyOptions.ProxyOptions(ComponentModel component)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Proxy.Fakes.ShimProxyOptions.EqualsObject">
            <summary>Sets the shim of ProxyOptions.Equals(Object obj)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Proxy.Fakes.ShimProxyOptions.GetCollectionHashCodeIEnumerable">
            <summary>Sets the shim of ProxyOptions.GetCollectionHashCode(IEnumerable items)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Proxy.Fakes.ShimProxyOptions.GetHashCode">
            <summary>Sets the shim of ProxyOptions.GetHashCode()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Proxy.Fakes.ShimProxyOptions.HookGet">
            <summary>Sets the shim of ProxyOptions.get_Hook()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Proxy.Fakes.ShimProxyOptions.HookSetIReferenceOfIProxyGenerationHook">
            <summary>Sets the shim of ProxyOptions.set_Hook(IReference`1&lt;IProxyGenerationHook&gt; value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Proxy.Fakes.ShimProxyOptions.MixInsAreEqualsProxyOptions">
            <summary>Sets the shim of ProxyOptions.MixInsAreEquals(ProxyOptions proxyOptions)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Proxy.Fakes.ShimProxyOptions.MixInsGet">
            <summary>Sets the shim of ProxyOptions.get_MixIns()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Proxy.Fakes.ShimProxyOptions.OmitTargetGet">
            <summary>Sets the shim of ProxyOptions.get_OmitTarget()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Proxy.Fakes.ShimProxyOptions.OmitTargetSetBoolean">
            <summary>Sets the shim of ProxyOptions.set_OmitTarget(Boolean value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Proxy.Fakes.ShimProxyOptions.RequiresProxyGet">
            <summary>Sets the shim of ProxyOptions.get_RequiresProxy()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Proxy.Fakes.ShimProxyOptions.SelectorGet">
            <summary>Sets the shim of ProxyOptions.get_Selector()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Proxy.Fakes.ShimProxyOptions.SelectorSetIReferenceOfIInterceptorSelector">
            <summary>Sets the shim of ProxyOptions.set_Selector(IReference`1&lt;IInterceptorSelector&gt; value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Proxy.Fakes.ShimProxyOptions.UseMarshalByRefAsBaseClassGet">
            <summary>Sets the shim of ProxyOptions.get_UseMarshalByRefAsBaseClass()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Proxy.Fakes.ShimProxyOptions.UseMarshalByRefAsBaseClassSetBoolean">
            <summary>Sets the shim of ProxyOptions.set_UseMarshalByRefAsBaseClass(Boolean value)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Proxy.Fakes.ShimProxyOptions.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.Proxy.Fakes.ShimProxyOptions.AllInstances.AddAdditionalInterfacesTypeArray">
            <summary>Sets the shim of ProxyOptions.AddAdditionalInterfaces(Type[] interfaces)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Proxy.Fakes.ShimProxyOptions.AllInstances.AddMixInsObjectArray">
            <summary>Sets the shim of ProxyOptions.AddMixIns(Object[] mixIns)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Proxy.Fakes.ShimProxyOptions.AllInstances.AddMixinReferenceIReferenceOfObject">
            <summary>Sets the shim of ProxyOptions.AddMixinReference(IReference`1&lt;Object&gt; mixIn)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Proxy.Fakes.ShimProxyOptions.AllInstances.AdditionalInterfacesAreEqualsProxyOptions">
            <summary>Sets the shim of ProxyOptions.AdditionalInterfacesAreEquals(ProxyOptions proxyOptions)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Proxy.Fakes.ShimProxyOptions.AllInstances.AdditionalInterfacesGet">
            <summary>Sets the shim of ProxyOptions.get_AdditionalInterfaces()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Proxy.Fakes.ShimProxyOptions.AllInstances.AllowChangeTargetGet">
            <summary>Sets the shim of ProxyOptions.get_AllowChangeTarget()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Proxy.Fakes.ShimProxyOptions.AllInstances.AllowChangeTargetSetBoolean">
            <summary>Sets the shim of ProxyOptions.set_AllowChangeTarget(Boolean value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Proxy.Fakes.ShimProxyOptions.AllInstances.EqualsObject">
            <summary>Sets the shim of ProxyOptions.Equals(Object obj)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Proxy.Fakes.ShimProxyOptions.AllInstances.GetCollectionHashCodeIEnumerable">
            <summary>Sets the shim of ProxyOptions.GetCollectionHashCode(IEnumerable items)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Proxy.Fakes.ShimProxyOptions.AllInstances.GetHashCode01">
            <summary>Sets the shim of ProxyOptions.GetHashCode()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Proxy.Fakes.ShimProxyOptions.AllInstances.HookGet">
            <summary>Sets the shim of ProxyOptions.get_Hook()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Proxy.Fakes.ShimProxyOptions.AllInstances.HookSetIReferenceOfIProxyGenerationHook">
            <summary>Sets the shim of ProxyOptions.set_Hook(IReference`1&lt;IProxyGenerationHook&gt; value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Proxy.Fakes.ShimProxyOptions.AllInstances.MixInsAreEqualsProxyOptions">
            <summary>Sets the shim of ProxyOptions.MixInsAreEquals(ProxyOptions proxyOptions)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Proxy.Fakes.ShimProxyOptions.AllInstances.MixInsGet">
            <summary>Sets the shim of ProxyOptions.get_MixIns()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Proxy.Fakes.ShimProxyOptions.AllInstances.OmitTargetGet">
            <summary>Sets the shim of ProxyOptions.get_OmitTarget()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Proxy.Fakes.ShimProxyOptions.AllInstances.OmitTargetSetBoolean">
            <summary>Sets the shim of ProxyOptions.set_OmitTarget(Boolean value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Proxy.Fakes.ShimProxyOptions.AllInstances.RequiresProxyGet">
            <summary>Sets the shim of ProxyOptions.get_RequiresProxy()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Proxy.Fakes.ShimProxyOptions.AllInstances.SelectorGet">
            <summary>Sets the shim of ProxyOptions.get_Selector()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Proxy.Fakes.ShimProxyOptions.AllInstances.SelectorSetIReferenceOfIInterceptorSelector">
            <summary>Sets the shim of ProxyOptions.set_Selector(IReference`1&lt;IInterceptorSelector&gt; value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Proxy.Fakes.ShimProxyOptions.AllInstances.UseMarshalByRefAsBaseClassGet">
            <summary>Sets the shim of ProxyOptions.get_UseMarshalByRefAsBaseClass()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Proxy.Fakes.ShimProxyOptions.AllInstances.UseMarshalByRefAsBaseClassSetBoolean">
            <summary>Sets the shim of ProxyOptions.set_UseMarshalByRefAsBaseClass(Boolean value)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Proxy.Fakes.ShimProxyOptionsUtil">
            <summary>Shim type of Castle.MicroKernel.Proxy.ProxyOptionsUtil</summary>
        </member>
        <member name="M:Castle.MicroKernel.Proxy.Fakes.ShimProxyOptionsUtil.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Proxy.Fakes.ShimProxyOptionsUtil.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Proxy.Fakes.ShimProxyOptionsUtil.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Proxy.Fakes.ShimProxyOptionsUtil.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Proxy.Fakes.ShimProxyOptionsUtil.ObtainProxyOptionsComponentModelBoolean">
            <summary>Sets the shim of ProxyOptionsUtil.ObtainProxyOptions(ComponentModel model, Boolean createOnDemand)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Proxy.Fakes.StubIModelInterceptorsSelector">
            <summary>Stub type of Castle.MicroKernel.Proxy.IModelInterceptorsSelector</summary>
        </member>
        <member name="M:Castle.MicroKernel.Proxy.Fakes.StubIModelInterceptorsSelector.#ctor">
            <summary>Initializes a new instance of type StubIModelInterceptorsSelector</summary>
        </member>
        <member name="M:Castle.MicroKernel.Proxy.Fakes.StubIModelInterceptorsSelector.cw::Castle#MicroKernel#Proxy#IModelInterceptorsSelector#HasInterceptors(Castle.Core.ComponentModel)">
            <summary>Sets the stub of IModelInterceptorsSelector.HasInterceptors(ComponentModel model)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Proxy.Fakes.StubIModelInterceptorsSelector.cw::Castle#MicroKernel#Proxy#IModelInterceptorsSelector#SelectInterceptors(Castle.Core.ComponentModel,Castle.Core.InterceptorReference[])">
            <summary>Sets the stub of IModelInterceptorsSelector.SelectInterceptors(ComponentModel model, InterceptorReference[] interceptors)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Proxy.Fakes.StubIModelInterceptorsSelector.HasInterceptorsComponentModel">
            <summary>Sets the stub of IModelInterceptorsSelector.HasInterceptors(ComponentModel model)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Proxy.Fakes.StubIModelInterceptorsSelector.SelectInterceptorsComponentModelInterceptorReferenceArray">
            <summary>Sets the stub of IModelInterceptorsSelector.SelectInterceptors(ComponentModel model, InterceptorReference[] interceptors)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Proxy.Fakes.StubNotSupportedProxyFactory">
            <summary>Stub type of Castle.MicroKernel.Proxy.NotSupportedProxyFactory</summary>
        </member>
        <member name="M:Castle.MicroKernel.Proxy.Fakes.StubNotSupportedProxyFactory.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Proxy.Fakes.StubNotSupportedProxyFactory.InitializeStub">
            <summary>Initializes a new instance of type StubNotSupportedProxyFactory</summary>
        </member>
        <member name="P:Castle.MicroKernel.Proxy.Fakes.StubNotSupportedProxyFactory.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.Proxy.Fakes.StubNotSupportedProxyFactory.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Proxy.Fakes.StubNotSupportedProxyFactory.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.Proxy.Fakes.StubProxyConstants">
            <summary>Stub type of Castle.MicroKernel.Proxy.ProxyConstants</summary>
        </member>
        <member name="M:Castle.MicroKernel.Proxy.Fakes.StubProxyConstants.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Proxy.Fakes.StubProxyConstants.InitializeStub">
            <summary>Initializes a new instance of type StubProxyConstants</summary>
        </member>
        <member name="P:Castle.MicroKernel.Proxy.Fakes.StubProxyConstants.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.Proxy.Fakes.StubProxyConstants.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Proxy.Fakes.StubProxyConstants.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.Proxy.Fakes.StubProxyOptions">
            <summary>Stub type of Castle.MicroKernel.Proxy.ProxyOptions</summary>
        </member>
        <member name="M:Castle.MicroKernel.Proxy.Fakes.StubProxyOptions.#ctor(Castle.Core.ComponentModel)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Proxy.Fakes.StubProxyOptions.Equals(System.Object)">
            <summary>Sets the stub of ProxyOptions.Equals(Object obj)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Proxy.Fakes.StubProxyOptions.EqualsObject">
            <summary>Sets the stub of ProxyOptions.Equals(Object obj)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Proxy.Fakes.StubProxyOptions.GetHashCode">
            <summary>Sets the stub of ProxyOptions.GetHashCode()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Proxy.Fakes.StubProxyOptions.GetHashCode01">
            <summary>Sets the stub of ProxyOptions.GetHashCode()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Proxy.Fakes.StubProxyOptions.InitializeStub">
            <summary>Initializes a new instance of type StubProxyOptions</summary>
        </member>
        <member name="P:Castle.MicroKernel.Proxy.Fakes.StubProxyOptions.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.Proxy.Fakes.StubProxyOptions.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Proxy.Fakes.StubProxyOptions.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.Registration.Fakes.ShimAssemblyFilter">
            <summary>Shim type of Castle.MicroKernel.Registration.AssemblyFilter</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimAssemblyFilter.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimAssemblyFilter.#ctor(Castle.MicroKernel.Registration.AssemblyFilter)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimAssemblyFilter.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimAssemblyFilter.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimAssemblyFilter.Bind(Castle.Core.Internal.IAssemblyProvider)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimAssemblyFilter.WithKeyTokenOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.Registration.AssemblyFilter})">
            <summary>Sets the shim of AssemblyFilter.WithKeyToken()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimAssemblyFilter.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimAssemblyFilter.CastleCoreInternalIAssemblyProviderGetAssemblies">
            <summary>Sets the shim of AssemblyFilter.Castle.Core.Internal.IAssemblyProvider.GetAssemblies()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimAssemblyFilter.ConstructorStringString">
            <summary>Sets the shim of AssemblyFilter.AssemblyFilter(String directoryName, String mask)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimAssemblyFilter.ExtractKeyTokenString">
            <summary>Sets the shim of AssemblyFilter.ExtractKeyToken(String keyToken)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimAssemblyFilter.FilterByAssemblyPredicateOfAssembly">
            <summary>Sets the shim of AssemblyFilter.FilterByAssembly(Predicate`1&lt;Assembly&gt; filter)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimAssemblyFilter.FilterByNamePredicateOfAssemblyName">
            <summary>Sets the shim of AssemblyFilter.FilterByName(Predicate`1&lt;AssemblyName&gt; filter)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimAssemblyFilter.GetFiles">
            <summary>Sets the shim of AssemblyFilter.GetFiles()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimAssemblyFilter.GetFullPathString">
            <summary>Sets the shim of AssemblyFilter.GetFullPath(String path)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimAssemblyFilter.IsTokenEqualByteArrayByteArray">
            <summary>Sets the shim of AssemblyFilter.IsTokenEqual(Byte[] actualToken, Byte[] expectedToken)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimAssemblyFilter.LoadAssemblyIgnoringErrorsString">
            <summary>Sets the shim of AssemblyFilter.LoadAssemblyIgnoringErrors(String file)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimAssemblyFilter.StaticConstructor">
            <summary>Sets the shim of AssemblyFilter.AssemblyFilter()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimAssemblyFilter.WithKeyTokenAssembly">
            <summary>Sets the shim of AssemblyFilter.WithKeyToken(Assembly assembly)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimAssemblyFilter.WithKeyTokenByteArray">
            <summary>Sets the shim of AssemblyFilter.WithKeyToken(Byte[] publicKeyToken)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimAssemblyFilter.WithKeyTokenString">
            <summary>Sets the shim of AssemblyFilter.WithKeyToken(String publicKeyToken)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimAssemblyFilter.WithKeyTokenType">
            <summary>Sets the shim of AssemblyFilter.WithKeyToken(Type typeFromAssemblySignedWithKey)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimAssemblyFilter._ctorb__0Assembly">
            <summary>Sets the shim of AssemblyFilter.&lt;.ctor&gt;b__0(Assembly a)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Registration.Fakes.ShimAssemblyFilter.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimAssemblyFilter.AllInstances.WithKeyTokenOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.Registration.AssemblyFilter,Castle.MicroKernel.Registration.AssemblyFilter})">
            <summary>Sets the shim of AssemblyFilter.WithKeyToken()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimAssemblyFilter.AllInstances.CastleCoreInternalIAssemblyProviderGetAssemblies">
            <summary>Sets the shim of AssemblyFilter.Castle.Core.Internal.IAssemblyProvider.GetAssemblies()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimAssemblyFilter.AllInstances.ExtractKeyTokenString">
            <summary>Sets the shim of AssemblyFilter.ExtractKeyToken(String keyToken)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimAssemblyFilter.AllInstances.FilterByAssemblyPredicateOfAssembly">
            <summary>Sets the shim of AssemblyFilter.FilterByAssembly(Predicate`1&lt;Assembly&gt; filter)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimAssemblyFilter.AllInstances.FilterByNamePredicateOfAssemblyName">
            <summary>Sets the shim of AssemblyFilter.FilterByName(Predicate`1&lt;AssemblyName&gt; filter)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimAssemblyFilter.AllInstances.GetFiles">
            <summary>Sets the shim of AssemblyFilter.GetFiles()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimAssemblyFilter.AllInstances.LoadAssemblyIgnoringErrorsString">
            <summary>Sets the shim of AssemblyFilter.LoadAssemblyIgnoringErrors(String file)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimAssemblyFilter.AllInstances.WithKeyTokenAssembly">
            <summary>Sets the shim of AssemblyFilter.WithKeyToken(Assembly assembly)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimAssemblyFilter.AllInstances.WithKeyTokenByteArray">
            <summary>Sets the shim of AssemblyFilter.WithKeyToken(Byte[] publicKeyToken)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimAssemblyFilter.AllInstances.WithKeyTokenString">
            <summary>Sets the shim of AssemblyFilter.WithKeyToken(String publicKeyToken)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimAssemblyFilter.AllInstances.WithKeyTokenType">
            <summary>Sets the shim of AssemblyFilter.WithKeyToken(Type typeFromAssemblySignedWithKey)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Registration.Fakes.ShimAttrib">
            <summary>Shim type of Castle.MicroKernel.Registration.Attrib</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimAttrib.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimAttrib.#ctor(Castle.MicroKernel.Registration.Attrib)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimAttrib.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimAttrib.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimAttrib.ApplyToIConfiguration">
            <summary>Sets the shim of Attrib.ApplyTo(IConfiguration configuration)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimAttrib.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimAttrib.ConstructorStringString">
            <summary>Sets the shim of Attrib.Attrib(String name, String value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimAttrib.ForNameString">
            <summary>Sets the shim of Attrib.ForName(String name)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Registration.Fakes.ShimAttrib.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimAttrib.AllInstances.ApplyToIConfiguration">
            <summary>Sets the shim of Attrib.ApplyTo(IConfiguration configuration)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor">
            <summary>Shim type of Castle.MicroKernel.Registration.BasedOnDescriptor</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor.#ctor(Castle.MicroKernel.Registration.BasedOnDescriptor)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor.BasedOnOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.Registration.BasedOnDescriptor})">
            <summary>Sets the shim of BasedOnDescriptor.BasedOn()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor.Bind(Castle.MicroKernel.Registration.IRegistration)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor.ConfigureForOf1ActionOfComponentRegistration``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Action{Castle.MicroKernel.Registration.ComponentRegistration},Castle.MicroKernel.Registration.BasedOnDescriptor})">
            <summary>Sets the shim of BasedOnDescriptor.ConfigureFor(Action`1&lt;ComponentRegistration&gt; configurer)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor.LifestyleBoundToNearestOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.Registration.BasedOnDescriptor})">
            <summary>Sets the shim of BasedOnDescriptor.LifestyleBoundToNearest()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor.LifestyleBoundToOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.Registration.BasedOnDescriptor})">
            <summary>Sets the shim of BasedOnDescriptor.LifestyleBoundTo()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor.LifestyleCustomOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.Registration.BasedOnDescriptor})">
            <summary>Sets the shim of BasedOnDescriptor.LifestyleCustom()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor.LifestyleScopedOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.Registration.BasedOnDescriptor})">
            <summary>Sets the shim of BasedOnDescriptor.LifestyleScoped()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor._ConfigureForb__0Of1ComponentRegistration``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.Registration.ComponentRegistration,System.Boolean})">
            <summary>Sets the shim of BasedOnDescriptor.&lt;ConfigureFor&gt;b__0(ComponentRegistration r)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor._LifestyleBoundToNearestb__14Of1ComponentRegistration``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{Castle.MicroKernel.Registration.ComponentRegistration})">
            <summary>Sets the shim of BasedOnDescriptor.&lt;LifestyleBoundToNearest&gt;b__14(ComponentRegistration c)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor._LifestyleBoundTob__13Of1ComponentRegistration``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{Castle.MicroKernel.Registration.ComponentRegistration})">
            <summary>Sets the shim of BasedOnDescriptor.&lt;LifestyleBoundTo&gt;b__13(ComponentRegistration c)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor._LifestyleCustomb__aOf1ComponentRegistration``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{Castle.MicroKernel.Registration.ComponentRegistration})">
            <summary>Sets the shim of BasedOnDescriptor.&lt;LifestyleCustom&gt;b__a(ComponentRegistration c)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor._LifestyleScopedb__12Of1ComponentRegistration``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{Castle.MicroKernel.Registration.ComponentRegistration})">
            <summary>Sets the shim of BasedOnDescriptor.&lt;LifestyleScoped&gt;b__12(ComponentRegistration c)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor.AcceptsTypeTypeArrayOut">
            <summary>Sets the shim of BasedOnDescriptor.Accepts(Type type, Type[]&amp; baseTypes)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor.AllowMultipleMatches">
            <summary>Sets the shim of BasedOnDescriptor.AllowMultipleMatches()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor.BasedOnType">
            <summary>Sets the shim of BasedOnDescriptor.BasedOn(Type basedOn)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor.CastleMicroKernelRegistrationIRegistrationRegisterIKernelInternal">
            <summary>Sets the shim of BasedOnDescriptor.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor.ConfigureActionOfComponentRegistration">
            <summary>Sets the shim of BasedOnDescriptor.Configure(Action`1&lt;ComponentRegistration&gt; configurer)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor.ConfigureIfPredicateOfComponentRegistrationActionOfComponentRegistration">
            <summary>Sets the shim of BasedOnDescriptor.ConfigureIf(Predicate`1&lt;ComponentRegistration&gt; condition, Action`1&lt;ComponentRegistration&gt; configurer)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor.ConfigureIfPredicateOfComponentRegistrationActionOfComponentRegistrationActionOfComponentRegistration">
            <summary>Sets the shim of BasedOnDescriptor.ConfigureIf(Predicate`1&lt;ComponentRegistration&gt; condition, Action`1&lt;ComponentRegistration&gt; configurerWhenTrue, Action`1&lt;ComponentRegistration&gt; configurerWhenFalse)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor.ConstructorIEnumerableOfTypeFromDescriptorPredicateOfType">
            <summary>Sets the shim of BasedOnDescriptor.BasedOnDescriptor(IEnumerable`1&lt;Type&gt; basedOn, FromDescriptor from, Predicate`1&lt;Type&gt; additionalFilters)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor.ExecuteIfConditionType">
            <summary>Sets the shim of BasedOnDescriptor.ExecuteIfCondition(Type type)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor.ExecuteUnlessConditionType">
            <summary>Sets the shim of BasedOnDescriptor.ExecuteUnlessCondition(Type type)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor.IfPredicateOfType">
            <summary>Sets the shim of BasedOnDescriptor.If(Predicate`1&lt;Type&gt; ifFilter)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor.IsBasedOnGenericClassTypeTypeTypeArrayOut">
            <summary>Sets the shim of BasedOnDescriptor.IsBasedOnGenericClass(Type type, Type basedOn, Type[]&amp; baseTypes)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor.IsBasedOnGenericInterfaceTypeTypeTypeArrayOut">
            <summary>Sets the shim of BasedOnDescriptor.IsBasedOnGenericInterface(Type type, Type basedOn, Type[]&amp; baseTypes)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor.IsBasedOnTypeTypeArrayOut">
            <summary>Sets the shim of BasedOnDescriptor.IsBasedOn(Type type, Type[]&amp; baseTypes)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor.LifestyleCustomType">
            <summary>Sets the shim of BasedOnDescriptor.LifestyleCustom(Type customLifestyleType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor.LifestylePerThread">
            <summary>Sets the shim of BasedOnDescriptor.LifestylePerThread()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor.LifestylePerWebRequest">
            <summary>Sets the shim of BasedOnDescriptor.LifestylePerWebRequest()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor.LifestylePooledNullableOfInt32NullableOfInt32">
            <summary>Sets the shim of BasedOnDescriptor.LifestylePooled(Nullable`1&lt;Int32&gt; initialSize, Nullable`1&lt;Int32&gt; maxSize)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor.LifestyleScoped">
            <summary>Sets the shim of BasedOnDescriptor.LifestyleScoped()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor.LifestyleScopedType">
            <summary>Sets the shim of BasedOnDescriptor.LifestyleScoped(Type scopeAccessorType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor.LifestyleSingleton">
            <summary>Sets the shim of BasedOnDescriptor.LifestyleSingleton()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor.LifestyleTransient">
            <summary>Sets the shim of BasedOnDescriptor.LifestyleTransient()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor.OrBasedOnType">
            <summary>Sets the shim of BasedOnDescriptor.OrBasedOn(Type basedOn)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor.TryRegisterTypeIKernel">
            <summary>Sets the shim of BasedOnDescriptor.TryRegister(Type type, IKernel kernel)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor.UnlessPredicateOfType">
            <summary>Sets the shim of BasedOnDescriptor.Unless(Predicate`1&lt;Type&gt; unlessFilter)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor.WherePredicateOfType">
            <summary>Sets the shim of BasedOnDescriptor.Where(Predicate`1&lt;Type&gt; accepted)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor.WithServiceAllInterfaces">
            <summary>Sets the shim of BasedOnDescriptor.WithServiceAllInterfaces()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor.WithServiceBase">
            <summary>Sets the shim of BasedOnDescriptor.WithServiceBase()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor.WithServiceDefaultInterfaces">
            <summary>Sets the shim of BasedOnDescriptor.WithServiceDefaultInterfaces()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor.WithServiceFirstInterface">
            <summary>Sets the shim of BasedOnDescriptor.WithServiceFirstInterface()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor.WithServiceFromInterface">
            <summary>Sets the shim of BasedOnDescriptor.WithServiceFromInterface()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor.WithServiceFromInterfaceType">
            <summary>Sets the shim of BasedOnDescriptor.WithServiceFromInterface(Type implements)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor.WithServiceGet">
            <summary>Sets the shim of BasedOnDescriptor.get_WithService()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor.WithServiceSelectServiceDescriptorServiceSelector">
            <summary>Sets the shim of BasedOnDescriptor.WithServiceSelect(ServiceSelector selector)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor.WithServiceSelf">
            <summary>Sets the shim of BasedOnDescriptor.WithServiceSelf()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor.WithServicesIEnumerableOfType">
            <summary>Sets the shim of BasedOnDescriptor.WithServices(IEnumerable`1&lt;Type&gt; types)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor.WithServicesTypeArray">
            <summary>Sets the shim of BasedOnDescriptor.WithServices(Type[] types)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor._LifestylePerThreadb__bComponentRegistration">
            <summary>Sets the shim of BasedOnDescriptor.&lt;LifestylePerThread&gt;b__b(ComponentRegistration c)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor._LifestylePerWebRequestb__15ComponentRegistration">
            <summary>Sets the shim of BasedOnDescriptor.&lt;LifestylePerWebRequest&gt;b__15(ComponentRegistration c)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor._LifestyleScopedb__dComponentRegistration">
            <summary>Sets the shim of BasedOnDescriptor.&lt;LifestyleScoped&gt;b__d(ComponentRegistration c)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor._LifestyleSingletonb__1aComponentRegistration">
            <summary>Sets the shim of BasedOnDescriptor.&lt;LifestyleSingleton&gt;b__1a(ComponentRegistration c)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor._LifestyleTransientb__1cComponentRegistration">
            <summary>Sets the shim of BasedOnDescriptor.&lt;LifestyleTransient&gt;b__1c(ComponentRegistration c)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor.AllInstances.BasedOnOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.Registration.BasedOnDescriptor,Castle.MicroKernel.Registration.BasedOnDescriptor})">
            <summary>Sets the shim of BasedOnDescriptor.BasedOn()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor.AllInstances.ConfigureForOf1ActionOfComponentRegistration``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.Registration.BasedOnDescriptor,System.Action{Castle.MicroKernel.Registration.ComponentRegistration},Castle.MicroKernel.Registration.BasedOnDescriptor})">
            <summary>Sets the shim of BasedOnDescriptor.ConfigureFor(Action`1&lt;ComponentRegistration&gt; configurer)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor.AllInstances.LifestyleBoundToNearestOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.Registration.BasedOnDescriptor,Castle.MicroKernel.Registration.BasedOnDescriptor})">
            <summary>Sets the shim of BasedOnDescriptor.LifestyleBoundToNearest()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor.AllInstances.LifestyleBoundToOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.Registration.BasedOnDescriptor,Castle.MicroKernel.Registration.BasedOnDescriptor})">
            <summary>Sets the shim of BasedOnDescriptor.LifestyleBoundTo()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor.AllInstances.LifestyleCustomOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.Registration.BasedOnDescriptor,Castle.MicroKernel.Registration.BasedOnDescriptor})">
            <summary>Sets the shim of BasedOnDescriptor.LifestyleCustom()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor.AllInstances.LifestyleScopedOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.Registration.BasedOnDescriptor,Castle.MicroKernel.Registration.BasedOnDescriptor})">
            <summary>Sets the shim of BasedOnDescriptor.LifestyleScoped()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor.AllInstances.AcceptsTypeTypeArrayOut">
            <summary>Sets the shim of BasedOnDescriptor.Accepts(Type type, Type[]&amp; baseTypes)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor.AllInstances.AllowMultipleMatches">
            <summary>Sets the shim of BasedOnDescriptor.AllowMultipleMatches()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor.AllInstances.BasedOnType">
            <summary>Sets the shim of BasedOnDescriptor.BasedOn(Type basedOn)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor.AllInstances.CastleMicroKernelRegistrationIRegistrationRegisterIKernelInternal">
            <summary>Sets the shim of BasedOnDescriptor.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor.AllInstances.ConfigureActionOfComponentRegistration">
            <summary>Sets the shim of BasedOnDescriptor.Configure(Action`1&lt;ComponentRegistration&gt; configurer)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor.AllInstances.ConfigureIfPredicateOfComponentRegistrationActionOfComponentRegistration">
            <summary>Sets the shim of BasedOnDescriptor.ConfigureIf(Predicate`1&lt;ComponentRegistration&gt; condition, Action`1&lt;ComponentRegistration&gt; configurer)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor.AllInstances.ConfigureIfPredicateOfComponentRegistrationActionOfComponentRegistrationActionOfComponentRegistration">
            <summary>Sets the shim of BasedOnDescriptor.ConfigureIf(Predicate`1&lt;ComponentRegistration&gt; condition, Action`1&lt;ComponentRegistration&gt; configurerWhenTrue, Action`1&lt;ComponentRegistration&gt; configurerWhenFalse)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor.AllInstances.ExecuteIfConditionType">
            <summary>Sets the shim of BasedOnDescriptor.ExecuteIfCondition(Type type)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor.AllInstances.ExecuteUnlessConditionType">
            <summary>Sets the shim of BasedOnDescriptor.ExecuteUnlessCondition(Type type)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor.AllInstances.IfPredicateOfType">
            <summary>Sets the shim of BasedOnDescriptor.If(Predicate`1&lt;Type&gt; ifFilter)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor.AllInstances.IsBasedOnTypeTypeArrayOut">
            <summary>Sets the shim of BasedOnDescriptor.IsBasedOn(Type type, Type[]&amp; baseTypes)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor.AllInstances.LifestyleCustomType">
            <summary>Sets the shim of BasedOnDescriptor.LifestyleCustom(Type customLifestyleType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor.AllInstances.LifestylePerThread">
            <summary>Sets the shim of BasedOnDescriptor.LifestylePerThread()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor.AllInstances.LifestylePerWebRequest">
            <summary>Sets the shim of BasedOnDescriptor.LifestylePerWebRequest()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor.AllInstances.LifestylePooledNullableOfInt32NullableOfInt32">
            <summary>Sets the shim of BasedOnDescriptor.LifestylePooled(Nullable`1&lt;Int32&gt; initialSize, Nullable`1&lt;Int32&gt; maxSize)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor.AllInstances.LifestyleScoped">
            <summary>Sets the shim of BasedOnDescriptor.LifestyleScoped()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor.AllInstances.LifestyleScopedType">
            <summary>Sets the shim of BasedOnDescriptor.LifestyleScoped(Type scopeAccessorType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor.AllInstances.LifestyleSingleton">
            <summary>Sets the shim of BasedOnDescriptor.LifestyleSingleton()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor.AllInstances.LifestyleTransient">
            <summary>Sets the shim of BasedOnDescriptor.LifestyleTransient()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor.AllInstances.OrBasedOnType">
            <summary>Sets the shim of BasedOnDescriptor.OrBasedOn(Type basedOn)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor.AllInstances.TryRegisterTypeIKernel">
            <summary>Sets the shim of BasedOnDescriptor.TryRegister(Type type, IKernel kernel)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor.AllInstances.UnlessPredicateOfType">
            <summary>Sets the shim of BasedOnDescriptor.Unless(Predicate`1&lt;Type&gt; unlessFilter)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor.AllInstances.WherePredicateOfType">
            <summary>Sets the shim of BasedOnDescriptor.Where(Predicate`1&lt;Type&gt; accepted)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor.AllInstances.WithServiceAllInterfaces">
            <summary>Sets the shim of BasedOnDescriptor.WithServiceAllInterfaces()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor.AllInstances.WithServiceBase">
            <summary>Sets the shim of BasedOnDescriptor.WithServiceBase()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor.AllInstances.WithServiceDefaultInterfaces">
            <summary>Sets the shim of BasedOnDescriptor.WithServiceDefaultInterfaces()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor.AllInstances.WithServiceFirstInterface">
            <summary>Sets the shim of BasedOnDescriptor.WithServiceFirstInterface()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor.AllInstances.WithServiceFromInterface">
            <summary>Sets the shim of BasedOnDescriptor.WithServiceFromInterface()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor.AllInstances.WithServiceFromInterfaceType">
            <summary>Sets the shim of BasedOnDescriptor.WithServiceFromInterface(Type implements)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor.AllInstances.WithServiceGet">
            <summary>Sets the shim of BasedOnDescriptor.get_WithService()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor.AllInstances.WithServiceSelectServiceDescriptorServiceSelector">
            <summary>Sets the shim of BasedOnDescriptor.WithServiceSelect(ServiceSelector selector)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor.AllInstances.WithServiceSelf">
            <summary>Sets the shim of BasedOnDescriptor.WithServiceSelf()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor.AllInstances.WithServicesIEnumerableOfType">
            <summary>Sets the shim of BasedOnDescriptor.WithServices(IEnumerable`1&lt;Type&gt; types)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimBasedOnDescriptor.AllInstances.WithServicesTypeArray">
            <summary>Sets the shim of BasedOnDescriptor.WithServices(Type[] types)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Registration.Fakes.ShimChild">
            <summary>Shim type of Castle.MicroKernel.Registration.Child</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimChild.#ctor(Castle.MicroKernel.Registration.Child)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimChild.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimChild.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimChild.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimChild.Constructor">
            <summary>Sets the shim of Child.Child()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimChild.ForNameString">
            <summary>Sets the shim of Child.ForName(String name)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Registration.Fakes.ShimChild.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="T:Castle.MicroKernel.Registration.Fakes.ShimClasses">
            <summary>Shim type of Castle.MicroKernel.Registration.Classes</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimClasses.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimClasses.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimClasses.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimClasses.FromAssemblyContainingOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.Registration.FromAssemblyDescriptor})">
            <summary>Sets the shim of Classes.FromAssemblyContaining()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimClasses.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimClasses.FilterType">
            <summary>Sets the shim of Classes.Filter(Type type)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimClasses.FromAssemblyAssembly">
            <summary>Sets the shim of Classes.FromAssembly(Assembly assembly)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimClasses.FromAssemblyContainingType">
            <summary>Sets the shim of Classes.FromAssemblyContaining(Type type)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimClasses.FromAssemblyInDirectoryAssemblyFilter">
            <summary>Sets the shim of Classes.FromAssemblyInDirectory(AssemblyFilter filter)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimClasses.FromAssemblyInThisApplication">
            <summary>Sets the shim of Classes.FromAssemblyInThisApplication()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimClasses.FromAssemblyNamedString">
            <summary>Sets the shim of Classes.FromAssemblyNamed(String assemblyName)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimClasses.FromIEnumerableOfType">
            <summary>Sets the shim of Classes.From(IEnumerable`1&lt;Type&gt; types)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimClasses.FromThisAssembly">
            <summary>Sets the shim of Classes.FromThisAssembly()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimClasses.FromTypeArray">
            <summary>Sets the shim of Classes.From(Type[] types)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Registration.Fakes.ShimComplexChild">
            <summary>Shim type of Castle.MicroKernel.Registration.ComplexChild</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimComplexChild.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimComplexChild.#ctor(Castle.MicroKernel.Registration.ComplexChild)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimComplexChild.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimComplexChild.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComplexChild.ApplyToIConfiguration">
            <summary>Sets the shim of ComplexChild.ApplyTo(IConfiguration configuration)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComplexChild.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComplexChild.ConstructorStringIConfiguration">
            <summary>Sets the shim of ComplexChild.ComplexChild(String name, IConfiguration configNode)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Registration.Fakes.ShimComplexChild.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComplexChild.AllInstances.ApplyToIConfiguration">
            <summary>Sets the shim of ComplexChild.ApplyTo(IConfiguration configuration)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Registration.Fakes.ShimComponent">
            <summary>Shim type of Castle.MicroKernel.Registration.Component</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimComponent.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimComponent.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimComponent.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimComponent.ForOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.Registration.ComponentRegistration{``0}})">
            <summary>Sets the shim of Component.For()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimComponent.ForOf2``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.Registration.ComponentRegistration{``0}})">
            <summary>Sets the shim of Component.For()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimComponent.ForOf3``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.Registration.ComponentRegistration{``0}})">
            <summary>Sets the shim of Component.For()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimComponent.ForOf4``4(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.Registration.ComponentRegistration{``0}})">
            <summary>Sets the shim of Component.For()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimComponent.ForOf5``5(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.Registration.ComponentRegistration{``0}})">
            <summary>Sets the shim of Component.For()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimComponent.HasAttributeOf1PredicateOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Predicate{``0},System.Predicate{System.Type}})">
            <summary>Sets the shim of Component.HasAttribute(Predicate`1&lt;!!0&gt; filter)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimComponent.HasAttributeOf1Type``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Type,System.Boolean})">
            <summary>Sets the shim of Component.HasAttribute(Type type)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimComponent.IsInSameNamespaceAsOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Predicate{System.Type}})">
            <summary>Sets the shim of Component.IsInSameNamespaceAs()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimComponent.IsInSameNamespaceAsOf1Boolean``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Boolean,System.Predicate{System.Type}})">
            <summary>Sets the shim of Component.IsInSameNamespaceAs(Boolean includeSubnamespaces)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponent.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponent.ForIEnumerableOfType">
            <summary>Sets the shim of Component.For(IEnumerable`1&lt;Type&gt; serviceTypes)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponent.ForType">
            <summary>Sets the shim of Component.For(Type serviceType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponent.ForTypeArray">
            <summary>Sets the shim of Component.For(Type[] serviceTypes)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponent.IsCastleComponentType">
            <summary>Sets the shim of Component.IsCastleComponent(Type type)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponent.IsInNamespaceString">
            <summary>Sets the shim of Component.IsInNamespace(String namespace)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponent.IsInNamespaceStringBoolean">
            <summary>Sets the shim of Component.IsInNamespace(String namespace, Boolean includeSubnamespaces)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponent.IsInSameNamespaceAsType">
            <summary>Sets the shim of Component.IsInSameNamespaceAs(Type type)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponent.IsInSameNamespaceAsTypeBoolean">
            <summary>Sets the shim of Component.IsInSameNamespaceAs(Type type, Boolean includeSubnamespaces)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Registration.Fakes.ShimComponentDependencyRegistrationExtensions">
            <summary>Shim type of Castle.MicroKernel.Registration.ComponentDependencyRegistrationExtensions</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimComponentDependencyRegistrationExtensions.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimComponentDependencyRegistrationExtensions.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimComponentDependencyRegistrationExtensions.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimComponentDependencyRegistrationExtensions.InsertTypedOf1IDictionaryM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.IDictionary,``0,System.Collections.IDictionary})">
            <summary>Sets the shim of ComponentDependencyRegistrationExtensions.InsertTyped(IDictionary arguments, !!0 value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentDependencyRegistrationExtensions.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentDependencyRegistrationExtensions.InsertAnonymousIDictionaryObject">
            <summary>Sets the shim of ComponentDependencyRegistrationExtensions.InsertAnonymous(IDictionary arguments, Object namedArgumentsAsAnonymousType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentDependencyRegistrationExtensions.InsertIDictionaryStringObject">
            <summary>Sets the shim of ComponentDependencyRegistrationExtensions.Insert(IDictionary arguments, String key, Object value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentDependencyRegistrationExtensions.InsertIDictionaryTypeObject">
            <summary>Sets the shim of ComponentDependencyRegistrationExtensions.Insert(IDictionary arguments, Type dependencyType, Object value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentDependencyRegistrationExtensions.InsertTypedCollectionIDictionaryObjectArray">
            <summary>Sets the shim of ComponentDependencyRegistrationExtensions.InsertTypedCollection(IDictionary arguments, Object[] typedArgumentsArray)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration">
            <summary>Shim type of Castle.MicroKernel.Registration.ComponentRegistration</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration.#ctor(Castle.MicroKernel.Registration.ComponentRegistration)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration.Bind(Castle.MicroKernel.Registration.IRegistration)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration.ConstructorTypeArray">
            <summary>Sets the shim of ComponentRegistration.ComponentRegistration(Type[] serviceTypes)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="T:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1">
            <summary>Shim type of Castle.MicroKernel.Registration.ComponentRegistration`1</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.#ctor(Castle.MicroKernel.Registration.ComponentRegistration{`0})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.ActivatorOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.Registration.ComponentRegistration{`0}})">
            <summary>Sets the shim of ComponentRegistration`1.Activator()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.Bind(Castle.MicroKernel.Registration.IRegistration)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.ForwardOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.Registration.ComponentRegistration{`0}})">
            <summary>Sets the shim of ComponentRegistration`1.Forward()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.ForwardOf2``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.Registration.ComponentRegistration{`0}})">
            <summary>Sets the shim of ComponentRegistration`1.Forward()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.ForwardOf3``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.Registration.ComponentRegistration{`0}})">
            <summary>Sets the shim of ComponentRegistration`1.Forward()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.ForwardOf4``4(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.Registration.ComponentRegistration{`0}})">
            <summary>Sets the shim of ComponentRegistration`1.Forward()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.ImplementedByOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.Registration.ComponentRegistration{`0}})">
            <summary>Sets the shim of ComponentRegistration`1.ImplementedBy()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.InterceptorsOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.Registration.ComponentRegistration{`0}})">
            <summary>Sets the shim of ComponentRegistration`1.Interceptors()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.InterceptorsOf2``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.Registration.ComponentRegistration{`0}})">
            <summary>Sets the shim of ComponentRegistration`1.Interceptors()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.LifestyleBoundToNearestOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.Registration.ComponentRegistration{`0}})">
            <summary>Sets the shim of ComponentRegistration`1.LifestyleBoundToNearest()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.LifestyleBoundToOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.Registration.ComponentRegistration{`0}})">
            <summary>Sets the shim of ComponentRegistration`1.LifestyleBoundTo()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.LifestyleCustomOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.Registration.ComponentRegistration{`0}})">
            <summary>Sets the shim of ComponentRegistration`1.LifestyleCustom()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.LifestyleScopedOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.Registration.ComponentRegistration{`0}})">
            <summary>Sets the shim of ComponentRegistration`1.LifestyleScoped()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.UsingFactoryMethodOf1ConverterOfIKernelM0Boolean``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Converter{Castle.MicroKernel.IKernel,``0},System.Boolean,Castle.MicroKernel.Registration.ComponentRegistration{`0}})">
            <summary>Sets the shim of ComponentRegistration`1.UsingFactoryMethod(Converter`2&lt;IKernel,!!0&gt; factoryMethod, Boolean managedExternally)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.UsingFactoryMethodOf1FuncOfIKernelComponentModelCreationContextM0Boolean``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{Castle.MicroKernel.IKernel,Castle.Core.ComponentModel,Castle.MicroKernel.Context.CreationContext,``0},System.Boolean,Castle.MicroKernel.Registration.ComponentRegistration{`0}})">
            <summary>Sets the shim of ComponentRegistration`1.UsingFactoryMethod(Func`4&lt;IKernel,ComponentModel,CreationContext,!!0&gt; factoryMethod, Boolean managedExternally)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.UsingFactoryMethodOf1FuncOfIKernelCreationContextM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{Castle.MicroKernel.IKernel,Castle.MicroKernel.Context.CreationContext,``0},Castle.MicroKernel.Registration.ComponentRegistration{`0}})">
            <summary>Sets the shim of ComponentRegistration`1.UsingFactoryMethod(Func`3&lt;IKernel,CreationContext,!!0&gt; factoryMethod)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.UsingFactoryMethodOf1FuncOfM0Boolean``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{``0},System.Boolean,Castle.MicroKernel.Registration.ComponentRegistration{`0}})">
            <summary>Sets the shim of ComponentRegistration`1.UsingFactoryMethod(Func`1&lt;!!0&gt; factoryMethod, Boolean managedExternally)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.UsingFactoryOf2ConverterOfM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Converter{``0,``1},Castle.MicroKernel.Registration.ComponentRegistration{`0}})">
            <summary>Sets the shim of ComponentRegistration`1.UsingFactory(Converter`2&lt;!!0,!!1&gt; factory)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.ActAsObjectArray">
            <summary>Sets the shim of ComponentRegistration`1.ActAs(Object[] actors)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.AddAttributeDescriptorStringString">
            <summary>Sets the shim of ComponentRegistration`1.AddAttributeDescriptor(String key, String value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.AddDescriptorIComponentModelDescriptor">
            <summary>Sets the shim of ComponentRegistration`1.AddDescriptor(IComponentModelDescriptor descriptor)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.AttributeString">
            <summary>Sets the shim of ComponentRegistration`1.Attribute(String key)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.CastleMicroKernelRegistrationIRegistrationRegisterIKernelInternal">
            <summary>Sets the shim of ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.ConfigurationIConfiguration">
            <summary>Sets the shim of ComponentRegistration`1.Configuration(IConfiguration configuration)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.ConfigurationNodeArray">
            <summary>Sets the shim of ComponentRegistration`1.Configuration(Node[] configNodes)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.Constructor">
            <summary>Sets the shim of ComponentRegistration`1.ComponentRegistration`1()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.ConstructorTypeArray">
            <summary>Sets the shim of ComponentRegistration`1.ComponentRegistration`1(Type[] services)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.DependsOnDependency">
            <summary>Sets the shim of ComponentRegistration`1.DependsOn(Dependency dependency)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.DependsOnDependencyArray">
            <summary>Sets the shim of ComponentRegistration`1.DependsOn(Dependency[] dependencies)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.DependsOnDynamicParametersDelegate">
            <summary>Sets the shim of ComponentRegistration`1.DependsOn(DynamicParametersDelegate resolve)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.DependsOnDynamicParametersResolveDelegate">
            <summary>Sets the shim of ComponentRegistration`1.DependsOn(DynamicParametersResolveDelegate resolve)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.DependsOnDynamicParametersWithContextResolveDelegate">
            <summary>Sets the shim of ComponentRegistration`1.DependsOn(DynamicParametersWithContextResolveDelegate resolve)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.DependsOnIDictionary">
            <summary>Sets the shim of ComponentRegistration`1.DependsOn(IDictionary dependencies)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.DependsOnObject">
            <summary>Sets the shim of ComponentRegistration`1.DependsOn(Object dependenciesAsAnonymousType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.DynamicParametersDynamicParametersDelegate">
            <summary>Sets the shim of ComponentRegistration`1.DynamicParameters(DynamicParametersDelegate resolve)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.DynamicParametersDynamicParametersResolveDelegate">
            <summary>Sets the shim of ComponentRegistration`1.DynamicParameters(DynamicParametersResolveDelegate resolve)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.DynamicParametersDynamicParametersWithContextResolveDelegate">
            <summary>Sets the shim of ComponentRegistration`1.DynamicParameters(DynamicParametersWithContextResolveDelegate resolve)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.ExtendedPropertiesObject">
            <summary>Sets the shim of ComponentRegistration`1.ExtendedProperties(Object anonymous)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.ExtendedPropertiesProperty">
            <summary>Sets the shim of ComponentRegistration`1.ExtendedProperties(Property property)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.ExtendedPropertiesPropertyArray">
            <summary>Sets the shim of ComponentRegistration`1.ExtendedProperties(Property[] properties)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.FilterServicesIKernel">
            <summary>Sets the shim of ComponentRegistration`1.FilterServices(IKernel kernel)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.ForwardIEnumerableOfType">
            <summary>Sets the shim of ComponentRegistration`1.Forward(IEnumerable`1&lt;Type&gt; types)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.ForwardTypeArray">
            <summary>Sets the shim of ComponentRegistration`1.Forward(Type[] types)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.GetContributorsTypeArray">
            <summary>Sets the shim of ComponentRegistration`1.GetContributors(Type[] services)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.ImplementationGet">
            <summary>Sets the shim of ComponentRegistration`1.get_Implementation()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.ImplementedByType">
            <summary>Sets the shim of ComponentRegistration`1.ImplementedBy(Type type)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.ImplementedByTypeIGenericImplementationMatchingStrategy">
            <summary>Sets the shim of ComponentRegistration`1.ImplementedBy(Type type, IGenericImplementationMatchingStrategy genericImplementationMatchingStrategy)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.ImplementedByTypeIGenericImplementationMatchingStrategyIGenericServiceStrategy">
            <summary>Sets the shim of ComponentRegistration`1.ImplementedBy(Type type, IGenericImplementationMatchingStrategy genericImplementationMatchingStrategy, IGenericServiceStrategy genericServiceStrategy)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.ImplementedByTypeIGenericServiceStrategy">
            <summary>Sets the shim of ComponentRegistration`1.ImplementedBy(Type type, IGenericServiceStrategy genericServiceStrategy)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.InstanceT0">
            <summary>Sets the shim of ComponentRegistration`1.Instance(!0 instance)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.InterceptorsInterceptorReferenceArray">
            <summary>Sets the shim of ComponentRegistration`1.Interceptors(InterceptorReference[] interceptors)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.InterceptorsStringArray">
            <summary>Sets the shim of ComponentRegistration`1.Interceptors(String[] keys)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.InterceptorsTypeArray">
            <summary>Sets the shim of ComponentRegistration`1.Interceptors(Type[] interceptors)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.IsDefault">
            <summary>Sets the shim of ComponentRegistration`1.IsDefault()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.IsDefaultPredicateOfType">
            <summary>Sets the shim of ComponentRegistration`1.IsDefault(Predicate`1&lt;Type&gt; serviceFilter)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.IsFallback">
            <summary>Sets the shim of ComponentRegistration`1.IsFallback()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.IsFallbackPredicateOfType">
            <summary>Sets the shim of ComponentRegistration`1.IsFallback(Predicate`1&lt;Type&gt; serviceFilter)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.IsOverWriteGet">
            <summary>Sets the shim of ComponentRegistration`1.get_IsOverWrite()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.LifeStyleGet">
            <summary>Sets the shim of ComponentRegistration`1.get_LifeStyle()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.LifestyleBoundToFuncOfIHandlerArrayIHandler">
            <summary>Sets the shim of ComponentRegistration`1.LifestyleBoundTo(Func`2&lt;IHandler[],IHandler&gt; scopeRootBinder)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.LifestyleCustomType">
            <summary>Sets the shim of ComponentRegistration`1.LifestyleCustom(Type customLifestyleType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.LifestylePerThread">
            <summary>Sets the shim of ComponentRegistration`1.LifestylePerThread()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.LifestylePerWebRequest">
            <summary>Sets the shim of ComponentRegistration`1.LifestylePerWebRequest()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.LifestylePooledNullableOfInt32NullableOfInt32">
            <summary>Sets the shim of ComponentRegistration`1.LifestylePooled(Nullable`1&lt;Int32&gt; initialSize, Nullable`1&lt;Int32&gt; maxSize)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.LifestyleScopedType">
            <summary>Sets the shim of ComponentRegistration`1.LifestyleScoped(Type scopeAccessorType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.LifestyleSingleton">
            <summary>Sets the shim of ComponentRegistration`1.LifestyleSingleton()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.LifestyleTransient">
            <summary>Sets the shim of ComponentRegistration`1.LifestyleTransient()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.NameGet">
            <summary>Sets the shim of ComponentRegistration`1.get_Name()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.NamedAutomaticallyString">
            <summary>Sets the shim of ComponentRegistration`1.NamedAutomatically(String name)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.NamedString">
            <summary>Sets the shim of ComponentRegistration`1.Named(String name)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.OnCreateActionOfT0Array">
            <summary>Sets the shim of ComponentRegistration`1.OnCreate(Action`1&lt;!0&gt;[] actions)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.OnCreateLifecycleActionDelegateOfT0Array">
            <summary>Sets the shim of ComponentRegistration`1.OnCreate(LifecycleActionDelegate`1&lt;!0&gt;[] actions)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.OnDestroyActionOfT0Array">
            <summary>Sets the shim of ComponentRegistration`1.OnDestroy(Action`1&lt;!0&gt;[] actions)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.OnDestroyLifecycleActionDelegateOfT0Array">
            <summary>Sets the shim of ComponentRegistration`1.OnDestroy(LifecycleActionDelegate`1&lt;!0&gt;[] actions)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.OnlyNewServices">
            <summary>Sets the shim of ComponentRegistration`1.OnlyNewServices()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.OverWrite">
            <summary>Sets the shim of ComponentRegistration`1.OverWrite()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.ParametersParameterArray">
            <summary>Sets the shim of ComponentRegistration`1.Parameters(Parameter[] parameters)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.PropertiesFuncOfComponentModelPropertyInfoBooleanBoolean">
            <summary>Sets the shim of ComponentRegistration`1.Properties(Func`3&lt;ComponentModel,PropertyInfo,Boolean&gt; filter, Boolean isRequired)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.PropertiesIgnoreFuncOfComponentModelPropertyInfoBoolean">
            <summary>Sets the shim of ComponentRegistration`1.PropertiesIgnore(Func`3&lt;ComponentModel,PropertyInfo,Boolean&gt; propertySelector)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.PropertiesIgnoreFuncOfPropertyInfoBoolean">
            <summary>Sets the shim of ComponentRegistration`1.PropertiesIgnore(Func`2&lt;PropertyInfo,Boolean&gt; propertySelector)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.PropertiesPredicateOfPropertyInfo">
            <summary>Sets the shim of ComponentRegistration`1.Properties(Predicate`1&lt;PropertyInfo&gt; filter)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.PropertiesPredicateOfPropertyInfoBoolean">
            <summary>Sets the shim of ComponentRegistration`1.Properties(Predicate`1&lt;PropertyInfo&gt; filter, Boolean isRequired)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.PropertiesPropertyFilter">
            <summary>Sets the shim of ComponentRegistration`1.Properties(PropertyFilter filter)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.PropertiesRequireFuncOfComponentModelPropertyInfoBoolean">
            <summary>Sets the shim of ComponentRegistration`1.PropertiesRequire(Func`3&lt;ComponentModel,PropertyInfo,Boolean&gt; propertySelector)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.PropertiesRequireFuncOfPropertyInfoBoolean">
            <summary>Sets the shim of ComponentRegistration`1.PropertiesRequire(Func`2&lt;PropertyInfo,Boolean&gt; propertySelector)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.ProxyGet">
            <summary>Sets the shim of ComponentRegistration`1.get_Proxy()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.RegisterOptionally">
            <summary>Sets the shim of ComponentRegistration`1.RegisterOptionally()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.SelectInterceptorsWithActionOfItemRegistrationOfIInterceptorSelector">
            <summary>Sets the shim of ComponentRegistration`1.SelectInterceptorsWith(Action`1&lt;ItemRegistration`1&lt;IInterceptorSelector&gt;&gt; selector)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.SelectInterceptorsWithIInterceptorSelector">
            <summary>Sets the shim of ComponentRegistration`1.SelectInterceptorsWith(IInterceptorSelector selector)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.ServiceOverridesIDictionary">
            <summary>Sets the shim of ComponentRegistration`1.ServiceOverrides(IDictionary overrides)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.ServiceOverridesObject">
            <summary>Sets the shim of ComponentRegistration`1.ServiceOverrides(Object anonymous)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.ServiceOverridesServiceOverrideArray">
            <summary>Sets the shim of ComponentRegistration`1.ServiceOverrides(ServiceOverride[] overrides)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.ServicesCountGet">
            <summary>Sets the shim of ComponentRegistration`1.get_ServicesCount()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.ServicesGet">
            <summary>Sets the shim of ComponentRegistration`1.get_Services()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.SkipRegistrationIKernelInternalComponentModel">
            <summary>Sets the shim of ComponentRegistration`1.SkipRegistration(IKernelInternal internalKernel, ComponentModel componentModel)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1._Interceptorsb__cType">
            <summary>Sets the shim of ComponentRegistration`1.&lt;Interceptors&gt;b__c(Type t)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1._IsDefaultb__28Type">
            <summary>Sets the shim of ComponentRegistration`1.&lt;IsDefault&gt;b__28(Type _)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1._IsFallbackb__2aType">
            <summary>Sets the shim of ComponentRegistration`1.&lt;IsFallback&gt;b__2a(Type _)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1._OnCreateb__eActionOfT0">
            <summary>Sets the shim of ComponentRegistration`1.&lt;OnCreate&gt;b__e(Action`1&lt;!0&gt; a)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1._OnDestroyb__13ActionOfT0">
            <summary>Sets the shim of ComponentRegistration`1.&lt;OnDestroy&gt;b__13(Action`1&lt;!0&gt; a)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.AllInstances.ActivatorOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.Registration.ComponentRegistration{`0},Castle.MicroKernel.Registration.ComponentRegistration{`0}})">
            <summary>Sets the shim of ComponentRegistration`1.Activator()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.AllInstances.ForwardOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.Registration.ComponentRegistration{`0},Castle.MicroKernel.Registration.ComponentRegistration{`0}})">
            <summary>Sets the shim of ComponentRegistration`1.Forward()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.AllInstances.ForwardOf2``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.Registration.ComponentRegistration{`0},Castle.MicroKernel.Registration.ComponentRegistration{`0}})">
            <summary>Sets the shim of ComponentRegistration`1.Forward()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.AllInstances.ForwardOf3``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.Registration.ComponentRegistration{`0},Castle.MicroKernel.Registration.ComponentRegistration{`0}})">
            <summary>Sets the shim of ComponentRegistration`1.Forward()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.AllInstances.ForwardOf4``4(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.Registration.ComponentRegistration{`0},Castle.MicroKernel.Registration.ComponentRegistration{`0}})">
            <summary>Sets the shim of ComponentRegistration`1.Forward()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.AllInstances.ImplementedByOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.Registration.ComponentRegistration{`0},Castle.MicroKernel.Registration.ComponentRegistration{`0}})">
            <summary>Sets the shim of ComponentRegistration`1.ImplementedBy()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.AllInstances.InterceptorsOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.Registration.ComponentRegistration{`0},Castle.MicroKernel.Registration.ComponentRegistration{`0}})">
            <summary>Sets the shim of ComponentRegistration`1.Interceptors()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.AllInstances.InterceptorsOf2``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.Registration.ComponentRegistration{`0},Castle.MicroKernel.Registration.ComponentRegistration{`0}})">
            <summary>Sets the shim of ComponentRegistration`1.Interceptors()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.AllInstances.LifestyleBoundToNearestOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.Registration.ComponentRegistration{`0},Castle.MicroKernel.Registration.ComponentRegistration{`0}})">
            <summary>Sets the shim of ComponentRegistration`1.LifestyleBoundToNearest()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.AllInstances.LifestyleBoundToOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.Registration.ComponentRegistration{`0},Castle.MicroKernel.Registration.ComponentRegistration{`0}})">
            <summary>Sets the shim of ComponentRegistration`1.LifestyleBoundTo()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.AllInstances.LifestyleCustomOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.Registration.ComponentRegistration{`0},Castle.MicroKernel.Registration.ComponentRegistration{`0}})">
            <summary>Sets the shim of ComponentRegistration`1.LifestyleCustom()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.AllInstances.LifestyleScopedOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.Registration.ComponentRegistration{`0},Castle.MicroKernel.Registration.ComponentRegistration{`0}})">
            <summary>Sets the shim of ComponentRegistration`1.LifestyleScoped()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.AllInstances.UsingFactoryMethodOf1ConverterOfIKernelM0Boolean``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.Registration.ComponentRegistration{`0},System.Converter{Castle.MicroKernel.IKernel,``0},System.Boolean,Castle.MicroKernel.Registration.ComponentRegistration{`0}})">
            <summary>Sets the shim of ComponentRegistration`1.UsingFactoryMethod(Converter`2&lt;IKernel,!!0&gt; factoryMethod, Boolean managedExternally)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.AllInstances.UsingFactoryMethodOf1FuncOfIKernelComponentModelCreationContextM0Boolean``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.Registration.ComponentRegistration{`0},System.Func{Castle.MicroKernel.IKernel,Castle.Core.ComponentModel,Castle.MicroKernel.Context.CreationContext,``0},System.Boolean,Castle.MicroKernel.Registration.ComponentRegistration{`0}})">
            <summary>Sets the shim of ComponentRegistration`1.UsingFactoryMethod(Func`4&lt;IKernel,ComponentModel,CreationContext,!!0&gt; factoryMethod, Boolean managedExternally)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.AllInstances.UsingFactoryMethodOf1FuncOfIKernelCreationContextM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.Registration.ComponentRegistration{`0},System.Func{Castle.MicroKernel.IKernel,Castle.MicroKernel.Context.CreationContext,``0},Castle.MicroKernel.Registration.ComponentRegistration{`0}})">
            <summary>Sets the shim of ComponentRegistration`1.UsingFactoryMethod(Func`3&lt;IKernel,CreationContext,!!0&gt; factoryMethod)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.AllInstances.UsingFactoryMethodOf1FuncOfM0Boolean``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.Registration.ComponentRegistration{`0},System.Func{``0},System.Boolean,Castle.MicroKernel.Registration.ComponentRegistration{`0}})">
            <summary>Sets the shim of ComponentRegistration`1.UsingFactoryMethod(Func`1&lt;!!0&gt; factoryMethod, Boolean managedExternally)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.AllInstances.UsingFactoryOf2ConverterOfM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.Registration.ComponentRegistration{`0},System.Converter{``0,``1},Castle.MicroKernel.Registration.ComponentRegistration{`0}})">
            <summary>Sets the shim of ComponentRegistration`1.UsingFactory(Converter`2&lt;!!0,!!1&gt; factory)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.AllInstances.ActAsObjectArray">
            <summary>Sets the shim of ComponentRegistration`1.ActAs(Object[] actors)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.AllInstances.AddAttributeDescriptorStringString">
            <summary>Sets the shim of ComponentRegistration`1.AddAttributeDescriptor(String key, String value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.AllInstances.AddDescriptorIComponentModelDescriptor">
            <summary>Sets the shim of ComponentRegistration`1.AddDescriptor(IComponentModelDescriptor descriptor)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.AllInstances.AttributeString">
            <summary>Sets the shim of ComponentRegistration`1.Attribute(String key)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.AllInstances.CastleMicroKernelRegistrationIRegistrationRegisterIKernelInternal">
            <summary>Sets the shim of ComponentRegistration`1.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.AllInstances.ConfigurationIConfiguration">
            <summary>Sets the shim of ComponentRegistration`1.Configuration(IConfiguration configuration)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.AllInstances.ConfigurationNodeArray">
            <summary>Sets the shim of ComponentRegistration`1.Configuration(Node[] configNodes)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.AllInstances.DependsOnDependency">
            <summary>Sets the shim of ComponentRegistration`1.DependsOn(Dependency dependency)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.AllInstances.DependsOnDependencyArray">
            <summary>Sets the shim of ComponentRegistration`1.DependsOn(Dependency[] dependencies)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.AllInstances.DependsOnDynamicParametersDelegate">
            <summary>Sets the shim of ComponentRegistration`1.DependsOn(DynamicParametersDelegate resolve)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.AllInstances.DependsOnDynamicParametersResolveDelegate">
            <summary>Sets the shim of ComponentRegistration`1.DependsOn(DynamicParametersResolveDelegate resolve)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.AllInstances.DependsOnDynamicParametersWithContextResolveDelegate">
            <summary>Sets the shim of ComponentRegistration`1.DependsOn(DynamicParametersWithContextResolveDelegate resolve)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.AllInstances.DependsOnIDictionary">
            <summary>Sets the shim of ComponentRegistration`1.DependsOn(IDictionary dependencies)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.AllInstances.DependsOnObject">
            <summary>Sets the shim of ComponentRegistration`1.DependsOn(Object dependenciesAsAnonymousType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.AllInstances.DynamicParametersDynamicParametersDelegate">
            <summary>Sets the shim of ComponentRegistration`1.DynamicParameters(DynamicParametersDelegate resolve)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.AllInstances.DynamicParametersDynamicParametersResolveDelegate">
            <summary>Sets the shim of ComponentRegistration`1.DynamicParameters(DynamicParametersResolveDelegate resolve)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.AllInstances.DynamicParametersDynamicParametersWithContextResolveDelegate">
            <summary>Sets the shim of ComponentRegistration`1.DynamicParameters(DynamicParametersWithContextResolveDelegate resolve)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.AllInstances.ExtendedPropertiesObject">
            <summary>Sets the shim of ComponentRegistration`1.ExtendedProperties(Object anonymous)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.AllInstances.ExtendedPropertiesProperty">
            <summary>Sets the shim of ComponentRegistration`1.ExtendedProperties(Property property)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.AllInstances.ExtendedPropertiesPropertyArray">
            <summary>Sets the shim of ComponentRegistration`1.ExtendedProperties(Property[] properties)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.AllInstances.FilterServicesIKernel">
            <summary>Sets the shim of ComponentRegistration`1.FilterServices(IKernel kernel)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.AllInstances.ForwardIEnumerableOfType">
            <summary>Sets the shim of ComponentRegistration`1.Forward(IEnumerable`1&lt;Type&gt; types)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.AllInstances.ForwardTypeArray">
            <summary>Sets the shim of ComponentRegistration`1.Forward(Type[] types)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.AllInstances.GetContributorsTypeArray">
            <summary>Sets the shim of ComponentRegistration`1.GetContributors(Type[] services)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.AllInstances.ImplementationGet">
            <summary>Sets the shim of ComponentRegistration`1.get_Implementation()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.AllInstances.ImplementedByType">
            <summary>Sets the shim of ComponentRegistration`1.ImplementedBy(Type type)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.AllInstances.ImplementedByTypeIGenericImplementationMatchingStrategy">
            <summary>Sets the shim of ComponentRegistration`1.ImplementedBy(Type type, IGenericImplementationMatchingStrategy genericImplementationMatchingStrategy)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.AllInstances.ImplementedByTypeIGenericImplementationMatchingStrategyIGenericServiceStrategy">
            <summary>Sets the shim of ComponentRegistration`1.ImplementedBy(Type type, IGenericImplementationMatchingStrategy genericImplementationMatchingStrategy, IGenericServiceStrategy genericServiceStrategy)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.AllInstances.ImplementedByTypeIGenericServiceStrategy">
            <summary>Sets the shim of ComponentRegistration`1.ImplementedBy(Type type, IGenericServiceStrategy genericServiceStrategy)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.AllInstances.InstanceT0">
            <summary>Sets the shim of ComponentRegistration`1.Instance(!0 instance)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.AllInstances.InterceptorsInterceptorReferenceArray">
            <summary>Sets the shim of ComponentRegistration`1.Interceptors(InterceptorReference[] interceptors)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.AllInstances.InterceptorsStringArray">
            <summary>Sets the shim of ComponentRegistration`1.Interceptors(String[] keys)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.AllInstances.InterceptorsTypeArray">
            <summary>Sets the shim of ComponentRegistration`1.Interceptors(Type[] interceptors)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.AllInstances.IsDefault">
            <summary>Sets the shim of ComponentRegistration`1.IsDefault()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.AllInstances.IsDefaultPredicateOfType">
            <summary>Sets the shim of ComponentRegistration`1.IsDefault(Predicate`1&lt;Type&gt; serviceFilter)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.AllInstances.IsFallback">
            <summary>Sets the shim of ComponentRegistration`1.IsFallback()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.AllInstances.IsFallbackPredicateOfType">
            <summary>Sets the shim of ComponentRegistration`1.IsFallback(Predicate`1&lt;Type&gt; serviceFilter)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.AllInstances.IsOverWriteGet">
            <summary>Sets the shim of ComponentRegistration`1.get_IsOverWrite()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.AllInstances.LifeStyleGet">
            <summary>Sets the shim of ComponentRegistration`1.get_LifeStyle()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.AllInstances.LifestyleBoundToFuncOfIHandlerArrayIHandler">
            <summary>Sets the shim of ComponentRegistration`1.LifestyleBoundTo(Func`2&lt;IHandler[],IHandler&gt; scopeRootBinder)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.AllInstances.LifestyleCustomType">
            <summary>Sets the shim of ComponentRegistration`1.LifestyleCustom(Type customLifestyleType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.AllInstances.LifestylePerThread">
            <summary>Sets the shim of ComponentRegistration`1.LifestylePerThread()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.AllInstances.LifestylePerWebRequest">
            <summary>Sets the shim of ComponentRegistration`1.LifestylePerWebRequest()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.AllInstances.LifestylePooledNullableOfInt32NullableOfInt32">
            <summary>Sets the shim of ComponentRegistration`1.LifestylePooled(Nullable`1&lt;Int32&gt; initialSize, Nullable`1&lt;Int32&gt; maxSize)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.AllInstances.LifestyleScopedType">
            <summary>Sets the shim of ComponentRegistration`1.LifestyleScoped(Type scopeAccessorType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.AllInstances.LifestyleSingleton">
            <summary>Sets the shim of ComponentRegistration`1.LifestyleSingleton()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.AllInstances.LifestyleTransient">
            <summary>Sets the shim of ComponentRegistration`1.LifestyleTransient()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.AllInstances.NameGet">
            <summary>Sets the shim of ComponentRegistration`1.get_Name()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.AllInstances.NamedAutomaticallyString">
            <summary>Sets the shim of ComponentRegistration`1.NamedAutomatically(String name)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.AllInstances.NamedString">
            <summary>Sets the shim of ComponentRegistration`1.Named(String name)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.AllInstances.OnCreateActionOfT0Array">
            <summary>Sets the shim of ComponentRegistration`1.OnCreate(Action`1&lt;!0&gt;[] actions)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.AllInstances.OnCreateLifecycleActionDelegateOfT0Array">
            <summary>Sets the shim of ComponentRegistration`1.OnCreate(LifecycleActionDelegate`1&lt;!0&gt;[] actions)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.AllInstances.OnDestroyActionOfT0Array">
            <summary>Sets the shim of ComponentRegistration`1.OnDestroy(Action`1&lt;!0&gt;[] actions)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.AllInstances.OnDestroyLifecycleActionDelegateOfT0Array">
            <summary>Sets the shim of ComponentRegistration`1.OnDestroy(LifecycleActionDelegate`1&lt;!0&gt;[] actions)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.AllInstances.OnlyNewServices">
            <summary>Sets the shim of ComponentRegistration`1.OnlyNewServices()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.AllInstances.OverWrite">
            <summary>Sets the shim of ComponentRegistration`1.OverWrite()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.AllInstances.ParametersParameterArray">
            <summary>Sets the shim of ComponentRegistration`1.Parameters(Parameter[] parameters)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.AllInstances.PropertiesFuncOfComponentModelPropertyInfoBooleanBoolean">
            <summary>Sets the shim of ComponentRegistration`1.Properties(Func`3&lt;ComponentModel,PropertyInfo,Boolean&gt; filter, Boolean isRequired)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.AllInstances.PropertiesIgnoreFuncOfComponentModelPropertyInfoBoolean">
            <summary>Sets the shim of ComponentRegistration`1.PropertiesIgnore(Func`3&lt;ComponentModel,PropertyInfo,Boolean&gt; propertySelector)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.AllInstances.PropertiesIgnoreFuncOfPropertyInfoBoolean">
            <summary>Sets the shim of ComponentRegistration`1.PropertiesIgnore(Func`2&lt;PropertyInfo,Boolean&gt; propertySelector)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.AllInstances.PropertiesPredicateOfPropertyInfo">
            <summary>Sets the shim of ComponentRegistration`1.Properties(Predicate`1&lt;PropertyInfo&gt; filter)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.AllInstances.PropertiesPredicateOfPropertyInfoBoolean">
            <summary>Sets the shim of ComponentRegistration`1.Properties(Predicate`1&lt;PropertyInfo&gt; filter, Boolean isRequired)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.AllInstances.PropertiesPropertyFilter">
            <summary>Sets the shim of ComponentRegistration`1.Properties(PropertyFilter filter)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.AllInstances.PropertiesRequireFuncOfComponentModelPropertyInfoBoolean">
            <summary>Sets the shim of ComponentRegistration`1.PropertiesRequire(Func`3&lt;ComponentModel,PropertyInfo,Boolean&gt; propertySelector)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.AllInstances.PropertiesRequireFuncOfPropertyInfoBoolean">
            <summary>Sets the shim of ComponentRegistration`1.PropertiesRequire(Func`2&lt;PropertyInfo,Boolean&gt; propertySelector)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.AllInstances.ProxyGet">
            <summary>Sets the shim of ComponentRegistration`1.get_Proxy()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.AllInstances.RegisterOptionally">
            <summary>Sets the shim of ComponentRegistration`1.RegisterOptionally()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.AllInstances.SelectInterceptorsWithActionOfItemRegistrationOfIInterceptorSelector">
            <summary>Sets the shim of ComponentRegistration`1.SelectInterceptorsWith(Action`1&lt;ItemRegistration`1&lt;IInterceptorSelector&gt;&gt; selector)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.AllInstances.SelectInterceptorsWithIInterceptorSelector">
            <summary>Sets the shim of ComponentRegistration`1.SelectInterceptorsWith(IInterceptorSelector selector)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.AllInstances.ServiceOverridesIDictionary">
            <summary>Sets the shim of ComponentRegistration`1.ServiceOverrides(IDictionary overrides)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.AllInstances.ServiceOverridesObject">
            <summary>Sets the shim of ComponentRegistration`1.ServiceOverrides(Object anonymous)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.AllInstances.ServiceOverridesServiceOverrideArray">
            <summary>Sets the shim of ComponentRegistration`1.ServiceOverrides(ServiceOverride[] overrides)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.AllInstances.ServicesCountGet">
            <summary>Sets the shim of ComponentRegistration`1.get_ServicesCount()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.AllInstances.ServicesGet">
            <summary>Sets the shim of ComponentRegistration`1.get_Services()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimComponentRegistration`1.AllInstances.SkipRegistrationIKernelInternalComponentModel">
            <summary>Sets the shim of ComponentRegistration`1.SkipRegistration(IKernelInternal internalKernel, ComponentModel componentModel)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Registration.Fakes.ShimCompoundChild">
            <summary>Shim type of Castle.MicroKernel.Registration.CompoundChild</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimCompoundChild.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimCompoundChild.#ctor(Castle.MicroKernel.Registration.CompoundChild)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimCompoundChild.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimCompoundChild.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimCompoundChild.ApplyToIConfiguration">
            <summary>Sets the shim of CompoundChild.ApplyTo(IConfiguration configuration)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimCompoundChild.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimCompoundChild.ConstructorStringNodeArray">
            <summary>Sets the shim of CompoundChild.CompoundChild(String name, Node[] childNodes)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Registration.Fakes.ShimCompoundChild.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimCompoundChild.AllInstances.ApplyToIConfiguration">
            <summary>Sets the shim of CompoundChild.ApplyTo(IConfiguration configuration)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Registration.Fakes.ShimDependency">
            <summary>Shim type of Castle.MicroKernel.Registration.Dependency</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimDependency.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimDependency.#ctor(Castle.MicroKernel.Registration.Dependency)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimDependency.AcceptOf1ICollectionOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.ICollection{``0},System.Boolean})">
            <summary>Sets the shim of Dependency.Accept(ICollection`1&lt;!!0&gt; items)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimDependency.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimDependency.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimDependency.OnComponentCollectionOf1StringArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String[],Castle.MicroKernel.Registration.ServiceOverride})">
            <summary>Sets the shim of Dependency.OnComponentCollection(String[] componentNames)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimDependency.OnComponentCollectionOf1TypeArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Type[],Castle.MicroKernel.Registration.ServiceOverride})">
            <summary>Sets the shim of Dependency.OnComponentCollection(Type[] componentTypes)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimDependency.OnComponentOf2``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.Registration.ServiceOverride})">
            <summary>Sets the shim of Dependency.OnComponent()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimDependency.OnResourceOf1StringString``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,System.String,Castle.MicroKernel.Registration.Property})">
            <summary>Sets the shim of Dependency.OnResource(String dependencyName, String resourceName)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimDependency.OnValueOf1Object``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Object,Castle.MicroKernel.Registration.Property})">
            <summary>Sets the shim of Dependency.OnValue(Object value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimDependency.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimDependency.ConstructorObject">
            <summary>Sets the shim of Dependency.Dependency(Object item)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimDependency.OnAppSettingsValueString">
            <summary>Sets the shim of Dependency.OnAppSettingsValue(String name)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimDependency.OnAppSettingsValueStringString">
            <summary>Sets the shim of Dependency.OnAppSettingsValue(String dependencyName, String settingName)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimDependency.OnComponentCollectionStringStringArray">
            <summary>Sets the shim of Dependency.OnComponentCollection(String collectionDependencyName, String[] componentNames)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimDependency.OnComponentCollectionStringTypeArray">
            <summary>Sets the shim of Dependency.OnComponentCollection(String collectionDependencyName, Type[] componentTypes)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimDependency.OnComponentCollectionTypeStringArray">
            <summary>Sets the shim of Dependency.OnComponentCollection(Type collectionDependencyType, String[] componentNames)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimDependency.OnComponentCollectionTypeTypeArray">
            <summary>Sets the shim of Dependency.OnComponentCollection(Type collectionDependencyType, Type[] componentTypes)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimDependency.OnComponentStringString">
            <summary>Sets the shim of Dependency.OnComponent(String dependencyName, String componentName)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimDependency.OnComponentStringType">
            <summary>Sets the shim of Dependency.OnComponent(String dependencyName, Type componentType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimDependency.OnComponentTypeString">
            <summary>Sets the shim of Dependency.OnComponent(Type dependencyType, String componentName)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimDependency.OnComponentTypeType">
            <summary>Sets the shim of Dependency.OnComponent(Type dependencyType, Type componentType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimDependency.OnConfigValueStringIConfiguration">
            <summary>Sets the shim of Dependency.OnConfigValue(String dependencyName, IConfiguration value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimDependency.OnConfigValueStringString">
            <summary>Sets the shim of Dependency.OnConfigValue(String dependencyName, String valueAsString)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimDependency.OnResourceStringResourceManagerString">
            <summary>Sets the shim of Dependency.OnResource(String dependencyName, ResourceManager resourceManager, String resourceName)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimDependency.OnValueStringObject">
            <summary>Sets the shim of Dependency.OnValue(String dependencyName, Object value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimDependency.OnValueTypeObject">
            <summary>Sets the shim of Dependency.OnValue(Type dependencyType, Object value)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Registration.Fakes.ShimDependency.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimDependency.AllInstances.AcceptOf1ICollectionOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.Registration.Dependency,System.Collections.Generic.ICollection{``0},System.Boolean})">
            <summary>Sets the shim of Dependency.Accept(ICollection`1&lt;!!0&gt; items)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Registration.Fakes.ShimFromAssemblyDescriptor">
            <summary>Shim type of Castle.MicroKernel.Registration.FromAssemblyDescriptor</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimFromAssemblyDescriptor.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimFromAssemblyDescriptor.#ctor(Castle.MicroKernel.Registration.FromAssemblyDescriptor)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimFromAssemblyDescriptor.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimFromAssemblyDescriptor.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimFromAssemblyDescriptor.Bind(Castle.MicroKernel.Registration.IRegistration)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimFromAssemblyDescriptor.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimFromAssemblyDescriptor.ConstructorAssemblyPredicateOfType">
            <summary>Sets the shim of FromAssemblyDescriptor.FromAssemblyDescriptor(Assembly assembly, Predicate`1&lt;Type&gt; additionalFilters)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimFromAssemblyDescriptor.ConstructorIEnumerableOfAssemblyPredicateOfType">
            <summary>Sets the shim of FromAssemblyDescriptor.FromAssemblyDescriptor(IEnumerable`1&lt;Assembly&gt; assemblies, Predicate`1&lt;Type&gt; additionalFilters)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimFromAssemblyDescriptor.IncludeNonPublicTypes">
            <summary>Sets the shim of FromAssemblyDescriptor.IncludeNonPublicTypes()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimFromAssemblyDescriptor.SelectedTypesIKernel">
            <summary>Sets the shim of FromAssemblyDescriptor.SelectedTypes(IKernel kernel)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimFromAssemblyDescriptor._SelectedTypesb__0Assembly">
            <summary>Sets the shim of FromAssemblyDescriptor.&lt;SelectedTypes&gt;b__0(Assembly a)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Registration.Fakes.ShimFromAssemblyDescriptor.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimFromAssemblyDescriptor.AllInstances.IncludeNonPublicTypes">
            <summary>Sets the shim of FromAssemblyDescriptor.IncludeNonPublicTypes()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimFromAssemblyDescriptor.AllInstances.SelectedTypesIKernel">
            <summary>Sets the shim of FromAssemblyDescriptor.SelectedTypes(IKernel kernel)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimFromAssemblyDescriptor.AllInstances._SelectedTypesb__0Assembly">
            <summary>Sets the shim of FromAssemblyDescriptor.&lt;SelectedTypes&gt;b__0(Assembly a)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Registration.Fakes.ShimFromDescriptor">
            <summary>Shim type of Castle.MicroKernel.Registration.FromDescriptor</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimFromDescriptor.#ctor(Castle.MicroKernel.Registration.FromDescriptor)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimFromDescriptor.BasedOnOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.Registration.BasedOnDescriptor})">
            <summary>Sets the shim of FromDescriptor.BasedOn()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimFromDescriptor.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimFromDescriptor.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimFromDescriptor.Bind(Castle.MicroKernel.Registration.IRegistration)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimFromDescriptor.InSameNamespaceAsOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.Registration.BasedOnDescriptor})">
            <summary>Sets the shim of FromDescriptor.InSameNamespaceAs()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimFromDescriptor.InSameNamespaceAsOf1Boolean``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Boolean,Castle.MicroKernel.Registration.BasedOnDescriptor})">
            <summary>Sets the shim of FromDescriptor.InSameNamespaceAs(Boolean includeSubnamespaces)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimFromDescriptor.AllowMultipleMatches">
            <summary>Sets the shim of FromDescriptor.AllowMultipleMatches()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimFromDescriptor.BasedOnIEnumerableOfType">
            <summary>Sets the shim of FromDescriptor.BasedOn(IEnumerable`1&lt;Type&gt; basedOn)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimFromDescriptor.BasedOnType">
            <summary>Sets the shim of FromDescriptor.BasedOn(Type basedOn)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimFromDescriptor.BasedOnTypeArray">
            <summary>Sets the shim of FromDescriptor.BasedOn(Type[] basedOn)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimFromDescriptor.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimFromDescriptor.CastleMicroKernelRegistrationIRegistrationRegisterIKernelInternal">
            <summary>Sets the shim of FromDescriptor.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimFromDescriptor.ConstructorPredicateOfType">
            <summary>Sets the shim of FromDescriptor.FromDescriptor(Predicate`1&lt;Type&gt; additionalFilters)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimFromDescriptor.InNamespaceString">
            <summary>Sets the shim of FromDescriptor.InNamespace(String namespace)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimFromDescriptor.InNamespaceStringBoolean">
            <summary>Sets the shim of FromDescriptor.InNamespace(String namespace, Boolean includeSubnamespaces)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimFromDescriptor.InSameNamespaceAsType">
            <summary>Sets the shim of FromDescriptor.InSameNamespaceAs(Type type)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimFromDescriptor.InSameNamespaceAsTypeBoolean">
            <summary>Sets the shim of FromDescriptor.InSameNamespaceAs(Type type, Boolean includeSubnamespaces)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimFromDescriptor.Pick">
            <summary>Sets the shim of FromDescriptor.Pick()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimFromDescriptor.WherePredicateOfType">
            <summary>Sets the shim of FromDescriptor.Where(Predicate`1&lt;Type&gt; accepted)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Registration.Fakes.ShimFromDescriptor.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimFromDescriptor.AllInstances.BasedOnOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.Registration.FromDescriptor,Castle.MicroKernel.Registration.BasedOnDescriptor})">
            <summary>Sets the shim of FromDescriptor.BasedOn()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimFromDescriptor.AllInstances.InSameNamespaceAsOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.Registration.FromDescriptor,Castle.MicroKernel.Registration.BasedOnDescriptor})">
            <summary>Sets the shim of FromDescriptor.InSameNamespaceAs()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimFromDescriptor.AllInstances.InSameNamespaceAsOf1Boolean``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.Registration.FromDescriptor,System.Boolean,Castle.MicroKernel.Registration.BasedOnDescriptor})">
            <summary>Sets the shim of FromDescriptor.InSameNamespaceAs(Boolean includeSubnamespaces)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimFromDescriptor.AllInstances.AllowMultipleMatches">
            <summary>Sets the shim of FromDescriptor.AllowMultipleMatches()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimFromDescriptor.AllInstances.BasedOnIEnumerableOfType">
            <summary>Sets the shim of FromDescriptor.BasedOn(IEnumerable`1&lt;Type&gt; basedOn)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimFromDescriptor.AllInstances.BasedOnType">
            <summary>Sets the shim of FromDescriptor.BasedOn(Type basedOn)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimFromDescriptor.AllInstances.BasedOnTypeArray">
            <summary>Sets the shim of FromDescriptor.BasedOn(Type[] basedOn)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimFromDescriptor.AllInstances.CastleMicroKernelRegistrationIRegistrationRegisterIKernelInternal">
            <summary>Sets the shim of FromDescriptor.Castle.MicroKernel.Registration.IRegistration.Register(IKernelInternal kernel)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimFromDescriptor.AllInstances.InNamespaceString">
            <summary>Sets the shim of FromDescriptor.InNamespace(String namespace)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimFromDescriptor.AllInstances.InNamespaceStringBoolean">
            <summary>Sets the shim of FromDescriptor.InNamespace(String namespace, Boolean includeSubnamespaces)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimFromDescriptor.AllInstances.InSameNamespaceAsType">
            <summary>Sets the shim of FromDescriptor.InSameNamespaceAs(Type type)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimFromDescriptor.AllInstances.InSameNamespaceAsTypeBoolean">
            <summary>Sets the shim of FromDescriptor.InSameNamespaceAs(Type type, Boolean includeSubnamespaces)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimFromDescriptor.AllInstances.Pick">
            <summary>Sets the shim of FromDescriptor.Pick()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimFromDescriptor.AllInstances.WherePredicateOfType">
            <summary>Sets the shim of FromDescriptor.Where(Predicate`1&lt;Type&gt; accepted)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Registration.Fakes.ShimFromTypesDescriptor">
            <summary>Shim type of Castle.MicroKernel.Registration.FromTypesDescriptor</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimFromTypesDescriptor.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimFromTypesDescriptor.#ctor(Castle.MicroKernel.Registration.FromTypesDescriptor)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimFromTypesDescriptor.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimFromTypesDescriptor.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimFromTypesDescriptor.Bind(Castle.MicroKernel.Registration.IRegistration)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimFromTypesDescriptor.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimFromTypesDescriptor.ConstructorIEnumerableOfTypePredicateOfType">
            <summary>Sets the shim of FromTypesDescriptor.FromTypesDescriptor(IEnumerable`1&lt;Type&gt; types, Predicate`1&lt;Type&gt; additionalFilters)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimFromTypesDescriptor.SelectedTypesIKernel">
            <summary>Sets the shim of FromTypesDescriptor.SelectedTypes(IKernel kernel)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Registration.Fakes.ShimFromTypesDescriptor.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimFromTypesDescriptor.AllInstances.SelectedTypesIKernel">
            <summary>Sets the shim of FromTypesDescriptor.SelectedTypes(IKernel kernel)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Registration.Fakes.ShimNamedAttribute">
            <summary>Shim type of Castle.MicroKernel.Registration.NamedAttribute</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimNamedAttribute.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimNamedAttribute.#ctor(Castle.MicroKernel.Registration.NamedAttribute)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimNamedAttribute.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimNamedAttribute.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimNamedAttribute.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimNamedAttribute.ConstructorString">
            <summary>Sets the shim of NamedAttribute.NamedAttribute(String name)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimNamedAttribute.EqObject">
            <summary>Sets the shim of NamedAttribute.Eq(Object value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimNamedAttribute.EqString">
            <summary>Sets the shim of NamedAttribute.Eq(String value)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Registration.Fakes.ShimNamedAttribute.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimNamedAttribute.AllInstances.EqObject">
            <summary>Sets the shim of NamedAttribute.Eq(Object value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimNamedAttribute.AllInstances.EqString">
            <summary>Sets the shim of NamedAttribute.Eq(String value)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Registration.Fakes.ShimNamedChild">
            <summary>Shim type of Castle.MicroKernel.Registration.NamedChild</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimNamedChild.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimNamedChild.#ctor(Castle.MicroKernel.Registration.NamedChild)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimNamedChild.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimNamedChild.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimNamedChild.ApplyToIConfiguration">
            <summary>Sets the shim of NamedChild.ApplyTo(IConfiguration configuration)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimNamedChild.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimNamedChild.ConstructorString">
            <summary>Sets the shim of NamedChild.NamedChild(String name)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimNamedChild.EqIConfiguration">
            <summary>Sets the shim of NamedChild.Eq(IConfiguration configNode)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimNamedChild.EqNodeArray">
            <summary>Sets the shim of NamedChild.Eq(Node[] childNodes)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimNamedChild.EqObject">
            <summary>Sets the shim of NamedChild.Eq(Object value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimNamedChild.EqString">
            <summary>Sets the shim of NamedChild.Eq(String value)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Registration.Fakes.ShimNamedChild.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimNamedChild.AllInstances.ApplyToIConfiguration">
            <summary>Sets the shim of NamedChild.ApplyTo(IConfiguration configuration)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimNamedChild.AllInstances.EqIConfiguration">
            <summary>Sets the shim of NamedChild.Eq(IConfiguration configNode)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimNamedChild.AllInstances.EqNodeArray">
            <summary>Sets the shim of NamedChild.Eq(Node[] childNodes)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimNamedChild.AllInstances.EqObject">
            <summary>Sets the shim of NamedChild.Eq(Object value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimNamedChild.AllInstances.EqString">
            <summary>Sets the shim of NamedChild.Eq(String value)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Registration.Fakes.ShimNode">
            <summary>Shim type of Castle.MicroKernel.Registration.Node</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimNode.#ctor(Castle.MicroKernel.Registration.Node)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimNode.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimNode.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimNode.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimNode.ConstructorString">
            <summary>Sets the shim of Node.Node(String name)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimNode.NameGet">
            <summary>Sets the shim of Node.get_Name()</summary>
        </member>
        <member name="T:Castle.MicroKernel.Registration.Fakes.ShimNode.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimNode.AllInstances.NameGet">
            <summary>Sets the shim of Node.get_Name()</summary>
        </member>
        <member name="T:Castle.MicroKernel.Registration.Fakes.ShimParameter">
            <summary>Shim type of Castle.MicroKernel.Registration.Parameter</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimParameter.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimParameter.#ctor(Castle.MicroKernel.Registration.Parameter)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimParameter.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimParameter.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimParameter.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimParameter.ConfigNodeGet">
            <summary>Sets the shim of Parameter.get_ConfigNode()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimParameter.ConstructorStringIConfiguration">
            <summary>Sets the shim of Parameter.Parameter(String key, IConfiguration configNode)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimParameter.ConstructorStringString">
            <summary>Sets the shim of Parameter.Parameter(String key, String value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimParameter.ForKeyString">
            <summary>Sets the shim of Parameter.ForKey(String key)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimParameter.ImplicitOpParameterDependency">
            <summary>Sets the shim of Parameter.op_Implicit(Parameter parameter)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimParameter.KeyGet">
            <summary>Sets the shim of Parameter.get_Key()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimParameter.ValueGet">
            <summary>Sets the shim of Parameter.get_Value()</summary>
        </member>
        <member name="T:Castle.MicroKernel.Registration.Fakes.ShimParameter.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimParameter.AllInstances.ConfigNodeGet">
            <summary>Sets the shim of Parameter.get_ConfigNode()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimParameter.AllInstances.KeyGet">
            <summary>Sets the shim of Parameter.get_Key()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimParameter.AllInstances.ValueGet">
            <summary>Sets the shim of Parameter.get_Value()</summary>
        </member>
        <member name="T:Castle.MicroKernel.Registration.Fakes.ShimParameterKey">
            <summary>Shim type of Castle.MicroKernel.Registration.ParameterKey</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimParameterKey.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimParameterKey.#ctor(Castle.MicroKernel.Registration.ParameterKey)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimParameterKey.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimParameterKey.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimParameterKey.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimParameterKey.ConstructorString">
            <summary>Sets the shim of ParameterKey.ParameterKey(String name)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimParameterKey.EqIConfiguration">
            <summary>Sets the shim of ParameterKey.Eq(IConfiguration configNode)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimParameterKey.EqString">
            <summary>Sets the shim of ParameterKey.Eq(String value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimParameterKey.NameGet">
            <summary>Sets the shim of ParameterKey.get_Name()</summary>
        </member>
        <member name="T:Castle.MicroKernel.Registration.Fakes.ShimParameterKey.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimParameterKey.AllInstances.EqIConfiguration">
            <summary>Sets the shim of ParameterKey.Eq(IConfiguration configNode)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimParameterKey.AllInstances.EqString">
            <summary>Sets the shim of ParameterKey.Eq(String value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimParameterKey.AllInstances.NameGet">
            <summary>Sets the shim of ParameterKey.get_Name()</summary>
        </member>
        <member name="T:Castle.MicroKernel.Registration.Fakes.ShimProperty">
            <summary>Shim type of Castle.MicroKernel.Registration.Property</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimProperty.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimProperty.#ctor(Castle.MicroKernel.Registration.Property)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimProperty.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimProperty.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimProperty.ForKeyOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.Registration.PropertyKey})">
            <summary>Sets the shim of Property.ForKey()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimProperty.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimProperty.ConstructorObjectObject">
            <summary>Sets the shim of Property.Property(Object key, Object value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimProperty.ForKeyString">
            <summary>Sets the shim of Property.ForKey(String key)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimProperty.ForKeyType">
            <summary>Sets the shim of Property.ForKey(Type key)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimProperty.ImplicitOpPropertyDependency">
            <summary>Sets the shim of Property.op_Implicit(Property item)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimProperty.KeyGet">
            <summary>Sets the shim of Property.get_Key()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimProperty.ValueGet">
            <summary>Sets the shim of Property.get_Value()</summary>
        </member>
        <member name="T:Castle.MicroKernel.Registration.Fakes.ShimProperty.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimProperty.AllInstances.KeyGet">
            <summary>Sets the shim of Property.get_Key()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimProperty.AllInstances.ValueGet">
            <summary>Sets the shim of Property.get_Value()</summary>
        </member>
        <member name="T:Castle.MicroKernel.Registration.Fakes.ShimPropertyKey">
            <summary>Shim type of Castle.MicroKernel.Registration.PropertyKey</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimPropertyKey.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimPropertyKey.#ctor(Castle.MicroKernel.Registration.PropertyKey)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimPropertyKey.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimPropertyKey.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimPropertyKey.IsOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.Registration.ServiceOverride})">
            <summary>Sets the shim of PropertyKey.Is()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimPropertyKey.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimPropertyKey.ConstructorObject">
            <summary>Sets the shim of PropertyKey.PropertyKey(Object key)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimPropertyKey.EqObject">
            <summary>Sets the shim of PropertyKey.Eq(Object value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimPropertyKey.GetServiceOverrideKey">
            <summary>Sets the shim of PropertyKey.GetServiceOverrideKey()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimPropertyKey.IsString">
            <summary>Sets the shim of PropertyKey.Is(String componentName)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimPropertyKey.IsType">
            <summary>Sets the shim of PropertyKey.Is(Type componentImplementation)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimPropertyKey.KeyGet">
            <summary>Sets the shim of PropertyKey.get_Key()</summary>
        </member>
        <member name="T:Castle.MicroKernel.Registration.Fakes.ShimPropertyKey.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimPropertyKey.AllInstances.IsOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.Registration.PropertyKey,Castle.MicroKernel.Registration.ServiceOverride})">
            <summary>Sets the shim of PropertyKey.Is()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimPropertyKey.AllInstances.EqObject">
            <summary>Sets the shim of PropertyKey.Eq(Object value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimPropertyKey.AllInstances.GetServiceOverrideKey">
            <summary>Sets the shim of PropertyKey.GetServiceOverrideKey()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimPropertyKey.AllInstances.IsString">
            <summary>Sets the shim of PropertyKey.Is(String componentName)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimPropertyKey.AllInstances.IsType">
            <summary>Sets the shim of PropertyKey.Is(Type componentImplementation)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimPropertyKey.AllInstances.KeyGet">
            <summary>Sets the shim of PropertyKey.get_Key()</summary>
        </member>
        <member name="T:Castle.MicroKernel.Registration.Fakes.ShimRegistrationGroup`1">
            <summary>Shim type of Castle.MicroKernel.Registration.RegistrationGroup`1</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimRegistrationGroup`1.#ctor(Castle.MicroKernel.Registration.RegistrationGroup{`0})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimRegistrationGroup`1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimRegistrationGroup`1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimRegistrationGroup`1.AddAttributeDescriptorStringString">
            <summary>Sets the shim of RegistrationGroup`1.AddAttributeDescriptor(String name, String value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimRegistrationGroup`1.AddDescriptorIComponentModelDescriptor">
            <summary>Sets the shim of RegistrationGroup`1.AddDescriptor(IComponentModelDescriptor descriptor)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimRegistrationGroup`1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimRegistrationGroup`1.ConstructorComponentRegistrationOfT0">
            <summary>Sets the shim of RegistrationGroup`1.RegistrationGroup`1(ComponentRegistration`1&lt;!0&gt; registration)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimRegistrationGroup`1.RegistrationGet">
            <summary>Sets the shim of RegistrationGroup`1.get_Registration()</summary>
        </member>
        <member name="T:Castle.MicroKernel.Registration.Fakes.ShimRegistrationGroup`1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimRegistrationGroup`1.AllInstances.AddAttributeDescriptorStringString">
            <summary>Sets the shim of RegistrationGroup`1.AddAttributeDescriptor(String name, String value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimRegistrationGroup`1.AllInstances.AddDescriptorIComponentModelDescriptor">
            <summary>Sets the shim of RegistrationGroup`1.AddDescriptor(IComponentModelDescriptor descriptor)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimRegistrationGroup`1.AllInstances.RegistrationGet">
            <summary>Sets the shim of RegistrationGroup`1.get_Registration()</summary>
        </member>
        <member name="T:Castle.MicroKernel.Registration.Fakes.ShimServiceDescriptor">
            <summary>Shim type of Castle.MicroKernel.Registration.ServiceDescriptor</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimServiceDescriptor.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimServiceDescriptor.#ctor(Castle.MicroKernel.Registration.ServiceDescriptor)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimServiceDescriptor.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimServiceDescriptor.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimServiceDescriptor.AddFromInterfaceTypeTypeICollectionOfType">
            <summary>Sets the shim of ServiceDescriptor.AddFromInterface(Type type, Type implements, ICollection`1&lt;Type&gt; matches)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimServiceDescriptor.AllInterfaces">
            <summary>Sets the shim of ServiceDescriptor.AllInterfaces()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimServiceDescriptor.Base">
            <summary>Sets the shim of ServiceDescriptor.Base()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimServiceDescriptor.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimServiceDescriptor.ConstructorBasedOnDescriptor">
            <summary>Sets the shim of ServiceDescriptor.ServiceDescriptor(BasedOnDescriptor basedOnDescriptor)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimServiceDescriptor.DefaultInterfaces">
            <summary>Sets the shim of ServiceDescriptor.DefaultInterfaces()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimServiceDescriptor.FirstInterface">
            <summary>Sets the shim of ServiceDescriptor.FirstInterface()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimServiceDescriptor.FromInterface">
            <summary>Sets the shim of ServiceDescriptor.FromInterface()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimServiceDescriptor.FromInterfaceType">
            <summary>Sets the shim of ServiceDescriptor.FromInterface(Type implements)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimServiceDescriptor.GetInterfaceNameType">
            <summary>Sets the shim of ServiceDescriptor.GetInterfaceName(Type interface)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimServiceDescriptor.GetServicesTypeTypeArray">
            <summary>Sets the shim of ServiceDescriptor.GetServices(Type type, Type[] baseType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimServiceDescriptor.GetTopLevelInterfacesType">
            <summary>Sets the shim of ServiceDescriptor.GetTopLevelInterfaces(Type type)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimServiceDescriptor.SelectIEnumerableOfType">
            <summary>Sets the shim of ServiceDescriptor.Select(IEnumerable`1&lt;Type&gt; types)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimServiceDescriptor.SelectServiceDescriptorServiceSelector">
            <summary>Sets the shim of ServiceDescriptor.Select(ServiceSelector selector)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimServiceDescriptor.Self">
            <summary>Sets the shim of ServiceDescriptor.Self()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimServiceDescriptor.WorkaroundCLRBugType">
            <summary>Sets the shim of ServiceDescriptor.WorkaroundCLRBug(Type serviceType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimServiceDescriptor._AllInterfacesb__0TypeTypeArray">
            <summary>Sets the shim of ServiceDescriptor.&lt;AllInterfaces&gt;b__0(Type t, Type[] b)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimServiceDescriptor._Baseb__2TypeTypeArray">
            <summary>Sets the shim of ServiceDescriptor.&lt;Base&gt;b__2(Type t, Type[] b)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimServiceDescriptor._DefaultInterfacesb__4TypeTypeArray">
            <summary>Sets the shim of ServiceDescriptor.&lt;DefaultInterfaces&gt;b__4(Type type, Type[] base)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimServiceDescriptor._FirstInterfaceb__8TypeTypeArray">
            <summary>Sets the shim of ServiceDescriptor.&lt;FirstInterface&gt;b__8(Type type, Type[] base)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimServiceDescriptor._Selfb__12TypeTypeArray">
            <summary>Sets the shim of ServiceDescriptor.&lt;Self&gt;b__12(Type t, Type[] b)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Registration.Fakes.ShimServiceDescriptor.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimServiceDescriptor.AllInstances.AddFromInterfaceTypeTypeICollectionOfType">
            <summary>Sets the shim of ServiceDescriptor.AddFromInterface(Type type, Type implements, ICollection`1&lt;Type&gt; matches)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimServiceDescriptor.AllInstances.AllInterfaces">
            <summary>Sets the shim of ServiceDescriptor.AllInterfaces()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimServiceDescriptor.AllInstances.Base">
            <summary>Sets the shim of ServiceDescriptor.Base()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimServiceDescriptor.AllInstances.DefaultInterfaces">
            <summary>Sets the shim of ServiceDescriptor.DefaultInterfaces()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimServiceDescriptor.AllInstances.FirstInterface">
            <summary>Sets the shim of ServiceDescriptor.FirstInterface()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimServiceDescriptor.AllInstances.FromInterface">
            <summary>Sets the shim of ServiceDescriptor.FromInterface()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimServiceDescriptor.AllInstances.FromInterfaceType">
            <summary>Sets the shim of ServiceDescriptor.FromInterface(Type implements)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimServiceDescriptor.AllInstances.GetInterfaceNameType">
            <summary>Sets the shim of ServiceDescriptor.GetInterfaceName(Type interface)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimServiceDescriptor.AllInstances.GetServicesTypeTypeArray">
            <summary>Sets the shim of ServiceDescriptor.GetServices(Type type, Type[] baseType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimServiceDescriptor.AllInstances.GetTopLevelInterfacesType">
            <summary>Sets the shim of ServiceDescriptor.GetTopLevelInterfaces(Type type)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimServiceDescriptor.AllInstances.SelectIEnumerableOfType">
            <summary>Sets the shim of ServiceDescriptor.Select(IEnumerable`1&lt;Type&gt; types)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimServiceDescriptor.AllInstances.SelectServiceDescriptorServiceSelector">
            <summary>Sets the shim of ServiceDescriptor.Select(ServiceSelector selector)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimServiceDescriptor.AllInstances.Self">
            <summary>Sets the shim of ServiceDescriptor.Self()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimServiceDescriptor.AllInstances._DefaultInterfacesb__4TypeTypeArray">
            <summary>Sets the shim of ServiceDescriptor.&lt;DefaultInterfaces&gt;b__4(Type type, Type[] base)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Registration.Fakes.ShimServiceOverride">
            <summary>Shim type of Castle.MicroKernel.Registration.ServiceOverride</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimServiceOverride.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimServiceOverride.#ctor(Castle.MicroKernel.Registration.ServiceOverride)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimServiceOverride.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimServiceOverride.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimServiceOverride.ForKeyOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.Registration.ServiceOverrideKey})">
            <summary>Sets the shim of ServiceOverride.ForKey()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimServiceOverride.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimServiceOverride.ConstructorObjectObject">
            <summary>Sets the shim of ServiceOverride.ServiceOverride(Object dependencyKey, Object value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimServiceOverride.ConstructorObjectObjectType">
            <summary>Sets the shim of ServiceOverride.ServiceOverride(Object dependencyKey, Object value, Type type)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimServiceOverride.DependencyKeyGet">
            <summary>Sets the shim of ServiceOverride.get_DependencyKey()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimServiceOverride.DependencyKeySetObject">
            <summary>Sets the shim of ServiceOverride.set_DependencyKey(Object value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimServiceOverride.ForKeyString">
            <summary>Sets the shim of ServiceOverride.ForKey(String key)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimServiceOverride.ForKeyType">
            <summary>Sets the shim of ServiceOverride.ForKey(Type key)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimServiceOverride.ImplicitOpServiceOverrideDependency">
            <summary>Sets the shim of ServiceOverride.op_Implicit(ServiceOverride item)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimServiceOverride.TypeGet">
            <summary>Sets the shim of ServiceOverride.get_Type()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimServiceOverride.TypeSetType">
            <summary>Sets the shim of ServiceOverride.set_Type(Type value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimServiceOverride.ValueGet">
            <summary>Sets the shim of ServiceOverride.get_Value()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimServiceOverride.ValueSetObject">
            <summary>Sets the shim of ServiceOverride.set_Value(Object value)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Registration.Fakes.ShimServiceOverride.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimServiceOverride.AllInstances.DependencyKeyGet">
            <summary>Sets the shim of ServiceOverride.get_DependencyKey()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimServiceOverride.AllInstances.DependencyKeySetObject">
            <summary>Sets the shim of ServiceOverride.set_DependencyKey(Object value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimServiceOverride.AllInstances.TypeGet">
            <summary>Sets the shim of ServiceOverride.get_Type()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimServiceOverride.AllInstances.TypeSetType">
            <summary>Sets the shim of ServiceOverride.set_Type(Type value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimServiceOverride.AllInstances.ValueGet">
            <summary>Sets the shim of ServiceOverride.get_Value()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimServiceOverride.AllInstances.ValueSetObject">
            <summary>Sets the shim of ServiceOverride.set_Value(Object value)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Registration.Fakes.ShimServiceOverrideKey">
            <summary>Shim type of Castle.MicroKernel.Registration.ServiceOverrideKey</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimServiceOverrideKey.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimServiceOverrideKey.#ctor(Castle.MicroKernel.Registration.ServiceOverrideKey)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimServiceOverrideKey.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimServiceOverrideKey.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimServiceOverrideKey.EqOf1IEnumerableOfString``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IEnumerable{System.String},Castle.MicroKernel.Registration.ServiceOverride})">
            <summary>Sets the shim of ServiceOverrideKey.Eq(IEnumerable`1&lt;String&gt; value)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimServiceOverrideKey.EqOf1StringArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String[],Castle.MicroKernel.Registration.ServiceOverride})">
            <summary>Sets the shim of ServiceOverrideKey.Eq(String[] value)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimServiceOverrideKey.EqOf1TypeArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Type[],Castle.MicroKernel.Registration.ServiceOverride})">
            <summary>Sets the shim of ServiceOverrideKey.Eq(Type[] componentTypes)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimServiceOverrideKey.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimServiceOverrideKey.ConstructorString">
            <summary>Sets the shim of ServiceOverrideKey.ServiceOverrideKey(String key)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimServiceOverrideKey.ConstructorType">
            <summary>Sets the shim of ServiceOverrideKey.ServiceOverrideKey(Type key)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimServiceOverrideKey.EqIEnumerableOfString">
            <summary>Sets the shim of ServiceOverrideKey.Eq(IEnumerable`1&lt;String&gt; value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimServiceOverrideKey.EqString">
            <summary>Sets the shim of ServiceOverrideKey.Eq(String value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimServiceOverrideKey.EqStringArray">
            <summary>Sets the shim of ServiceOverrideKey.Eq(String[] value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimServiceOverrideKey.EqTypeArray">
            <summary>Sets the shim of ServiceOverrideKey.Eq(Type[] componentTypes)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Registration.Fakes.ShimServiceOverrideKey.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimServiceOverrideKey.AllInstances.EqOf1IEnumerableOfString``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.Registration.ServiceOverrideKey,System.Collections.Generic.IEnumerable{System.String},Castle.MicroKernel.Registration.ServiceOverride})">
            <summary>Sets the shim of ServiceOverrideKey.Eq(IEnumerable`1&lt;String&gt; value)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimServiceOverrideKey.AllInstances.EqOf1StringArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.Registration.ServiceOverrideKey,System.String[],Castle.MicroKernel.Registration.ServiceOverride})">
            <summary>Sets the shim of ServiceOverrideKey.Eq(String[] value)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimServiceOverrideKey.AllInstances.EqOf1TypeArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.Registration.ServiceOverrideKey,System.Type[],Castle.MicroKernel.Registration.ServiceOverride})">
            <summary>Sets the shim of ServiceOverrideKey.Eq(Type[] componentTypes)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimServiceOverrideKey.AllInstances.EqIEnumerableOfString">
            <summary>Sets the shim of ServiceOverrideKey.Eq(IEnumerable`1&lt;String&gt; value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimServiceOverrideKey.AllInstances.EqString">
            <summary>Sets the shim of ServiceOverrideKey.Eq(String value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimServiceOverrideKey.AllInstances.EqStringArray">
            <summary>Sets the shim of ServiceOverrideKey.Eq(String[] value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimServiceOverrideKey.AllInstances.EqTypeArray">
            <summary>Sets the shim of ServiceOverrideKey.Eq(Type[] componentTypes)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Registration.Fakes.ShimSimpleChild">
            <summary>Shim type of Castle.MicroKernel.Registration.SimpleChild</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimSimpleChild.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimSimpleChild.#ctor(Castle.MicroKernel.Registration.SimpleChild)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimSimpleChild.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimSimpleChild.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimSimpleChild.ApplyToIConfiguration">
            <summary>Sets the shim of SimpleChild.ApplyTo(IConfiguration configuration)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimSimpleChild.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimSimpleChild.ConstructorStringString">
            <summary>Sets the shim of SimpleChild.SimpleChild(String name, String value)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Registration.Fakes.ShimSimpleChild.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimSimpleChild.AllInstances.ApplyToIConfiguration">
            <summary>Sets the shim of SimpleChild.ApplyTo(IConfiguration configuration)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Registration.Fakes.ShimTypes">
            <summary>Shim type of Castle.MicroKernel.Registration.Types</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimTypes.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimTypes.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimTypes.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.ShimTypes.FromAssemblyContainingOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.Registration.FromAssemblyDescriptor})">
            <summary>Sets the shim of Types.FromAssemblyContaining()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimTypes.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimTypes.FromAssemblyAssembly">
            <summary>Sets the shim of Types.FromAssembly(Assembly assembly)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimTypes.FromAssemblyContainingType">
            <summary>Sets the shim of Types.FromAssemblyContaining(Type type)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimTypes.FromAssemblyInDirectoryAssemblyFilter">
            <summary>Sets the shim of Types.FromAssemblyInDirectory(AssemblyFilter filter)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimTypes.FromAssemblyInThisApplication">
            <summary>Sets the shim of Types.FromAssemblyInThisApplication()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimTypes.FromAssemblyNamedString">
            <summary>Sets the shim of Types.FromAssemblyNamed(String assemblyName)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimTypes.FromIEnumerableOfType">
            <summary>Sets the shim of Types.From(IEnumerable`1&lt;Type&gt; types)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimTypes.FromThisAssembly">
            <summary>Sets the shim of Types.FromThisAssembly()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.ShimTypes.FromTypeArray">
            <summary>Sets the shim of Types.From(Type[] types)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Registration.Fakes.StubAssemblyFilter">
            <summary>Stub type of Castle.MicroKernel.Registration.AssemblyFilter</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.StubAssemblyFilter.#ctor(System.String,System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.StubAssemblyFilter.InitializeStub">
            <summary>Initializes a new instance of type StubAssemblyFilter</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.StubAssemblyFilter.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.StubAssemblyFilter.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.StubAssemblyFilter.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.Registration.Fakes.StubChild">
            <summary>Stub type of Castle.MicroKernel.Registration.Child</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.StubChild.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.StubChild.InitializeStub">
            <summary>Initializes a new instance of type StubChild</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.StubChild.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.StubChild.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.StubChild.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.Registration.Fakes.StubComponentRegistration">
            <summary>Stub type of Castle.MicroKernel.Registration.ComponentRegistration</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.StubComponentRegistration.#ctor(System.Type[])">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.StubComponentRegistration.InitializeStub">
            <summary>Initializes a new instance of type StubComponentRegistration</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.StubComponentRegistration.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.StubComponentRegistration.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.StubComponentRegistration.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.Registration.Fakes.StubComponentRegistration`1">
            <summary>Stub type of Castle.MicroKernel.Registration.ComponentRegistration`1</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.StubComponentRegistration`1.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.StubComponentRegistration`1.#ctor(System.Type[])">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.StubComponentRegistration`1.InitializeStub">
            <summary>Initializes a new instance of type StubComponentRegistration</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.StubComponentRegistration`1.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.StubComponentRegistration`1.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.StubComponentRegistration`1.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.Registration.Fakes.StubFromAssemblyDescriptor">
            <summary>Stub type of Castle.MicroKernel.Registration.FromAssemblyDescriptor</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.StubFromAssemblyDescriptor.#ctor(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Predicate{System.Type})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.StubFromAssemblyDescriptor.#ctor(System.Reflection.Assembly,System.Predicate{System.Type})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.StubFromAssemblyDescriptor.InitializeStub">
            <summary>Initializes a new instance of type StubFromAssemblyDescriptor</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.StubFromAssemblyDescriptor.SelectedTypes(Castle.MicroKernel.IKernel)">
            <summary>Sets the stub of FromAssemblyDescriptor.SelectedTypes(IKernel kernel)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Registration.Fakes.StubFromAssemblyDescriptor.SelectedTypesIKernel">
            <summary>Sets the stub of FromAssemblyDescriptor.SelectedTypes(IKernel kernel)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.StubFromAssemblyDescriptor.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.StubFromAssemblyDescriptor.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.StubFromAssemblyDescriptor.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.Registration.Fakes.StubFromDescriptor">
            <summary>Stub type of Castle.MicroKernel.Registration.FromDescriptor</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.StubFromDescriptor.#ctor(System.Predicate{System.Type})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.StubFromDescriptor.InitializeStub">
            <summary>Initializes a new instance of type StubFromDescriptor</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.StubFromDescriptor.SelectedTypes(Castle.MicroKernel.IKernel)">
            <summary>Sets the stub of FromDescriptor.SelectedTypes(IKernel kernel)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Registration.Fakes.StubFromDescriptor.SelectedTypesIKernel">
            <summary>Sets the stub of FromDescriptor.SelectedTypes(IKernel kernel)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.StubFromDescriptor.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.StubFromDescriptor.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.StubFromDescriptor.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.Registration.Fakes.StubIRegistration">
            <summary>Stub type of Castle.MicroKernel.Registration.IRegistration</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.StubIRegistration.#ctor">
            <summary>Initializes a new instance of type StubIRegistration</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.StubIRegistration.cw::Castle#MicroKernel#Registration#IRegistration#Register(Castle.MicroKernel.IKernelInternal)">
            <summary>Sets the stub of IRegistration.Register(IKernelInternal kernel)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Registration.Fakes.StubIRegistration.RegisterIKernelInternal">
            <summary>Sets the stub of IRegistration.Register(IKernelInternal kernel)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Registration.Fakes.StubIWindsorInstaller">
            <summary>Stub type of Castle.MicroKernel.Registration.IWindsorInstaller</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.StubIWindsorInstaller.#ctor">
            <summary>Initializes a new instance of type StubIWindsorInstaller</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.StubIWindsorInstaller.cw::Castle#MicroKernel#Registration#IWindsorInstaller#Install(Castle.Windsor.IWindsorContainer,Castle.MicroKernel.SubSystems.Configuration.IConfigurationStore)">
            <summary>Sets the stub of IWindsorInstaller.Install(IWindsorContainer container, IConfigurationStore store)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Registration.Fakes.StubIWindsorInstaller.InstallIWindsorContainerIConfigurationStore">
            <summary>Sets the stub of IWindsorInstaller.Install(IWindsorContainer container, IConfigurationStore store)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Registration.Fakes.StubNode">
            <summary>Stub type of Castle.MicroKernel.Registration.Node</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.StubNode.#ctor(System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.StubNode.ApplyTo(Castle.Core.Configuration.IConfiguration)">
            <summary>Sets the stub of Node.ApplyTo(IConfiguration configuration)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Registration.Fakes.StubNode.ApplyToIConfiguration">
            <summary>Sets the stub of Node.ApplyTo(IConfiguration configuration)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.StubNode.InitializeStub">
            <summary>Initializes a new instance of type StubNode</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.StubNode.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.StubNode.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.StubNode.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.Registration.Fakes.StubProperty">
            <summary>Stub type of Castle.MicroKernel.Registration.Property</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.StubProperty.#ctor(System.Object,System.Object)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.StubProperty.InitializeStub">
            <summary>Initializes a new instance of type StubProperty</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.StubProperty.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.StubProperty.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.StubProperty.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.Registration.Fakes.StubRegistrationGroup`1">
            <summary>Stub type of Castle.MicroKernel.Registration.RegistrationGroup`1</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.StubRegistrationGroup`1.#ctor(Castle.MicroKernel.Registration.ComponentRegistration{`0})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Fakes.StubRegistrationGroup`1.InitializeStub">
            <summary>Initializes a new instance of type StubRegistrationGroup</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.StubRegistrationGroup`1.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.StubRegistrationGroup`1.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Fakes.StubRegistrationGroup`1.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.Registration.Interceptor.Fakes.ShimInterceptorGroup`1">
            <summary>Shim type of Castle.MicroKernel.Registration.Interceptor.InterceptorGroup`1</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Interceptor.Fakes.ShimInterceptorGroup`1.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Interceptor.Fakes.ShimInterceptorGroup`1.#ctor(Castle.MicroKernel.Registration.Interceptor.InterceptorGroup{`0})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Interceptor.Fakes.ShimInterceptorGroup`1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Interceptor.Fakes.ShimInterceptorGroup`1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Interceptor.Fakes.ShimInterceptorGroup`1.AnywhereGet">
            <summary>Sets the shim of InterceptorGroup`1.get_Anywhere()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Interceptor.Fakes.ShimInterceptorGroup`1.AtIndexInt32">
            <summary>Sets the shim of InterceptorGroup`1.AtIndex(Int32 index)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Interceptor.Fakes.ShimInterceptorGroup`1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Interceptor.Fakes.ShimInterceptorGroup`1.ConstructorComponentRegistrationOfT0InterceptorReferenceArray">
            <summary>Sets the shim of InterceptorGroup`1.InterceptorGroup`1(ComponentRegistration`1&lt;!0&gt; registration, InterceptorReference[] interceptors)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Interceptor.Fakes.ShimInterceptorGroup`1.FirstGet">
            <summary>Sets the shim of InterceptorGroup`1.get_First()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Interceptor.Fakes.ShimInterceptorGroup`1.LastGet">
            <summary>Sets the shim of InterceptorGroup`1.get_Last()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Interceptor.Fakes.ShimInterceptorGroup`1.SelectedWithIInterceptorSelector">
            <summary>Sets the shim of InterceptorGroup`1.SelectedWith(IInterceptorSelector selector)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Registration.Interceptor.Fakes.ShimInterceptorGroup`1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Interceptor.Fakes.ShimInterceptorGroup`1.AllInstances.AnywhereGet">
            <summary>Sets the shim of InterceptorGroup`1.get_Anywhere()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Interceptor.Fakes.ShimInterceptorGroup`1.AllInstances.AtIndexInt32">
            <summary>Sets the shim of InterceptorGroup`1.AtIndex(Int32 index)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Interceptor.Fakes.ShimInterceptorGroup`1.AllInstances.FirstGet">
            <summary>Sets the shim of InterceptorGroup`1.get_First()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Interceptor.Fakes.ShimInterceptorGroup`1.AllInstances.LastGet">
            <summary>Sets the shim of InterceptorGroup`1.get_Last()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Interceptor.Fakes.ShimInterceptorGroup`1.AllInstances.SelectedWithIInterceptorSelector">
            <summary>Sets the shim of InterceptorGroup`1.SelectedWith(IInterceptorSelector selector)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Registration.Interceptor.Fakes.StubInterceptorGroup`1">
            <summary>Stub type of Castle.MicroKernel.Registration.Interceptor.InterceptorGroup`1</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Interceptor.Fakes.StubInterceptorGroup`1.#ctor(Castle.MicroKernel.Registration.ComponentRegistration{`0},Castle.Core.InterceptorReference[])">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Interceptor.Fakes.StubInterceptorGroup`1.InitializeStub">
            <summary>Initializes a new instance of type StubInterceptorGroup</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Interceptor.Fakes.StubInterceptorGroup`1.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Interceptor.Fakes.StubInterceptorGroup`1.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Interceptor.Fakes.StubInterceptorGroup`1.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.Registration.Lifestyle.Fakes.ShimLifestyleGroup`1">
            <summary>Shim type of Castle.MicroKernel.Registration.Lifestyle.LifestyleGroup`1</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Lifestyle.Fakes.ShimLifestyleGroup`1.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Lifestyle.Fakes.ShimLifestyleGroup`1.#ctor(Castle.MicroKernel.Registration.Lifestyle.LifestyleGroup{`0})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Lifestyle.Fakes.ShimLifestyleGroup`1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Lifestyle.Fakes.ShimLifestyleGroup`1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Lifestyle.Fakes.ShimLifestyleGroup`1.BoundToNearestOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.Registration.ComponentRegistration{`0}})">
            <summary>Sets the shim of LifestyleGroup`1.BoundToNearest()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Lifestyle.Fakes.ShimLifestyleGroup`1.BoundToOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.Registration.ComponentRegistration{`0}})">
            <summary>Sets the shim of LifestyleGroup`1.BoundTo()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Lifestyle.Fakes.ShimLifestyleGroup`1.CustomOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.Registration.ComponentRegistration{`0}})">
            <summary>Sets the shim of LifestyleGroup`1.Custom()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Lifestyle.Fakes.ShimLifestyleGroup`1.ScopedOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.Registration.ComponentRegistration{`0}})">
            <summary>Sets the shim of LifestyleGroup`1.Scoped()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Lifestyle.Fakes.ShimLifestyleGroup`1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Lifestyle.Fakes.ShimLifestyleGroup`1.BoundToFuncOfIHandlerArrayIHandler">
            <summary>Sets the shim of LifestyleGroup`1.BoundTo(Func`2&lt;IHandler[],IHandler&gt; scopeRootBinder)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Lifestyle.Fakes.ShimLifestyleGroup`1.ConstructorComponentRegistrationOfT0">
            <summary>Sets the shim of LifestyleGroup`1.LifestyleGroup`1(ComponentRegistration`1&lt;!0&gt; registration)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Lifestyle.Fakes.ShimLifestyleGroup`1.CustomType">
            <summary>Sets the shim of LifestyleGroup`1.Custom(Type customLifestyleType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Lifestyle.Fakes.ShimLifestyleGroup`1.InvalidValueLifestyleTypeString">
            <summary>Sets the shim of LifestyleGroup`1.InvalidValue(LifestyleType type, String message)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Lifestyle.Fakes.ShimLifestyleGroup`1.IsLifestyleType">
            <summary>Sets the shim of LifestyleGroup`1.Is(LifestyleType type)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Lifestyle.Fakes.ShimLifestyleGroup`1.PerThreadGet">
            <summary>Sets the shim of LifestyleGroup`1.get_PerThread()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Lifestyle.Fakes.ShimLifestyleGroup`1.PerWebRequestGet">
            <summary>Sets the shim of LifestyleGroup`1.get_PerWebRequest()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Lifestyle.Fakes.ShimLifestyleGroup`1.PooledGet">
            <summary>Sets the shim of LifestyleGroup`1.get_Pooled()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Lifestyle.Fakes.ShimLifestyleGroup`1.PooledWithSizeNullableOfInt32NullableOfInt32">
            <summary>Sets the shim of LifestyleGroup`1.PooledWithSize(Nullable`1&lt;Int32&gt; initialSize, Nullable`1&lt;Int32&gt; maxSize)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Lifestyle.Fakes.ShimLifestyleGroup`1.Scoped">
            <summary>Sets the shim of LifestyleGroup`1.Scoped()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Lifestyle.Fakes.ShimLifestyleGroup`1.ScopedType">
            <summary>Sets the shim of LifestyleGroup`1.Scoped(Type scopeAccessorType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Lifestyle.Fakes.ShimLifestyleGroup`1.SingletonGet">
            <summary>Sets the shim of LifestyleGroup`1.get_Singleton()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Lifestyle.Fakes.ShimLifestyleGroup`1.TransientGet">
            <summary>Sets the shim of LifestyleGroup`1.get_Transient()</summary>
        </member>
        <member name="T:Castle.MicroKernel.Registration.Lifestyle.Fakes.ShimLifestyleGroup`1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Lifestyle.Fakes.ShimLifestyleGroup`1.AllInstances.BoundToNearestOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.Registration.Lifestyle.LifestyleGroup{`0},Castle.MicroKernel.Registration.ComponentRegistration{`0}})">
            <summary>Sets the shim of LifestyleGroup`1.BoundToNearest()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Lifestyle.Fakes.ShimLifestyleGroup`1.AllInstances.BoundToOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.Registration.Lifestyle.LifestyleGroup{`0},Castle.MicroKernel.Registration.ComponentRegistration{`0}})">
            <summary>Sets the shim of LifestyleGroup`1.BoundTo()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Lifestyle.Fakes.ShimLifestyleGroup`1.AllInstances.CustomOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.Registration.Lifestyle.LifestyleGroup{`0},Castle.MicroKernel.Registration.ComponentRegistration{`0}})">
            <summary>Sets the shim of LifestyleGroup`1.Custom()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Lifestyle.Fakes.ShimLifestyleGroup`1.AllInstances.ScopedOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.Registration.Lifestyle.LifestyleGroup{`0},Castle.MicroKernel.Registration.ComponentRegistration{`0}})">
            <summary>Sets the shim of LifestyleGroup`1.Scoped()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Lifestyle.Fakes.ShimLifestyleGroup`1.AllInstances.BoundToFuncOfIHandlerArrayIHandler">
            <summary>Sets the shim of LifestyleGroup`1.BoundTo(Func`2&lt;IHandler[],IHandler&gt; scopeRootBinder)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Lifestyle.Fakes.ShimLifestyleGroup`1.AllInstances.CustomType">
            <summary>Sets the shim of LifestyleGroup`1.Custom(Type customLifestyleType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Lifestyle.Fakes.ShimLifestyleGroup`1.AllInstances.InvalidValueLifestyleTypeString">
            <summary>Sets the shim of LifestyleGroup`1.InvalidValue(LifestyleType type, String message)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Lifestyle.Fakes.ShimLifestyleGroup`1.AllInstances.IsLifestyleType">
            <summary>Sets the shim of LifestyleGroup`1.Is(LifestyleType type)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Lifestyle.Fakes.ShimLifestyleGroup`1.AllInstances.PerThreadGet">
            <summary>Sets the shim of LifestyleGroup`1.get_PerThread()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Lifestyle.Fakes.ShimLifestyleGroup`1.AllInstances.PerWebRequestGet">
            <summary>Sets the shim of LifestyleGroup`1.get_PerWebRequest()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Lifestyle.Fakes.ShimLifestyleGroup`1.AllInstances.PooledGet">
            <summary>Sets the shim of LifestyleGroup`1.get_Pooled()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Lifestyle.Fakes.ShimLifestyleGroup`1.AllInstances.PooledWithSizeNullableOfInt32NullableOfInt32">
            <summary>Sets the shim of LifestyleGroup`1.PooledWithSize(Nullable`1&lt;Int32&gt; initialSize, Nullable`1&lt;Int32&gt; maxSize)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Lifestyle.Fakes.ShimLifestyleGroup`1.AllInstances.Scoped">
            <summary>Sets the shim of LifestyleGroup`1.Scoped()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Lifestyle.Fakes.ShimLifestyleGroup`1.AllInstances.ScopedType">
            <summary>Sets the shim of LifestyleGroup`1.Scoped(Type scopeAccessorType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Lifestyle.Fakes.ShimLifestyleGroup`1.AllInstances.SingletonGet">
            <summary>Sets the shim of LifestyleGroup`1.get_Singleton()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Lifestyle.Fakes.ShimLifestyleGroup`1.AllInstances.TransientGet">
            <summary>Sets the shim of LifestyleGroup`1.get_Transient()</summary>
        </member>
        <member name="T:Castle.MicroKernel.Registration.Lifestyle.Fakes.StubLifestyleGroup`1">
            <summary>Stub type of Castle.MicroKernel.Registration.Lifestyle.LifestyleGroup`1</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Lifestyle.Fakes.StubLifestyleGroup`1.#ctor(Castle.MicroKernel.Registration.ComponentRegistration{`0})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Lifestyle.Fakes.StubLifestyleGroup`1.InitializeStub">
            <summary>Initializes a new instance of type StubLifestyleGroup</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Lifestyle.Fakes.StubLifestyleGroup`1.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Lifestyle.Fakes.StubLifestyleGroup`1.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Lifestyle.Fakes.StubLifestyleGroup`1.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.Registration.Proxy.Fakes.ShimItemRegistration`1">
            <summary>Shim type of Castle.MicroKernel.Registration.Proxy.ItemRegistration`1</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Proxy.Fakes.ShimItemRegistration`1.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Proxy.Fakes.ShimItemRegistration`1.#ctor(Castle.MicroKernel.Registration.Proxy.ItemRegistration{`0})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Proxy.Fakes.ShimItemRegistration`1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Proxy.Fakes.ShimItemRegistration`1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Proxy.Fakes.ShimItemRegistration`1.ServiceOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.Registration.Proxy.ItemRegistration{`0}})">
            <summary>Sets the shim of ItemRegistration`1.Service()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Proxy.Fakes.ShimItemRegistration`1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Proxy.Fakes.ShimItemRegistration`1.Constructor">
            <summary>Sets the shim of ItemRegistration`1.ItemRegistration`1()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Proxy.Fakes.ShimItemRegistration`1.InstanceT0">
            <summary>Sets the shim of ItemRegistration`1.Instance(!0 instance)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Proxy.Fakes.ShimItemRegistration`1.ItemGet">
            <summary>Sets the shim of ItemRegistration`1.get_Item()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Proxy.Fakes.ShimItemRegistration`1.ServiceString">
            <summary>Sets the shim of ItemRegistration`1.Service(String name)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Proxy.Fakes.ShimItemRegistration`1.ServiceType">
            <summary>Sets the shim of ItemRegistration`1.Service(Type serviceType)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Registration.Proxy.Fakes.ShimItemRegistration`1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Proxy.Fakes.ShimItemRegistration`1.AllInstances.ServiceOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.Registration.Proxy.ItemRegistration{`0},Castle.MicroKernel.Registration.Proxy.ItemRegistration{`0}})">
            <summary>Sets the shim of ItemRegistration`1.Service()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Proxy.Fakes.ShimItemRegistration`1.AllInstances.InstanceT0">
            <summary>Sets the shim of ItemRegistration`1.Instance(!0 instance)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Proxy.Fakes.ShimItemRegistration`1.AllInstances.ItemGet">
            <summary>Sets the shim of ItemRegistration`1.get_Item()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Proxy.Fakes.ShimItemRegistration`1.AllInstances.ServiceString">
            <summary>Sets the shim of ItemRegistration`1.Service(String name)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Proxy.Fakes.ShimItemRegistration`1.AllInstances.ServiceType">
            <summary>Sets the shim of ItemRegistration`1.Service(Type serviceType)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Registration.Proxy.Fakes.ShimMixinRegistration">
            <summary>Shim type of Castle.MicroKernel.Registration.Proxy.MixinRegistration</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Proxy.Fakes.ShimMixinRegistration.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Proxy.Fakes.ShimMixinRegistration.#ctor(Castle.MicroKernel.Registration.Proxy.MixinRegistration)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Proxy.Fakes.ShimMixinRegistration.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Proxy.Fakes.ShimMixinRegistration.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Proxy.Fakes.ShimMixinRegistration.Bind(System.Collections.IEnumerable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Proxy.Fakes.ShimMixinRegistration.Bind(System.Collections.Generic.IEnumerable{Castle.MicroKernel.IReference{System.Object}})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Proxy.Fakes.ShimMixinRegistration.ComponentOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.Registration.Proxy.MixinRegistration})">
            <summary>Sets the shim of MixinRegistration.Component()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Proxy.Fakes.ShimMixinRegistration.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Proxy.Fakes.ShimMixinRegistration.ComponentString">
            <summary>Sets the shim of MixinRegistration.Component(String name)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Proxy.Fakes.ShimMixinRegistration.ComponentType">
            <summary>Sets the shim of MixinRegistration.Component(Type serviceType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Proxy.Fakes.ShimMixinRegistration.Constructor">
            <summary>Sets the shim of MixinRegistration.MixinRegistration()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Proxy.Fakes.ShimMixinRegistration.ObjectsObjectArray">
            <summary>Sets the shim of MixinRegistration.Objects(Object[] objects)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Proxy.Fakes.ShimMixinRegistration.SystemCollectionsGenericIEnumerableCastleMicroKernelIReferenceSystemObjectGetEnumerator">
            <summary>Sets the shim of MixinRegistration.System.Collections.Generic.IEnumerable&lt;Castle.MicroKernel.IReference&lt;System.Object&gt;&gt;.GetEnumerator()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Proxy.Fakes.ShimMixinRegistration.SystemCollectionsIEnumerableGetEnumerator">
            <summary>Sets the shim of MixinRegistration.System.Collections.IEnumerable.GetEnumerator()</summary>
        </member>
        <member name="T:Castle.MicroKernel.Registration.Proxy.Fakes.ShimMixinRegistration.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Proxy.Fakes.ShimMixinRegistration.AllInstances.ComponentOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.Registration.Proxy.MixinRegistration,Castle.MicroKernel.Registration.Proxy.MixinRegistration})">
            <summary>Sets the shim of MixinRegistration.Component()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Proxy.Fakes.ShimMixinRegistration.AllInstances.ComponentString">
            <summary>Sets the shim of MixinRegistration.Component(String name)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Proxy.Fakes.ShimMixinRegistration.AllInstances.ComponentType">
            <summary>Sets the shim of MixinRegistration.Component(Type serviceType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Proxy.Fakes.ShimMixinRegistration.AllInstances.ObjectsObjectArray">
            <summary>Sets the shim of MixinRegistration.Objects(Object[] objects)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Proxy.Fakes.ShimMixinRegistration.AllInstances.SystemCollectionsGenericIEnumerableCastleMicroKernelIReferenceSystemObjectGetEnumerator">
            <summary>Sets the shim of MixinRegistration.System.Collections.Generic.IEnumerable&lt;Castle.MicroKernel.IReference&lt;System.Object&gt;&gt;.GetEnumerator()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Proxy.Fakes.ShimMixinRegistration.AllInstances.SystemCollectionsIEnumerableGetEnumerator">
            <summary>Sets the shim of MixinRegistration.System.Collections.IEnumerable.GetEnumerator()</summary>
        </member>
        <member name="T:Castle.MicroKernel.Registration.Proxy.Fakes.ShimProxyGroup`1">
            <summary>Shim type of Castle.MicroKernel.Registration.Proxy.ProxyGroup`1</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Proxy.Fakes.ShimProxyGroup`1.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Proxy.Fakes.ShimProxyGroup`1.#ctor(Castle.MicroKernel.Registration.Proxy.ProxyGroup{`0})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Proxy.Fakes.ShimProxyGroup`1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Proxy.Fakes.ShimProxyGroup`1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Proxy.Fakes.ShimProxyGroup`1.AdditionalInterfacesTypeArray">
            <summary>Sets the shim of ProxyGroup`1.AdditionalInterfaces(Type[] interfaces)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Proxy.Fakes.ShimProxyGroup`1.AsMarshalByRefClassGet">
            <summary>Sets the shim of ProxyGroup`1.get_AsMarshalByRefClass()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Proxy.Fakes.ShimProxyGroup`1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Proxy.Fakes.ShimProxyGroup`1.ConstructorComponentRegistrationOfT0">
            <summary>Sets the shim of ProxyGroup`1.ProxyGroup`1(ComponentRegistration`1&lt;!0&gt; registration)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Proxy.Fakes.ShimProxyGroup`1.HookActionOfItemRegistrationOfIProxyGenerationHook">
            <summary>Sets the shim of ProxyGroup`1.Hook(Action`1&lt;ItemRegistration`1&lt;IProxyGenerationHook&gt;&gt; hookRegistration)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Proxy.Fakes.ShimProxyGroup`1.HookIProxyGenerationHook">
            <summary>Sets the shim of ProxyGroup`1.Hook(IProxyGenerationHook hook)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Proxy.Fakes.ShimProxyGroup`1.MixInsActionOfMixinRegistration">
            <summary>Sets the shim of ProxyGroup`1.MixIns(Action`1&lt;MixinRegistration&gt; mixinRegistration)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Proxy.Fakes.ShimProxyGroup`1.MixInsObjectArray">
            <summary>Sets the shim of ProxyGroup`1.MixIns(Object[] mixIns)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Registration.Proxy.Fakes.ShimProxyGroup`1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Proxy.Fakes.ShimProxyGroup`1.AllInstances.AdditionalInterfacesTypeArray">
            <summary>Sets the shim of ProxyGroup`1.AdditionalInterfaces(Type[] interfaces)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Proxy.Fakes.ShimProxyGroup`1.AllInstances.AsMarshalByRefClassGet">
            <summary>Sets the shim of ProxyGroup`1.get_AsMarshalByRefClass()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Proxy.Fakes.ShimProxyGroup`1.AllInstances.HookActionOfItemRegistrationOfIProxyGenerationHook">
            <summary>Sets the shim of ProxyGroup`1.Hook(Action`1&lt;ItemRegistration`1&lt;IProxyGenerationHook&gt;&gt; hookRegistration)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Proxy.Fakes.ShimProxyGroup`1.AllInstances.HookIProxyGenerationHook">
            <summary>Sets the shim of ProxyGroup`1.Hook(IProxyGenerationHook hook)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Proxy.Fakes.ShimProxyGroup`1.AllInstances.MixInsActionOfMixinRegistration">
            <summary>Sets the shim of ProxyGroup`1.MixIns(Action`1&lt;MixinRegistration&gt; mixinRegistration)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Proxy.Fakes.ShimProxyGroup`1.AllInstances.MixInsObjectArray">
            <summary>Sets the shim of ProxyGroup`1.MixIns(Object[] mixIns)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Registration.Proxy.Fakes.StubItemRegistration`1">
            <summary>Stub type of Castle.MicroKernel.Registration.Proxy.ItemRegistration`1</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Proxy.Fakes.StubItemRegistration`1.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Proxy.Fakes.StubItemRegistration`1.InitializeStub">
            <summary>Initializes a new instance of type StubItemRegistration</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Proxy.Fakes.StubItemRegistration`1.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Proxy.Fakes.StubItemRegistration`1.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Proxy.Fakes.StubItemRegistration`1.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.Registration.Proxy.Fakes.StubMixinRegistration">
            <summary>Stub type of Castle.MicroKernel.Registration.Proxy.MixinRegistration</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Proxy.Fakes.StubMixinRegistration.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Proxy.Fakes.StubMixinRegistration.InitializeStub">
            <summary>Initializes a new instance of type StubMixinRegistration</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Proxy.Fakes.StubMixinRegistration.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Proxy.Fakes.StubMixinRegistration.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Proxy.Fakes.StubMixinRegistration.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.Registration.Proxy.Fakes.StubProxyGroup`1">
            <summary>Stub type of Castle.MicroKernel.Registration.Proxy.ProxyGroup`1</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Proxy.Fakes.StubProxyGroup`1.#ctor(Castle.MicroKernel.Registration.ComponentRegistration{`0})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Registration.Proxy.Fakes.StubProxyGroup`1.InitializeStub">
            <summary>Initializes a new instance of type StubProxyGroup</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Proxy.Fakes.StubProxyGroup`1.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Proxy.Fakes.StubProxyGroup`1.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Registration.Proxy.Fakes.StubProxyGroup`1.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.Releasers.Fakes.ShimLifecycledComponentsReleasePolicy">
            <summary>Shim type of Castle.MicroKernel.Releasers.LifecycledComponentsReleasePolicy</summary>
        </member>
        <member name="M:Castle.MicroKernel.Releasers.Fakes.ShimLifecycledComponentsReleasePolicy.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Releasers.Fakes.ShimLifecycledComponentsReleasePolicy.#ctor(Castle.MicroKernel.Releasers.LifecycledComponentsReleasePolicy)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Releasers.Fakes.ShimLifecycledComponentsReleasePolicy.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Releasers.Fakes.ShimLifecycledComponentsReleasePolicy.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Releasers.Fakes.ShimLifecycledComponentsReleasePolicy.Bind(Castle.MicroKernel.IReleasePolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.MicroKernel.Releasers.Fakes.ShimLifecycledComponentsReleasePolicy.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Releasers.Fakes.ShimLifecycledComponentsReleasePolicy.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Releasers.Fakes.ShimLifecycledComponentsReleasePolicy.ConstructorIKernel">
            <summary>Sets the shim of LifecycledComponentsReleasePolicy.LifecycledComponentsReleasePolicy(IKernel kernel)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Releasers.Fakes.ShimLifecycledComponentsReleasePolicy.ConstructorITrackedComponentsDiagnosticITrackedComponentsPerformanceCounter">
            <summary>Sets the shim of LifecycledComponentsReleasePolicy.LifecycledComponentsReleasePolicy(ITrackedComponentsDiagnostic trackedComponentsDiagnostic, ITrackedComponentsPerformanceCounter trackedComponentsPerformanceCounter)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Releasers.Fakes.ShimLifecycledComponentsReleasePolicy.ConstructorLifecycledComponentsReleasePolicy">
            <summary>Sets the shim of LifecycledComponentsReleasePolicy.LifecycledComponentsReleasePolicy(LifecycledComponentsReleasePolicy parent)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Releasers.Fakes.ShimLifecycledComponentsReleasePolicy.CreateSubPolicy">
            <summary>Sets the shim of LifecycledComponentsReleasePolicy.CreateSubPolicy()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Releasers.Fakes.ShimLifecycledComponentsReleasePolicy.Dispose">
            <summary>Sets the shim of LifecycledComponentsReleasePolicy.Dispose()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Releasers.Fakes.ShimLifecycledComponentsReleasePolicy.GetTrackedComponentsDiagnosticIKernel">
            <summary>Sets the shim of LifecycledComponentsReleasePolicy.GetTrackedComponentsDiagnostic(IKernel kernel)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Releasers.Fakes.ShimLifecycledComponentsReleasePolicy.GetTrackedComponentsPerformanceCounterIPerformanceMetricsFactory">
            <summary>Sets the shim of LifecycledComponentsReleasePolicy.GetTrackedComponentsPerformanceCounter(IPerformanceMetricsFactory perfMetricsFactory)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Releasers.Fakes.ShimLifecycledComponentsReleasePolicy.HasTrackObject">
            <summary>Sets the shim of LifecycledComponentsReleasePolicy.HasTrack(Object instance)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Releasers.Fakes.ShimLifecycledComponentsReleasePolicy.OnInstanceReleasedBurden">
            <summary>Sets the shim of LifecycledComponentsReleasePolicy.OnInstanceReleased(Burden burden)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Releasers.Fakes.ShimLifecycledComponentsReleasePolicy.ReleaseObject">
            <summary>Sets the shim of LifecycledComponentsReleasePolicy.Release(Object instance)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Releasers.Fakes.ShimLifecycledComponentsReleasePolicy.TrackObjectBurden">
            <summary>Sets the shim of LifecycledComponentsReleasePolicy.Track(Object instance, Burden burden)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Releasers.Fakes.ShimLifecycledComponentsReleasePolicy.TrackedObjectsGet">
            <summary>Sets the shim of LifecycledComponentsReleasePolicy.get_TrackedObjects()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Releasers.Fakes.ShimLifecycledComponentsReleasePolicy.trackedComponentsDiagnostic_TrackedInstancesRequestedObjectTrackedInstancesEventArgs">
            <summary>Sets the shim of LifecycledComponentsReleasePolicy.trackedComponentsDiagnostic_TrackedInstancesRequested(Object sender, TrackedInstancesEventArgs e)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Releasers.Fakes.ShimLifecycledComponentsReleasePolicy.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.Releasers.Fakes.ShimLifecycledComponentsReleasePolicy.AllInstances.CreateSubPolicy">
            <summary>Sets the shim of LifecycledComponentsReleasePolicy.CreateSubPolicy()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Releasers.Fakes.ShimLifecycledComponentsReleasePolicy.AllInstances.Dispose">
            <summary>Sets the shim of LifecycledComponentsReleasePolicy.Dispose()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Releasers.Fakes.ShimLifecycledComponentsReleasePolicy.AllInstances.HasTrackObject">
            <summary>Sets the shim of LifecycledComponentsReleasePolicy.HasTrack(Object instance)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Releasers.Fakes.ShimLifecycledComponentsReleasePolicy.AllInstances.OnInstanceReleasedBurden">
            <summary>Sets the shim of LifecycledComponentsReleasePolicy.OnInstanceReleased(Burden burden)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Releasers.Fakes.ShimLifecycledComponentsReleasePolicy.AllInstances.ReleaseObject">
            <summary>Sets the shim of LifecycledComponentsReleasePolicy.Release(Object instance)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Releasers.Fakes.ShimLifecycledComponentsReleasePolicy.AllInstances.TrackObjectBurden">
            <summary>Sets the shim of LifecycledComponentsReleasePolicy.Track(Object instance, Burden burden)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Releasers.Fakes.ShimLifecycledComponentsReleasePolicy.AllInstances.TrackedObjectsGet">
            <summary>Sets the shim of LifecycledComponentsReleasePolicy.get_TrackedObjects()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Releasers.Fakes.ShimLifecycledComponentsReleasePolicy.AllInstances.trackedComponentsDiagnostic_TrackedInstancesRequestedObjectTrackedInstancesEventArgs">
            <summary>Sets the shim of LifecycledComponentsReleasePolicy.trackedComponentsDiagnostic_TrackedInstancesRequested(Object sender, TrackedInstancesEventArgs e)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Releasers.Fakes.StubLifecycledComponentsReleasePolicy">
            <summary>Stub type of Castle.MicroKernel.Releasers.LifecycledComponentsReleasePolicy</summary>
        </member>
        <member name="M:Castle.MicroKernel.Releasers.Fakes.StubLifecycledComponentsReleasePolicy.#ctor(Castle.MicroKernel.IKernel)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Releasers.Fakes.StubLifecycledComponentsReleasePolicy.#ctor(Castle.Windsor.Diagnostics.ITrackedComponentsDiagnostic,Castle.Windsor.Diagnostics.ITrackedComponentsPerformanceCounter)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Releasers.Fakes.StubLifecycledComponentsReleasePolicy.InitializeStub">
            <summary>Initializes a new instance of type StubLifecycledComponentsReleasePolicy</summary>
        </member>
        <member name="M:Castle.MicroKernel.Releasers.Fakes.StubLifecycledComponentsReleasePolicy.Track(System.Object,Castle.MicroKernel.Burden)">
            <summary>Sets the stub of LifecycledComponentsReleasePolicy.Track(Object instance, Burden burden)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Releasers.Fakes.StubLifecycledComponentsReleasePolicy.TrackObjectBurden">
            <summary>Sets the stub of LifecycledComponentsReleasePolicy.Track(Object instance, Burden burden)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Releasers.Fakes.StubLifecycledComponentsReleasePolicy.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.Releasers.Fakes.StubLifecycledComponentsReleasePolicy.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Releasers.Fakes.StubLifecycledComponentsReleasePolicy.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.Resolvers.Fakes.ShimDefaultDependencyResolver">
            <summary>Shim type of Castle.MicroKernel.Resolvers.DefaultDependencyResolver</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.Fakes.ShimDefaultDependencyResolver.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.Fakes.ShimDefaultDependencyResolver.#ctor(Castle.MicroKernel.Resolvers.DefaultDependencyResolver)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.Fakes.ShimDefaultDependencyResolver.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.Fakes.ShimDefaultDependencyResolver.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.Fakes.ShimDefaultDependencyResolver.Bind(Castle.MicroKernel.IDependencyResolver)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.Fakes.ShimDefaultDependencyResolver.Bind(Castle.MicroKernel.ISubDependencyResolver)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.ShimDefaultDependencyResolver.AddSubResolverISubDependencyResolver">
            <summary>Sets the shim of DefaultDependencyResolver.AddSubResolver(ISubDependencyResolver subResolver)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.ShimDefaultDependencyResolver.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.ShimDefaultDependencyResolver.CanResolveCreationContextISubDependencyResolverComponentModelDependencyModel">
            <summary>Sets the shim of DefaultDependencyResolver.CanResolve(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model, DependencyModel dependency)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.ShimDefaultDependencyResolver.CanResolveFromContextCreationContextISubDependencyResolverComponentModelDependencyModel">
            <summary>Sets the shim of DefaultDependencyResolver.CanResolveFromContext(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model, DependencyModel dependency)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.ShimDefaultDependencyResolver.CanResolveFromContextHandlerResolverCreationContextISubDependencyResolverComponentModelDependencyModel">
            <summary>Sets the shim of DefaultDependencyResolver.CanResolveFromContextHandlerResolver(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model, DependencyModel dependency)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.ShimDefaultDependencyResolver.CanResolveFromHandlerCreationContextISubDependencyResolverComponentModelDependencyModel">
            <summary>Sets the shim of DefaultDependencyResolver.CanResolveFromHandler(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model, DependencyModel dependency)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.ShimDefaultDependencyResolver.CanResolveFromKernelCreationContextComponentModelDependencyModel">
            <summary>Sets the shim of DefaultDependencyResolver.CanResolveFromKernel(CreationContext context, ComponentModel model, DependencyModel dependency)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.ShimDefaultDependencyResolver.CanResolveFromSubResolversCreationContextISubDependencyResolverComponentModelDependencyModel">
            <summary>Sets the shim of DefaultDependencyResolver.CanResolveFromSubResolvers(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model, DependencyModel dependency)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.ShimDefaultDependencyResolver.Constructor">
            <summary>Sets the shim of DefaultDependencyResolver.DefaultDependencyResolver()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.ShimDefaultDependencyResolver.HasAnyComponentInValidStateTypeDependencyModelCreationContext">
            <summary>Sets the shim of DefaultDependencyResolver.HasAnyComponentInValidState(Type service, DependencyModel dependency, CreationContext context)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.ShimDefaultDependencyResolver.HasComponentInValidStateStringDependencyModelCreationContext">
            <summary>Sets the shim of DefaultDependencyResolver.HasComponentInValidState(String key, DependencyModel dependency, CreationContext context)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.ShimDefaultDependencyResolver.InitializeIKernelInternalDependencyDelegate">
            <summary>Sets the shim of DefaultDependencyResolver.Initialize(IKernelInternal kernel, DependencyDelegate dependencyDelegate)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.ShimDefaultDependencyResolver.IsHandlerInValidStateIHandler">
            <summary>Sets the shim of DefaultDependencyResolver.IsHandlerInValidState(IHandler handler)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.ShimDefaultDependencyResolver.RebuildContextForParameterCreationContextType">
            <summary>Sets the shim of DefaultDependencyResolver.RebuildContextForParameter(CreationContext current, Type parameterType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.ShimDefaultDependencyResolver.RemoveSubResolverISubDependencyResolver">
            <summary>Sets the shim of DefaultDependencyResolver.RemoveSubResolver(ISubDependencyResolver subResolver)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.ShimDefaultDependencyResolver.ResolveCoreCreationContextISubDependencyResolverComponentModelDependencyModel">
            <summary>Sets the shim of DefaultDependencyResolver.ResolveCore(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model, DependencyModel dependency)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.ShimDefaultDependencyResolver.ResolveCreationContextISubDependencyResolverComponentModelDependencyModel">
            <summary>Sets the shim of DefaultDependencyResolver.Resolve(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model, DependencyModel dependency)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.ShimDefaultDependencyResolver.ResolveFromKernelByNameCreationContextComponentModelDependencyModel">
            <summary>Sets the shim of DefaultDependencyResolver.ResolveFromKernelByName(CreationContext context, ComponentModel model, DependencyModel dependency)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.ShimDefaultDependencyResolver.ResolveFromKernelByTypeCreationContextComponentModelDependencyModel">
            <summary>Sets the shim of DefaultDependencyResolver.ResolveFromKernelByType(CreationContext context, ComponentModel model, DependencyModel dependency)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.ShimDefaultDependencyResolver.ResolveFromKernelCreationContextComponentModelDependencyModel">
            <summary>Sets the shim of DefaultDependencyResolver.ResolveFromKernel(CreationContext context, ComponentModel model, DependencyModel dependency)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.ShimDefaultDependencyResolver.ResolveFromParameterCreationContextComponentModelDependencyModel">
            <summary>Sets the shim of DefaultDependencyResolver.ResolveFromParameter(CreationContext context, ComponentModel model, DependencyModel dependency)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.ShimDefaultDependencyResolver.TryGetHandlerFromKernelDependencyModelCreationContext">
            <summary>Sets the shim of DefaultDependencyResolver.TryGetHandlerFromKernel(DependencyModel dependency, CreationContext context)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Resolvers.Fakes.ShimDefaultDependencyResolver.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.ShimDefaultDependencyResolver.AllInstances.AddSubResolverISubDependencyResolver">
            <summary>Sets the shim of DefaultDependencyResolver.AddSubResolver(ISubDependencyResolver subResolver)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.ShimDefaultDependencyResolver.AllInstances.CanResolveCreationContextISubDependencyResolverComponentModelDependencyModel">
            <summary>Sets the shim of DefaultDependencyResolver.CanResolve(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model, DependencyModel dependency)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.ShimDefaultDependencyResolver.AllInstances.CanResolveFromContextCreationContextISubDependencyResolverComponentModelDependencyModel">
            <summary>Sets the shim of DefaultDependencyResolver.CanResolveFromContext(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model, DependencyModel dependency)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.ShimDefaultDependencyResolver.AllInstances.CanResolveFromContextHandlerResolverCreationContextISubDependencyResolverComponentModelDependencyModel">
            <summary>Sets the shim of DefaultDependencyResolver.CanResolveFromContextHandlerResolver(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model, DependencyModel dependency)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.ShimDefaultDependencyResolver.AllInstances.CanResolveFromHandlerCreationContextISubDependencyResolverComponentModelDependencyModel">
            <summary>Sets the shim of DefaultDependencyResolver.CanResolveFromHandler(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model, DependencyModel dependency)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.ShimDefaultDependencyResolver.AllInstances.CanResolveFromKernelCreationContextComponentModelDependencyModel">
            <summary>Sets the shim of DefaultDependencyResolver.CanResolveFromKernel(CreationContext context, ComponentModel model, DependencyModel dependency)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.ShimDefaultDependencyResolver.AllInstances.CanResolveFromSubResolversCreationContextISubDependencyResolverComponentModelDependencyModel">
            <summary>Sets the shim of DefaultDependencyResolver.CanResolveFromSubResolvers(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model, DependencyModel dependency)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.ShimDefaultDependencyResolver.AllInstances.HasAnyComponentInValidStateTypeDependencyModelCreationContext">
            <summary>Sets the shim of DefaultDependencyResolver.HasAnyComponentInValidState(Type service, DependencyModel dependency, CreationContext context)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.ShimDefaultDependencyResolver.AllInstances.HasComponentInValidStateStringDependencyModelCreationContext">
            <summary>Sets the shim of DefaultDependencyResolver.HasComponentInValidState(String key, DependencyModel dependency, CreationContext context)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.ShimDefaultDependencyResolver.AllInstances.InitializeIKernelInternalDependencyDelegate">
            <summary>Sets the shim of DefaultDependencyResolver.Initialize(IKernelInternal kernel, DependencyDelegate dependencyDelegate)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.ShimDefaultDependencyResolver.AllInstances.RebuildContextForParameterCreationContextType">
            <summary>Sets the shim of DefaultDependencyResolver.RebuildContextForParameter(CreationContext current, Type parameterType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.ShimDefaultDependencyResolver.AllInstances.RemoveSubResolverISubDependencyResolver">
            <summary>Sets the shim of DefaultDependencyResolver.RemoveSubResolver(ISubDependencyResolver subResolver)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.ShimDefaultDependencyResolver.AllInstances.ResolveCoreCreationContextISubDependencyResolverComponentModelDependencyModel">
            <summary>Sets the shim of DefaultDependencyResolver.ResolveCore(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model, DependencyModel dependency)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.ShimDefaultDependencyResolver.AllInstances.ResolveCreationContextISubDependencyResolverComponentModelDependencyModel">
            <summary>Sets the shim of DefaultDependencyResolver.Resolve(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model, DependencyModel dependency)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.ShimDefaultDependencyResolver.AllInstances.ResolveFromKernelByNameCreationContextComponentModelDependencyModel">
            <summary>Sets the shim of DefaultDependencyResolver.ResolveFromKernelByName(CreationContext context, ComponentModel model, DependencyModel dependency)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.ShimDefaultDependencyResolver.AllInstances.ResolveFromKernelByTypeCreationContextComponentModelDependencyModel">
            <summary>Sets the shim of DefaultDependencyResolver.ResolveFromKernelByType(CreationContext context, ComponentModel model, DependencyModel dependency)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.ShimDefaultDependencyResolver.AllInstances.ResolveFromKernelCreationContextComponentModelDependencyModel">
            <summary>Sets the shim of DefaultDependencyResolver.ResolveFromKernel(CreationContext context, ComponentModel model, DependencyModel dependency)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.ShimDefaultDependencyResolver.AllInstances.ResolveFromParameterCreationContextComponentModelDependencyModel">
            <summary>Sets the shim of DefaultDependencyResolver.ResolveFromParameter(CreationContext context, ComponentModel model, DependencyModel dependency)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.ShimDefaultDependencyResolver.AllInstances.TryGetHandlerFromKernelDependencyModelCreationContext">
            <summary>Sets the shim of DefaultDependencyResolver.TryGetHandlerFromKernel(DependencyModel dependency, CreationContext context)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Resolvers.Fakes.ShimDependencyResolverException">
            <summary>Shim type of Castle.MicroKernel.Resolvers.DependencyResolverException</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.Fakes.ShimDependencyResolverException.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.Fakes.ShimDependencyResolverException.#ctor(Castle.MicroKernel.Resolvers.DependencyResolverException)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.Fakes.ShimDependencyResolverException.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.Fakes.ShimDependencyResolverException.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.Fakes.ShimDependencyResolverException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.ShimDependencyResolverException.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.ShimDependencyResolverException.ConstructorSerializationInfoStreamingContext">
            <summary>Sets the shim of DependencyResolverException.DependencyResolverException(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.ShimDependencyResolverException.ConstructorString">
            <summary>Sets the shim of DependencyResolverException.DependencyResolverException(String message)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.ShimDependencyResolverException.ConstructorStringException">
            <summary>Sets the shim of DependencyResolverException.DependencyResolverException(String message, Exception innerException)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Resolvers.Fakes.ShimDependencyResolverException.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="T:Castle.MicroKernel.Resolvers.Fakes.ShimLazyOfTComponentLoader">
            <summary>Shim type of Castle.MicroKernel.Resolvers.LazyOfTComponentLoader</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.Fakes.ShimLazyOfTComponentLoader.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.Fakes.ShimLazyOfTComponentLoader.#ctor(Castle.MicroKernel.Resolvers.LazyOfTComponentLoader)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.Fakes.ShimLazyOfTComponentLoader.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.Fakes.ShimLazyOfTComponentLoader.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.Fakes.ShimLazyOfTComponentLoader.Bind(Castle.MicroKernel.Resolvers.ILazyComponentLoader)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.ShimLazyOfTComponentLoader.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.ShimLazyOfTComponentLoader.Constructor">
            <summary>Sets the shim of LazyOfTComponentLoader.LazyOfTComponentLoader()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.ShimLazyOfTComponentLoader.LoadStringTypeIDictionary">
            <summary>Sets the shim of LazyOfTComponentLoader.Load(String name, Type service, IDictionary arguments)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Resolvers.Fakes.ShimLazyOfTComponentLoader.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.ShimLazyOfTComponentLoader.AllInstances.LoadStringTypeIDictionary">
            <summary>Sets the shim of LazyOfTComponentLoader.Load(String name, Type service, IDictionary arguments)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Resolvers.Fakes.StubDefaultDependencyResolver">
            <summary>Stub type of Castle.MicroKernel.Resolvers.DefaultDependencyResolver</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.Fakes.StubDefaultDependencyResolver.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.Fakes.StubDefaultDependencyResolver.CanResolveFromKernel(Castle.MicroKernel.Context.CreationContext,Castle.Core.ComponentModel,Castle.Core.DependencyModel)">
            <summary>Sets the stub of DefaultDependencyResolver.CanResolveFromKernel(CreationContext context, ComponentModel model, DependencyModel dependency)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Resolvers.Fakes.StubDefaultDependencyResolver.CanResolveFromKernelCreationContextComponentModelDependencyModel">
            <summary>Sets the stub of DefaultDependencyResolver.CanResolveFromKernel(CreationContext context, ComponentModel model, DependencyModel dependency)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.Fakes.StubDefaultDependencyResolver.InitializeStub">
            <summary>Initializes a new instance of type StubDefaultDependencyResolver</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.Fakes.StubDefaultDependencyResolver.RebuildContextForParameter(Castle.MicroKernel.Context.CreationContext,System.Type)">
            <summary>Sets the stub of DefaultDependencyResolver.RebuildContextForParameter(CreationContext current, Type parameterType)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Resolvers.Fakes.StubDefaultDependencyResolver.RebuildContextForParameterCreationContextType">
            <summary>Sets the stub of DefaultDependencyResolver.RebuildContextForParameter(CreationContext current, Type parameterType)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.Fakes.StubDefaultDependencyResolver.ResolveFromKernel(Castle.MicroKernel.Context.CreationContext,Castle.Core.ComponentModel,Castle.Core.DependencyModel)">
            <summary>Sets the stub of DefaultDependencyResolver.ResolveFromKernel(CreationContext context, ComponentModel model, DependencyModel dependency)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Resolvers.Fakes.StubDefaultDependencyResolver.ResolveFromKernelCreationContextComponentModelDependencyModel">
            <summary>Sets the stub of DefaultDependencyResolver.ResolveFromKernel(CreationContext context, ComponentModel model, DependencyModel dependency)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.StubDefaultDependencyResolver.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.StubDefaultDependencyResolver.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.StubDefaultDependencyResolver.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.Resolvers.Fakes.StubDependencyResolverException">
            <summary>Stub type of Castle.MicroKernel.Resolvers.DependencyResolverException</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.Fakes.StubDependencyResolverException.#ctor(System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.Fakes.StubDependencyResolverException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.Fakes.StubDependencyResolverException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.Fakes.StubDependencyResolverException.AttachBackingFieldToHelpLink">
            <summary>Attaches delegates to emulate StubDependencyResolverException.HelpLink as a property with a backing field.</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.Fakes.StubDependencyResolverException.AttachBackingFieldToSource">
            <summary>Attaches delegates to emulate StubDependencyResolverException.Source as a property with a backing field.</summary>
        </member>
        <member name="F:Castle.MicroKernel.Resolvers.Fakes.StubDependencyResolverException.DataGet">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.Fakes.StubDependencyResolverException.GetBaseException">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Resolvers.Fakes.StubDependencyResolverException.GetBaseException01">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.Fakes.StubDependencyResolverException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Resolvers.Fakes.StubDependencyResolverException.GetObjectDataSerializationInfoStreamingContext">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Resolvers.Fakes.StubDependencyResolverException.HelpLinkGet">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Resolvers.Fakes.StubDependencyResolverException.HelpLinkSetString">
            <summary>Sets the stub of Exception.set_HelpLink(String value)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.Fakes.StubDependencyResolverException.InitializeStub">
            <summary>Initializes a new instance of type StubDependencyResolverException</summary>
        </member>
        <member name="F:Castle.MicroKernel.Resolvers.Fakes.StubDependencyResolverException.MessageGet">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Resolvers.Fakes.StubDependencyResolverException.SourceGet">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Resolvers.Fakes.StubDependencyResolverException.SourceSetString">
            <summary>Sets the stub of Exception.set_Source(String value)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Resolvers.Fakes.StubDependencyResolverException.StackTraceGet">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.Fakes.StubDependencyResolverException.ToString">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="F:Castle.MicroKernel.Resolvers.Fakes.StubDependencyResolverException.ToString01">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.StubDependencyResolverException.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.StubDependencyResolverException.Data">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.StubDependencyResolverException.HelpLink">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.StubDependencyResolverException.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.StubDependencyResolverException.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.StubDependencyResolverException.Message">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.StubDependencyResolverException.Source">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.StubDependencyResolverException.StackTrace">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="T:Castle.MicroKernel.Resolvers.Fakes.StubILazyComponentLoader">
            <summary>Stub type of Castle.MicroKernel.Resolvers.ILazyComponentLoader</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.Fakes.StubILazyComponentLoader.#ctor">
            <summary>Initializes a new instance of type StubILazyComponentLoader</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.Fakes.StubILazyComponentLoader.cw::Castle#MicroKernel#Resolvers#ILazyComponentLoader#Load(System.String,System.Type,System.Collections.IDictionary)">
            <summary>Sets the stub of ILazyComponentLoader.Load(String name, Type service, IDictionary arguments)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Resolvers.Fakes.StubILazyComponentLoader.LoadStringTypeIDictionary">
            <summary>Sets the stub of ILazyComponentLoader.Load(String name, Type service, IDictionary arguments)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Resolvers.Fakes.StubLazyOfTComponentLoader">
            <summary>Stub type of Castle.MicroKernel.Resolvers.LazyOfTComponentLoader</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.Fakes.StubLazyOfTComponentLoader.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.Fakes.StubLazyOfTComponentLoader.InitializeStub">
            <summary>Initializes a new instance of type StubLazyOfTComponentLoader</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.StubLazyOfTComponentLoader.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.StubLazyOfTComponentLoader.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.StubLazyOfTComponentLoader.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.ShimArrayResolver">
            <summary>Shim type of Castle.MicroKernel.Resolvers.SpecializedResolvers.ArrayResolver</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.ShimArrayResolver.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.ShimArrayResolver.#ctor(Castle.MicroKernel.Resolvers.SpecializedResolvers.ArrayResolver)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.ShimArrayResolver.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.ShimArrayResolver.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.ShimArrayResolver.Bind(Castle.MicroKernel.ISubDependencyResolver)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.ShimArrayResolver.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.ShimArrayResolver.ConstructorIKernel">
            <summary>Sets the shim of ArrayResolver.ArrayResolver(IKernel kernel)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.ShimArrayResolver.ConstructorIKernelBoolean">
            <summary>Sets the shim of ArrayResolver.ArrayResolver(IKernel kernel, Boolean allowEmptyArray)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.ShimArrayResolver.GetItemTypeType">
            <summary>Sets the shim of ArrayResolver.GetItemType(Type targetItemType)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.ShimArrayResolver.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.ShimArrayResolver.AllInstances.GetItemTypeType">
            <summary>Sets the shim of ArrayResolver.GetItemType(Type targetItemType)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.ShimCollectionResolver">
            <summary>Shim type of Castle.MicroKernel.Resolvers.SpecializedResolvers.CollectionResolver</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.ShimCollectionResolver.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.ShimCollectionResolver.#ctor(Castle.MicroKernel.Resolvers.SpecializedResolvers.CollectionResolver)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.ShimCollectionResolver.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.ShimCollectionResolver.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.ShimCollectionResolver.Bind(Castle.MicroKernel.ISubDependencyResolver)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.ShimCollectionResolver.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.ShimCollectionResolver.CanResolveCreationContextISubDependencyResolverComponentModelDependencyModel">
            <summary>Sets the shim of CollectionResolver.CanResolve(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model, DependencyModel dependency)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.ShimCollectionResolver.CanSatisfyType">
            <summary>Sets the shim of CollectionResolver.CanSatisfy(Type itemType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.ShimCollectionResolver.ConstructorIKernelBoolean">
            <summary>Sets the shim of CollectionResolver.CollectionResolver(IKernel kernel, Boolean allowEmptyCollections)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.ShimCollectionResolver.GetItemTypeType">
            <summary>Sets the shim of CollectionResolver.GetItemType(Type targetItemType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.ShimCollectionResolver.HasParameterDependencyModel">
            <summary>Sets the shim of CollectionResolver.HasParameter(DependencyModel dependency)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.ShimCollectionResolver.ResolveCreationContextISubDependencyResolverComponentModelDependencyModel">
            <summary>Sets the shim of CollectionResolver.Resolve(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model, DependencyModel dependency)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.ShimCollectionResolver.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.ShimCollectionResolver.AllInstances.CanResolveCreationContextISubDependencyResolverComponentModelDependencyModel">
            <summary>Sets the shim of CollectionResolver.CanResolve(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model, DependencyModel dependency)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.ShimCollectionResolver.AllInstances.CanSatisfyType">
            <summary>Sets the shim of CollectionResolver.CanSatisfy(Type itemType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.ShimCollectionResolver.AllInstances.GetItemTypeType">
            <summary>Sets the shim of CollectionResolver.GetItemType(Type targetItemType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.ShimCollectionResolver.AllInstances.HasParameterDependencyModel">
            <summary>Sets the shim of CollectionResolver.HasParameter(DependencyModel dependency)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.ShimCollectionResolver.AllInstances.ResolveCreationContextISubDependencyResolverComponentModelDependencyModel">
            <summary>Sets the shim of CollectionResolver.Resolve(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model, DependencyModel dependency)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.ShimListResolver">
            <summary>Shim type of Castle.MicroKernel.Resolvers.SpecializedResolvers.ListResolver</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.ShimListResolver.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.ShimListResolver.#ctor(Castle.MicroKernel.Resolvers.SpecializedResolvers.ListResolver)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.ShimListResolver.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.ShimListResolver.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.ShimListResolver.Bind(Castle.MicroKernel.ISubDependencyResolver)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.ShimListResolver.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.ShimListResolver.BuildListTypeDependencyModel">
            <summary>Sets the shim of ListResolver.BuildListType(DependencyModel dependency)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.ShimListResolver.ConstructorIKernel">
            <summary>Sets the shim of ListResolver.ListResolver(IKernel kernel)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.ShimListResolver.ConstructorIKernelBoolean">
            <summary>Sets the shim of ListResolver.ListResolver(IKernel kernel, Boolean allowEmptyList)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.ShimListResolver.GetItemTypeType">
            <summary>Sets the shim of ListResolver.GetItemType(Type targetItemType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.ShimListResolver.ResolveCreationContextISubDependencyResolverComponentModelDependencyModel">
            <summary>Sets the shim of ListResolver.Resolve(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model, DependencyModel dependency)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.ShimListResolver.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.ShimListResolver.AllInstances.BuildListTypeDependencyModel">
            <summary>Sets the shim of ListResolver.BuildListType(DependencyModel dependency)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.ShimListResolver.AllInstances.GetItemTypeType">
            <summary>Sets the shim of ListResolver.GetItemType(Type targetItemType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.ShimListResolver.AllInstances.ResolveCreationContextISubDependencyResolverComponentModelDependencyModel">
            <summary>Sets the shim of ListResolver.Resolve(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model, DependencyModel dependency)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.StubArrayResolver">
            <summary>Stub type of Castle.MicroKernel.Resolvers.SpecializedResolvers.ArrayResolver</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.StubArrayResolver.#ctor(Castle.MicroKernel.IKernel)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.StubArrayResolver.#ctor(Castle.MicroKernel.IKernel,System.Boolean)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.StubArrayResolver.CanResolve(Castle.MicroKernel.Context.CreationContext,Castle.MicroKernel.ISubDependencyResolver,Castle.Core.ComponentModel,Castle.Core.DependencyModel)">
            <summary>Sets the stub of CollectionResolver.CanResolve(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model, DependencyModel dependency)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.StubArrayResolver.CanResolveCreationContextISubDependencyResolverComponentModelDependencyModel">
            <summary>Sets the stub of CollectionResolver.CanResolve(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model, DependencyModel dependency)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.StubArrayResolver.CanSatisfy(System.Type)">
            <summary>Sets the stub of CollectionResolver.CanSatisfy(Type itemType)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.StubArrayResolver.CanSatisfyType">
            <summary>Sets the stub of CollectionResolver.CanSatisfy(Type itemType)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.StubArrayResolver.GetItemType(System.Type)">
            <summary>Sets the stub of ArrayResolver.GetItemType(Type targetItemType)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.StubArrayResolver.GetItemTypeType">
            <summary>Sets the stub of ArrayResolver.GetItemType(Type targetItemType)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.StubArrayResolver.HasParameter(Castle.Core.DependencyModel)">
            <summary>Sets the stub of CollectionResolver.HasParameter(DependencyModel dependency)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.StubArrayResolver.HasParameterDependencyModel">
            <summary>Sets the stub of CollectionResolver.HasParameter(DependencyModel dependency)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.StubArrayResolver.InitializeStub">
            <summary>Initializes a new instance of type StubArrayResolver</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.StubArrayResolver.Resolve(Castle.MicroKernel.Context.CreationContext,Castle.MicroKernel.ISubDependencyResolver,Castle.Core.ComponentModel,Castle.Core.DependencyModel)">
            <summary>Sets the stub of CollectionResolver.Resolve(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model, DependencyModel dependency)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.StubArrayResolver.ResolveCreationContextISubDependencyResolverComponentModelDependencyModel">
            <summary>Sets the stub of CollectionResolver.Resolve(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model, DependencyModel dependency)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.StubArrayResolver.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.StubArrayResolver.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.StubArrayResolver.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.StubCollectionResolver">
            <summary>Stub type of Castle.MicroKernel.Resolvers.SpecializedResolvers.CollectionResolver</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.StubCollectionResolver.#ctor(Castle.MicroKernel.IKernel,System.Boolean)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.StubCollectionResolver.CanResolve(Castle.MicroKernel.Context.CreationContext,Castle.MicroKernel.ISubDependencyResolver,Castle.Core.ComponentModel,Castle.Core.DependencyModel)">
            <summary>Sets the stub of CollectionResolver.CanResolve(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model, DependencyModel dependency)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.StubCollectionResolver.CanResolveCreationContextISubDependencyResolverComponentModelDependencyModel">
            <summary>Sets the stub of CollectionResolver.CanResolve(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model, DependencyModel dependency)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.StubCollectionResolver.CanSatisfy(System.Type)">
            <summary>Sets the stub of CollectionResolver.CanSatisfy(Type itemType)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.StubCollectionResolver.CanSatisfyType">
            <summary>Sets the stub of CollectionResolver.CanSatisfy(Type itemType)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.StubCollectionResolver.GetItemType(System.Type)">
            <summary>Sets the stub of CollectionResolver.GetItemType(Type targetItemType)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.StubCollectionResolver.GetItemTypeType">
            <summary>Sets the stub of CollectionResolver.GetItemType(Type targetItemType)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.StubCollectionResolver.HasParameter(Castle.Core.DependencyModel)">
            <summary>Sets the stub of CollectionResolver.HasParameter(DependencyModel dependency)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.StubCollectionResolver.HasParameterDependencyModel">
            <summary>Sets the stub of CollectionResolver.HasParameter(DependencyModel dependency)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.StubCollectionResolver.InitializeStub">
            <summary>Initializes a new instance of type StubCollectionResolver</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.StubCollectionResolver.Resolve(Castle.MicroKernel.Context.CreationContext,Castle.MicroKernel.ISubDependencyResolver,Castle.Core.ComponentModel,Castle.Core.DependencyModel)">
            <summary>Sets the stub of CollectionResolver.Resolve(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model, DependencyModel dependency)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.StubCollectionResolver.ResolveCreationContextISubDependencyResolverComponentModelDependencyModel">
            <summary>Sets the stub of CollectionResolver.Resolve(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model, DependencyModel dependency)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.StubCollectionResolver.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.StubCollectionResolver.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.StubCollectionResolver.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.StubListResolver">
            <summary>Stub type of Castle.MicroKernel.Resolvers.SpecializedResolvers.ListResolver</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.StubListResolver.#ctor(Castle.MicroKernel.IKernel)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.StubListResolver.#ctor(Castle.MicroKernel.IKernel,System.Boolean)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.StubListResolver.CanResolve(Castle.MicroKernel.Context.CreationContext,Castle.MicroKernel.ISubDependencyResolver,Castle.Core.ComponentModel,Castle.Core.DependencyModel)">
            <summary>Sets the stub of CollectionResolver.CanResolve(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model, DependencyModel dependency)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.StubListResolver.CanResolveCreationContextISubDependencyResolverComponentModelDependencyModel">
            <summary>Sets the stub of CollectionResolver.CanResolve(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model, DependencyModel dependency)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.StubListResolver.CanSatisfy(System.Type)">
            <summary>Sets the stub of CollectionResolver.CanSatisfy(Type itemType)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.StubListResolver.CanSatisfyType">
            <summary>Sets the stub of CollectionResolver.CanSatisfy(Type itemType)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.StubListResolver.GetItemType(System.Type)">
            <summary>Sets the stub of ListResolver.GetItemType(Type targetItemType)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.StubListResolver.GetItemTypeType">
            <summary>Sets the stub of ListResolver.GetItemType(Type targetItemType)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.StubListResolver.HasParameter(Castle.Core.DependencyModel)">
            <summary>Sets the stub of CollectionResolver.HasParameter(DependencyModel dependency)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.StubListResolver.HasParameterDependencyModel">
            <summary>Sets the stub of CollectionResolver.HasParameter(DependencyModel dependency)</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.StubListResolver.InitializeStub">
            <summary>Initializes a new instance of type StubListResolver</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.StubListResolver.Resolve(Castle.MicroKernel.Context.CreationContext,Castle.MicroKernel.ISubDependencyResolver,Castle.Core.ComponentModel,Castle.Core.DependencyModel)">
            <summary>Sets the stub of ListResolver.Resolve(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model, DependencyModel dependency)</summary>
        </member>
        <member name="F:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.StubListResolver.ResolveCreationContextISubDependencyResolverComponentModelDependencyModel">
            <summary>Sets the stub of ListResolver.Resolve(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model, DependencyModel dependency)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.StubListResolver.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.StubListResolver.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.SpecializedResolvers.Fakes.StubListResolver.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Configuration.Fakes.ShimDefaultConfigurationStore">
            <summary>Shim type of Castle.MicroKernel.SubSystems.Configuration.DefaultConfigurationStore</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Configuration.Fakes.ShimDefaultConfigurationStore.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Configuration.Fakes.ShimDefaultConfigurationStore.#ctor(Castle.MicroKernel.SubSystems.Configuration.DefaultConfigurationStore)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Configuration.Fakes.ShimDefaultConfigurationStore.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Configuration.Fakes.ShimDefaultConfigurationStore.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Configuration.Fakes.ShimDefaultConfigurationStore.Bind(Castle.MicroKernel.ISubSystem)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Configuration.Fakes.ShimDefaultConfigurationStore.Bind(Castle.MicroKernel.SubSystems.Configuration.IConfigurationStore)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Configuration.Fakes.ShimDefaultConfigurationStore.AddChildContainerConfigurationStringIConfiguration">
            <summary>Sets the shim of DefaultConfigurationStore.AddChildContainerConfiguration(String key, IConfiguration config)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Configuration.Fakes.ShimDefaultConfigurationStore.AddComponentConfigurationStringIConfiguration">
            <summary>Sets the shim of DefaultConfigurationStore.AddComponentConfiguration(String key, IConfiguration config)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Configuration.Fakes.ShimDefaultConfigurationStore.AddFacilityConfigurationStringIConfiguration">
            <summary>Sets the shim of DefaultConfigurationStore.AddFacilityConfiguration(String key, IConfiguration config)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Configuration.Fakes.ShimDefaultConfigurationStore.AddInstallerConfigurationIConfiguration">
            <summary>Sets the shim of DefaultConfigurationStore.AddInstallerConfiguration(IConfiguration config)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Configuration.Fakes.ShimDefaultConfigurationStore.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Configuration.Fakes.ShimDefaultConfigurationStore.Constructor">
            <summary>Sets the shim of DefaultConfigurationStore.DefaultConfigurationStore()</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Configuration.Fakes.ShimDefaultConfigurationStore.GetChildContainerConfigurationString">
            <summary>Sets the shim of DefaultConfigurationStore.GetChildContainerConfiguration(String key)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Configuration.Fakes.ShimDefaultConfigurationStore.GetComponentConfigurationString">
            <summary>Sets the shim of DefaultConfigurationStore.GetComponentConfiguration(String key)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Configuration.Fakes.ShimDefaultConfigurationStore.GetComponents">
            <summary>Sets the shim of DefaultConfigurationStore.GetComponents()</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Configuration.Fakes.ShimDefaultConfigurationStore.GetConfigurationForChildContainers">
            <summary>Sets the shim of DefaultConfigurationStore.GetConfigurationForChildContainers()</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Configuration.Fakes.ShimDefaultConfigurationStore.GetFacilities">
            <summary>Sets the shim of DefaultConfigurationStore.GetFacilities()</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Configuration.Fakes.ShimDefaultConfigurationStore.GetFacilityConfigurationString">
            <summary>Sets the shim of DefaultConfigurationStore.GetFacilityConfiguration(String key)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Configuration.Fakes.ShimDefaultConfigurationStore.GetInstallers">
            <summary>Sets the shim of DefaultConfigurationStore.GetInstallers()</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Configuration.Fakes.ShimDefaultConfigurationStore.GetResourceStringIResource">
            <summary>Sets the shim of DefaultConfigurationStore.GetResource(String resourceUri, IResource resource)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Configuration.Fakes.ShimDefaultConfigurationStore.Terminate">
            <summary>Sets the shim of DefaultConfigurationStore.Terminate()</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Configuration.Fakes.ShimDefaultConfigurationStore.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Configuration.Fakes.ShimDefaultConfigurationStore.AllInstances.AddChildContainerConfigurationStringIConfiguration">
            <summary>Sets the shim of DefaultConfigurationStore.AddChildContainerConfiguration(String key, IConfiguration config)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Configuration.Fakes.ShimDefaultConfigurationStore.AllInstances.AddComponentConfigurationStringIConfiguration">
            <summary>Sets the shim of DefaultConfigurationStore.AddComponentConfiguration(String key, IConfiguration config)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Configuration.Fakes.ShimDefaultConfigurationStore.AllInstances.AddFacilityConfigurationStringIConfiguration">
            <summary>Sets the shim of DefaultConfigurationStore.AddFacilityConfiguration(String key, IConfiguration config)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Configuration.Fakes.ShimDefaultConfigurationStore.AllInstances.AddInstallerConfigurationIConfiguration">
            <summary>Sets the shim of DefaultConfigurationStore.AddInstallerConfiguration(IConfiguration config)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Configuration.Fakes.ShimDefaultConfigurationStore.AllInstances.GetChildContainerConfigurationString">
            <summary>Sets the shim of DefaultConfigurationStore.GetChildContainerConfiguration(String key)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Configuration.Fakes.ShimDefaultConfigurationStore.AllInstances.GetComponentConfigurationString">
            <summary>Sets the shim of DefaultConfigurationStore.GetComponentConfiguration(String key)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Configuration.Fakes.ShimDefaultConfigurationStore.AllInstances.GetComponents">
            <summary>Sets the shim of DefaultConfigurationStore.GetComponents()</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Configuration.Fakes.ShimDefaultConfigurationStore.AllInstances.GetConfigurationForChildContainers">
            <summary>Sets the shim of DefaultConfigurationStore.GetConfigurationForChildContainers()</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Configuration.Fakes.ShimDefaultConfigurationStore.AllInstances.GetFacilities">
            <summary>Sets the shim of DefaultConfigurationStore.GetFacilities()</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Configuration.Fakes.ShimDefaultConfigurationStore.AllInstances.GetFacilityConfigurationString">
            <summary>Sets the shim of DefaultConfigurationStore.GetFacilityConfiguration(String key)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Configuration.Fakes.ShimDefaultConfigurationStore.AllInstances.GetInstallers">
            <summary>Sets the shim of DefaultConfigurationStore.GetInstallers()</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Configuration.Fakes.ShimDefaultConfigurationStore.AllInstances.GetResourceStringIResource">
            <summary>Sets the shim of DefaultConfigurationStore.GetResource(String resourceUri, IResource resource)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Configuration.Fakes.ShimDefaultConfigurationStore.AllInstances.Terminate">
            <summary>Sets the shim of DefaultConfigurationStore.Terminate()</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Configuration.Fakes.StubDefaultConfigurationStore">
            <summary>Stub type of Castle.MicroKernel.SubSystems.Configuration.DefaultConfigurationStore</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Configuration.Fakes.StubDefaultConfigurationStore.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Configuration.Fakes.StubDefaultConfigurationStore.Init(Castle.MicroKernel.IKernelInternal)">
            <summary>Sets the stub of AbstractSubSystem.Init(IKernelInternal kernel)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Configuration.Fakes.StubDefaultConfigurationStore.InitIKernelInternal">
            <summary>Sets the stub of AbstractSubSystem.Init(IKernelInternal kernel)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Configuration.Fakes.StubDefaultConfigurationStore.InitializeLifetimeService">
            <summary>Sets the stub of AbstractSubSystem.InitializeLifetimeService()</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Configuration.Fakes.StubDefaultConfigurationStore.InitializeLifetimeService01">
            <summary>Sets the stub of AbstractSubSystem.InitializeLifetimeService()</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Configuration.Fakes.StubDefaultConfigurationStore.InitializeStub">
            <summary>Initializes a new instance of type StubDefaultConfigurationStore</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Configuration.Fakes.StubDefaultConfigurationStore.Terminate">
            <summary>Sets the stub of DefaultConfigurationStore.Terminate()</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Configuration.Fakes.StubDefaultConfigurationStore.Terminate01">
            <summary>Sets the stub of DefaultConfigurationStore.Terminate()</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Configuration.Fakes.StubDefaultConfigurationStore.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Configuration.Fakes.StubDefaultConfigurationStore.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Configuration.Fakes.StubDefaultConfigurationStore.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Configuration.Fakes.StubIConfigurationStore">
            <summary>Stub type of Castle.MicroKernel.SubSystems.Configuration.IConfigurationStore</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Configuration.Fakes.StubIConfigurationStore.#ctor">
            <summary>Initializes a new instance of type StubIConfigurationStore</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Configuration.Fakes.StubIConfigurationStore.AddChildContainerConfigurationStringIConfiguration">
            <summary>Sets the stub of IConfigurationStore.AddChildContainerConfiguration(String name, IConfiguration config)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Configuration.Fakes.StubIConfigurationStore.AddComponentConfigurationStringIConfiguration">
            <summary>Sets the stub of IConfigurationStore.AddComponentConfiguration(String key, IConfiguration config)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Configuration.Fakes.StubIConfigurationStore.AddFacilityConfigurationStringIConfiguration">
            <summary>Sets the stub of IConfigurationStore.AddFacilityConfiguration(String key, IConfiguration config)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Configuration.Fakes.StubIConfigurationStore.AddInstallerConfigurationIConfiguration">
            <summary>Sets the stub of IConfigurationStore.AddInstallerConfiguration(IConfiguration config)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Configuration.Fakes.StubIConfigurationStore.cw::Castle#MicroKernel#ISubSystem#Init(Castle.MicroKernel.IKernelInternal)">
            <summary>Sets the stub of ISubSystem.Init(IKernelInternal kernel)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Configuration.Fakes.StubIConfigurationStore.cw::Castle#MicroKernel#ISubSystem#Terminate">
            <summary>Sets the stub of ISubSystem.Terminate()</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Configuration.Fakes.StubIConfigurationStore.cw::Castle#MicroKernel#SubSystems#Configuration#IConfigurationStore#AddChildContainerConfiguration(System.String,Castle.Core.Configuration.IConfiguration)">
            <summary>Sets the stub of IConfigurationStore.AddChildContainerConfiguration(String name, IConfiguration config)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Configuration.Fakes.StubIConfigurationStore.cw::Castle#MicroKernel#SubSystems#Configuration#IConfigurationStore#AddComponentConfiguration(System.String,Castle.Core.Configuration.IConfiguration)">
            <summary>Sets the stub of IConfigurationStore.AddComponentConfiguration(String key, IConfiguration config)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Configuration.Fakes.StubIConfigurationStore.cw::Castle#MicroKernel#SubSystems#Configuration#IConfigurationStore#AddFacilityConfiguration(System.String,Castle.Core.Configuration.IConfiguration)">
            <summary>Sets the stub of IConfigurationStore.AddFacilityConfiguration(String key, IConfiguration config)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Configuration.Fakes.StubIConfigurationStore.cw::Castle#MicroKernel#SubSystems#Configuration#IConfigurationStore#AddInstallerConfiguration(Castle.Core.Configuration.IConfiguration)">
            <summary>Sets the stub of IConfigurationStore.AddInstallerConfiguration(IConfiguration config)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Configuration.Fakes.StubIConfigurationStore.cw::Castle#MicroKernel#SubSystems#Configuration#IConfigurationStore#GetChildContainerConfiguration(System.String)">
            <summary>Sets the stub of IConfigurationStore.GetChildContainerConfiguration(String key)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Configuration.Fakes.StubIConfigurationStore.cw::Castle#MicroKernel#SubSystems#Configuration#IConfigurationStore#GetComponentConfiguration(System.String)">
            <summary>Sets the stub of IConfigurationStore.GetComponentConfiguration(String key)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Configuration.Fakes.StubIConfigurationStore.cw::Castle#MicroKernel#SubSystems#Configuration#IConfigurationStore#GetComponents">
            <summary>Sets the stub of IConfigurationStore.GetComponents()</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Configuration.Fakes.StubIConfigurationStore.cw::Castle#MicroKernel#SubSystems#Configuration#IConfigurationStore#GetConfigurationForChildContainers">
            <summary>Sets the stub of IConfigurationStore.GetConfigurationForChildContainers()</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Configuration.Fakes.StubIConfigurationStore.cw::Castle#MicroKernel#SubSystems#Configuration#IConfigurationStore#GetFacilities">
            <summary>Sets the stub of IConfigurationStore.GetFacilities()</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Configuration.Fakes.StubIConfigurationStore.cw::Castle#MicroKernel#SubSystems#Configuration#IConfigurationStore#GetFacilityConfiguration(System.String)">
            <summary>Sets the stub of IConfigurationStore.GetFacilityConfiguration(String key)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Configuration.Fakes.StubIConfigurationStore.cw::Castle#MicroKernel#SubSystems#Configuration#IConfigurationStore#GetInstallers">
            <summary>Sets the stub of IConfigurationStore.GetInstallers()</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Configuration.Fakes.StubIConfigurationStore.cw::Castle#MicroKernel#SubSystems#Configuration#IConfigurationStore#GetResource(System.String,Castle.Core.Resource.IResource)">
            <summary>Sets the stub of IConfigurationStore.GetResource(String resourceUri, IResource resource)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Configuration.Fakes.StubIConfigurationStore.GetChildContainerConfigurationString">
            <summary>Sets the stub of IConfigurationStore.GetChildContainerConfiguration(String key)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Configuration.Fakes.StubIConfigurationStore.GetComponentConfigurationString">
            <summary>Sets the stub of IConfigurationStore.GetComponentConfiguration(String key)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Configuration.Fakes.StubIConfigurationStore.GetComponents">
            <summary>Sets the stub of IConfigurationStore.GetComponents()</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Configuration.Fakes.StubIConfigurationStore.GetConfigurationForChildContainers">
            <summary>Sets the stub of IConfigurationStore.GetConfigurationForChildContainers()</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Configuration.Fakes.StubIConfigurationStore.GetFacilities">
            <summary>Sets the stub of IConfigurationStore.GetFacilities()</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Configuration.Fakes.StubIConfigurationStore.GetFacilityConfigurationString">
            <summary>Sets the stub of IConfigurationStore.GetFacilityConfiguration(String key)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Configuration.Fakes.StubIConfigurationStore.GetInstallers">
            <summary>Sets the stub of IConfigurationStore.GetInstallers()</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Configuration.Fakes.StubIConfigurationStore.GetResourceStringIResource">
            <summary>Sets the stub of IConfigurationStore.GetResource(String resourceUri, IResource resource)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Configuration.Fakes.StubIConfigurationStore.InitIKernelInternal">
            <summary>Sets the stub of ISubSystem.Init(IKernelInternal kernel)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Configuration.Fakes.StubIConfigurationStore.Terminate">
            <summary>Sets the stub of ISubSystem.Terminate()</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimAbstractTypeConverter">
            <summary>Shim type of Castle.MicroKernel.SubSystems.Conversion.AbstractTypeConverter</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimAbstractTypeConverter.#ctor(Castle.MicroKernel.SubSystems.Conversion.AbstractTypeConverter)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimAbstractTypeConverter.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimAbstractTypeConverter.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimAbstractTypeConverter.Bind(Castle.MicroKernel.SubSystems.Conversion.ITypeConverter)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimAbstractTypeConverter.PerformConversionOf1IConfiguration``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.Core.Configuration.IConfiguration,``0})">
            <summary>Sets the shim of AbstractTypeConverter.PerformConversion(IConfiguration configuration)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimAbstractTypeConverter.PerformConversionOf1String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,``0})">
            <summary>Sets the shim of AbstractTypeConverter.PerformConversion(String value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimAbstractTypeConverter.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimAbstractTypeConverter.CanHandleTypeTypeIConfiguration">
            <summary>Sets the shim of AbstractTypeConverter.CanHandleType(Type type, IConfiguration configuration)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimAbstractTypeConverter.Constructor">
            <summary>Sets the shim of AbstractTypeConverter.AbstractTypeConverter()</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimAbstractTypeConverter.ContextGet">
            <summary>Sets the shim of AbstractTypeConverter.get_Context()</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimAbstractTypeConverter.ContextSetITypeConverterContext">
            <summary>Sets the shim of AbstractTypeConverter.set_Context(ITypeConverterContext value)</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimAbstractTypeConverter.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimAbstractTypeConverter.AllInstances.PerformConversionOf1IConfiguration``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.SubSystems.Conversion.AbstractTypeConverter,Castle.Core.Configuration.IConfiguration,``0})">
            <summary>Sets the shim of AbstractTypeConverter.PerformConversion(IConfiguration configuration)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimAbstractTypeConverter.AllInstances.PerformConversionOf1String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.SubSystems.Conversion.AbstractTypeConverter,System.String,``0})">
            <summary>Sets the shim of AbstractTypeConverter.PerformConversion(String value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimAbstractTypeConverter.AllInstances.CanHandleTypeTypeIConfiguration">
            <summary>Sets the shim of AbstractTypeConverter.CanHandleType(Type type, IConfiguration configuration)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimAbstractTypeConverter.AllInstances.ContextGet">
            <summary>Sets the shim of AbstractTypeConverter.get_Context()</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimAbstractTypeConverter.AllInstances.ContextSetITypeConverterContext">
            <summary>Sets the shim of AbstractTypeConverter.set_Context(ITypeConverterContext value)</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimArrayConverter">
            <summary>Shim type of Castle.MicroKernel.SubSystems.Conversion.ArrayConverter</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimArrayConverter.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimArrayConverter.#ctor(Castle.MicroKernel.SubSystems.Conversion.ArrayConverter)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimArrayConverter.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimArrayConverter.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimArrayConverter.Bind(Castle.MicroKernel.SubSystems.Conversion.ITypeConverter)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimArrayConverter.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimArrayConverter.CanHandleTypeType">
            <summary>Sets the shim of ArrayConverter.CanHandleType(Type type)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimArrayConverter.Constructor">
            <summary>Sets the shim of ArrayConverter.ArrayConverter()</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimArrayConverter.PerformConversionIConfigurationType">
            <summary>Sets the shim of ArrayConverter.PerformConversion(IConfiguration configuration, Type targetType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimArrayConverter.PerformConversionStringType">
            <summary>Sets the shim of ArrayConverter.PerformConversion(String value, Type targetType)</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimArrayConverter.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimArrayConverter.AllInstances.CanHandleTypeType">
            <summary>Sets the shim of ArrayConverter.CanHandleType(Type type)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimArrayConverter.AllInstances.PerformConversionIConfigurationType">
            <summary>Sets the shim of ArrayConverter.PerformConversion(IConfiguration configuration, Type targetType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimArrayConverter.AllInstances.PerformConversionStringType">
            <summary>Sets the shim of ArrayConverter.PerformConversion(String value, Type targetType)</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimAttributeAwareConverter">
            <summary>Shim type of Castle.MicroKernel.SubSystems.Conversion.AttributeAwareConverter</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimAttributeAwareConverter.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimAttributeAwareConverter.#ctor(Castle.MicroKernel.SubSystems.Conversion.AttributeAwareConverter)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimAttributeAwareConverter.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimAttributeAwareConverter.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimAttributeAwareConverter.Bind(Castle.MicroKernel.SubSystems.Conversion.ITypeConverter)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimAttributeAwareConverter.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimAttributeAwareConverter.CanHandleTypeType">
            <summary>Sets the shim of AttributeAwareConverter.CanHandleType(Type type)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimAttributeAwareConverter.Constructor">
            <summary>Sets the shim of AttributeAwareConverter.AttributeAwareConverter()</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimAttributeAwareConverter.GetConverterInstanceType">
            <summary>Sets the shim of AttributeAwareConverter.GetConverterInstance(Type type)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimAttributeAwareConverter.PerformConversionIConfigurationType">
            <summary>Sets the shim of AttributeAwareConverter.PerformConversion(IConfiguration configuration, Type targetType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimAttributeAwareConverter.PerformConversionStringType">
            <summary>Sets the shim of AttributeAwareConverter.PerformConversion(String value, Type targetType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimAttributeAwareConverter.TryGetConverterInstanceType">
            <summary>Sets the shim of AttributeAwareConverter.TryGetConverterInstance(Type type)</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimAttributeAwareConverter.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimAttributeAwareConverter.AllInstances.CanHandleTypeType">
            <summary>Sets the shim of AttributeAwareConverter.CanHandleType(Type type)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimAttributeAwareConverter.AllInstances.GetConverterInstanceType">
            <summary>Sets the shim of AttributeAwareConverter.GetConverterInstance(Type type)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimAttributeAwareConverter.AllInstances.PerformConversionIConfigurationType">
            <summary>Sets the shim of AttributeAwareConverter.PerformConversion(IConfiguration configuration, Type targetType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimAttributeAwareConverter.AllInstances.PerformConversionStringType">
            <summary>Sets the shim of AttributeAwareConverter.PerformConversion(String value, Type targetType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimAttributeAwareConverter.AllInstances.TryGetConverterInstanceType">
            <summary>Sets the shim of AttributeAwareConverter.TryGetConverterInstance(Type type)</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimComponentConverter">
            <summary>Shim type of Castle.MicroKernel.SubSystems.Conversion.ComponentConverter</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimComponentConverter.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimComponentConverter.#ctor(Castle.MicroKernel.SubSystems.Conversion.ComponentConverter)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimComponentConverter.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimComponentConverter.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimComponentConverter.Bind(Castle.MicroKernel.SubSystems.Conversion.IKernelDependentConverter)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimComponentConverter.Bind(Castle.MicroKernel.SubSystems.Conversion.ITypeConverter)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimComponentConverter.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimComponentConverter.CanHandleTypeType">
            <summary>Sets the shim of ComponentConverter.CanHandleType(Type type)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimComponentConverter.CanHandleTypeTypeIConfiguration">
            <summary>Sets the shim of ComponentConverter.CanHandleType(Type type, IConfiguration configuration)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimComponentConverter.Constructor">
            <summary>Sets the shim of ComponentConverter.ComponentConverter()</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimComponentConverter.PerformConversionIConfigurationType">
            <summary>Sets the shim of ComponentConverter.PerformConversion(IConfiguration configuration, Type targetType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimComponentConverter.PerformConversionStringType">
            <summary>Sets the shim of ComponentConverter.PerformConversion(String value, Type targetType)</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimComponentConverter.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimComponentConverter.AllInstances.CanHandleTypeType">
            <summary>Sets the shim of ComponentConverter.CanHandleType(Type type)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimComponentConverter.AllInstances.CanHandleTypeTypeIConfiguration">
            <summary>Sets the shim of ComponentConverter.CanHandleType(Type type, IConfiguration configuration)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimComponentConverter.AllInstances.PerformConversionIConfigurationType">
            <summary>Sets the shim of ComponentConverter.PerformConversion(IConfiguration configuration, Type targetType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimComponentConverter.AllInstances.PerformConversionStringType">
            <summary>Sets the shim of ComponentConverter.PerformConversion(String value, Type targetType)</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimComponentModelConverter">
            <summary>Shim type of Castle.MicroKernel.SubSystems.Conversion.ComponentModelConverter</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimComponentModelConverter.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimComponentModelConverter.#ctor(Castle.MicroKernel.SubSystems.Conversion.ComponentModelConverter)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimComponentModelConverter.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimComponentModelConverter.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimComponentModelConverter.Bind(Castle.MicroKernel.SubSystems.Conversion.ITypeConverter)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimComponentModelConverter.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimComponentModelConverter.CanHandleTypeType">
            <summary>Sets the shim of ComponentModelConverter.CanHandleType(Type type)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimComponentModelConverter.Constructor">
            <summary>Sets the shim of ComponentModelConverter.ComponentModelConverter()</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimComponentModelConverter.PerformConversionIConfigurationType">
            <summary>Sets the shim of ComponentModelConverter.PerformConversion(IConfiguration configuration, Type targetType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimComponentModelConverter.PerformConversionStringType">
            <summary>Sets the shim of ComponentModelConverter.PerformConversion(String value, Type targetType)</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimComponentModelConverter.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimComponentModelConverter.AllInstances.CanHandleTypeType">
            <summary>Sets the shim of ComponentModelConverter.CanHandleType(Type type)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimComponentModelConverter.AllInstances.PerformConversionIConfigurationType">
            <summary>Sets the shim of ComponentModelConverter.PerformConversion(IConfiguration configuration, Type targetType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimComponentModelConverter.AllInstances.PerformConversionStringType">
            <summary>Sets the shim of ComponentModelConverter.PerformConversion(String value, Type targetType)</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimConverterException">
            <summary>Shim type of Castle.MicroKernel.SubSystems.Conversion.ConverterException</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimConverterException.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimConverterException.#ctor(Castle.MicroKernel.SubSystems.Conversion.ConverterException)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimConverterException.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimConverterException.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimConverterException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimConverterException.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimConverterException.ConstructorSerializationInfoStreamingContext">
            <summary>Sets the shim of ConverterException.ConverterException(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimConverterException.ConstructorString">
            <summary>Sets the shim of ConverterException.ConverterException(String message)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimConverterException.ConstructorStringException">
            <summary>Sets the shim of ConverterException.ConverterException(String message, Exception innerException)</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimConverterException.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimConvertibleAttribute">
            <summary>Shim type of Castle.MicroKernel.SubSystems.Conversion.ConvertibleAttribute</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimConvertibleAttribute.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimConvertibleAttribute.#ctor(Castle.MicroKernel.SubSystems.Conversion.ConvertibleAttribute)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimConvertibleAttribute.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimConvertibleAttribute.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimConvertibleAttribute.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimConvertibleAttribute.Constructor">
            <summary>Sets the shim of ConvertibleAttribute.ConvertibleAttribute()</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimConvertibleAttribute.ConstructorType">
            <summary>Sets the shim of ConvertibleAttribute.ConvertibleAttribute(Type converterType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimConvertibleAttribute.ConverterTypeGet">
            <summary>Sets the shim of ConvertibleAttribute.get_ConverterType()</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimConvertibleAttribute.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimConvertibleAttribute.AllInstances.ConverterTypeGet">
            <summary>Sets the shim of ConvertibleAttribute.get_ConverterType()</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultComplexConverter">
            <summary>Shim type of Castle.MicroKernel.SubSystems.Conversion.DefaultComplexConverter</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultComplexConverter.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultComplexConverter.#ctor(Castle.MicroKernel.SubSystems.Conversion.DefaultComplexConverter)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultComplexConverter.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultComplexConverter.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultComplexConverter.Bind(Castle.MicroKernel.SubSystems.Conversion.ITypeConverter)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultComplexConverter.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultComplexConverter.CanHandleTypeType">
            <summary>Sets the shim of DefaultComplexConverter.CanHandleType(Type type)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultComplexConverter.ChooseConstructorType">
            <summary>Sets the shim of DefaultComplexConverter.ChooseConstructor(Type type)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultComplexConverter.Constructor">
            <summary>Sets the shim of DefaultComplexConverter.DefaultComplexConverter()</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultComplexConverter.ConversionManagerGet">
            <summary>Sets the shim of DefaultComplexConverter.get_ConversionManager()</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultComplexConverter.ConvertChildParameterIConfigurationType">
            <summary>Sets the shim of DefaultComplexConverter.ConvertChildParameter(IConfiguration config, Type type)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultComplexConverter.ConvertConstructorParametersConstructorInfoIConfiguration">
            <summary>Sets the shim of DefaultComplexConverter.ConvertConstructorParameters(ConstructorInfo constructor, IConfiguration configuration)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultComplexConverter.ConvertPropertyValuesObjectTypeIConfiguration">
            <summary>Sets the shim of DefaultComplexConverter.ConvertPropertyValues(Object instance, Type type, IConfiguration configuration)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultComplexConverter.CreateInstanceTypeIConfiguration">
            <summary>Sets the shim of DefaultComplexConverter.CreateInstance(Type type, IConfiguration configuration)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultComplexConverter.FindChildIgnoreCaseIConfigurationString">
            <summary>Sets the shim of DefaultComplexConverter.FindChildIgnoreCase(IConfiguration config, String name)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultComplexConverter.ObtainImplementationTypeIConfiguration">
            <summary>Sets the shim of DefaultComplexConverter.ObtainImplementation(Type type, IConfiguration configuration)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultComplexConverter.PerformConversionIConfigurationType">
            <summary>Sets the shim of DefaultComplexConverter.PerformConversion(IConfiguration configuration, Type targetType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultComplexConverter.PerformConversionStringType">
            <summary>Sets the shim of DefaultComplexConverter.PerformConversion(String value, Type targetType)</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultComplexConverter.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultComplexConverter.AllInstances.CanHandleTypeType">
            <summary>Sets the shim of DefaultComplexConverter.CanHandleType(Type type)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultComplexConverter.AllInstances.ChooseConstructorType">
            <summary>Sets the shim of DefaultComplexConverter.ChooseConstructor(Type type)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultComplexConverter.AllInstances.ConversionManagerGet">
            <summary>Sets the shim of DefaultComplexConverter.get_ConversionManager()</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultComplexConverter.AllInstances.ConvertChildParameterIConfigurationType">
            <summary>Sets the shim of DefaultComplexConverter.ConvertChildParameter(IConfiguration config, Type type)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultComplexConverter.AllInstances.ConvertConstructorParametersConstructorInfoIConfiguration">
            <summary>Sets the shim of DefaultComplexConverter.ConvertConstructorParameters(ConstructorInfo constructor, IConfiguration configuration)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultComplexConverter.AllInstances.ConvertPropertyValuesObjectTypeIConfiguration">
            <summary>Sets the shim of DefaultComplexConverter.ConvertPropertyValues(Object instance, Type type, IConfiguration configuration)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultComplexConverter.AllInstances.CreateInstanceTypeIConfiguration">
            <summary>Sets the shim of DefaultComplexConverter.CreateInstance(Type type, IConfiguration configuration)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultComplexConverter.AllInstances.FindChildIgnoreCaseIConfigurationString">
            <summary>Sets the shim of DefaultComplexConverter.FindChildIgnoreCase(IConfiguration config, String name)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultComplexConverter.AllInstances.ObtainImplementationTypeIConfiguration">
            <summary>Sets the shim of DefaultComplexConverter.ObtainImplementation(Type type, IConfiguration configuration)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultComplexConverter.AllInstances.PerformConversionIConfigurationType">
            <summary>Sets the shim of DefaultComplexConverter.PerformConversion(IConfiguration configuration, Type targetType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultComplexConverter.AllInstances.PerformConversionStringType">
            <summary>Sets the shim of DefaultComplexConverter.PerformConversion(String value, Type targetType)</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultConversionManager">
            <summary>Shim type of Castle.MicroKernel.SubSystems.Conversion.DefaultConversionManager</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultConversionManager.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultConversionManager.#ctor(Castle.MicroKernel.SubSystems.Conversion.DefaultConversionManager)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultConversionManager.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultConversionManager.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultConversionManager.Bind(Castle.MicroKernel.ISubSystem)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultConversionManager.Bind(Castle.MicroKernel.SubSystems.Conversion.IConversionManager)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultConversionManager.Bind(Castle.MicroKernel.SubSystems.Conversion.ITypeConverter)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultConversionManager.Bind(Castle.MicroKernel.SubSystems.Conversion.ITypeConverterContext)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultConversionManager.PerformConversionOf1IConfiguration``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.Core.Configuration.IConfiguration,``0})">
            <summary>Sets the shim of DefaultConversionManager.PerformConversion(IConfiguration configuration)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultConversionManager.PerformConversionOf1String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,``0})">
            <summary>Sets the shim of DefaultConversionManager.PerformConversion(String value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultConversionManager.AddITypeConverter">
            <summary>Sets the shim of DefaultConversionManager.Add(ITypeConverter converter)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultConversionManager.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultConversionManager.CanHandleTypeType">
            <summary>Sets the shim of DefaultConversionManager.CanHandleType(Type type)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultConversionManager.CanHandleTypeTypeIConfiguration">
            <summary>Sets the shim of DefaultConversionManager.CanHandleType(Type type, IConfiguration configuration)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultConversionManager.CompositionGet">
            <summary>Sets the shim of DefaultConversionManager.get_Composition()</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultConversionManager.Constructor">
            <summary>Sets the shim of DefaultConversionManager.DefaultConversionManager()</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultConversionManager.ContextGet">
            <summary>Sets the shim of DefaultConversionManager.get_Context()</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultConversionManager.ContextSetITypeConverterContext">
            <summary>Sets the shim of DefaultConversionManager.set_Context(ITypeConverterContext value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultConversionManager.CurrentCreationContextGet">
            <summary>Sets the shim of DefaultConversionManager.get_CurrentCreationContext()</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultConversionManager.CurrentModelGet">
            <summary>Sets the shim of DefaultConversionManager.get_CurrentModel()</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultConversionManager.CurrentStackGet">
            <summary>Sets the shim of DefaultConversionManager.get_CurrentStack()</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultConversionManager.InitDefaultConverters">
            <summary>Sets the shim of DefaultConversionManager.InitDefaultConverters()</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultConversionManager.KernelCastleMicroKernelSubSystemsConversionITypeConverterContextget">
            <summary>Sets the shim of DefaultConversionManager.Castle.MicroKernel.SubSystems.Conversion.ITypeConverterContext.get_Kernel()</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultConversionManager.PerformConversionIConfigurationType">
            <summary>Sets the shim of DefaultConversionManager.PerformConversion(IConfiguration configuration, Type targetType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultConversionManager.PerformConversionStringType">
            <summary>Sets the shim of DefaultConversionManager.PerformConversion(String value, Type targetType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultConversionManager.Pop">
            <summary>Sets the shim of DefaultConversionManager.Pop()</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultConversionManager.PushComponentModelCreationContext">
            <summary>Sets the shim of DefaultConversionManager.Push(ComponentModel model, CreationContext context)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultConversionManager.StaticConstructor">
            <summary>Sets the shim of DefaultConversionManager.DefaultConversionManager()</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultConversionManager.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultConversionManager.AllInstances.PerformConversionOf1IConfiguration``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.SubSystems.Conversion.DefaultConversionManager,Castle.Core.Configuration.IConfiguration,``0})">
            <summary>Sets the shim of DefaultConversionManager.PerformConversion(IConfiguration configuration)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultConversionManager.AllInstances.PerformConversionOf1String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.SubSystems.Conversion.DefaultConversionManager,System.String,``0})">
            <summary>Sets the shim of DefaultConversionManager.PerformConversion(String value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultConversionManager.AllInstances.AddITypeConverter">
            <summary>Sets the shim of DefaultConversionManager.Add(ITypeConverter converter)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultConversionManager.AllInstances.CanHandleTypeType">
            <summary>Sets the shim of DefaultConversionManager.CanHandleType(Type type)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultConversionManager.AllInstances.CanHandleTypeTypeIConfiguration">
            <summary>Sets the shim of DefaultConversionManager.CanHandleType(Type type, IConfiguration configuration)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultConversionManager.AllInstances.CompositionGet">
            <summary>Sets the shim of DefaultConversionManager.get_Composition()</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultConversionManager.AllInstances.ContextGet">
            <summary>Sets the shim of DefaultConversionManager.get_Context()</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultConversionManager.AllInstances.ContextSetITypeConverterContext">
            <summary>Sets the shim of DefaultConversionManager.set_Context(ITypeConverterContext value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultConversionManager.AllInstances.CurrentCreationContextGet">
            <summary>Sets the shim of DefaultConversionManager.get_CurrentCreationContext()</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultConversionManager.AllInstances.CurrentModelGet">
            <summary>Sets the shim of DefaultConversionManager.get_CurrentModel()</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultConversionManager.AllInstances.CurrentStackGet">
            <summary>Sets the shim of DefaultConversionManager.get_CurrentStack()</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultConversionManager.AllInstances.InitDefaultConverters">
            <summary>Sets the shim of DefaultConversionManager.InitDefaultConverters()</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultConversionManager.AllInstances.KernelCastleMicroKernelSubSystemsConversionITypeConverterContextget">
            <summary>Sets the shim of DefaultConversionManager.Castle.MicroKernel.SubSystems.Conversion.ITypeConverterContext.get_Kernel()</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultConversionManager.AllInstances.PerformConversionIConfigurationType">
            <summary>Sets the shim of DefaultConversionManager.PerformConversion(IConfiguration configuration, Type targetType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultConversionManager.AllInstances.PerformConversionStringType">
            <summary>Sets the shim of DefaultConversionManager.PerformConversion(String value, Type targetType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultConversionManager.AllInstances.Pop">
            <summary>Sets the shim of DefaultConversionManager.Pop()</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultConversionManager.AllInstances.PushComponentModelCreationContext">
            <summary>Sets the shim of DefaultConversionManager.Push(ComponentModel model, CreationContext context)</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDictionaryConverter">
            <summary>Shim type of Castle.MicroKernel.SubSystems.Conversion.DictionaryConverter</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDictionaryConverter.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDictionaryConverter.#ctor(Castle.MicroKernel.SubSystems.Conversion.DictionaryConverter)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDictionaryConverter.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDictionaryConverter.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDictionaryConverter.Bind(Castle.MicroKernel.SubSystems.Conversion.ITypeConverter)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDictionaryConverter.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDictionaryConverter.CanHandleTypeType">
            <summary>Sets the shim of DictionaryConverter.CanHandleType(Type type)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDictionaryConverter.Constructor">
            <summary>Sets the shim of DictionaryConverter.DictionaryConverter()</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDictionaryConverter.PerformConversionIConfigurationType">
            <summary>Sets the shim of DictionaryConverter.PerformConversion(IConfiguration configuration, Type targetType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDictionaryConverter.PerformConversionStringType">
            <summary>Sets the shim of DictionaryConverter.PerformConversion(String value, Type targetType)</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDictionaryConverter.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDictionaryConverter.AllInstances.CanHandleTypeType">
            <summary>Sets the shim of DictionaryConverter.CanHandleType(Type type)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDictionaryConverter.AllInstances.PerformConversionIConfigurationType">
            <summary>Sets the shim of DictionaryConverter.PerformConversion(IConfiguration configuration, Type targetType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDictionaryConverter.AllInstances.PerformConversionStringType">
            <summary>Sets the shim of DictionaryConverter.PerformConversion(String value, Type targetType)</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimEnumConverter">
            <summary>Shim type of Castle.MicroKernel.SubSystems.Conversion.EnumConverter</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimEnumConverter.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimEnumConverter.#ctor(Castle.MicroKernel.SubSystems.Conversion.EnumConverter)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimEnumConverter.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimEnumConverter.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimEnumConverter.Bind(Castle.MicroKernel.SubSystems.Conversion.ITypeConverter)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimEnumConverter.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimEnumConverter.CanHandleTypeType">
            <summary>Sets the shim of EnumConverter.CanHandleType(Type type)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimEnumConverter.Constructor">
            <summary>Sets the shim of EnumConverter.EnumConverter()</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimEnumConverter.PerformConversionIConfigurationType">
            <summary>Sets the shim of EnumConverter.PerformConversion(IConfiguration configuration, Type targetType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimEnumConverter.PerformConversionStringType">
            <summary>Sets the shim of EnumConverter.PerformConversion(String value, Type targetType)</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimEnumConverter.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimEnumConverter.AllInstances.CanHandleTypeType">
            <summary>Sets the shim of EnumConverter.CanHandleType(Type type)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimEnumConverter.AllInstances.PerformConversionIConfigurationType">
            <summary>Sets the shim of EnumConverter.PerformConversion(IConfiguration configuration, Type targetType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimEnumConverter.AllInstances.PerformConversionStringType">
            <summary>Sets the shim of EnumConverter.PerformConversion(String value, Type targetType)</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimGenericDictionaryConverter">
            <summary>Shim type of Castle.MicroKernel.SubSystems.Conversion.GenericDictionaryConverter</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimGenericDictionaryConverter.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimGenericDictionaryConverter.#ctor(Castle.MicroKernel.SubSystems.Conversion.GenericDictionaryConverter)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimGenericDictionaryConverter.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimGenericDictionaryConverter.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimGenericDictionaryConverter.Bind(Castle.MicroKernel.SubSystems.Conversion.ITypeConverter)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimGenericDictionaryConverter.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimGenericDictionaryConverter.CanHandleTypeType">
            <summary>Sets the shim of GenericDictionaryConverter.CanHandleType(Type type)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimGenericDictionaryConverter.Constructor">
            <summary>Sets the shim of GenericDictionaryConverter.GenericDictionaryConverter()</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimGenericDictionaryConverter.PerformConversionIConfigurationType">
            <summary>Sets the shim of GenericDictionaryConverter.PerformConversion(IConfiguration configuration, Type targetType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimGenericDictionaryConverter.PerformConversionStringType">
            <summary>Sets the shim of GenericDictionaryConverter.PerformConversion(String value, Type targetType)</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimGenericDictionaryConverter.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimGenericDictionaryConverter.AllInstances.CanHandleTypeType">
            <summary>Sets the shim of GenericDictionaryConverter.CanHandleType(Type type)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimGenericDictionaryConverter.AllInstances.PerformConversionIConfigurationType">
            <summary>Sets the shim of GenericDictionaryConverter.PerformConversion(IConfiguration configuration, Type targetType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimGenericDictionaryConverter.AllInstances.PerformConversionStringType">
            <summary>Sets the shim of GenericDictionaryConverter.PerformConversion(String value, Type targetType)</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimGenericListConverter">
            <summary>Shim type of Castle.MicroKernel.SubSystems.Conversion.GenericListConverter</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimGenericListConverter.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimGenericListConverter.#ctor(Castle.MicroKernel.SubSystems.Conversion.GenericListConverter)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimGenericListConverter.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimGenericListConverter.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimGenericListConverter.Bind(Castle.MicroKernel.SubSystems.Conversion.ITypeConverter)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimGenericListConverter.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimGenericListConverter.CanHandleTypeType">
            <summary>Sets the shim of GenericListConverter.CanHandleType(Type type)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimGenericListConverter.Constructor">
            <summary>Sets the shim of GenericListConverter.GenericListConverter()</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimGenericListConverter.PerformConversionIConfigurationType">
            <summary>Sets the shim of GenericListConverter.PerformConversion(IConfiguration configuration, Type targetType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimGenericListConverter.PerformConversionStringType">
            <summary>Sets the shim of GenericListConverter.PerformConversion(String value, Type targetType)</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimGenericListConverter.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimGenericListConverter.AllInstances.CanHandleTypeType">
            <summary>Sets the shim of GenericListConverter.CanHandleType(Type type)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimGenericListConverter.AllInstances.PerformConversionIConfigurationType">
            <summary>Sets the shim of GenericListConverter.PerformConversion(IConfiguration configuration, Type targetType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimGenericListConverter.AllInstances.PerformConversionStringType">
            <summary>Sets the shim of GenericListConverter.PerformConversion(String value, Type targetType)</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimListConverter">
            <summary>Shim type of Castle.MicroKernel.SubSystems.Conversion.ListConverter</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimListConverter.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimListConverter.#ctor(Castle.MicroKernel.SubSystems.Conversion.ListConverter)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimListConverter.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimListConverter.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimListConverter.Bind(Castle.MicroKernel.SubSystems.Conversion.ITypeConverter)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimListConverter.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimListConverter.CanHandleTypeType">
            <summary>Sets the shim of ListConverter.CanHandleType(Type type)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimListConverter.Constructor">
            <summary>Sets the shim of ListConverter.ListConverter()</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimListConverter.GetConvertToTypeIConfiguration">
            <summary>Sets the shim of ListConverter.GetConvertToType(IConfiguration configuration)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimListConverter.PerformConversionIConfigurationType">
            <summary>Sets the shim of ListConverter.PerformConversion(IConfiguration configuration, Type targetType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimListConverter.PerformConversionStringType">
            <summary>Sets the shim of ListConverter.PerformConversion(String value, Type targetType)</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimListConverter.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimListConverter.AllInstances.CanHandleTypeType">
            <summary>Sets the shim of ListConverter.CanHandleType(Type type)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimListConverter.AllInstances.GetConvertToTypeIConfiguration">
            <summary>Sets the shim of ListConverter.GetConvertToType(IConfiguration configuration)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimListConverter.AllInstances.PerformConversionIConfigurationType">
            <summary>Sets the shim of ListConverter.PerformConversion(IConfiguration configuration, Type targetType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimListConverter.AllInstances.PerformConversionStringType">
            <summary>Sets the shim of ListConverter.PerformConversion(String value, Type targetType)</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimPrimitiveConverter">
            <summary>Shim type of Castle.MicroKernel.SubSystems.Conversion.PrimitiveConverter</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimPrimitiveConverter.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimPrimitiveConverter.#ctor(Castle.MicroKernel.SubSystems.Conversion.PrimitiveConverter)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimPrimitiveConverter.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimPrimitiveConverter.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimPrimitiveConverter.Bind(Castle.MicroKernel.SubSystems.Conversion.ITypeConverter)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimPrimitiveConverter.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimPrimitiveConverter.CanHandleTypeType">
            <summary>Sets the shim of PrimitiveConverter.CanHandleType(Type type)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimPrimitiveConverter.Constructor">
            <summary>Sets the shim of PrimitiveConverter.PrimitiveConverter()</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimPrimitiveConverter.PerformConversionIConfigurationType">
            <summary>Sets the shim of PrimitiveConverter.PerformConversion(IConfiguration configuration, Type targetType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimPrimitiveConverter.PerformConversionStringType">
            <summary>Sets the shim of PrimitiveConverter.PerformConversion(String value, Type targetType)</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimPrimitiveConverter.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimPrimitiveConverter.AllInstances.CanHandleTypeType">
            <summary>Sets the shim of PrimitiveConverter.CanHandleType(Type type)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimPrimitiveConverter.AllInstances.PerformConversionIConfigurationType">
            <summary>Sets the shim of PrimitiveConverter.PerformConversion(IConfiguration configuration, Type targetType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimPrimitiveConverter.AllInstances.PerformConversionStringType">
            <summary>Sets the shim of PrimitiveConverter.PerformConversion(String value, Type targetType)</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimSubSystemExtensions">
            <summary>Shim type of Castle.MicroKernel.SubSystems.Conversion.SubSystemExtensions</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimSubSystemExtensions.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimSubSystemExtensions.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimSubSystemExtensions.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimSubSystemExtensions.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimSubSystemExtensions.GetConversionManagerIKernel">
            <summary>Sets the shim of SubSystemExtensions.GetConversionManager(IKernel kernel)</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTimeSpanConverter">
            <summary>Shim type of Castle.MicroKernel.SubSystems.Conversion.TimeSpanConverter</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTimeSpanConverter.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTimeSpanConverter.#ctor(Castle.MicroKernel.SubSystems.Conversion.TimeSpanConverter)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTimeSpanConverter.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTimeSpanConverter.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTimeSpanConverter.Bind(Castle.MicroKernel.SubSystems.Conversion.ITypeConverter)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTimeSpanConverter.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTimeSpanConverter.CanHandleTypeType">
            <summary>Sets the shim of TimeSpanConverter.CanHandleType(Type type)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTimeSpanConverter.Constructor">
            <summary>Sets the shim of TimeSpanConverter.TimeSpanConverter()</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTimeSpanConverter.PerformConversionIConfigurationType">
            <summary>Sets the shim of TimeSpanConverter.PerformConversion(IConfiguration configuration, Type targetType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTimeSpanConverter.PerformConversionStringType">
            <summary>Sets the shim of TimeSpanConverter.PerformConversion(String value, Type targetType)</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTimeSpanConverter.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTimeSpanConverter.AllInstances.CanHandleTypeType">
            <summary>Sets the shim of TimeSpanConverter.CanHandleType(Type type)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTimeSpanConverter.AllInstances.PerformConversionIConfigurationType">
            <summary>Sets the shim of TimeSpanConverter.PerformConversion(IConfiguration configuration, Type targetType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTimeSpanConverter.AllInstances.PerformConversionStringType">
            <summary>Sets the shim of TimeSpanConverter.PerformConversion(String value, Type targetType)</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTypeName">
            <summary>Shim type of Castle.MicroKernel.SubSystems.Conversion.TypeName</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTypeName.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTypeName.#ctor(Castle.MicroKernel.SubSystems.Conversion.TypeName)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTypeName.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTypeName.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTypeName.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTypeName.ConstructorString">
            <summary>Sets the shim of TypeName.TypeName(String assemblyQualifiedName)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTypeName.ConstructorStringStringTypeNameArray">
            <summary>Sets the shim of TypeName.TypeName(String namespace, String name, TypeName[] genericTypes)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTypeName.ExtractAssemblyName">
            <summary>Sets the shim of TypeName.ExtractAssemblyName()</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTypeName.FullNameGet">
            <summary>Sets the shim of TypeName.get_FullName()</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTypeName.GetTypeTypeNameConverter">
            <summary>Sets the shim of TypeName.GetType(TypeNameConverter converter)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTypeName.HasGenericParametersGet">
            <summary>Sets the shim of TypeName.get_HasGenericParameters()</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTypeName.HasNamespaceGet">
            <summary>Sets the shim of TypeName.get_HasNamespace()</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTypeName.IsAssemblyQualifiedGet">
            <summary>Sets the shim of TypeName.get_IsAssemblyQualified()</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTypeName.NameGet">
            <summary>Sets the shim of TypeName.get_Name()</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTypeName._ExtractAssemblyNameb__0String">
            <summary>Sets the shim of TypeName.&lt;ExtractAssemblyName&gt;b__0(String s)</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTypeName.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTypeName.AllInstances.ExtractAssemblyName">
            <summary>Sets the shim of TypeName.ExtractAssemblyName()</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTypeName.AllInstances.FullNameGet">
            <summary>Sets the shim of TypeName.get_FullName()</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTypeName.AllInstances.GetTypeTypeNameConverter">
            <summary>Sets the shim of TypeName.GetType(TypeNameConverter converter)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTypeName.AllInstances.HasGenericParametersGet">
            <summary>Sets the shim of TypeName.get_HasGenericParameters()</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTypeName.AllInstances.HasNamespaceGet">
            <summary>Sets the shim of TypeName.get_HasNamespace()</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTypeName.AllInstances.IsAssemblyQualifiedGet">
            <summary>Sets the shim of TypeName.get_IsAssemblyQualified()</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTypeName.AllInstances.NameGet">
            <summary>Sets the shim of TypeName.get_Name()</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTypeNameConverter">
            <summary>Shim type of Castle.MicroKernel.SubSystems.Conversion.TypeNameConverter</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTypeNameConverter.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTypeNameConverter.#ctor(Castle.MicroKernel.SubSystems.Conversion.TypeNameConverter)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTypeNameConverter.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTypeNameConverter.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTypeNameConverter.Bind(Castle.MicroKernel.SubSystems.Conversion.ITypeConverter)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTypeNameConverter.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTypeNameConverter.CanHandleTypeType">
            <summary>Sets the shim of TypeNameConverter.CanHandleType(Type type)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTypeNameConverter.ConstructorITypeNameParser">
            <summary>Sets the shim of TypeNameConverter.TypeNameConverter(ITypeNameParser parser)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTypeNameConverter.GetTypeByFullNameString">
            <summary>Sets the shim of TypeNameConverter.GetTypeByFullName(String fullName)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTypeNameConverter.GetTypeByNameString">
            <summary>Sets the shim of TypeNameConverter.GetTypeByName(String justName)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTypeNameConverter.GetTypeString">
            <summary>Sets the shim of TypeNameConverter.GetType(String name)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTypeNameConverter.InitializeAppDomainAssembliesBoolean">
            <summary>Sets the shim of TypeNameConverter.InitializeAppDomainAssemblies(Boolean forceLoad)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTypeNameConverter.ParseNameString">
            <summary>Sets the shim of TypeNameConverter.ParseName(String name)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTypeNameConverter.PerformConversionIConfigurationType">
            <summary>Sets the shim of TypeNameConverter.PerformConversion(IConfiguration configuration, Type targetType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTypeNameConverter.PerformConversionStringType">
            <summary>Sets the shim of TypeNameConverter.PerformConversion(String value, Type targetType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTypeNameConverter.ScanAssembly">
            <summary>Sets the shim of TypeNameConverter.Scan(Assembly assembly)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTypeNameConverter.ShouldSkipAssemblyAssembly">
            <summary>Sets the shim of TypeNameConverter.ShouldSkipAssembly(Assembly assembly)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTypeNameConverter.StaticConstructor">
            <summary>Sets the shim of TypeNameConverter.TypeNameConverter()</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTypeNameConverter.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTypeNameConverter.AllInstances.CanHandleTypeType">
            <summary>Sets the shim of TypeNameConverter.CanHandleType(Type type)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTypeNameConverter.AllInstances.GetTypeByFullNameString">
            <summary>Sets the shim of TypeNameConverter.GetTypeByFullName(String fullName)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTypeNameConverter.AllInstances.GetTypeByNameString">
            <summary>Sets the shim of TypeNameConverter.GetTypeByName(String justName)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTypeNameConverter.AllInstances.GetTypeString">
            <summary>Sets the shim of TypeNameConverter.GetType(String name)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTypeNameConverter.AllInstances.InitializeAppDomainAssembliesBoolean">
            <summary>Sets the shim of TypeNameConverter.InitializeAppDomainAssemblies(Boolean forceLoad)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTypeNameConverter.AllInstances.ParseNameString">
            <summary>Sets the shim of TypeNameConverter.ParseName(String name)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTypeNameConverter.AllInstances.PerformConversionIConfigurationType">
            <summary>Sets the shim of TypeNameConverter.PerformConversion(IConfiguration configuration, Type targetType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTypeNameConverter.AllInstances.PerformConversionStringType">
            <summary>Sets the shim of TypeNameConverter.PerformConversion(String value, Type targetType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTypeNameConverter.AllInstances.ScanAssembly">
            <summary>Sets the shim of TypeNameConverter.Scan(Assembly assembly)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTypeNameConverter.AllInstances.ShouldSkipAssemblyAssembly">
            <summary>Sets the shim of TypeNameConverter.ShouldSkipAssembly(Assembly assembly)</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTypeNameParser">
            <summary>Shim type of Castle.MicroKernel.SubSystems.Conversion.TypeNameParser</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTypeNameParser.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTypeNameParser.#ctor(Castle.MicroKernel.SubSystems.Conversion.TypeNameParser)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTypeNameParser.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTypeNameParser.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTypeNameParser.Bind(Castle.MicroKernel.SubSystems.Conversion.ITypeNameParser)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTypeNameParser.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTypeNameParser.BuildNameStringTypeNameArray">
            <summary>Sets the shim of TypeNameParser.BuildName(String name, TypeName[] genericTypes)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTypeNameParser.Constructor">
            <summary>Sets the shim of TypeNameParser.TypeNameParser()</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTypeNameParser.MoveToBeginningInt32String">
            <summary>Sets the shim of TypeNameParser.MoveToBeginning(Int32 location, String text)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTypeNameParser.MoveToEndInt32String">
            <summary>Sets the shim of TypeNameParser.MoveToEnd(Int32 location, String text)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTypeNameParser.ParseNamesStringInt32">
            <summary>Sets the shim of TypeNameParser.ParseNames(String substring, Int32 count)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTypeNameParser.ParseString">
            <summary>Sets the shim of TypeNameParser.Parse(String name)</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTypeNameParser.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTypeNameParser.AllInstances.BuildNameStringTypeNameArray">
            <summary>Sets the shim of TypeNameParser.BuildName(String name, TypeName[] genericTypes)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTypeNameParser.AllInstances.MoveToBeginningInt32String">
            <summary>Sets the shim of TypeNameParser.MoveToBeginning(Int32 location, String text)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTypeNameParser.AllInstances.MoveToEndInt32String">
            <summary>Sets the shim of TypeNameParser.MoveToEnd(Int32 location, String text)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTypeNameParser.AllInstances.ParseNamesStringInt32">
            <summary>Sets the shim of TypeNameParser.ParseNames(String substring, Int32 count)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTypeNameParser.AllInstances.ParseString">
            <summary>Sets the shim of TypeNameParser.Parse(String name)</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubAbstractTypeConverter">
            <summary>Stub type of Castle.MicroKernel.SubSystems.Conversion.AbstractTypeConverter</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubAbstractTypeConverter.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubAbstractTypeConverter.CanHandleType(System.Type)">
            <summary>Sets the stub of AbstractTypeConverter.CanHandleType(Type type)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubAbstractTypeConverter.CanHandleType(System.Type,Castle.Core.Configuration.IConfiguration)">
            <summary>Sets the stub of AbstractTypeConverter.CanHandleType(Type type, IConfiguration configuration)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubAbstractTypeConverter.CanHandleTypeType">
            <summary>Sets the stub of AbstractTypeConverter.CanHandleType(Type type)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubAbstractTypeConverter.CanHandleTypeTypeIConfiguration">
            <summary>Sets the stub of AbstractTypeConverter.CanHandleType(Type type, IConfiguration configuration)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubAbstractTypeConverter.InitializeStub">
            <summary>Initializes a new instance of type StubAbstractTypeConverter</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubAbstractTypeConverter.PerformConversion(Castle.Core.Configuration.IConfiguration,System.Type)">
            <summary>Sets the stub of AbstractTypeConverter.PerformConversion(IConfiguration configuration, Type targetType)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubAbstractTypeConverter.PerformConversion(System.String,System.Type)">
            <summary>Sets the stub of AbstractTypeConverter.PerformConversion(String value, Type targetType)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubAbstractTypeConverter.PerformConversionIConfigurationType">
            <summary>Sets the stub of AbstractTypeConverter.PerformConversion(IConfiguration configuration, Type targetType)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubAbstractTypeConverter.PerformConversionStringType">
            <summary>Sets the stub of AbstractTypeConverter.PerformConversion(String value, Type targetType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubAbstractTypeConverter.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubAbstractTypeConverter.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubAbstractTypeConverter.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubArrayConverter">
            <summary>Stub type of Castle.MicroKernel.SubSystems.Conversion.ArrayConverter</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubArrayConverter.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubArrayConverter.CanHandleType(System.Type)">
            <summary>Sets the stub of ArrayConverter.CanHandleType(Type type)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubArrayConverter.CanHandleType(System.Type,Castle.Core.Configuration.IConfiguration)">
            <summary>Sets the stub of AbstractTypeConverter.CanHandleType(Type type, IConfiguration configuration)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubArrayConverter.CanHandleTypeType">
            <summary>Sets the stub of ArrayConverter.CanHandleType(Type type)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubArrayConverter.CanHandleTypeTypeIConfiguration">
            <summary>Sets the stub of AbstractTypeConverter.CanHandleType(Type type, IConfiguration configuration)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubArrayConverter.InitializeStub">
            <summary>Initializes a new instance of type StubArrayConverter</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubArrayConverter.PerformConversion(Castle.Core.Configuration.IConfiguration,System.Type)">
            <summary>Sets the stub of ArrayConverter.PerformConversion(IConfiguration configuration, Type targetType)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubArrayConverter.PerformConversion(System.String,System.Type)">
            <summary>Sets the stub of ArrayConverter.PerformConversion(String value, Type targetType)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubArrayConverter.PerformConversionIConfigurationType">
            <summary>Sets the stub of ArrayConverter.PerformConversion(IConfiguration configuration, Type targetType)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubArrayConverter.PerformConversionStringType">
            <summary>Sets the stub of ArrayConverter.PerformConversion(String value, Type targetType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubArrayConverter.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubArrayConverter.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubArrayConverter.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubAttributeAwareConverter">
            <summary>Stub type of Castle.MicroKernel.SubSystems.Conversion.AttributeAwareConverter</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubAttributeAwareConverter.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubAttributeAwareConverter.CanHandleType(System.Type)">
            <summary>Sets the stub of AttributeAwareConverter.CanHandleType(Type type)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubAttributeAwareConverter.CanHandleType(System.Type,Castle.Core.Configuration.IConfiguration)">
            <summary>Sets the stub of AbstractTypeConverter.CanHandleType(Type type, IConfiguration configuration)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubAttributeAwareConverter.CanHandleTypeType">
            <summary>Sets the stub of AttributeAwareConverter.CanHandleType(Type type)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubAttributeAwareConverter.CanHandleTypeTypeIConfiguration">
            <summary>Sets the stub of AbstractTypeConverter.CanHandleType(Type type, IConfiguration configuration)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubAttributeAwareConverter.InitializeStub">
            <summary>Initializes a new instance of type StubAttributeAwareConverter</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubAttributeAwareConverter.PerformConversion(Castle.Core.Configuration.IConfiguration,System.Type)">
            <summary>Sets the stub of AttributeAwareConverter.PerformConversion(IConfiguration configuration, Type targetType)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubAttributeAwareConverter.PerformConversion(System.String,System.Type)">
            <summary>Sets the stub of AttributeAwareConverter.PerformConversion(String value, Type targetType)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubAttributeAwareConverter.PerformConversionIConfigurationType">
            <summary>Sets the stub of AttributeAwareConverter.PerformConversion(IConfiguration configuration, Type targetType)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubAttributeAwareConverter.PerformConversionStringType">
            <summary>Sets the stub of AttributeAwareConverter.PerformConversion(String value, Type targetType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubAttributeAwareConverter.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubAttributeAwareConverter.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubAttributeAwareConverter.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubComponentConverter">
            <summary>Stub type of Castle.MicroKernel.SubSystems.Conversion.ComponentConverter</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubComponentConverter.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubComponentConverter.CanHandleType(System.Type)">
            <summary>Sets the stub of ComponentConverter.CanHandleType(Type type)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubComponentConverter.CanHandleType(System.Type,Castle.Core.Configuration.IConfiguration)">
            <summary>Sets the stub of ComponentConverter.CanHandleType(Type type, IConfiguration configuration)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubComponentConverter.CanHandleTypeType">
            <summary>Sets the stub of ComponentConverter.CanHandleType(Type type)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubComponentConverter.CanHandleTypeTypeIConfiguration">
            <summary>Sets the stub of ComponentConverter.CanHandleType(Type type, IConfiguration configuration)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubComponentConverter.InitializeStub">
            <summary>Initializes a new instance of type StubComponentConverter</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubComponentConverter.PerformConversion(Castle.Core.Configuration.IConfiguration,System.Type)">
            <summary>Sets the stub of ComponentConverter.PerformConversion(IConfiguration configuration, Type targetType)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubComponentConverter.PerformConversion(System.String,System.Type)">
            <summary>Sets the stub of ComponentConverter.PerformConversion(String value, Type targetType)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubComponentConverter.PerformConversionIConfigurationType">
            <summary>Sets the stub of ComponentConverter.PerformConversion(IConfiguration configuration, Type targetType)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubComponentConverter.PerformConversionStringType">
            <summary>Sets the stub of ComponentConverter.PerformConversion(String value, Type targetType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubComponentConverter.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubComponentConverter.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubComponentConverter.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubComponentModelConverter">
            <summary>Stub type of Castle.MicroKernel.SubSystems.Conversion.ComponentModelConverter</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubComponentModelConverter.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubComponentModelConverter.CanHandleType(System.Type)">
            <summary>Sets the stub of ComponentModelConverter.CanHandleType(Type type)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubComponentModelConverter.CanHandleType(System.Type,Castle.Core.Configuration.IConfiguration)">
            <summary>Sets the stub of AbstractTypeConverter.CanHandleType(Type type, IConfiguration configuration)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubComponentModelConverter.CanHandleTypeType">
            <summary>Sets the stub of ComponentModelConverter.CanHandleType(Type type)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubComponentModelConverter.CanHandleTypeTypeIConfiguration">
            <summary>Sets the stub of AbstractTypeConverter.CanHandleType(Type type, IConfiguration configuration)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubComponentModelConverter.InitializeStub">
            <summary>Initializes a new instance of type StubComponentModelConverter</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubComponentModelConverter.PerformConversion(Castle.Core.Configuration.IConfiguration,System.Type)">
            <summary>Sets the stub of ComponentModelConverter.PerformConversion(IConfiguration configuration, Type targetType)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubComponentModelConverter.PerformConversion(System.String,System.Type)">
            <summary>Sets the stub of ComponentModelConverter.PerformConversion(String value, Type targetType)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubComponentModelConverter.PerformConversionIConfigurationType">
            <summary>Sets the stub of ComponentModelConverter.PerformConversion(IConfiguration configuration, Type targetType)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubComponentModelConverter.PerformConversionStringType">
            <summary>Sets the stub of ComponentModelConverter.PerformConversion(String value, Type targetType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubComponentModelConverter.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubComponentModelConverter.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubComponentModelConverter.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubConverterException">
            <summary>Stub type of Castle.MicroKernel.SubSystems.Conversion.ConverterException</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubConverterException.#ctor(System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubConverterException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubConverterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubConverterException.AttachBackingFieldToHelpLink">
            <summary>Attaches delegates to emulate StubConverterException.HelpLink as a property with a backing field.</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubConverterException.AttachBackingFieldToSource">
            <summary>Attaches delegates to emulate StubConverterException.Source as a property with a backing field.</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubConverterException.DataGet">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubConverterException.GetBaseException">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubConverterException.GetBaseException01">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubConverterException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubConverterException.GetObjectDataSerializationInfoStreamingContext">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubConverterException.HelpLinkGet">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubConverterException.HelpLinkSetString">
            <summary>Sets the stub of Exception.set_HelpLink(String value)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubConverterException.InitializeStub">
            <summary>Initializes a new instance of type StubConverterException</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubConverterException.MessageGet">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubConverterException.SourceGet">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubConverterException.SourceSetString">
            <summary>Sets the stub of Exception.set_Source(String value)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubConverterException.StackTraceGet">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubConverterException.ToString">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubConverterException.ToString01">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubConverterException.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubConverterException.Data">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubConverterException.HelpLink">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubConverterException.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubConverterException.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubConverterException.Message">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubConverterException.Source">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubConverterException.StackTrace">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubConvertibleAttribute">
            <summary>Stub type of Castle.MicroKernel.SubSystems.Conversion.ConvertibleAttribute</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubConvertibleAttribute.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubConvertibleAttribute.#ctor(System.Type)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubConvertibleAttribute.Equals(System.Object)">
            <summary>Sets the stub of Attribute.Equals(Object obj)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubConvertibleAttribute.EqualsObject">
            <summary>Sets the stub of Attribute.Equals(Object obj)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubConvertibleAttribute.GetHashCode">
            <summary>Sets the stub of Attribute.GetHashCode()</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubConvertibleAttribute.GetHashCode01">
            <summary>Sets the stub of Attribute.GetHashCode()</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubConvertibleAttribute.InitializeStub">
            <summary>Initializes a new instance of type StubConvertibleAttribute</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubConvertibleAttribute.IsDefaultAttribute">
            <summary>Sets the stub of Attribute.IsDefaultAttribute()</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubConvertibleAttribute.IsDefaultAttribute01">
            <summary>Sets the stub of Attribute.IsDefaultAttribute()</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubConvertibleAttribute.Match(System.Object)">
            <summary>Sets the stub of Attribute.Match(Object obj)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubConvertibleAttribute.MatchObject">
            <summary>Sets the stub of Attribute.Match(Object obj)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubConvertibleAttribute.TypeIdGet">
            <summary>Sets the stub of Attribute.get_TypeId()</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubConvertibleAttribute.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubConvertibleAttribute.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubConvertibleAttribute.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubConvertibleAttribute.TypeId">
            <summary>Sets the stub of Attribute.get_TypeId()</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubDefaultComplexConverter">
            <summary>Stub type of Castle.MicroKernel.SubSystems.Conversion.DefaultComplexConverter</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubDefaultComplexConverter.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubDefaultComplexConverter.CanHandleType(System.Type)">
            <summary>Sets the stub of DefaultComplexConverter.CanHandleType(Type type)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubDefaultComplexConverter.CanHandleType(System.Type,Castle.Core.Configuration.IConfiguration)">
            <summary>Sets the stub of AbstractTypeConverter.CanHandleType(Type type, IConfiguration configuration)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubDefaultComplexConverter.CanHandleTypeType">
            <summary>Sets the stub of DefaultComplexConverter.CanHandleType(Type type)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubDefaultComplexConverter.CanHandleTypeTypeIConfiguration">
            <summary>Sets the stub of AbstractTypeConverter.CanHandleType(Type type, IConfiguration configuration)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubDefaultComplexConverter.InitializeStub">
            <summary>Initializes a new instance of type StubDefaultComplexConverter</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubDefaultComplexConverter.PerformConversion(Castle.Core.Configuration.IConfiguration,System.Type)">
            <summary>Sets the stub of DefaultComplexConverter.PerformConversion(IConfiguration configuration, Type targetType)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubDefaultComplexConverter.PerformConversion(System.String,System.Type)">
            <summary>Sets the stub of DefaultComplexConverter.PerformConversion(String value, Type targetType)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubDefaultComplexConverter.PerformConversionIConfigurationType">
            <summary>Sets the stub of DefaultComplexConverter.PerformConversion(IConfiguration configuration, Type targetType)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubDefaultComplexConverter.PerformConversionStringType">
            <summary>Sets the stub of DefaultComplexConverter.PerformConversion(String value, Type targetType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubDefaultComplexConverter.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubDefaultComplexConverter.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubDefaultComplexConverter.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubDefaultConversionManager">
            <summary>Stub type of Castle.MicroKernel.SubSystems.Conversion.DefaultConversionManager</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubDefaultConversionManager.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubDefaultConversionManager.Init(Castle.MicroKernel.IKernelInternal)">
            <summary>Sets the stub of AbstractSubSystem.Init(IKernelInternal kernel)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubDefaultConversionManager.InitDefaultConverters">
            <summary>Sets the stub of DefaultConversionManager.InitDefaultConverters()</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubDefaultConversionManager.InitDefaultConverters01">
            <summary>Sets the stub of DefaultConversionManager.InitDefaultConverters()</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubDefaultConversionManager.InitIKernelInternal">
            <summary>Sets the stub of AbstractSubSystem.Init(IKernelInternal kernel)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubDefaultConversionManager.InitializeLifetimeService">
            <summary>Sets the stub of AbstractSubSystem.InitializeLifetimeService()</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubDefaultConversionManager.InitializeLifetimeService01">
            <summary>Sets the stub of AbstractSubSystem.InitializeLifetimeService()</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubDefaultConversionManager.InitializeStub">
            <summary>Initializes a new instance of type StubDefaultConversionManager</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubDefaultConversionManager.Terminate">
            <summary>Sets the stub of AbstractSubSystem.Terminate()</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubDefaultConversionManager.Terminate01">
            <summary>Sets the stub of AbstractSubSystem.Terminate()</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubDefaultConversionManager.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubDefaultConversionManager.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubDefaultConversionManager.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubDictionaryConverter">
            <summary>Stub type of Castle.MicroKernel.SubSystems.Conversion.DictionaryConverter</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubDictionaryConverter.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubDictionaryConverter.CanHandleType(System.Type)">
            <summary>Sets the stub of DictionaryConverter.CanHandleType(Type type)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubDictionaryConverter.CanHandleType(System.Type,Castle.Core.Configuration.IConfiguration)">
            <summary>Sets the stub of AbstractTypeConverter.CanHandleType(Type type, IConfiguration configuration)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubDictionaryConverter.CanHandleTypeType">
            <summary>Sets the stub of DictionaryConverter.CanHandleType(Type type)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubDictionaryConverter.CanHandleTypeTypeIConfiguration">
            <summary>Sets the stub of AbstractTypeConverter.CanHandleType(Type type, IConfiguration configuration)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubDictionaryConverter.InitializeStub">
            <summary>Initializes a new instance of type StubDictionaryConverter</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubDictionaryConverter.PerformConversion(Castle.Core.Configuration.IConfiguration,System.Type)">
            <summary>Sets the stub of DictionaryConverter.PerformConversion(IConfiguration configuration, Type targetType)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubDictionaryConverter.PerformConversion(System.String,System.Type)">
            <summary>Sets the stub of DictionaryConverter.PerformConversion(String value, Type targetType)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubDictionaryConverter.PerformConversionIConfigurationType">
            <summary>Sets the stub of DictionaryConverter.PerformConversion(IConfiguration configuration, Type targetType)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubDictionaryConverter.PerformConversionStringType">
            <summary>Sets the stub of DictionaryConverter.PerformConversion(String value, Type targetType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubDictionaryConverter.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubDictionaryConverter.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubDictionaryConverter.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubEnumConverter">
            <summary>Stub type of Castle.MicroKernel.SubSystems.Conversion.EnumConverter</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubEnumConverter.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubEnumConverter.CanHandleType(System.Type)">
            <summary>Sets the stub of EnumConverter.CanHandleType(Type type)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubEnumConverter.CanHandleType(System.Type,Castle.Core.Configuration.IConfiguration)">
            <summary>Sets the stub of AbstractTypeConverter.CanHandleType(Type type, IConfiguration configuration)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubEnumConverter.CanHandleTypeType">
            <summary>Sets the stub of EnumConverter.CanHandleType(Type type)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubEnumConverter.CanHandleTypeTypeIConfiguration">
            <summary>Sets the stub of AbstractTypeConverter.CanHandleType(Type type, IConfiguration configuration)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubEnumConverter.InitializeStub">
            <summary>Initializes a new instance of type StubEnumConverter</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubEnumConverter.PerformConversion(Castle.Core.Configuration.IConfiguration,System.Type)">
            <summary>Sets the stub of EnumConverter.PerformConversion(IConfiguration configuration, Type targetType)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubEnumConverter.PerformConversion(System.String,System.Type)">
            <summary>Sets the stub of EnumConverter.PerformConversion(String value, Type targetType)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubEnumConverter.PerformConversionIConfigurationType">
            <summary>Sets the stub of EnumConverter.PerformConversion(IConfiguration configuration, Type targetType)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubEnumConverter.PerformConversionStringType">
            <summary>Sets the stub of EnumConverter.PerformConversion(String value, Type targetType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubEnumConverter.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubEnumConverter.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubEnumConverter.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubGenericDictionaryConverter">
            <summary>Stub type of Castle.MicroKernel.SubSystems.Conversion.GenericDictionaryConverter</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubGenericDictionaryConverter.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubGenericDictionaryConverter.CanHandleType(System.Type)">
            <summary>Sets the stub of GenericDictionaryConverter.CanHandleType(Type type)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubGenericDictionaryConverter.CanHandleType(System.Type,Castle.Core.Configuration.IConfiguration)">
            <summary>Sets the stub of AbstractTypeConverter.CanHandleType(Type type, IConfiguration configuration)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubGenericDictionaryConverter.CanHandleTypeType">
            <summary>Sets the stub of GenericDictionaryConverter.CanHandleType(Type type)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubGenericDictionaryConverter.CanHandleTypeTypeIConfiguration">
            <summary>Sets the stub of AbstractTypeConverter.CanHandleType(Type type, IConfiguration configuration)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubGenericDictionaryConverter.InitializeStub">
            <summary>Initializes a new instance of type StubGenericDictionaryConverter</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubGenericDictionaryConverter.PerformConversion(Castle.Core.Configuration.IConfiguration,System.Type)">
            <summary>Sets the stub of GenericDictionaryConverter.PerformConversion(IConfiguration configuration, Type targetType)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubGenericDictionaryConverter.PerformConversion(System.String,System.Type)">
            <summary>Sets the stub of GenericDictionaryConverter.PerformConversion(String value, Type targetType)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubGenericDictionaryConverter.PerformConversionIConfigurationType">
            <summary>Sets the stub of GenericDictionaryConverter.PerformConversion(IConfiguration configuration, Type targetType)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubGenericDictionaryConverter.PerformConversionStringType">
            <summary>Sets the stub of GenericDictionaryConverter.PerformConversion(String value, Type targetType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubGenericDictionaryConverter.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubGenericDictionaryConverter.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubGenericDictionaryConverter.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubGenericListConverter">
            <summary>Stub type of Castle.MicroKernel.SubSystems.Conversion.GenericListConverter</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubGenericListConverter.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubGenericListConverter.CanHandleType(System.Type)">
            <summary>Sets the stub of GenericListConverter.CanHandleType(Type type)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubGenericListConverter.CanHandleType(System.Type,Castle.Core.Configuration.IConfiguration)">
            <summary>Sets the stub of AbstractTypeConverter.CanHandleType(Type type, IConfiguration configuration)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubGenericListConverter.CanHandleTypeType">
            <summary>Sets the stub of GenericListConverter.CanHandleType(Type type)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubGenericListConverter.CanHandleTypeTypeIConfiguration">
            <summary>Sets the stub of AbstractTypeConverter.CanHandleType(Type type, IConfiguration configuration)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubGenericListConverter.InitializeStub">
            <summary>Initializes a new instance of type StubGenericListConverter</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubGenericListConverter.PerformConversion(Castle.Core.Configuration.IConfiguration,System.Type)">
            <summary>Sets the stub of GenericListConverter.PerformConversion(IConfiguration configuration, Type targetType)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubGenericListConverter.PerformConversion(System.String,System.Type)">
            <summary>Sets the stub of GenericListConverter.PerformConversion(String value, Type targetType)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubGenericListConverter.PerformConversionIConfigurationType">
            <summary>Sets the stub of GenericListConverter.PerformConversion(IConfiguration configuration, Type targetType)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubGenericListConverter.PerformConversionStringType">
            <summary>Sets the stub of GenericListConverter.PerformConversion(String value, Type targetType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubGenericListConverter.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubGenericListConverter.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubGenericListConverter.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubIConversionManager">
            <summary>Stub type of Castle.MicroKernel.SubSystems.Conversion.IConversionManager</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubIConversionManager.#ctor">
            <summary>Initializes a new instance of type StubIConversionManager</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubIConversionManager.AddITypeConverter">
            <summary>Sets the stub of IConversionManager.Add(ITypeConverter converter)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubIConversionManager.AttachBackingFieldToContext">
            <summary>Attaches delegates to emulate StubIConversionManager.Context as a property with a backing field.</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubIConversionManager.CanHandleTypeType">
            <summary>Sets the stub of ITypeConverter.CanHandleType(Type type)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubIConversionManager.CanHandleTypeTypeIConfiguration">
            <summary>Sets the stub of ITypeConverter.CanHandleType(Type type, IConfiguration configuration)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubIConversionManager.cw::Castle#MicroKernel#ISubSystem#Init(Castle.MicroKernel.IKernelInternal)">
            <summary>Sets the stub of ISubSystem.Init(IKernelInternal kernel)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubIConversionManager.cw::Castle#MicroKernel#ISubSystem#Terminate">
            <summary>Sets the stub of ISubSystem.Terminate()</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubIConversionManager.cw::Castle#MicroKernel#SubSystems#Conversion#IConversionManager#Add(Castle.MicroKernel.SubSystems.Conversion.ITypeConverter)">
            <summary>Sets the stub of IConversionManager.Add(ITypeConverter converter)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubIConversionManager.cw::Castle#MicroKernel#SubSystems#Conversion#ITypeConverter#CanHandleType(System.Type)">
            <summary>Sets the stub of ITypeConverter.CanHandleType(Type type)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubIConversionManager.cw::Castle#MicroKernel#SubSystems#Conversion#ITypeConverter#CanHandleType(System.Type,Castle.Core.Configuration.IConfiguration)">
            <summary>Sets the stub of ITypeConverter.CanHandleType(Type type, IConfiguration configuration)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubIConversionManager.cw::Castle#MicroKernel#SubSystems#Conversion#ITypeConverter#PerformConversion(Castle.Core.Configuration.IConfiguration,System.Type)">
            <summary>Sets the stub of ITypeConverter.PerformConversion(IConfiguration configuration, Type targetType)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubIConversionManager.cw::Castle#MicroKernel#SubSystems#Conversion#ITypeConverter#PerformConversion(System.String,System.Type)">
            <summary>Sets the stub of ITypeConverter.PerformConversion(String value, Type targetType)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubIConversionManager.cw::Castle#MicroKernel#SubSystems#Conversion#ITypeConverter#PerformConversion``1(Castle.Core.Configuration.IConfiguration)">
            <summary>Sets the stub of ITypeConverter.PerformConversion(IConfiguration configuration)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubIConversionManager.cw::Castle#MicroKernel#SubSystems#Conversion#ITypeConverter#PerformConversion``1(System.String)">
            <summary>Sets the stub of ITypeConverter.PerformConversion(String value)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubIConversionManager.ContextGet">
            <summary>Sets the stub of ITypeConverter.get_Context()</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubIConversionManager.ContextSetITypeConverterContext">
            <summary>Sets the stub of ITypeConverter.set_Context(ITypeConverterContext value)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubIConversionManager.InitIKernelInternal">
            <summary>Sets the stub of ISubSystem.Init(IKernelInternal kernel)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubIConversionManager.PerformConversionIConfigurationType">
            <summary>Sets the stub of ITypeConverter.PerformConversion(IConfiguration configuration, Type targetType)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubIConversionManager.PerformConversionOf1IConfiguration``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.Core.Configuration.IConfiguration,``0})">
            <summary>Sets stubs of PerformConversion(IConfiguration configuration)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubIConversionManager.PerformConversionOf1String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,``0})">
            <summary>Sets stubs of PerformConversion(String value)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubIConversionManager.PerformConversionStringType">
            <summary>Sets the stub of ITypeConverter.PerformConversion(String value, Type targetType)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubIConversionManager.Terminate">
            <summary>Sets the stub of ISubSystem.Terminate()</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubIConversionManager.cw::Castle#MicroKernel#SubSystems#Conversion#ITypeConverter#Context">
            <summary>Sets the stub of ITypeConverter.get_Context()</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubIGenericCollectionConverterHelper">
            <summary>Stub type of Castle.MicroKernel.SubSystems.Conversion.IGenericCollectionConverterHelper</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubIGenericCollectionConverterHelper.#ctor">
            <summary>Initializes a new instance of type StubIGenericCollectionConverterHelper</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubIGenericCollectionConverterHelper.cw::Castle#MicroKernel#SubSystems#Conversion#IGenericCollectionConverterHelper#ConvertConfigurationToCollection(Castle.Core.Configuration.IConfiguration)">
            <summary>Sets the stub of IGenericCollectionConverterHelper.ConvertConfigurationToCollection(IConfiguration configuration)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubIGenericCollectionConverterHelper.ConvertConfigurationToCollectionIConfiguration">
            <summary>Sets the stub of IGenericCollectionConverterHelper.ConvertConfigurationToCollection(IConfiguration configuration)</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubIKernelDependentConverter">
            <summary>Stub type of Castle.MicroKernel.SubSystems.Conversion.IKernelDependentConverter</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubIKernelDependentConverter.#ctor">
            <summary>Initializes a new instance of type StubIKernelDependentConverter</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubITypeConverter">
            <summary>Stub type of Castle.MicroKernel.SubSystems.Conversion.ITypeConverter</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubITypeConverter.#ctor">
            <summary>Initializes a new instance of type StubITypeConverter</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubITypeConverter.AttachBackingFieldToContext">
            <summary>Attaches delegates to emulate StubITypeConverter.Context as a property with a backing field.</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubITypeConverter.CanHandleTypeType">
            <summary>Sets the stub of ITypeConverter.CanHandleType(Type type)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubITypeConverter.CanHandleTypeTypeIConfiguration">
            <summary>Sets the stub of ITypeConverter.CanHandleType(Type type, IConfiguration configuration)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubITypeConverter.cw::Castle#MicroKernel#SubSystems#Conversion#ITypeConverter#CanHandleType(System.Type)">
            <summary>Sets the stub of ITypeConverter.CanHandleType(Type type)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubITypeConverter.cw::Castle#MicroKernel#SubSystems#Conversion#ITypeConverter#CanHandleType(System.Type,Castle.Core.Configuration.IConfiguration)">
            <summary>Sets the stub of ITypeConverter.CanHandleType(Type type, IConfiguration configuration)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubITypeConverter.cw::Castle#MicroKernel#SubSystems#Conversion#ITypeConverter#PerformConversion(System.String,System.Type)">
            <summary>Sets the stub of ITypeConverter.PerformConversion(String value, Type targetType)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubITypeConverter.cw::Castle#MicroKernel#SubSystems#Conversion#ITypeConverter#PerformConversion``1(Castle.Core.Configuration.IConfiguration)">
            <summary>Sets the stub of ITypeConverter.PerformConversion(IConfiguration configuration)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubITypeConverter.cw::Castle#MicroKernel#SubSystems#Conversion#ITypeConverter#PerformConversion(Castle.Core.Configuration.IConfiguration,System.Type)">
            <summary>Sets the stub of ITypeConverter.PerformConversion(IConfiguration configuration, Type targetType)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubITypeConverter.cw::Castle#MicroKernel#SubSystems#Conversion#ITypeConverter#PerformConversion``1(System.String)">
            <summary>Sets the stub of ITypeConverter.PerformConversion(String value)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubITypeConverter.ContextGet">
            <summary>Sets the stub of ITypeConverter.get_Context()</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubITypeConverter.ContextSetITypeConverterContext">
            <summary>Sets the stub of ITypeConverter.set_Context(ITypeConverterContext value)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubITypeConverter.PerformConversionIConfigurationType">
            <summary>Sets the stub of ITypeConverter.PerformConversion(IConfiguration configuration, Type targetType)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubITypeConverter.PerformConversionOf1IConfiguration``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.Core.Configuration.IConfiguration,``0})">
            <summary>Sets stubs of PerformConversion(IConfiguration configuration)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubITypeConverter.PerformConversionOf1String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,``0})">
            <summary>Sets stubs of PerformConversion(String value)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubITypeConverter.PerformConversionStringType">
            <summary>Sets the stub of ITypeConverter.PerformConversion(String value, Type targetType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubITypeConverter.cw::Castle#MicroKernel#SubSystems#Conversion#ITypeConverter#Context">
            <summary>Sets the stub of ITypeConverter.get_Context()</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubITypeConverterContext">
            <summary>Stub type of Castle.MicroKernel.SubSystems.Conversion.ITypeConverterContext</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubITypeConverterContext.#ctor">
            <summary>Initializes a new instance of type StubITypeConverterContext</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubITypeConverterContext.cw::Castle#MicroKernel#SubSystems#Conversion#ITypeConverterContext#Pop">
            <summary>Sets the stub of ITypeConverterContext.Pop()</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubITypeConverterContext.cw::Castle#MicroKernel#SubSystems#Conversion#ITypeConverterContext#Push(Castle.Core.ComponentModel,Castle.MicroKernel.Context.CreationContext)">
            <summary>Sets the stub of ITypeConverterContext.Push(ComponentModel model, CreationContext context)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubITypeConverterContext.CompositionGet">
            <summary>Sets the stub of ITypeConverterContext.get_Composition()</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubITypeConverterContext.CurrentCreationContextGet">
            <summary>Sets the stub of ITypeConverterContext.get_CurrentCreationContext()</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubITypeConverterContext.CurrentModelGet">
            <summary>Sets the stub of ITypeConverterContext.get_CurrentModel()</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubITypeConverterContext.KernelGet">
            <summary>Sets the stub of ITypeConverterContext.get_Kernel()</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubITypeConverterContext.Pop">
            <summary>Sets the stub of ITypeConverterContext.Pop()</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubITypeConverterContext.PushComponentModelCreationContext">
            <summary>Sets the stub of ITypeConverterContext.Push(ComponentModel model, CreationContext context)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubITypeConverterContext.cw::Castle#MicroKernel#SubSystems#Conversion#ITypeConverterContext#Composition">
            <summary>Sets the stub of ITypeConverterContext.get_Composition()</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubITypeConverterContext.cw::Castle#MicroKernel#SubSystems#Conversion#ITypeConverterContext#CurrentCreationContext">
            <summary>Sets the stub of ITypeConverterContext.get_CurrentCreationContext()</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubITypeConverterContext.cw::Castle#MicroKernel#SubSystems#Conversion#ITypeConverterContext#CurrentModel">
            <summary>Sets the stub of ITypeConverterContext.get_CurrentModel()</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubITypeConverterContext.cw::Castle#MicroKernel#SubSystems#Conversion#ITypeConverterContext#Kernel">
            <summary>Sets the stub of ITypeConverterContext.get_Kernel()</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubITypeNameParser">
            <summary>Stub type of Castle.MicroKernel.SubSystems.Conversion.ITypeNameParser</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubITypeNameParser.#ctor">
            <summary>Initializes a new instance of type StubITypeNameParser</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubITypeNameParser.cw::Castle#MicroKernel#SubSystems#Conversion#ITypeNameParser#Parse(System.String)">
            <summary>Sets the stub of ITypeNameParser.Parse(String name)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubITypeNameParser.ParseString">
            <summary>Sets the stub of ITypeNameParser.Parse(String name)</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubListConverter">
            <summary>Stub type of Castle.MicroKernel.SubSystems.Conversion.ListConverter</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubListConverter.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubListConverter.CanHandleType(System.Type)">
            <summary>Sets the stub of ListConverter.CanHandleType(Type type)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubListConverter.CanHandleType(System.Type,Castle.Core.Configuration.IConfiguration)">
            <summary>Sets the stub of AbstractTypeConverter.CanHandleType(Type type, IConfiguration configuration)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubListConverter.CanHandleTypeType">
            <summary>Sets the stub of ListConverter.CanHandleType(Type type)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubListConverter.CanHandleTypeTypeIConfiguration">
            <summary>Sets the stub of AbstractTypeConverter.CanHandleType(Type type, IConfiguration configuration)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubListConverter.InitializeStub">
            <summary>Initializes a new instance of type StubListConverter</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubListConverter.PerformConversion(Castle.Core.Configuration.IConfiguration,System.Type)">
            <summary>Sets the stub of ListConverter.PerformConversion(IConfiguration configuration, Type targetType)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubListConverter.PerformConversion(System.String,System.Type)">
            <summary>Sets the stub of ListConverter.PerformConversion(String value, Type targetType)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubListConverter.PerformConversionIConfigurationType">
            <summary>Sets the stub of ListConverter.PerformConversion(IConfiguration configuration, Type targetType)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubListConverter.PerformConversionStringType">
            <summary>Sets the stub of ListConverter.PerformConversion(String value, Type targetType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubListConverter.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubListConverter.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubListConverter.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubPrimitiveConverter">
            <summary>Stub type of Castle.MicroKernel.SubSystems.Conversion.PrimitiveConverter</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubPrimitiveConverter.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubPrimitiveConverter.CanHandleType(System.Type)">
            <summary>Sets the stub of PrimitiveConverter.CanHandleType(Type type)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubPrimitiveConverter.CanHandleType(System.Type,Castle.Core.Configuration.IConfiguration)">
            <summary>Sets the stub of AbstractTypeConverter.CanHandleType(Type type, IConfiguration configuration)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubPrimitiveConverter.CanHandleTypeType">
            <summary>Sets the stub of PrimitiveConverter.CanHandleType(Type type)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubPrimitiveConverter.CanHandleTypeTypeIConfiguration">
            <summary>Sets the stub of AbstractTypeConverter.CanHandleType(Type type, IConfiguration configuration)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubPrimitiveConverter.InitializeStub">
            <summary>Initializes a new instance of type StubPrimitiveConverter</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubPrimitiveConverter.PerformConversion(Castle.Core.Configuration.IConfiguration,System.Type)">
            <summary>Sets the stub of PrimitiveConverter.PerformConversion(IConfiguration configuration, Type targetType)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubPrimitiveConverter.PerformConversion(System.String,System.Type)">
            <summary>Sets the stub of PrimitiveConverter.PerformConversion(String value, Type targetType)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubPrimitiveConverter.PerformConversionIConfigurationType">
            <summary>Sets the stub of PrimitiveConverter.PerformConversion(IConfiguration configuration, Type targetType)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubPrimitiveConverter.PerformConversionStringType">
            <summary>Sets the stub of PrimitiveConverter.PerformConversion(String value, Type targetType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubPrimitiveConverter.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubPrimitiveConverter.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubPrimitiveConverter.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubTimeSpanConverter">
            <summary>Stub type of Castle.MicroKernel.SubSystems.Conversion.TimeSpanConverter</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubTimeSpanConverter.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubTimeSpanConverter.CanHandleType(System.Type)">
            <summary>Sets the stub of TimeSpanConverter.CanHandleType(Type type)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubTimeSpanConverter.CanHandleType(System.Type,Castle.Core.Configuration.IConfiguration)">
            <summary>Sets the stub of AbstractTypeConverter.CanHandleType(Type type, IConfiguration configuration)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubTimeSpanConverter.CanHandleTypeType">
            <summary>Sets the stub of TimeSpanConverter.CanHandleType(Type type)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubTimeSpanConverter.CanHandleTypeTypeIConfiguration">
            <summary>Sets the stub of AbstractTypeConverter.CanHandleType(Type type, IConfiguration configuration)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubTimeSpanConverter.InitializeStub">
            <summary>Initializes a new instance of type StubTimeSpanConverter</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubTimeSpanConverter.PerformConversion(Castle.Core.Configuration.IConfiguration,System.Type)">
            <summary>Sets the stub of TimeSpanConverter.PerformConversion(IConfiguration configuration, Type targetType)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubTimeSpanConverter.PerformConversion(System.String,System.Type)">
            <summary>Sets the stub of TimeSpanConverter.PerformConversion(String value, Type targetType)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubTimeSpanConverter.PerformConversionIConfigurationType">
            <summary>Sets the stub of TimeSpanConverter.PerformConversion(IConfiguration configuration, Type targetType)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubTimeSpanConverter.PerformConversionStringType">
            <summary>Sets the stub of TimeSpanConverter.PerformConversion(String value, Type targetType)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubTimeSpanConverter.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubTimeSpanConverter.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubTimeSpanConverter.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubTypeName">
            <summary>Stub type of Castle.MicroKernel.SubSystems.Conversion.TypeName</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubTypeName.#ctor(System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubTypeName.#ctor(System.String,System.String,Castle.MicroKernel.SubSystems.Conversion.TypeName[])">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubTypeName.InitializeStub">
            <summary>Initializes a new instance of type StubTypeName</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubTypeName.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubTypeName.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubTypeName.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubTypeNameConverter">
            <summary>Stub type of Castle.MicroKernel.SubSystems.Conversion.TypeNameConverter</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubTypeNameConverter.#ctor(Castle.MicroKernel.SubSystems.Conversion.ITypeNameParser)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubTypeNameConverter.CanHandleType(System.Type)">
            <summary>Sets the stub of TypeNameConverter.CanHandleType(Type type)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubTypeNameConverter.CanHandleType(System.Type,Castle.Core.Configuration.IConfiguration)">
            <summary>Sets the stub of AbstractTypeConverter.CanHandleType(Type type, IConfiguration configuration)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubTypeNameConverter.CanHandleTypeType">
            <summary>Sets the stub of TypeNameConverter.CanHandleType(Type type)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubTypeNameConverter.CanHandleTypeTypeIConfiguration">
            <summary>Sets the stub of AbstractTypeConverter.CanHandleType(Type type, IConfiguration configuration)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubTypeNameConverter.InitializeStub">
            <summary>Initializes a new instance of type StubTypeNameConverter</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubTypeNameConverter.PerformConversion(Castle.Core.Configuration.IConfiguration,System.Type)">
            <summary>Sets the stub of TypeNameConverter.PerformConversion(IConfiguration configuration, Type targetType)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubTypeNameConverter.PerformConversion(System.String,System.Type)">
            <summary>Sets the stub of TypeNameConverter.PerformConversion(String value, Type targetType)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubTypeNameConverter.PerformConversionIConfigurationType">
            <summary>Sets the stub of TypeNameConverter.PerformConversion(IConfiguration configuration, Type targetType)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubTypeNameConverter.PerformConversionStringType">
            <summary>Sets the stub of TypeNameConverter.PerformConversion(String value, Type targetType)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubTypeNameConverter.ShouldSkipAssembly(System.Reflection.Assembly)">
            <summary>Sets the stub of TypeNameConverter.ShouldSkipAssembly(Assembly assembly)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubTypeNameConverter.ShouldSkipAssemblyAssembly">
            <summary>Sets the stub of TypeNameConverter.ShouldSkipAssembly(Assembly assembly)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubTypeNameConverter.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubTypeNameConverter.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubTypeNameConverter.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubTypeNameParser">
            <summary>Stub type of Castle.MicroKernel.SubSystems.Conversion.TypeNameParser</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubTypeNameParser.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubTypeNameParser.InitializeStub">
            <summary>Initializes a new instance of type StubTypeNameParser</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubTypeNameParser.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubTypeNameParser.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubTypeNameParser.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimDefaultNamingSubSystem">
            <summary>Shim type of Castle.MicroKernel.SubSystems.Naming.DefaultNamingSubSystem</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimDefaultNamingSubSystem.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimDefaultNamingSubSystem.#ctor(Castle.MicroKernel.SubSystems.Naming.DefaultNamingSubSystem)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimDefaultNamingSubSystem.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimDefaultNamingSubSystem.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimDefaultNamingSubSystem.Bind(Castle.MicroKernel.ISubSystem)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimDefaultNamingSubSystem.Bind(Castle.MicroKernel.SubSystems.Naming.INamingSubSystem)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimDefaultNamingSubSystem.AddHandlerSelectorIHandlerSelector">
            <summary>Sets the shim of DefaultNamingSubSystem.AddHandlerSelector(IHandlerSelector selector)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimDefaultNamingSubSystem.AddHandlersFilterIHandlersFilter">
            <summary>Sets the shim of DefaultNamingSubSystem.AddHandlersFilter(IHandlersFilter filter)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimDefaultNamingSubSystem.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimDefaultNamingSubSystem.ComponentCountGet">
            <summary>Sets the shim of DefaultNamingSubSystem.get_ComponentCount()</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimDefaultNamingSubSystem.Constructor">
            <summary>Sets the shim of DefaultNamingSubSystem.DefaultNamingSubSystem()</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimDefaultNamingSubSystem.ContainsString">
            <summary>Sets the shim of DefaultNamingSubSystem.Contains(String name)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimDefaultNamingSubSystem.ContainsType">
            <summary>Sets the shim of DefaultNamingSubSystem.Contains(Type service)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimDefaultNamingSubSystem.GetAllHandlers">
            <summary>Sets the shim of DefaultNamingSubSystem.GetAllHandlers()</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimDefaultNamingSubSystem.GetAssignableHandlersNoFilteringType">
            <summary>Sets the shim of DefaultNamingSubSystem.GetAssignableHandlersNoFiltering(Type service)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimDefaultNamingSubSystem.GetAssignableHandlersType">
            <summary>Sets the shim of DefaultNamingSubSystem.GetAssignableHandlers(Type service)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimDefaultNamingSubSystem.GetFiltersOpinionType">
            <summary>Sets the shim of DefaultNamingSubSystem.GetFiltersOpinion(Type service)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimDefaultNamingSubSystem.GetHandlerString">
            <summary>Sets the shim of DefaultNamingSubSystem.GetHandler(String name)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimDefaultNamingSubSystem.GetHandlerType">
            <summary>Sets the shim of DefaultNamingSubSystem.GetHandler(Type service)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimDefaultNamingSubSystem.GetHandlersNoLockType">
            <summary>Sets the shim of DefaultNamingSubSystem.GetHandlersNoLock(Type service)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimDefaultNamingSubSystem.GetHandlersType">
            <summary>Sets the shim of DefaultNamingSubSystem.GetHandlers(Type service)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimDefaultNamingSubSystem.GetSelectorsOpinionStringType">
            <summary>Sets the shim of DefaultNamingSubSystem.GetSelectorsOpinion(String name, Type type)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimDefaultNamingSubSystem.HandlerByNameCacheGet">
            <summary>Sets the shim of DefaultNamingSubSystem.get_HandlerByNameCache()</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimDefaultNamingSubSystem.HandlerByServiceCacheGet">
            <summary>Sets the shim of DefaultNamingSubSystem.get_HandlerByServiceCache()</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimDefaultNamingSubSystem.InvalidateCache">
            <summary>Sets the shim of DefaultNamingSubSystem.InvalidateCache()</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimDefaultNamingSubSystem.IsDefaultIHandlerType">
            <summary>Sets the shim of DefaultNamingSubSystem.IsDefault(IHandler handler, Type service)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimDefaultNamingSubSystem.IsFallbackIHandlerType">
            <summary>Sets the shim of DefaultNamingSubSystem.IsFallback(IHandler handler, Type service)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimDefaultNamingSubSystem.RegisterIHandler">
            <summary>Sets the shim of DefaultNamingSubSystem.Register(IHandler handler)</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimDefaultNamingSubSystem.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimDefaultNamingSubSystem.AllInstances.AddHandlerSelectorIHandlerSelector">
            <summary>Sets the shim of DefaultNamingSubSystem.AddHandlerSelector(IHandlerSelector selector)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimDefaultNamingSubSystem.AllInstances.AddHandlersFilterIHandlersFilter">
            <summary>Sets the shim of DefaultNamingSubSystem.AddHandlersFilter(IHandlersFilter filter)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimDefaultNamingSubSystem.AllInstances.ComponentCountGet">
            <summary>Sets the shim of DefaultNamingSubSystem.get_ComponentCount()</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimDefaultNamingSubSystem.AllInstances.ContainsString">
            <summary>Sets the shim of DefaultNamingSubSystem.Contains(String name)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimDefaultNamingSubSystem.AllInstances.ContainsType">
            <summary>Sets the shim of DefaultNamingSubSystem.Contains(Type service)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimDefaultNamingSubSystem.AllInstances.GetAllHandlers">
            <summary>Sets the shim of DefaultNamingSubSystem.GetAllHandlers()</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimDefaultNamingSubSystem.AllInstances.GetAssignableHandlersNoFilteringType">
            <summary>Sets the shim of DefaultNamingSubSystem.GetAssignableHandlersNoFiltering(Type service)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimDefaultNamingSubSystem.AllInstances.GetAssignableHandlersType">
            <summary>Sets the shim of DefaultNamingSubSystem.GetAssignableHandlers(Type service)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimDefaultNamingSubSystem.AllInstances.GetFiltersOpinionType">
            <summary>Sets the shim of DefaultNamingSubSystem.GetFiltersOpinion(Type service)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimDefaultNamingSubSystem.AllInstances.GetHandlerString">
            <summary>Sets the shim of DefaultNamingSubSystem.GetHandler(String name)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimDefaultNamingSubSystem.AllInstances.GetHandlerType">
            <summary>Sets the shim of DefaultNamingSubSystem.GetHandler(Type service)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimDefaultNamingSubSystem.AllInstances.GetHandlersNoLockType">
            <summary>Sets the shim of DefaultNamingSubSystem.GetHandlersNoLock(Type service)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimDefaultNamingSubSystem.AllInstances.GetHandlersType">
            <summary>Sets the shim of DefaultNamingSubSystem.GetHandlers(Type service)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimDefaultNamingSubSystem.AllInstances.GetSelectorsOpinionStringType">
            <summary>Sets the shim of DefaultNamingSubSystem.GetSelectorsOpinion(String name, Type type)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimDefaultNamingSubSystem.AllInstances.HandlerByNameCacheGet">
            <summary>Sets the shim of DefaultNamingSubSystem.get_HandlerByNameCache()</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimDefaultNamingSubSystem.AllInstances.HandlerByServiceCacheGet">
            <summary>Sets the shim of DefaultNamingSubSystem.get_HandlerByServiceCache()</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimDefaultNamingSubSystem.AllInstances.InvalidateCache">
            <summary>Sets the shim of DefaultNamingSubSystem.InvalidateCache()</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimDefaultNamingSubSystem.AllInstances.IsDefaultIHandlerType">
            <summary>Sets the shim of DefaultNamingSubSystem.IsDefault(IHandler handler, Type service)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimDefaultNamingSubSystem.AllInstances.IsFallbackIHandlerType">
            <summary>Sets the shim of DefaultNamingSubSystem.IsFallback(IHandler handler, Type service)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimDefaultNamingSubSystem.AllInstances.RegisterIHandler">
            <summary>Sets the shim of DefaultNamingSubSystem.Register(IHandler handler)</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Naming.Fakes.StubDefaultNamingSubSystem">
            <summary>Stub type of Castle.MicroKernel.SubSystems.Naming.DefaultNamingSubSystem</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.StubDefaultNamingSubSystem.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Naming.Fakes.StubDefaultNamingSubSystem.ComponentCountGet">
            <summary>Sets the stub of DefaultNamingSubSystem.get_ComponentCount()</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.StubDefaultNamingSubSystem.Contains(System.String)">
            <summary>Sets the stub of DefaultNamingSubSystem.Contains(String name)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.StubDefaultNamingSubSystem.Contains(System.Type)">
            <summary>Sets the stub of DefaultNamingSubSystem.Contains(Type service)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Naming.Fakes.StubDefaultNamingSubSystem.ContainsString">
            <summary>Sets the stub of DefaultNamingSubSystem.Contains(String name)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Naming.Fakes.StubDefaultNamingSubSystem.ContainsType">
            <summary>Sets the stub of DefaultNamingSubSystem.Contains(Type service)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.StubDefaultNamingSubSystem.GetAllHandlers">
            <summary>Sets the stub of DefaultNamingSubSystem.GetAllHandlers()</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Naming.Fakes.StubDefaultNamingSubSystem.GetAllHandlers01">
            <summary>Sets the stub of DefaultNamingSubSystem.GetAllHandlers()</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.StubDefaultNamingSubSystem.GetAssignableHandlers(System.Type)">
            <summary>Sets the stub of DefaultNamingSubSystem.GetAssignableHandlers(Type service)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Naming.Fakes.StubDefaultNamingSubSystem.GetAssignableHandlersType">
            <summary>Sets the stub of DefaultNamingSubSystem.GetAssignableHandlers(Type service)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.StubDefaultNamingSubSystem.GetFiltersOpinion(System.Type)">
            <summary>Sets the stub of DefaultNamingSubSystem.GetFiltersOpinion(Type service)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Naming.Fakes.StubDefaultNamingSubSystem.GetFiltersOpinionType">
            <summary>Sets the stub of DefaultNamingSubSystem.GetFiltersOpinion(Type service)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.StubDefaultNamingSubSystem.GetHandler(System.String)">
            <summary>Sets the stub of DefaultNamingSubSystem.GetHandler(String name)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.StubDefaultNamingSubSystem.GetHandler(System.Type)">
            <summary>Sets the stub of DefaultNamingSubSystem.GetHandler(Type service)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Naming.Fakes.StubDefaultNamingSubSystem.GetHandlerString">
            <summary>Sets the stub of DefaultNamingSubSystem.GetHandler(String name)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Naming.Fakes.StubDefaultNamingSubSystem.GetHandlerType">
            <summary>Sets the stub of DefaultNamingSubSystem.GetHandler(Type service)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.StubDefaultNamingSubSystem.GetHandlers(System.Type)">
            <summary>Sets the stub of DefaultNamingSubSystem.GetHandlers(Type service)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Naming.Fakes.StubDefaultNamingSubSystem.GetHandlersType">
            <summary>Sets the stub of DefaultNamingSubSystem.GetHandlers(Type service)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.StubDefaultNamingSubSystem.GetSelectorsOpinion(System.String,System.Type)">
            <summary>Sets the stub of DefaultNamingSubSystem.GetSelectorsOpinion(String name, Type type)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Naming.Fakes.StubDefaultNamingSubSystem.GetSelectorsOpinionStringType">
            <summary>Sets the stub of DefaultNamingSubSystem.GetSelectorsOpinion(String name, Type type)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.StubDefaultNamingSubSystem.Init(Castle.MicroKernel.IKernelInternal)">
            <summary>Sets the stub of AbstractSubSystem.Init(IKernelInternal kernel)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Naming.Fakes.StubDefaultNamingSubSystem.InitIKernelInternal">
            <summary>Sets the stub of AbstractSubSystem.Init(IKernelInternal kernel)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.StubDefaultNamingSubSystem.InitializeLifetimeService">
            <summary>Sets the stub of AbstractSubSystem.InitializeLifetimeService()</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Naming.Fakes.StubDefaultNamingSubSystem.InitializeLifetimeService01">
            <summary>Sets the stub of AbstractSubSystem.InitializeLifetimeService()</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.StubDefaultNamingSubSystem.InitializeStub">
            <summary>Initializes a new instance of type StubDefaultNamingSubSystem</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.StubDefaultNamingSubSystem.Register(Castle.MicroKernel.IHandler)">
            <summary>Sets the stub of DefaultNamingSubSystem.Register(IHandler handler)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Naming.Fakes.StubDefaultNamingSubSystem.RegisterIHandler">
            <summary>Sets the stub of DefaultNamingSubSystem.Register(IHandler handler)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.StubDefaultNamingSubSystem.Terminate">
            <summary>Sets the stub of AbstractSubSystem.Terminate()</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Naming.Fakes.StubDefaultNamingSubSystem.Terminate01">
            <summary>Sets the stub of AbstractSubSystem.Terminate()</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.StubDefaultNamingSubSystem.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.StubDefaultNamingSubSystem.ComponentCount">
            <summary>Sets the stub of DefaultNamingSubSystem.get_ComponentCount()</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.StubDefaultNamingSubSystem.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.StubDefaultNamingSubSystem.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Naming.Fakes.StubINamingSubSystem">
            <summary>Stub type of Castle.MicroKernel.SubSystems.Naming.INamingSubSystem</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.StubINamingSubSystem.#ctor">
            <summary>Initializes a new instance of type StubINamingSubSystem</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Naming.Fakes.StubINamingSubSystem.AddHandlerSelectorIHandlerSelector">
            <summary>Sets the stub of INamingSubSystem.AddHandlerSelector(IHandlerSelector selector)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Naming.Fakes.StubINamingSubSystem.AddHandlersFilterIHandlersFilter">
            <summary>Sets the stub of INamingSubSystem.AddHandlersFilter(IHandlersFilter filter)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.StubINamingSubSystem.cw::Castle#MicroKernel#ISubSystem#Init(Castle.MicroKernel.IKernelInternal)">
            <summary>Sets the stub of ISubSystem.Init(IKernelInternal kernel)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.StubINamingSubSystem.cw::Castle#MicroKernel#ISubSystem#Terminate">
            <summary>Sets the stub of ISubSystem.Terminate()</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.StubINamingSubSystem.cw::Castle#MicroKernel#SubSystems#Naming#INamingSubSystem#AddHandlerSelector(Castle.MicroKernel.IHandlerSelector)">
            <summary>Sets the stub of INamingSubSystem.AddHandlerSelector(IHandlerSelector selector)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.StubINamingSubSystem.cw::Castle#MicroKernel#SubSystems#Naming#INamingSubSystem#AddHandlersFilter(Castle.MicroKernel.IHandlersFilter)">
            <summary>Sets the stub of INamingSubSystem.AddHandlersFilter(IHandlersFilter filter)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.StubINamingSubSystem.cw::Castle#MicroKernel#SubSystems#Naming#INamingSubSystem#Contains(System.String)">
            <summary>Sets the stub of INamingSubSystem.Contains(String name)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.StubINamingSubSystem.cw::Castle#MicroKernel#SubSystems#Naming#INamingSubSystem#Contains(System.Type)">
            <summary>Sets the stub of INamingSubSystem.Contains(Type service)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.StubINamingSubSystem.cw::Castle#MicroKernel#SubSystems#Naming#INamingSubSystem#GetAllHandlers">
            <summary>Sets the stub of INamingSubSystem.GetAllHandlers()</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.StubINamingSubSystem.cw::Castle#MicroKernel#SubSystems#Naming#INamingSubSystem#GetAssignableHandlers(System.Type)">
            <summary>Sets the stub of INamingSubSystem.GetAssignableHandlers(Type service)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.StubINamingSubSystem.cw::Castle#MicroKernel#SubSystems#Naming#INamingSubSystem#GetHandler(System.String)">
            <summary>Sets the stub of INamingSubSystem.GetHandler(String name)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.StubINamingSubSystem.cw::Castle#MicroKernel#SubSystems#Naming#INamingSubSystem#GetHandler(System.Type)">
            <summary>Sets the stub of INamingSubSystem.GetHandler(Type service)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.StubINamingSubSystem.cw::Castle#MicroKernel#SubSystems#Naming#INamingSubSystem#GetHandlers(System.Type)">
            <summary>Sets the stub of INamingSubSystem.GetHandlers(Type service)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.StubINamingSubSystem.cw::Castle#MicroKernel#SubSystems#Naming#INamingSubSystem#Register(Castle.MicroKernel.IHandler)">
            <summary>Sets the stub of INamingSubSystem.Register(IHandler handler)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Naming.Fakes.StubINamingSubSystem.ComponentCountGet">
            <summary>Sets the stub of INamingSubSystem.get_ComponentCount()</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Naming.Fakes.StubINamingSubSystem.ContainsString">
            <summary>Sets the stub of INamingSubSystem.Contains(String name)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Naming.Fakes.StubINamingSubSystem.ContainsType">
            <summary>Sets the stub of INamingSubSystem.Contains(Type service)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Naming.Fakes.StubINamingSubSystem.GetAllHandlers">
            <summary>Sets the stub of INamingSubSystem.GetAllHandlers()</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Naming.Fakes.StubINamingSubSystem.GetAssignableHandlersType">
            <summary>Sets the stub of INamingSubSystem.GetAssignableHandlers(Type service)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Naming.Fakes.StubINamingSubSystem.GetHandlerString">
            <summary>Sets the stub of INamingSubSystem.GetHandler(String name)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Naming.Fakes.StubINamingSubSystem.GetHandlerType">
            <summary>Sets the stub of INamingSubSystem.GetHandler(Type service)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Naming.Fakes.StubINamingSubSystem.GetHandlersType">
            <summary>Sets the stub of INamingSubSystem.GetHandlers(Type service)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Naming.Fakes.StubINamingSubSystem.InitIKernelInternal">
            <summary>Sets the stub of ISubSystem.Init(IKernelInternal kernel)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Naming.Fakes.StubINamingSubSystem.RegisterIHandler">
            <summary>Sets the stub of INamingSubSystem.Register(IHandler handler)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Naming.Fakes.StubINamingSubSystem.Terminate">
            <summary>Sets the stub of ISubSystem.Terminate()</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.StubINamingSubSystem.cw::Castle#MicroKernel#SubSystems#Naming#INamingSubSystem#ComponentCount">
            <summary>Sets the stub of INamingSubSystem.get_ComponentCount()</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Resource.Fakes.ShimDefaultResourceSubSystem">
            <summary>Shim type of Castle.MicroKernel.SubSystems.Resource.DefaultResourceSubSystem</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Resource.Fakes.ShimDefaultResourceSubSystem.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Resource.Fakes.ShimDefaultResourceSubSystem.#ctor(Castle.MicroKernel.SubSystems.Resource.DefaultResourceSubSystem)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Resource.Fakes.ShimDefaultResourceSubSystem.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Resource.Fakes.ShimDefaultResourceSubSystem.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Resource.Fakes.ShimDefaultResourceSubSystem.Bind(Castle.MicroKernel.ISubSystem)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Resource.Fakes.ShimDefaultResourceSubSystem.Bind(Castle.MicroKernel.SubSystems.Resource.IResourceSubSystem)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Resource.Fakes.ShimDefaultResourceSubSystem.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Resource.Fakes.ShimDefaultResourceSubSystem.Constructor">
            <summary>Sets the shim of DefaultResourceSubSystem.DefaultResourceSubSystem()</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Resource.Fakes.ShimDefaultResourceSubSystem.CreateResourceCustomUri">
            <summary>Sets the shim of DefaultResourceSubSystem.CreateResource(CustomUri uri)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Resource.Fakes.ShimDefaultResourceSubSystem.CreateResourceCustomUriString">
            <summary>Sets the shim of DefaultResourceSubSystem.CreateResource(CustomUri uri, String basePath)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Resource.Fakes.ShimDefaultResourceSubSystem.CreateResourceString">
            <summary>Sets the shim of DefaultResourceSubSystem.CreateResource(String resource)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Resource.Fakes.ShimDefaultResourceSubSystem.CreateResourceStringString">
            <summary>Sets the shim of DefaultResourceSubSystem.CreateResource(String resource, String basePath)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Resource.Fakes.ShimDefaultResourceSubSystem.InitDefaultResourceFactories">
            <summary>Sets the shim of DefaultResourceSubSystem.InitDefaultResourceFactories()</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Resource.Fakes.ShimDefaultResourceSubSystem.RegisterResourceFactoryIResourceFactory">
            <summary>Sets the shim of DefaultResourceSubSystem.RegisterResourceFactory(IResourceFactory resourceFactory)</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Resource.Fakes.ShimDefaultResourceSubSystem.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Resource.Fakes.ShimDefaultResourceSubSystem.AllInstances.CreateResourceCustomUri">
            <summary>Sets the shim of DefaultResourceSubSystem.CreateResource(CustomUri uri)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Resource.Fakes.ShimDefaultResourceSubSystem.AllInstances.CreateResourceCustomUriString">
            <summary>Sets the shim of DefaultResourceSubSystem.CreateResource(CustomUri uri, String basePath)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Resource.Fakes.ShimDefaultResourceSubSystem.AllInstances.CreateResourceString">
            <summary>Sets the shim of DefaultResourceSubSystem.CreateResource(String resource)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Resource.Fakes.ShimDefaultResourceSubSystem.AllInstances.CreateResourceStringString">
            <summary>Sets the shim of DefaultResourceSubSystem.CreateResource(String resource, String basePath)</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Resource.Fakes.ShimDefaultResourceSubSystem.AllInstances.InitDefaultResourceFactories">
            <summary>Sets the shim of DefaultResourceSubSystem.InitDefaultResourceFactories()</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Resource.Fakes.ShimDefaultResourceSubSystem.AllInstances.RegisterResourceFactoryIResourceFactory">
            <summary>Sets the shim of DefaultResourceSubSystem.RegisterResourceFactory(IResourceFactory resourceFactory)</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Resource.Fakes.StubDefaultResourceSubSystem">
            <summary>Stub type of Castle.MicroKernel.SubSystems.Resource.DefaultResourceSubSystem</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Resource.Fakes.StubDefaultResourceSubSystem.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Resource.Fakes.StubDefaultResourceSubSystem.Init(Castle.MicroKernel.IKernelInternal)">
            <summary>Sets the stub of AbstractSubSystem.Init(IKernelInternal kernel)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Resource.Fakes.StubDefaultResourceSubSystem.InitDefaultResourceFactories">
            <summary>Sets the stub of DefaultResourceSubSystem.InitDefaultResourceFactories()</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Resource.Fakes.StubDefaultResourceSubSystem.InitDefaultResourceFactories01">
            <summary>Sets the stub of DefaultResourceSubSystem.InitDefaultResourceFactories()</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Resource.Fakes.StubDefaultResourceSubSystem.InitIKernelInternal">
            <summary>Sets the stub of AbstractSubSystem.Init(IKernelInternal kernel)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Resource.Fakes.StubDefaultResourceSubSystem.InitializeLifetimeService">
            <summary>Sets the stub of AbstractSubSystem.InitializeLifetimeService()</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Resource.Fakes.StubDefaultResourceSubSystem.InitializeLifetimeService01">
            <summary>Sets the stub of AbstractSubSystem.InitializeLifetimeService()</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Resource.Fakes.StubDefaultResourceSubSystem.InitializeStub">
            <summary>Initializes a new instance of type StubDefaultResourceSubSystem</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Resource.Fakes.StubDefaultResourceSubSystem.Terminate">
            <summary>Sets the stub of AbstractSubSystem.Terminate()</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Resource.Fakes.StubDefaultResourceSubSystem.Terminate01">
            <summary>Sets the stub of AbstractSubSystem.Terminate()</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Resource.Fakes.StubDefaultResourceSubSystem.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Resource.Fakes.StubDefaultResourceSubSystem.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Resource.Fakes.StubDefaultResourceSubSystem.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Resource.Fakes.StubIResourceSubSystem">
            <summary>Stub type of Castle.MicroKernel.SubSystems.Resource.IResourceSubSystem</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Resource.Fakes.StubIResourceSubSystem.#ctor">
            <summary>Initializes a new instance of type StubIResourceSubSystem</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Resource.Fakes.StubIResourceSubSystem.cw::Castle#MicroKernel#ISubSystem#Init(Castle.MicroKernel.IKernelInternal)">
            <summary>Sets the stub of ISubSystem.Init(IKernelInternal kernel)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Resource.Fakes.StubIResourceSubSystem.cw::Castle#MicroKernel#ISubSystem#Terminate">
            <summary>Sets the stub of ISubSystem.Terminate()</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Resource.Fakes.StubIResourceSubSystem.cw::Castle#MicroKernel#SubSystems#Resource#IResourceSubSystem#CreateResource(Castle.Core.Resource.CustomUri)">
            <summary>Sets the stub of IResourceSubSystem.CreateResource(CustomUri uri)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Resource.Fakes.StubIResourceSubSystem.cw::Castle#MicroKernel#SubSystems#Resource#IResourceSubSystem#CreateResource(System.String)">
            <summary>Sets the stub of IResourceSubSystem.CreateResource(String resource)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Resource.Fakes.StubIResourceSubSystem.cw::Castle#MicroKernel#SubSystems#Resource#IResourceSubSystem#CreateResource(Castle.Core.Resource.CustomUri,System.String)">
            <summary>Sets the stub of IResourceSubSystem.CreateResource(CustomUri uri, String basePath)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Resource.Fakes.StubIResourceSubSystem.cw::Castle#MicroKernel#SubSystems#Resource#IResourceSubSystem#CreateResource(System.String,System.String)">
            <summary>Sets the stub of IResourceSubSystem.CreateResource(String resource, String basePath)</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Resource.Fakes.StubIResourceSubSystem.cw::Castle#MicroKernel#SubSystems#Resource#IResourceSubSystem#RegisterResourceFactory(Castle.Core.Resource.IResourceFactory)">
            <summary>Sets the stub of IResourceSubSystem.RegisterResourceFactory(IResourceFactory resourceFactory)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Resource.Fakes.StubIResourceSubSystem.CreateResourceCustomUri">
            <summary>Sets the stub of IResourceSubSystem.CreateResource(CustomUri uri)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Resource.Fakes.StubIResourceSubSystem.CreateResourceCustomUriString">
            <summary>Sets the stub of IResourceSubSystem.CreateResource(CustomUri uri, String basePath)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Resource.Fakes.StubIResourceSubSystem.CreateResourceString">
            <summary>Sets the stub of IResourceSubSystem.CreateResource(String resource)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Resource.Fakes.StubIResourceSubSystem.CreateResourceStringString">
            <summary>Sets the stub of IResourceSubSystem.CreateResource(String resource, String basePath)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Resource.Fakes.StubIResourceSubSystem.InitIKernelInternal">
            <summary>Sets the stub of ISubSystem.Init(IKernelInternal kernel)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Resource.Fakes.StubIResourceSubSystem.RegisterResourceFactoryIResourceFactory">
            <summary>Sets the stub of IResourceSubSystem.RegisterResourceFactory(IResourceFactory resourceFactory)</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Resource.Fakes.StubIResourceSubSystem.Terminate">
            <summary>Sets the stub of ISubSystem.Terminate()</summary>
        </member>
        <member name="T:Castle.MicroKernel.Util.Fakes.ShimReferenceExpressionUtil">
            <summary>Shim type of Castle.MicroKernel.Util.ReferenceExpressionUtil</summary>
        </member>
        <member name="M:Castle.MicroKernel.Util.Fakes.ShimReferenceExpressionUtil.#ctor(Castle.MicroKernel.Util.ReferenceExpressionUtil)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Util.Fakes.ShimReferenceExpressionUtil.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Util.Fakes.ShimReferenceExpressionUtil.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Util.Fakes.ShimReferenceExpressionUtil.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Util.Fakes.ShimReferenceExpressionUtil.BuildReferenceString">
            <summary>Sets the shim of ReferenceExpressionUtil.BuildReference(String value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Util.Fakes.ShimReferenceExpressionUtil.Constructor">
            <summary>Sets the shim of ReferenceExpressionUtil.ReferenceExpressionUtil()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Util.Fakes.ShimReferenceExpressionUtil.ExtractComponentNameString">
            <summary>Sets the shim of ReferenceExpressionUtil.ExtractComponentName(String value)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Util.Fakes.ShimReferenceExpressionUtil.IsReferenceString">
            <summary>Sets the shim of ReferenceExpressionUtil.IsReference(String value)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Util.Fakes.ShimReferenceExpressionUtil.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="T:Castle.MicroKernel.Util.Fakes.ShimSimpleMethodEqualityComparer">
            <summary>Shim type of Castle.MicroKernel.Util.SimpleMethodEqualityComparer</summary>
        </member>
        <member name="M:Castle.MicroKernel.Util.Fakes.ShimSimpleMethodEqualityComparer.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Util.Fakes.ShimSimpleMethodEqualityComparer.#ctor(Castle.MicroKernel.Util.SimpleMethodEqualityComparer)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Util.Fakes.ShimSimpleMethodEqualityComparer.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Util.Fakes.ShimSimpleMethodEqualityComparer.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Util.Fakes.ShimSimpleMethodEqualityComparer.Bind(System.Collections.Generic.IEqualityComparer{System.Reflection.MethodInfo})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Util.Fakes.ShimSimpleMethodEqualityComparer.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Util.Fakes.ShimSimpleMethodEqualityComparer.Constructor">
            <summary>Sets the shim of SimpleMethodEqualityComparer.SimpleMethodEqualityComparer()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Util.Fakes.ShimSimpleMethodEqualityComparer.EqualsMethodInfoMethodInfo">
            <summary>Sets the shim of SimpleMethodEqualityComparer.Equals(MethodInfo x, MethodInfo y)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Util.Fakes.ShimSimpleMethodEqualityComparer.GetHashCodeMethodInfo">
            <summary>Sets the shim of SimpleMethodEqualityComparer.GetHashCode(MethodInfo obj)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Util.Fakes.ShimSimpleMethodEqualityComparer.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.Util.Fakes.ShimSimpleMethodEqualityComparer.AllInstances.EqualsMethodInfoMethodInfo">
            <summary>Sets the shim of SimpleMethodEqualityComparer.Equals(MethodInfo x, MethodInfo y)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Util.Fakes.ShimSimpleMethodEqualityComparer.AllInstances.GetHashCodeMethodInfo">
            <summary>Sets the shim of SimpleMethodEqualityComparer.GetHashCode(MethodInfo obj)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Util.Fakes.ShimSimpleTypeEqualityComparer">
            <summary>Shim type of Castle.MicroKernel.Util.SimpleTypeEqualityComparer</summary>
        </member>
        <member name="M:Castle.MicroKernel.Util.Fakes.ShimSimpleTypeEqualityComparer.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Util.Fakes.ShimSimpleTypeEqualityComparer.#ctor(Castle.MicroKernel.Util.SimpleTypeEqualityComparer)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Util.Fakes.ShimSimpleTypeEqualityComparer.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Util.Fakes.ShimSimpleTypeEqualityComparer.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.MicroKernel.Util.Fakes.ShimSimpleTypeEqualityComparer.Bind(System.Collections.Generic.IEqualityComparer{System.Type})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Util.Fakes.ShimSimpleTypeEqualityComparer.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.MicroKernel.Util.Fakes.ShimSimpleTypeEqualityComparer.Constructor">
            <summary>Sets the shim of SimpleTypeEqualityComparer.SimpleTypeEqualityComparer()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Util.Fakes.ShimSimpleTypeEqualityComparer.EqualsTypeType">
            <summary>Sets the shim of SimpleTypeEqualityComparer.Equals(Type x, Type y)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Util.Fakes.ShimSimpleTypeEqualityComparer.GetHashCodeType">
            <summary>Sets the shim of SimpleTypeEqualityComparer.GetHashCode(Type obj)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Util.Fakes.ShimSimpleTypeEqualityComparer.InstanceGet">
            <summary>Sets the shim of SimpleTypeEqualityComparer.get_Instance()</summary>
        </member>
        <member name="P:Castle.MicroKernel.Util.Fakes.ShimSimpleTypeEqualityComparer.StaticConstructor">
            <summary>Sets the shim of SimpleTypeEqualityComparer.SimpleTypeEqualityComparer()</summary>
        </member>
        <member name="T:Castle.MicroKernel.Util.Fakes.ShimSimpleTypeEqualityComparer.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.MicroKernel.Util.Fakes.ShimSimpleTypeEqualityComparer.AllInstances.EqualsTypeType">
            <summary>Sets the shim of SimpleTypeEqualityComparer.Equals(Type x, Type y)</summary>
        </member>
        <member name="P:Castle.MicroKernel.Util.Fakes.ShimSimpleTypeEqualityComparer.AllInstances.GetHashCodeType">
            <summary>Sets the shim of SimpleTypeEqualityComparer.GetHashCode(Type obj)</summary>
        </member>
        <member name="T:Castle.MicroKernel.Util.Fakes.StubReferenceExpressionUtil">
            <summary>Stub type of Castle.MicroKernel.Util.ReferenceExpressionUtil</summary>
        </member>
        <member name="M:Castle.MicroKernel.Util.Fakes.StubReferenceExpressionUtil.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Util.Fakes.StubReferenceExpressionUtil.InitializeStub">
            <summary>Initializes a new instance of type StubReferenceExpressionUtil</summary>
        </member>
        <member name="P:Castle.MicroKernel.Util.Fakes.StubReferenceExpressionUtil.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.Util.Fakes.StubReferenceExpressionUtil.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Util.Fakes.StubReferenceExpressionUtil.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.Util.Fakes.StubSimpleMethodEqualityComparer">
            <summary>Stub type of Castle.MicroKernel.Util.SimpleMethodEqualityComparer</summary>
        </member>
        <member name="M:Castle.MicroKernel.Util.Fakes.StubSimpleMethodEqualityComparer.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Util.Fakes.StubSimpleMethodEqualityComparer.InitializeStub">
            <summary>Initializes a new instance of type StubSimpleMethodEqualityComparer</summary>
        </member>
        <member name="P:Castle.MicroKernel.Util.Fakes.StubSimpleMethodEqualityComparer.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.Util.Fakes.StubSimpleMethodEqualityComparer.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Util.Fakes.StubSimpleMethodEqualityComparer.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.MicroKernel.Util.Fakes.StubSimpleTypeEqualityComparer">
            <summary>Stub type of Castle.MicroKernel.Util.SimpleTypeEqualityComparer</summary>
        </member>
        <member name="M:Castle.MicroKernel.Util.Fakes.StubSimpleTypeEqualityComparer.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.MicroKernel.Util.Fakes.StubSimpleTypeEqualityComparer.InitializeStub">
            <summary>Initializes a new instance of type StubSimpleTypeEqualityComparer</summary>
        </member>
        <member name="P:Castle.MicroKernel.Util.Fakes.StubSimpleTypeEqualityComparer.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.MicroKernel.Util.Fakes.StubSimpleTypeEqualityComparer.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.MicroKernel.Util.Fakes.StubSimpleTypeEqualityComparer.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.AppDomain.Fakes.ShimCastleSectionHandler">
            <summary>Shim type of Castle.Windsor.Configuration.AppDomain.CastleSectionHandler</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.AppDomain.Fakes.ShimCastleSectionHandler.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.AppDomain.Fakes.ShimCastleSectionHandler.#ctor(Castle.Windsor.Configuration.AppDomain.CastleSectionHandler)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.AppDomain.Fakes.ShimCastleSectionHandler.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.AppDomain.Fakes.ShimCastleSectionHandler.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.AppDomain.Fakes.ShimCastleSectionHandler.Bind(System.Configuration.IConfigurationSectionHandler)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.AppDomain.Fakes.ShimCastleSectionHandler.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.AppDomain.Fakes.ShimCastleSectionHandler.Constructor">
            <summary>Sets the shim of CastleSectionHandler.CastleSectionHandler()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.AppDomain.Fakes.ShimCastleSectionHandler.CreateObjectObjectXmlNode">
            <summary>Sets the shim of CastleSectionHandler.Create(Object parent, Object configContext, XmlNode section)</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.AppDomain.Fakes.ShimCastleSectionHandler.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.AppDomain.Fakes.ShimCastleSectionHandler.AllInstances.CreateObjectObjectXmlNode">
            <summary>Sets the shim of CastleSectionHandler.Create(Object parent, Object configContext, XmlNode section)</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.AppDomain.Fakes.StubCastleSectionHandler">
            <summary>Stub type of Castle.Windsor.Configuration.AppDomain.CastleSectionHandler</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.AppDomain.Fakes.StubCastleSectionHandler.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.AppDomain.Fakes.StubCastleSectionHandler.InitializeStub">
            <summary>Initializes a new instance of type StubCastleSectionHandler</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.AppDomain.Fakes.StubCastleSectionHandler.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.AppDomain.Fakes.StubCastleSectionHandler.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.AppDomain.Fakes.StubCastleSectionHandler.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Fakes.StubIConfigurationInterpreter">
            <summary>Stub type of Castle.Windsor.Configuration.IConfigurationInterpreter</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Fakes.StubIConfigurationInterpreter.#ctor">
            <summary>Initializes a new instance of type StubIConfigurationInterpreter</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Fakes.StubIConfigurationInterpreter.AttachBackingFieldToEnvironmentName">
            <summary>Attaches delegates to emulate StubIConfigurationInterpreter.EnvironmentName as a property with a backing field.</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Fakes.StubIConfigurationInterpreter.cw::Castle#Windsor#Configuration#IConfigurationInterpreter#ProcessResource(Castle.Core.Resource.IResource,Castle.MicroKernel.SubSystems.Configuration.IConfigurationStore,Castle.MicroKernel.IKernel)">
            <summary>Sets the stub of IConfigurationInterpreter.ProcessResource(IResource resource, IConfigurationStore store, IKernel kernel)</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Fakes.StubIConfigurationInterpreter.EnvironmentNameGet">
            <summary>Sets the stub of IConfigurationInterpreter.get_EnvironmentName()</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Fakes.StubIConfigurationInterpreter.EnvironmentNameSetString">
            <summary>Sets the stub of IConfigurationInterpreter.set_EnvironmentName(String value)</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Fakes.StubIConfigurationInterpreter.ProcessResourceIResourceIConfigurationStoreIKernel">
            <summary>Sets the stub of IConfigurationInterpreter.ProcessResource(IResource resource, IConfigurationStore store, IKernel kernel)</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Fakes.StubIConfigurationInterpreter.SourceGet">
            <summary>Sets the stub of IConfigurationInterpreter.get_Source()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Fakes.StubIConfigurationInterpreter.cw::Castle#Windsor#Configuration#IConfigurationInterpreter#EnvironmentName">
            <summary>Sets the stub of IConfigurationInterpreter.get_EnvironmentName()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Fakes.StubIConfigurationInterpreter.cw::Castle#Windsor#Configuration#IConfigurationInterpreter#Source">
            <summary>Sets the stub of IConfigurationInterpreter.get_Source()</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.Fakes.ShimAbstractInterpreter">
            <summary>Shim type of Castle.Windsor.Configuration.Interpreters.AbstractInterpreter</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.Fakes.ShimAbstractInterpreter.#ctor(Castle.Windsor.Configuration.Interpreters.AbstractInterpreter)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.Fakes.ShimAbstractInterpreter.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.Fakes.ShimAbstractInterpreter.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.Fakes.ShimAbstractInterpreter.Bind(Castle.Windsor.Configuration.IConfigurationInterpreter)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimAbstractInterpreter.AddChildContainerConfigStringIConfigurationIConfigurationStore">
            <summary>Sets the shim of AbstractInterpreter.AddChildContainerConfig(String name, IConfiguration childContainer, IConfigurationStore store)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimAbstractInterpreter.AddComponentConfigStringIConfigurationIConfigurationStore">
            <summary>Sets the shim of AbstractInterpreter.AddComponentConfig(String id, IConfiguration component, IConfigurationStore store)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimAbstractInterpreter.AddFacilityConfigStringIConfigurationIConfigurationStore">
            <summary>Sets the shim of AbstractInterpreter.AddFacilityConfig(String id, IConfiguration facility, IConfigurationStore store)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimAbstractInterpreter.AddInstallerConfigIConfigurationIConfigurationStore">
            <summary>Sets the shim of AbstractInterpreter.AddInstallerConfig(IConfiguration installer, IConfigurationStore store)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimAbstractInterpreter.AssertValidIdString">
            <summary>Sets the shim of AbstractInterpreter.AssertValidId(String id)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimAbstractInterpreter.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimAbstractInterpreter.Constructor">
            <summary>Sets the shim of AbstractInterpreter.AbstractInterpreter()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimAbstractInterpreter.ConstructorIResource">
            <summary>Sets the shim of AbstractInterpreter.AbstractInterpreter(IResource source)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimAbstractInterpreter.ConstructorString">
            <summary>Sets the shim of AbstractInterpreter.AbstractInterpreter(String filename)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimAbstractInterpreter.CurrentResourceGet">
            <summary>Sets the shim of AbstractInterpreter.get_CurrentResource()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimAbstractInterpreter.EnvironmentNameGet">
            <summary>Sets the shim of AbstractInterpreter.get_EnvironmentName()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimAbstractInterpreter.EnvironmentNameSetString">
            <summary>Sets the shim of AbstractInterpreter.set_EnvironmentName(String value)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimAbstractInterpreter.PopResource">
            <summary>Sets the shim of AbstractInterpreter.PopResource()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimAbstractInterpreter.PushResourceIResource">
            <summary>Sets the shim of AbstractInterpreter.PushResource(IResource resource)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimAbstractInterpreter.SourceGet">
            <summary>Sets the shim of AbstractInterpreter.get_Source()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimAbstractInterpreter.StaticConstructor">
            <summary>Sets the shim of AbstractInterpreter.AbstractInterpreter()</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.Fakes.ShimAbstractInterpreter.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimAbstractInterpreter.AllInstances.CurrentResourceGet">
            <summary>Sets the shim of AbstractInterpreter.get_CurrentResource()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimAbstractInterpreter.AllInstances.EnvironmentNameGet">
            <summary>Sets the shim of AbstractInterpreter.get_EnvironmentName()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimAbstractInterpreter.AllInstances.EnvironmentNameSetString">
            <summary>Sets the shim of AbstractInterpreter.set_EnvironmentName(String value)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimAbstractInterpreter.AllInstances.PopResource">
            <summary>Sets the shim of AbstractInterpreter.PopResource()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimAbstractInterpreter.AllInstances.PushResourceIResource">
            <summary>Sets the shim of AbstractInterpreter.PushResource(IResource resource)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimAbstractInterpreter.AllInstances.SourceGet">
            <summary>Sets the shim of AbstractInterpreter.get_Source()</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.Fakes.ShimConfigurationProcessingException">
            <summary>Shim type of Castle.Windsor.Configuration.Interpreters.ConfigurationProcessingException</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.Fakes.ShimConfigurationProcessingException.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.Fakes.ShimConfigurationProcessingException.#ctor(Castle.Windsor.Configuration.Interpreters.ConfigurationProcessingException)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.Fakes.ShimConfigurationProcessingException.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.Fakes.ShimConfigurationProcessingException.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.Fakes.ShimConfigurationProcessingException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimConfigurationProcessingException.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimConfigurationProcessingException.ConstructorSerializationInfoStreamingContext">
            <summary>Sets the shim of ConfigurationProcessingException.ConfigurationProcessingException(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimConfigurationProcessingException.ConstructorString">
            <summary>Sets the shim of ConfigurationProcessingException.ConfigurationProcessingException(String message)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimConfigurationProcessingException.ConstructorStringException">
            <summary>Sets the shim of ConfigurationProcessingException.ConfigurationProcessingException(String message, Exception innerException)</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.Fakes.ShimConfigurationProcessingException.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.Fakes.ShimXmlInterpreter">
            <summary>Shim type of Castle.Windsor.Configuration.Interpreters.XmlInterpreter</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.Fakes.ShimXmlInterpreter.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.Fakes.ShimXmlInterpreter.#ctor(Castle.Windsor.Configuration.Interpreters.XmlInterpreter)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.Fakes.ShimXmlInterpreter.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.Fakes.ShimXmlInterpreter.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.Fakes.ShimXmlInterpreter.Bind(Castle.Windsor.Configuration.IConfigurationInterpreter)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimXmlInterpreter.AssertNodeNameXmlNodeIEquatableOfString">
            <summary>Sets the shim of XmlInterpreter.AssertNodeName(XmlNode node, IEquatable`1&lt;String&gt; expectedName)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimXmlInterpreter.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimXmlInterpreter.Constructor">
            <summary>Sets the shim of XmlInterpreter.XmlInterpreter()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimXmlInterpreter.ConstructorIResource">
            <summary>Sets the shim of XmlInterpreter.XmlInterpreter(IResource source)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimXmlInterpreter.ConstructorString">
            <summary>Sets the shim of XmlInterpreter.XmlInterpreter(String filename)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimXmlInterpreter.DeserializeComponentXmlNodeIConfigurationStoreIConversionManager">
            <summary>Sets the shim of XmlInterpreter.DeserializeComponent(XmlNode node, IConfigurationStore store, IConversionManager converter)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimXmlInterpreter.DeserializeComponentsXmlNodeListIConfigurationStoreIConversionManager">
            <summary>Sets the shim of XmlInterpreter.DeserializeComponents(XmlNodeList nodes, IConfigurationStore store, IConversionManager converter)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimXmlInterpreter.DeserializeContainerXmlNodeIConfigurationStore">
            <summary>Sets the shim of XmlInterpreter.DeserializeContainer(XmlNode node, IConfigurationStore store)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimXmlInterpreter.DeserializeContainersXmlNodeListIConfigurationStore">
            <summary>Sets the shim of XmlInterpreter.DeserializeContainers(XmlNodeList nodes, IConfigurationStore store)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimXmlInterpreter.DeserializeElementXmlNodeIConfigurationStoreIConversionManager">
            <summary>Sets the shim of XmlInterpreter.DeserializeElement(XmlNode node, IConfigurationStore store, IConversionManager converter)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimXmlInterpreter.DeserializeFacilitiesXmlNodeListIConfigurationStoreIConversionManager">
            <summary>Sets the shim of XmlInterpreter.DeserializeFacilities(XmlNodeList nodes, IConfigurationStore store, IConversionManager converter)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimXmlInterpreter.DeserializeFacilityXmlNodeIConfigurationStoreIConversionManager">
            <summary>Sets the shim of XmlInterpreter.DeserializeFacility(XmlNode node, IConfigurationStore store, IConversionManager converter)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimXmlInterpreter.DeserializeInstallerXmlNodeIConfigurationStore">
            <summary>Sets the shim of XmlInterpreter.DeserializeInstaller(XmlNode node, IConfigurationStore store)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimXmlInterpreter.DeserializeInstallersXmlNodeListIConfigurationStore">
            <summary>Sets the shim of XmlInterpreter.DeserializeInstallers(XmlNodeList nodes, IConfigurationStore store)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimXmlInterpreter.DeserializeXmlNodeIConfigurationStoreIConversionManager">
            <summary>Sets the shim of XmlInterpreter.Deserialize(XmlNode section, IConfigurationStore store, IConversionManager converter)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimXmlInterpreter.GetRequiredAttributeValueIConfigurationString">
            <summary>Sets the shim of XmlInterpreter.GetRequiredAttributeValue(IConfiguration configuration, String attributeName)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimXmlInterpreter.ProcessResourceIResourceIConfigurationStoreIKernel">
            <summary>Sets the shim of XmlInterpreter.ProcessResource(IResource source, IConfigurationStore store, IKernel kernel)</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.Fakes.ShimXmlInterpreter.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimXmlInterpreter.AllInstances.ProcessResourceIResourceIConfigurationStoreIKernel">
            <summary>Sets the shim of XmlInterpreter.ProcessResource(IResource source, IConfigurationStore store, IKernel kernel)</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.Fakes.StubAbstractInterpreter">
            <summary>Stub type of Castle.Windsor.Configuration.Interpreters.AbstractInterpreter</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.Fakes.StubAbstractInterpreter.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.Fakes.StubAbstractInterpreter.#ctor(Castle.Core.Resource.IResource)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.Fakes.StubAbstractInterpreter.#ctor(System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.Fakes.StubAbstractInterpreter.InitializeStub">
            <summary>Initializes a new instance of type StubAbstractInterpreter</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.Fakes.StubAbstractInterpreter.ProcessResource(Castle.Core.Resource.IResource,Castle.MicroKernel.SubSystems.Configuration.IConfigurationStore,Castle.MicroKernel.IKernel)">
            <summary>Sets the stub of AbstractInterpreter.ProcessResource(IResource resource, IConfigurationStore store, IKernel kernel)</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.Fakes.StubAbstractInterpreter.ProcessResourceIResourceIConfigurationStoreIKernel">
            <summary>Sets the stub of AbstractInterpreter.ProcessResource(IResource resource, IConfigurationStore store, IKernel kernel)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.StubAbstractInterpreter.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.StubAbstractInterpreter.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.StubAbstractInterpreter.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.Fakes.StubConfigurationProcessingException">
            <summary>Stub type of Castle.Windsor.Configuration.Interpreters.ConfigurationProcessingException</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.Fakes.StubConfigurationProcessingException.#ctor(System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.Fakes.StubConfigurationProcessingException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.Fakes.StubConfigurationProcessingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.Fakes.StubConfigurationProcessingException.AttachBackingFieldToHelpLink">
            <summary>Attaches delegates to emulate StubConfigurationProcessingException.HelpLink as a property with a backing field.</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.Fakes.StubConfigurationProcessingException.AttachBackingFieldToSource">
            <summary>Attaches delegates to emulate StubConfigurationProcessingException.Source as a property with a backing field.</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.Fakes.StubConfigurationProcessingException.DataGet">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.Fakes.StubConfigurationProcessingException.GetBaseException">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.Fakes.StubConfigurationProcessingException.GetBaseException01">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.Fakes.StubConfigurationProcessingException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.Fakes.StubConfigurationProcessingException.GetObjectDataSerializationInfoStreamingContext">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.Fakes.StubConfigurationProcessingException.HelpLinkGet">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.Fakes.StubConfigurationProcessingException.HelpLinkSetString">
            <summary>Sets the stub of Exception.set_HelpLink(String value)</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.Fakes.StubConfigurationProcessingException.InitializeStub">
            <summary>Initializes a new instance of type StubConfigurationProcessingException</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.Fakes.StubConfigurationProcessingException.MessageGet">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.Fakes.StubConfigurationProcessingException.SourceGet">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.Fakes.StubConfigurationProcessingException.SourceSetString">
            <summary>Sets the stub of Exception.set_Source(String value)</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.Fakes.StubConfigurationProcessingException.StackTraceGet">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.Fakes.StubConfigurationProcessingException.ToString">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.Fakes.StubConfigurationProcessingException.ToString01">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.StubConfigurationProcessingException.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.StubConfigurationProcessingException.Data">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.StubConfigurationProcessingException.HelpLink">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.StubConfigurationProcessingException.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.StubConfigurationProcessingException.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.StubConfigurationProcessingException.Message">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.StubConfigurationProcessingException.Source">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.StubConfigurationProcessingException.StackTrace">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.Fakes.StubXmlInterpreter">
            <summary>Stub type of Castle.Windsor.Configuration.Interpreters.XmlInterpreter</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.Fakes.StubXmlInterpreter.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.Fakes.StubXmlInterpreter.#ctor(Castle.Core.Resource.IResource)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.Fakes.StubXmlInterpreter.#ctor(System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.Fakes.StubXmlInterpreter.InitializeStub">
            <summary>Initializes a new instance of type StubXmlInterpreter</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.Fakes.StubXmlInterpreter.ProcessResource(Castle.Core.Resource.IResource,Castle.MicroKernel.SubSystems.Configuration.IConfigurationStore,Castle.MicroKernel.IKernel)">
            <summary>Sets the stub of XmlInterpreter.ProcessResource(IResource source, IConfigurationStore store, IKernel kernel)</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.Fakes.StubXmlInterpreter.ProcessResourceIResourceIConfigurationStoreIKernel">
            <summary>Sets the stub of XmlInterpreter.ProcessResource(IResource source, IConfigurationStore store, IKernel kernel)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.StubXmlInterpreter.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.StubXmlInterpreter.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.StubXmlInterpreter.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractStatementElementProcessor">
            <summary>Shim type of Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.AbstractStatementElementProcessor</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractStatementElementProcessor.#ctor(Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.AbstractStatementElementProcessor)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractStatementElementProcessor.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractStatementElementProcessor.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractStatementElementProcessor.Bind(Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlNodeProcessor)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractStatementElementProcessor.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractStatementElementProcessor.Constructor">
            <summary>Sets the shim of AbstractStatementElementProcessor.AbstractStatementElementProcessor()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractStatementElementProcessor.ProcessStatementXmlElementIXmlProcessorEngine">
            <summary>Sets the shim of AbstractStatementElementProcessor.ProcessStatement(XmlElement element, IXmlProcessorEngine engine)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractStatementElementProcessor.StaticConstructor">
            <summary>Sets the shim of AbstractStatementElementProcessor.AbstractStatementElementProcessor()</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractStatementElementProcessor.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractStatementElementProcessor.AllInstances.ProcessStatementXmlElementIXmlProcessorEngine">
            <summary>Sets the shim of AbstractStatementElementProcessor.ProcessStatement(XmlElement element, IXmlProcessorEngine engine)</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractXmlNodeProcessor">
            <summary>Shim type of Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.AbstractXmlNodeProcessor</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractXmlNodeProcessor.#ctor(Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.AbstractXmlNodeProcessor)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractXmlNodeProcessor.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractXmlNodeProcessor.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractXmlNodeProcessor.Bind(Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlNodeProcessor)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractXmlNodeProcessor.AcceptNodeTypesGet">
            <summary>Sets the shim of AbstractXmlNodeProcessor.get_AcceptNodeTypes()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractXmlNodeProcessor.AcceptXmlNode">
            <summary>Sets the shim of AbstractXmlNodeProcessor.Accept(XmlNode node)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractXmlNodeProcessor.AppendChildXmlNodeString">
            <summary>Sets the shim of AbstractXmlNodeProcessor.AppendChild(XmlNode element, String text)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractXmlNodeProcessor.AppendChildXmlNodeXmlNode">
            <summary>Sets the shim of AbstractXmlNodeProcessor.AppendChild(XmlNode element, XmlNode child)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractXmlNodeProcessor.AppendChildXmlNodeXmlNodeList">
            <summary>Sets the shim of AbstractXmlNodeProcessor.AppendChild(XmlNode element, XmlNodeList nodes)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractXmlNodeProcessor.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractXmlNodeProcessor.Constructor">
            <summary>Sets the shim of AbstractXmlNodeProcessor.AbstractXmlNodeProcessor()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractXmlNodeProcessor.CreateFragmentXmlNode">
            <summary>Sets the shim of AbstractXmlNodeProcessor.CreateFragment(XmlNode parentNode)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractXmlNodeProcessor.CreateTextXmlNodeString">
            <summary>Sets the shim of AbstractXmlNodeProcessor.CreateText(XmlNode node, String content)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractXmlNodeProcessor.GetNodeAsElementXmlElementXmlNode">
            <summary>Sets the shim of AbstractXmlNodeProcessor.GetNodeAsElement(XmlElement element, XmlNode child)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractXmlNodeProcessor.GetRequiredAttributeXmlElementString">
            <summary>Sets the shim of AbstractXmlNodeProcessor.GetRequiredAttribute(XmlElement element, String attribute)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractXmlNodeProcessor.IgnoreNodeXmlNode">
            <summary>Sets the shim of AbstractXmlNodeProcessor.IgnoreNode(XmlNode node)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractXmlNodeProcessor.ImportNodeXmlNodeXmlNode">
            <summary>Sets the shim of AbstractXmlNodeProcessor.ImportNode(XmlNode targetElement, XmlNode node)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractXmlNodeProcessor.IsTextNodeXmlNode">
            <summary>Sets the shim of AbstractXmlNodeProcessor.IsTextNode(XmlNode node)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractXmlNodeProcessor.MoveChildNodesXmlDocumentFragmentXmlElement">
            <summary>Sets the shim of AbstractXmlNodeProcessor.MoveChildNodes(XmlDocumentFragment fragment, XmlElement element)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractXmlNodeProcessor.RemoveItSelfXmlNode">
            <summary>Sets the shim of AbstractXmlNodeProcessor.RemoveItSelf(XmlNode node)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractXmlNodeProcessor.ReplaceItselfXmlNodeXmlNode">
            <summary>Sets the shim of AbstractXmlNodeProcessor.ReplaceItself(XmlNode newNode, XmlNode oldNode)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractXmlNodeProcessor.ReplaceNodeXmlNodeXmlNodeXmlNode">
            <summary>Sets the shim of AbstractXmlNodeProcessor.ReplaceNode(XmlNode element, XmlNode newNode, XmlNode oldNode)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractXmlNodeProcessor.StaticConstructor">
            <summary>Sets the shim of AbstractXmlNodeProcessor.AbstractXmlNodeProcessor()</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractXmlNodeProcessor.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractXmlNodeProcessor.AllInstances.AcceptNodeTypesGet">
            <summary>Sets the shim of AbstractXmlNodeProcessor.get_AcceptNodeTypes()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractXmlNodeProcessor.AllInstances.AcceptXmlNode">
            <summary>Sets the shim of AbstractXmlNodeProcessor.Accept(XmlNode node)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractXmlNodeProcessor.AllInstances.AppendChildXmlNodeString">
            <summary>Sets the shim of AbstractXmlNodeProcessor.AppendChild(XmlNode element, String text)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractXmlNodeProcessor.AllInstances.AppendChildXmlNodeXmlNode">
            <summary>Sets the shim of AbstractXmlNodeProcessor.AppendChild(XmlNode element, XmlNode child)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractXmlNodeProcessor.AllInstances.AppendChildXmlNodeXmlNodeList">
            <summary>Sets the shim of AbstractXmlNodeProcessor.AppendChild(XmlNode element, XmlNodeList nodes)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractXmlNodeProcessor.AllInstances.CreateFragmentXmlNode">
            <summary>Sets the shim of AbstractXmlNodeProcessor.CreateFragment(XmlNode parentNode)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractXmlNodeProcessor.AllInstances.CreateTextXmlNodeString">
            <summary>Sets the shim of AbstractXmlNodeProcessor.CreateText(XmlNode node, String content)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractXmlNodeProcessor.AllInstances.GetNodeAsElementXmlElementXmlNode">
            <summary>Sets the shim of AbstractXmlNodeProcessor.GetNodeAsElement(XmlElement element, XmlNode child)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractXmlNodeProcessor.AllInstances.GetRequiredAttributeXmlElementString">
            <summary>Sets the shim of AbstractXmlNodeProcessor.GetRequiredAttribute(XmlElement element, String attribute)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractXmlNodeProcessor.AllInstances.IgnoreNodeXmlNode">
            <summary>Sets the shim of AbstractXmlNodeProcessor.IgnoreNode(XmlNode node)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractXmlNodeProcessor.AllInstances.ImportNodeXmlNodeXmlNode">
            <summary>Sets the shim of AbstractXmlNodeProcessor.ImportNode(XmlNode targetElement, XmlNode node)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractXmlNodeProcessor.AllInstances.IsTextNodeXmlNode">
            <summary>Sets the shim of AbstractXmlNodeProcessor.IsTextNode(XmlNode node)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractXmlNodeProcessor.AllInstances.MoveChildNodesXmlDocumentFragmentXmlElement">
            <summary>Sets the shim of AbstractXmlNodeProcessor.MoveChildNodes(XmlDocumentFragment fragment, XmlElement element)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractXmlNodeProcessor.AllInstances.RemoveItSelfXmlNode">
            <summary>Sets the shim of AbstractXmlNodeProcessor.RemoveItSelf(XmlNode node)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractXmlNodeProcessor.AllInstances.ReplaceItselfXmlNodeXmlNode">
            <summary>Sets the shim of AbstractXmlNodeProcessor.ReplaceItself(XmlNode newNode, XmlNode oldNode)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractXmlNodeProcessor.AllInstances.ReplaceNodeXmlNodeXmlNodeXmlNode">
            <summary>Sets the shim of AbstractXmlNodeProcessor.ReplaceNode(XmlNode element, XmlNode newNode, XmlNode oldNode)</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAttributesElementProcessor">
            <summary>Shim type of Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.AttributesElementProcessor</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAttributesElementProcessor.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAttributesElementProcessor.#ctor(Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.AttributesElementProcessor)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAttributesElementProcessor.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAttributesElementProcessor.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAttributesElementProcessor.Bind(Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlNodeProcessor)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAttributesElementProcessor.AppendElementAsAttributeXmlNodeXmlElement">
            <summary>Sets the shim of AttributesElementProcessor.AppendElementAsAttribute(XmlNode parentElement, XmlElement element)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAttributesElementProcessor.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAttributesElementProcessor.Constructor">
            <summary>Sets the shim of AttributesElementProcessor.AttributesElementProcessor()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAttributesElementProcessor.NameGet">
            <summary>Sets the shim of AttributesElementProcessor.get_Name()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAttributesElementProcessor.ProcessIXmlProcessorNodeListIXmlProcessorEngine">
            <summary>Sets the shim of AttributesElementProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine)</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAttributesElementProcessor.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAttributesElementProcessor.AllInstances.AppendElementAsAttributeXmlNodeXmlElement">
            <summary>Sets the shim of AttributesElementProcessor.AppendElementAsAttribute(XmlNode parentElement, XmlElement element)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAttributesElementProcessor.AllInstances.NameGet">
            <summary>Sets the shim of AttributesElementProcessor.get_Name()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAttributesElementProcessor.AllInstances.ProcessIXmlProcessorNodeListIXmlProcessorEngine">
            <summary>Sets the shim of AttributesElementProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine)</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimChooseElementProcessor">
            <summary>Shim type of Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.ChooseElementProcessor</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimChooseElementProcessor.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimChooseElementProcessor.#ctor(Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.ChooseElementProcessor)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimChooseElementProcessor.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimChooseElementProcessor.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimChooseElementProcessor.Bind(Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlNodeProcessor)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimChooseElementProcessor.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimChooseElementProcessor.Constructor">
            <summary>Sets the shim of ChooseElementProcessor.ChooseElementProcessor()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimChooseElementProcessor.NameGet">
            <summary>Sets the shim of ChooseElementProcessor.get_Name()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimChooseElementProcessor.ProcessIXmlProcessorNodeListIXmlProcessorEngine">
            <summary>Sets the shim of ChooseElementProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimChooseElementProcessor.StaticConstructor">
            <summary>Sets the shim of ChooseElementProcessor.ChooseElementProcessor()</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimChooseElementProcessor.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimChooseElementProcessor.AllInstances.NameGet">
            <summary>Sets the shim of ChooseElementProcessor.get_Name()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimChooseElementProcessor.AllInstances.ProcessIXmlProcessorNodeListIXmlProcessorEngine">
            <summary>Sets the shim of ChooseElementProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine)</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefaultElementProcessor">
            <summary>Shim type of Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.DefaultElementProcessor</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefaultElementProcessor.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefaultElementProcessor.#ctor(Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.DefaultElementProcessor)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefaultElementProcessor.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefaultElementProcessor.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefaultElementProcessor.Bind(Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlNodeProcessor)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefaultElementProcessor.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefaultElementProcessor.Constructor">
            <summary>Sets the shim of DefaultElementProcessor.DefaultElementProcessor()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefaultElementProcessor.NameGet">
            <summary>Sets the shim of DefaultElementProcessor.get_Name()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefaultElementProcessor.ProcessAttributesXmlElementIXmlProcessorEngine">
            <summary>Sets the shim of DefaultElementProcessor.ProcessAttributes(XmlElement element, IXmlProcessorEngine engine)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefaultElementProcessor.ProcessIXmlProcessorNodeListIXmlProcessorEngine">
            <summary>Sets the shim of DefaultElementProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefaultElementProcessor.ProcessIncludeAttributeXmlElementIXmlProcessorEngine">
            <summary>Sets the shim of DefaultElementProcessor.ProcessIncludeAttribute(XmlElement element, IXmlProcessorEngine engine)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefaultElementProcessor.StaticConstructor">
            <summary>Sets the shim of DefaultElementProcessor.DefaultElementProcessor()</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefaultElementProcessor.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefaultElementProcessor.AllInstances.NameGet">
            <summary>Sets the shim of DefaultElementProcessor.get_Name()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefaultElementProcessor.AllInstances.ProcessIXmlProcessorNodeListIXmlProcessorEngine">
            <summary>Sets the shim of DefaultElementProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine)</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefaultTextNodeProcessor">
            <summary>Shim type of Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.DefaultTextNodeProcessor</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefaultTextNodeProcessor.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefaultTextNodeProcessor.#ctor(Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.DefaultTextNodeProcessor)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefaultTextNodeProcessor.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefaultTextNodeProcessor.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefaultTextNodeProcessor.Bind(Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlNodeProcessor)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefaultTextNodeProcessor.AcceptNodeTypesGet">
            <summary>Sets the shim of DefaultTextNodeProcessor.get_AcceptNodeTypes()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefaultTextNodeProcessor.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefaultTextNodeProcessor.Constructor">
            <summary>Sets the shim of DefaultTextNodeProcessor.DefaultTextNodeProcessor()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefaultTextNodeProcessor.IsRequiredPropertyString">
            <summary>Sets the shim of DefaultTextNodeProcessor.IsRequiredProperty(String propRef)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefaultTextNodeProcessor.MoveAttributesXmlElementXmlElement">
            <summary>Sets the shim of DefaultTextNodeProcessor.MoveAttributes(XmlElement targetElement, XmlElement srcElement)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefaultTextNodeProcessor.NameGet">
            <summary>Sets the shim of DefaultTextNodeProcessor.get_Name()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefaultTextNodeProcessor.ProcessIXmlProcessorNodeListIXmlProcessorEngine">
            <summary>Sets the shim of DefaultTextNodeProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefaultTextNodeProcessor.ProcessStringXmlNodeStringIXmlProcessorEngine">
            <summary>Sets the shim of DefaultTextNodeProcessor.ProcessString(XmlNode node, String value, IXmlProcessorEngine engine)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefaultTextNodeProcessor.StaticConstructor">
            <summary>Sets the shim of DefaultTextNodeProcessor.DefaultTextNodeProcessor()</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefaultTextNodeProcessor.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefaultTextNodeProcessor.AllInstances.AcceptNodeTypesGet">
            <summary>Sets the shim of DefaultTextNodeProcessor.get_AcceptNodeTypes()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefaultTextNodeProcessor.AllInstances.IsRequiredPropertyString">
            <summary>Sets the shim of DefaultTextNodeProcessor.IsRequiredProperty(String propRef)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefaultTextNodeProcessor.AllInstances.MoveAttributesXmlElementXmlElement">
            <summary>Sets the shim of DefaultTextNodeProcessor.MoveAttributes(XmlElement targetElement, XmlElement srcElement)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefaultTextNodeProcessor.AllInstances.NameGet">
            <summary>Sets the shim of DefaultTextNodeProcessor.get_Name()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefaultTextNodeProcessor.AllInstances.ProcessIXmlProcessorNodeListIXmlProcessorEngine">
            <summary>Sets the shim of DefaultTextNodeProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefaultTextNodeProcessor.AllInstances.ProcessStringXmlNodeStringIXmlProcessorEngine">
            <summary>Sets the shim of DefaultTextNodeProcessor.ProcessString(XmlNode node, String value, IXmlProcessorEngine engine)</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefineElementProcessor">
            <summary>Shim type of Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.DefineElementProcessor</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefineElementProcessor.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefineElementProcessor.#ctor(Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.DefineElementProcessor)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefineElementProcessor.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefineElementProcessor.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefineElementProcessor.Bind(Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlNodeProcessor)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefineElementProcessor.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefineElementProcessor.Constructor">
            <summary>Sets the shim of DefineElementProcessor.DefineElementProcessor()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefineElementProcessor.NameGet">
            <summary>Sets the shim of DefineElementProcessor.get_Name()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefineElementProcessor.ProcessIXmlProcessorNodeListIXmlProcessorEngine">
            <summary>Sets the shim of DefineElementProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefineElementProcessor.ProcessStringIXmlProcessorEngine">
            <summary>Sets the shim of DefineElementProcessor.Process(String flag, IXmlProcessorEngine engine)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefineElementProcessor.StaticConstructor">
            <summary>Sets the shim of DefineElementProcessor.DefineElementProcessor()</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefineElementProcessor.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefineElementProcessor.AllInstances.NameGet">
            <summary>Sets the shim of DefineElementProcessor.get_Name()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefineElementProcessor.AllInstances.ProcessIXmlProcessorNodeListIXmlProcessorEngine">
            <summary>Sets the shim of DefineElementProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefineElementProcessor.AllInstances.ProcessStringIXmlProcessorEngine">
            <summary>Sets the shim of DefineElementProcessor.Process(String flag, IXmlProcessorEngine engine)</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefinedProcessingInstructionProcessor">
            <summary>Shim type of Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.DefinedProcessingInstructionProcessor</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefinedProcessingInstructionProcessor.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefinedProcessingInstructionProcessor.#ctor(Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.DefinedProcessingInstructionProcessor)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefinedProcessingInstructionProcessor.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefinedProcessingInstructionProcessor.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefinedProcessingInstructionProcessor.Bind(Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlNodeProcessor)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefinedProcessingInstructionProcessor.AcceptNodeTypesGet">
            <summary>Sets the shim of DefinedProcessingInstructionProcessor.get_AcceptNodeTypes()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefinedProcessingInstructionProcessor.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefinedProcessingInstructionProcessor.Constructor">
            <summary>Sets the shim of DefinedProcessingInstructionProcessor.DefinedProcessingInstructionProcessor()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefinedProcessingInstructionProcessor.NameGet">
            <summary>Sets the shim of DefinedProcessingInstructionProcessor.get_Name()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefinedProcessingInstructionProcessor.ProcessIXmlProcessorNodeListIXmlProcessorEngine">
            <summary>Sets the shim of DefinedProcessingInstructionProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefinedProcessingInstructionProcessor.StaticConstructor">
            <summary>Sets the shim of DefinedProcessingInstructionProcessor.DefinedProcessingInstructionProcessor()</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefinedProcessingInstructionProcessor.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefinedProcessingInstructionProcessor.AllInstances.AcceptNodeTypesGet">
            <summary>Sets the shim of DefinedProcessingInstructionProcessor.get_AcceptNodeTypes()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefinedProcessingInstructionProcessor.AllInstances.NameGet">
            <summary>Sets the shim of DefinedProcessingInstructionProcessor.get_Name()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefinedProcessingInstructionProcessor.AllInstances.ProcessIXmlProcessorNodeListIXmlProcessorEngine">
            <summary>Sets the shim of DefinedProcessingInstructionProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine)</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimEvalProcessingInstructionProcessor">
            <summary>Shim type of Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.EvalProcessingInstructionProcessor</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimEvalProcessingInstructionProcessor.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimEvalProcessingInstructionProcessor.#ctor(Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.EvalProcessingInstructionProcessor)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimEvalProcessingInstructionProcessor.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimEvalProcessingInstructionProcessor.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimEvalProcessingInstructionProcessor.Bind(Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlNodeProcessor)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimEvalProcessingInstructionProcessor.AcceptNodeTypesGet">
            <summary>Sets the shim of EvalProcessingInstructionProcessor.get_AcceptNodeTypes()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimEvalProcessingInstructionProcessor.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimEvalProcessingInstructionProcessor.Constructor">
            <summary>Sets the shim of EvalProcessingInstructionProcessor.EvalProcessingInstructionProcessor()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimEvalProcessingInstructionProcessor.NameGet">
            <summary>Sets the shim of EvalProcessingInstructionProcessor.get_Name()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimEvalProcessingInstructionProcessor.ProcessIXmlProcessorNodeListIXmlProcessorEngine">
            <summary>Sets the shim of EvalProcessingInstructionProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimEvalProcessingInstructionProcessor.StaticConstructor">
            <summary>Sets the shim of EvalProcessingInstructionProcessor.EvalProcessingInstructionProcessor()</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimEvalProcessingInstructionProcessor.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimEvalProcessingInstructionProcessor.AllInstances.AcceptNodeTypesGet">
            <summary>Sets the shim of EvalProcessingInstructionProcessor.get_AcceptNodeTypes()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimEvalProcessingInstructionProcessor.AllInstances.NameGet">
            <summary>Sets the shim of EvalProcessingInstructionProcessor.get_Name()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimEvalProcessingInstructionProcessor.AllInstances.ProcessIXmlProcessorNodeListIXmlProcessorEngine">
            <summary>Sets the shim of EvalProcessingInstructionProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine)</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimIfElementProcessor">
            <summary>Shim type of Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.IfElementProcessor</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimIfElementProcessor.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimIfElementProcessor.#ctor(Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.IfElementProcessor)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimIfElementProcessor.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimIfElementProcessor.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimIfElementProcessor.Bind(Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlNodeProcessor)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimIfElementProcessor.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimIfElementProcessor.Constructor">
            <summary>Sets the shim of IfElementProcessor.IfElementProcessor()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimIfElementProcessor.NameGet">
            <summary>Sets the shim of IfElementProcessor.get_Name()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimIfElementProcessor.ProcessIXmlProcessorNodeListIXmlProcessorEngine">
            <summary>Sets the shim of IfElementProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine)</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimIfElementProcessor.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimIfElementProcessor.AllInstances.NameGet">
            <summary>Sets the shim of IfElementProcessor.get_Name()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimIfElementProcessor.AllInstances.ProcessIXmlProcessorNodeListIXmlProcessorEngine">
            <summary>Sets the shim of IfElementProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine)</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimIfProcessingInstructionProcessor">
            <summary>Shim type of Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.IfProcessingInstructionProcessor</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimIfProcessingInstructionProcessor.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimIfProcessingInstructionProcessor.#ctor(Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.IfProcessingInstructionProcessor)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimIfProcessingInstructionProcessor.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimIfProcessingInstructionProcessor.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimIfProcessingInstructionProcessor.Bind(Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlNodeProcessor)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimIfProcessingInstructionProcessor.AcceptNodeTypesGet">
            <summary>Sets the shim of IfProcessingInstructionProcessor.get_AcceptNodeTypes()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimIfProcessingInstructionProcessor.AssertDataXmlProcessingInstructionBoolean">
            <summary>Sets the shim of IfProcessingInstructionProcessor.AssertData(XmlProcessingInstruction pi, Boolean requireData)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimIfProcessingInstructionProcessor.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimIfProcessingInstructionProcessor.Constructor">
            <summary>Sets the shim of IfProcessingInstructionProcessor.IfProcessingInstructionProcessor()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimIfProcessingInstructionProcessor.NameGet">
            <summary>Sets the shim of IfProcessingInstructionProcessor.get_Name()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimIfProcessingInstructionProcessor.ProcessIXmlProcessorNodeListIXmlProcessorEngine">
            <summary>Sets the shim of IfProcessingInstructionProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimIfProcessingInstructionProcessor.StaticConstructor">
            <summary>Sets the shim of IfProcessingInstructionProcessor.IfProcessingInstructionProcessor()</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimIfProcessingInstructionProcessor.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimIfProcessingInstructionProcessor.AllInstances.AcceptNodeTypesGet">
            <summary>Sets the shim of IfProcessingInstructionProcessor.get_AcceptNodeTypes()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimIfProcessingInstructionProcessor.AllInstances.AssertDataXmlProcessingInstructionBoolean">
            <summary>Sets the shim of IfProcessingInstructionProcessor.AssertData(XmlProcessingInstruction pi, Boolean requireData)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimIfProcessingInstructionProcessor.AllInstances.NameGet">
            <summary>Sets the shim of IfProcessingInstructionProcessor.get_Name()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimIfProcessingInstructionProcessor.AllInstances.ProcessIXmlProcessorNodeListIXmlProcessorEngine">
            <summary>Sets the shim of IfProcessingInstructionProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine)</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimIncludeElementProcessor">
            <summary>Shim type of Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.IncludeElementProcessor</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimIncludeElementProcessor.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimIncludeElementProcessor.#ctor(Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.IncludeElementProcessor)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimIncludeElementProcessor.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimIncludeElementProcessor.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimIncludeElementProcessor.Bind(Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlNodeProcessor)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimIncludeElementProcessor.AcceptXmlNode">
            <summary>Sets the shim of IncludeElementProcessor.Accept(XmlNode node)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimIncludeElementProcessor.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimIncludeElementProcessor.Constructor">
            <summary>Sets the shim of IncludeElementProcessor.IncludeElementProcessor()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimIncludeElementProcessor.NameGet">
            <summary>Sets the shim of IncludeElementProcessor.get_Name()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimIncludeElementProcessor.ProcessIXmlProcessorNodeListIXmlProcessorEngine">
            <summary>Sets the shim of IncludeElementProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimIncludeElementProcessor.ProcessIncludeXmlElementStringIXmlProcessorEngine">
            <summary>Sets the shim of IncludeElementProcessor.ProcessInclude(XmlElement element, String includeUri, IXmlProcessorEngine engine)</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimIncludeElementProcessor.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimIncludeElementProcessor.AllInstances.AcceptXmlNode">
            <summary>Sets the shim of IncludeElementProcessor.Accept(XmlNode node)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimIncludeElementProcessor.AllInstances.NameGet">
            <summary>Sets the shim of IncludeElementProcessor.get_Name()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimIncludeElementProcessor.AllInstances.ProcessIXmlProcessorNodeListIXmlProcessorEngine">
            <summary>Sets the shim of IncludeElementProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimIncludeElementProcessor.AllInstances.ProcessIncludeXmlElementStringIXmlProcessorEngine">
            <summary>Sets the shim of IncludeElementProcessor.ProcessInclude(XmlElement element, String includeUri, IXmlProcessorEngine engine)</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimPropertiesElementProcessor">
            <summary>Shim type of Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.PropertiesElementProcessor</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimPropertiesElementProcessor.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimPropertiesElementProcessor.#ctor(Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.PropertiesElementProcessor)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimPropertiesElementProcessor.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimPropertiesElementProcessor.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimPropertiesElementProcessor.Bind(Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlNodeProcessor)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimPropertiesElementProcessor.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimPropertiesElementProcessor.Constructor">
            <summary>Sets the shim of PropertiesElementProcessor.PropertiesElementProcessor()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimPropertiesElementProcessor.NameGet">
            <summary>Sets the shim of PropertiesElementProcessor.get_Name()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimPropertiesElementProcessor.ProcessIXmlProcessorNodeListIXmlProcessorEngine">
            <summary>Sets the shim of PropertiesElementProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine)</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimPropertiesElementProcessor.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimPropertiesElementProcessor.AllInstances.NameGet">
            <summary>Sets the shim of PropertiesElementProcessor.get_Name()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimPropertiesElementProcessor.AllInstances.ProcessIXmlProcessorNodeListIXmlProcessorEngine">
            <summary>Sets the shim of PropertiesElementProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine)</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimUndefElementProcessor">
            <summary>Shim type of Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.UndefElementProcessor</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimUndefElementProcessor.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimUndefElementProcessor.#ctor(Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.UndefElementProcessor)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimUndefElementProcessor.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimUndefElementProcessor.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimUndefElementProcessor.Bind(Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlNodeProcessor)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimUndefElementProcessor.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimUndefElementProcessor.Constructor">
            <summary>Sets the shim of UndefElementProcessor.UndefElementProcessor()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimUndefElementProcessor.NameGet">
            <summary>Sets the shim of UndefElementProcessor.get_Name()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimUndefElementProcessor.ProcessStringIXmlProcessorEngine">
            <summary>Sets the shim of UndefElementProcessor.Process(String flag, IXmlProcessorEngine engine)</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimUndefElementProcessor.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimUndefElementProcessor.AllInstances.NameGet">
            <summary>Sets the shim of UndefElementProcessor.get_Name()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimUndefElementProcessor.AllInstances.ProcessStringIXmlProcessorEngine">
            <summary>Sets the shim of UndefElementProcessor.Process(String flag, IXmlProcessorEngine engine)</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimUndefProcessingInstructionProcessor">
            <summary>Shim type of Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.UndefProcessingInstructionProcessor</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimUndefProcessingInstructionProcessor.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimUndefProcessingInstructionProcessor.#ctor(Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.UndefProcessingInstructionProcessor)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimUndefProcessingInstructionProcessor.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimUndefProcessingInstructionProcessor.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimUndefProcessingInstructionProcessor.Bind(Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlNodeProcessor)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimUndefProcessingInstructionProcessor.AcceptNodeTypesGet">
            <summary>Sets the shim of UndefProcessingInstructionProcessor.get_AcceptNodeTypes()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimUndefProcessingInstructionProcessor.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimUndefProcessingInstructionProcessor.Constructor">
            <summary>Sets the shim of UndefProcessingInstructionProcessor.UndefProcessingInstructionProcessor()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimUndefProcessingInstructionProcessor.NameGet">
            <summary>Sets the shim of UndefProcessingInstructionProcessor.get_Name()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimUndefProcessingInstructionProcessor.ProcessIXmlProcessorNodeListIXmlProcessorEngine">
            <summary>Sets the shim of UndefProcessingInstructionProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine)</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimUndefProcessingInstructionProcessor.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimUndefProcessingInstructionProcessor.AllInstances.AcceptNodeTypesGet">
            <summary>Sets the shim of UndefProcessingInstructionProcessor.get_AcceptNodeTypes()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimUndefProcessingInstructionProcessor.AllInstances.NameGet">
            <summary>Sets the shim of UndefProcessingInstructionProcessor.get_Name()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimUndefProcessingInstructionProcessor.AllInstances.ProcessIXmlProcessorNodeListIXmlProcessorEngine">
            <summary>Sets the shim of UndefProcessingInstructionProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine)</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimUsingElementProcessor">
            <summary>Shim type of Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.UsingElementProcessor</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimUsingElementProcessor.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimUsingElementProcessor.#ctor(Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.UsingElementProcessor)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimUsingElementProcessor.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimUsingElementProcessor.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimUsingElementProcessor.Bind(Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlNodeProcessor)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimUsingElementProcessor.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimUsingElementProcessor.Constructor">
            <summary>Sets the shim of UsingElementProcessor.UsingElementProcessor()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimUsingElementProcessor.NameGet">
            <summary>Sets the shim of UsingElementProcessor.get_Name()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimUsingElementProcessor.ProcessIXmlProcessorNodeListIXmlProcessorEngine">
            <summary>Sets the shim of UsingElementProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine)</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimUsingElementProcessor.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimUsingElementProcessor.AllInstances.NameGet">
            <summary>Sets the shim of UsingElementProcessor.get_Name()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimUsingElementProcessor.AllInstances.ProcessIXmlProcessorNodeListIXmlProcessorEngine">
            <summary>Sets the shim of UsingElementProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine)</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubAbstractStatementElementProcessor">
            <summary>Stub type of Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.AbstractStatementElementProcessor</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubAbstractStatementElementProcessor.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubAbstractStatementElementProcessor.Accept(System.Xml.XmlNode)">
            <summary>Sets the stub of AbstractXmlNodeProcessor.Accept(XmlNode node)</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubAbstractStatementElementProcessor.AcceptNodeTypesGet">
            <summary>Sets the stub of AbstractXmlNodeProcessor.get_AcceptNodeTypes()</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubAbstractStatementElementProcessor.AcceptXmlNode">
            <summary>Sets the stub of AbstractXmlNodeProcessor.Accept(XmlNode node)</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubAbstractStatementElementProcessor.IgnoreNode(System.Xml.XmlNode)">
            <summary>Sets the stub of AbstractXmlNodeProcessor.IgnoreNode(XmlNode node)</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubAbstractStatementElementProcessor.IgnoreNodeXmlNode">
            <summary>Sets the stub of AbstractXmlNodeProcessor.IgnoreNode(XmlNode node)</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubAbstractStatementElementProcessor.InitializeStub">
            <summary>Initializes a new instance of type StubAbstractStatementElementProcessor</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubAbstractStatementElementProcessor.NameGet">
            <summary>Sets the stub of AbstractXmlNodeProcessor.get_Name()</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubAbstractStatementElementProcessor.Process(Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlProcessorNodeList,Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlProcessorEngine)">
            <summary>Sets the stub of AbstractXmlNodeProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine)</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubAbstractStatementElementProcessor.ProcessIXmlProcessorNodeListIXmlProcessorEngine">
            <summary>Sets the stub of AbstractXmlNodeProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubAbstractStatementElementProcessor.AcceptNodeTypes">
            <summary>Sets the stub of AbstractXmlNodeProcessor.get_AcceptNodeTypes()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubAbstractStatementElementProcessor.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubAbstractStatementElementProcessor.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubAbstractStatementElementProcessor.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubAbstractStatementElementProcessor.Name">
            <summary>Sets the stub of AbstractXmlNodeProcessor.get_Name()</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubAbstractXmlNodeProcessor">
            <summary>Stub type of Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.AbstractXmlNodeProcessor</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubAbstractXmlNodeProcessor.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubAbstractXmlNodeProcessor.Accept(System.Xml.XmlNode)">
            <summary>Sets the stub of AbstractXmlNodeProcessor.Accept(XmlNode node)</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubAbstractXmlNodeProcessor.AcceptNodeTypesGet">
            <summary>Sets the stub of AbstractXmlNodeProcessor.get_AcceptNodeTypes()</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubAbstractXmlNodeProcessor.AcceptXmlNode">
            <summary>Sets the stub of AbstractXmlNodeProcessor.Accept(XmlNode node)</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubAbstractXmlNodeProcessor.IgnoreNode(System.Xml.XmlNode)">
            <summary>Sets the stub of AbstractXmlNodeProcessor.IgnoreNode(XmlNode node)</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubAbstractXmlNodeProcessor.IgnoreNodeXmlNode">
            <summary>Sets the stub of AbstractXmlNodeProcessor.IgnoreNode(XmlNode node)</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubAbstractXmlNodeProcessor.InitializeStub">
            <summary>Initializes a new instance of type StubAbstractXmlNodeProcessor</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubAbstractXmlNodeProcessor.NameGet">
            <summary>Sets the stub of AbstractXmlNodeProcessor.get_Name()</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubAbstractXmlNodeProcessor.Process(Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlProcessorNodeList,Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlProcessorEngine)">
            <summary>Sets the stub of AbstractXmlNodeProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine)</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubAbstractXmlNodeProcessor.ProcessIXmlProcessorNodeListIXmlProcessorEngine">
            <summary>Sets the stub of AbstractXmlNodeProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubAbstractXmlNodeProcessor.AcceptNodeTypes">
            <summary>Sets the stub of AbstractXmlNodeProcessor.get_AcceptNodeTypes()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubAbstractXmlNodeProcessor.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubAbstractXmlNodeProcessor.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubAbstractXmlNodeProcessor.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubAbstractXmlNodeProcessor.Name">
            <summary>Sets the stub of AbstractXmlNodeProcessor.get_Name()</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubAttributesElementProcessor">
            <summary>Stub type of Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.AttributesElementProcessor</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubAttributesElementProcessor.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubAttributesElementProcessor.Accept(System.Xml.XmlNode)">
            <summary>Sets the stub of AbstractXmlNodeProcessor.Accept(XmlNode node)</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubAttributesElementProcessor.AcceptNodeTypesGet">
            <summary>Sets the stub of AbstractXmlNodeProcessor.get_AcceptNodeTypes()</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubAttributesElementProcessor.AcceptXmlNode">
            <summary>Sets the stub of AbstractXmlNodeProcessor.Accept(XmlNode node)</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubAttributesElementProcessor.IgnoreNode(System.Xml.XmlNode)">
            <summary>Sets the stub of AbstractXmlNodeProcessor.IgnoreNode(XmlNode node)</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubAttributesElementProcessor.IgnoreNodeXmlNode">
            <summary>Sets the stub of AbstractXmlNodeProcessor.IgnoreNode(XmlNode node)</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubAttributesElementProcessor.InitializeStub">
            <summary>Initializes a new instance of type StubAttributesElementProcessor</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubAttributesElementProcessor.NameGet">
            <summary>Sets the stub of AttributesElementProcessor.get_Name()</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubAttributesElementProcessor.Process(Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlProcessorNodeList,Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlProcessorEngine)">
            <summary>Sets the stub of AttributesElementProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine)</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubAttributesElementProcessor.ProcessIXmlProcessorNodeListIXmlProcessorEngine">
            <summary>Sets the stub of AttributesElementProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubAttributesElementProcessor.AcceptNodeTypes">
            <summary>Sets the stub of AbstractXmlNodeProcessor.get_AcceptNodeTypes()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubAttributesElementProcessor.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubAttributesElementProcessor.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubAttributesElementProcessor.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubAttributesElementProcessor.Name">
            <summary>Sets the stub of AttributesElementProcessor.get_Name()</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubChooseElementProcessor">
            <summary>Stub type of Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.ChooseElementProcessor</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubChooseElementProcessor.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubChooseElementProcessor.Accept(System.Xml.XmlNode)">
            <summary>Sets the stub of AbstractXmlNodeProcessor.Accept(XmlNode node)</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubChooseElementProcessor.AcceptNodeTypesGet">
            <summary>Sets the stub of AbstractXmlNodeProcessor.get_AcceptNodeTypes()</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubChooseElementProcessor.AcceptXmlNode">
            <summary>Sets the stub of AbstractXmlNodeProcessor.Accept(XmlNode node)</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubChooseElementProcessor.IgnoreNode(System.Xml.XmlNode)">
            <summary>Sets the stub of AbstractXmlNodeProcessor.IgnoreNode(XmlNode node)</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubChooseElementProcessor.IgnoreNodeXmlNode">
            <summary>Sets the stub of AbstractXmlNodeProcessor.IgnoreNode(XmlNode node)</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubChooseElementProcessor.InitializeStub">
            <summary>Initializes a new instance of type StubChooseElementProcessor</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubChooseElementProcessor.NameGet">
            <summary>Sets the stub of ChooseElementProcessor.get_Name()</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubChooseElementProcessor.Process(Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlProcessorNodeList,Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlProcessorEngine)">
            <summary>Sets the stub of ChooseElementProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine)</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubChooseElementProcessor.ProcessIXmlProcessorNodeListIXmlProcessorEngine">
            <summary>Sets the stub of ChooseElementProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubChooseElementProcessor.AcceptNodeTypes">
            <summary>Sets the stub of AbstractXmlNodeProcessor.get_AcceptNodeTypes()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubChooseElementProcessor.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubChooseElementProcessor.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubChooseElementProcessor.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubChooseElementProcessor.Name">
            <summary>Sets the stub of ChooseElementProcessor.get_Name()</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefaultElementProcessor">
            <summary>Stub type of Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.DefaultElementProcessor</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefaultElementProcessor.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefaultElementProcessor.Accept(System.Xml.XmlNode)">
            <summary>Sets the stub of AbstractXmlNodeProcessor.Accept(XmlNode node)</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefaultElementProcessor.AcceptNodeTypesGet">
            <summary>Sets the stub of AbstractXmlNodeProcessor.get_AcceptNodeTypes()</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefaultElementProcessor.AcceptXmlNode">
            <summary>Sets the stub of AbstractXmlNodeProcessor.Accept(XmlNode node)</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefaultElementProcessor.IgnoreNode(System.Xml.XmlNode)">
            <summary>Sets the stub of AbstractXmlNodeProcessor.IgnoreNode(XmlNode node)</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefaultElementProcessor.IgnoreNodeXmlNode">
            <summary>Sets the stub of AbstractXmlNodeProcessor.IgnoreNode(XmlNode node)</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefaultElementProcessor.InitializeStub">
            <summary>Initializes a new instance of type StubDefaultElementProcessor</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefaultElementProcessor.NameGet">
            <summary>Sets the stub of DefaultElementProcessor.get_Name()</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefaultElementProcessor.Process(Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlProcessorNodeList,Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlProcessorEngine)">
            <summary>Sets the stub of DefaultElementProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine)</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefaultElementProcessor.ProcessIXmlProcessorNodeListIXmlProcessorEngine">
            <summary>Sets the stub of DefaultElementProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefaultElementProcessor.AcceptNodeTypes">
            <summary>Sets the stub of AbstractXmlNodeProcessor.get_AcceptNodeTypes()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefaultElementProcessor.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefaultElementProcessor.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefaultElementProcessor.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefaultElementProcessor.Name">
            <summary>Sets the stub of DefaultElementProcessor.get_Name()</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefaultTextNodeProcessor">
            <summary>Stub type of Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.DefaultTextNodeProcessor</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefaultTextNodeProcessor.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefaultTextNodeProcessor.Accept(System.Xml.XmlNode)">
            <summary>Sets the stub of AbstractXmlNodeProcessor.Accept(XmlNode node)</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefaultTextNodeProcessor.AcceptNodeTypesGet">
            <summary>Sets the stub of DefaultTextNodeProcessor.get_AcceptNodeTypes()</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefaultTextNodeProcessor.AcceptXmlNode">
            <summary>Sets the stub of AbstractXmlNodeProcessor.Accept(XmlNode node)</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefaultTextNodeProcessor.IgnoreNode(System.Xml.XmlNode)">
            <summary>Sets the stub of AbstractXmlNodeProcessor.IgnoreNode(XmlNode node)</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefaultTextNodeProcessor.IgnoreNodeXmlNode">
            <summary>Sets the stub of AbstractXmlNodeProcessor.IgnoreNode(XmlNode node)</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefaultTextNodeProcessor.InitializeStub">
            <summary>Initializes a new instance of type StubDefaultTextNodeProcessor</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefaultTextNodeProcessor.NameGet">
            <summary>Sets the stub of DefaultTextNodeProcessor.get_Name()</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefaultTextNodeProcessor.Process(Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlProcessorNodeList,Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlProcessorEngine)">
            <summary>Sets the stub of DefaultTextNodeProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine)</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefaultTextNodeProcessor.ProcessIXmlProcessorNodeListIXmlProcessorEngine">
            <summary>Sets the stub of DefaultTextNodeProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefaultTextNodeProcessor.AcceptNodeTypes">
            <summary>Sets the stub of DefaultTextNodeProcessor.get_AcceptNodeTypes()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefaultTextNodeProcessor.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefaultTextNodeProcessor.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefaultTextNodeProcessor.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefaultTextNodeProcessor.Name">
            <summary>Sets the stub of DefaultTextNodeProcessor.get_Name()</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefineElementProcessor">
            <summary>Stub type of Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.DefineElementProcessor</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefineElementProcessor.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefineElementProcessor.Accept(System.Xml.XmlNode)">
            <summary>Sets the stub of AbstractXmlNodeProcessor.Accept(XmlNode node)</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefineElementProcessor.AcceptNodeTypesGet">
            <summary>Sets the stub of AbstractXmlNodeProcessor.get_AcceptNodeTypes()</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefineElementProcessor.AcceptXmlNode">
            <summary>Sets the stub of AbstractXmlNodeProcessor.Accept(XmlNode node)</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefineElementProcessor.IgnoreNode(System.Xml.XmlNode)">
            <summary>Sets the stub of AbstractXmlNodeProcessor.IgnoreNode(XmlNode node)</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefineElementProcessor.IgnoreNodeXmlNode">
            <summary>Sets the stub of AbstractXmlNodeProcessor.IgnoreNode(XmlNode node)</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefineElementProcessor.InitializeStub">
            <summary>Initializes a new instance of type StubDefineElementProcessor</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefineElementProcessor.NameGet">
            <summary>Sets the stub of DefineElementProcessor.get_Name()</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefineElementProcessor.Process(Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlProcessorNodeList,Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlProcessorEngine)">
            <summary>Sets the stub of DefineElementProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine)</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefineElementProcessor.Process(System.String,Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlProcessorEngine)">
            <summary>Sets the stub of DefineElementProcessor.Process(String flag, IXmlProcessorEngine engine)</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefineElementProcessor.ProcessIXmlProcessorNodeListIXmlProcessorEngine">
            <summary>Sets the stub of DefineElementProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine)</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefineElementProcessor.ProcessStringIXmlProcessorEngine">
            <summary>Sets the stub of DefineElementProcessor.Process(String flag, IXmlProcessorEngine engine)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefineElementProcessor.AcceptNodeTypes">
            <summary>Sets the stub of AbstractXmlNodeProcessor.get_AcceptNodeTypes()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefineElementProcessor.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefineElementProcessor.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefineElementProcessor.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefineElementProcessor.Name">
            <summary>Sets the stub of DefineElementProcessor.get_Name()</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefinedProcessingInstructionProcessor">
            <summary>Stub type of Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.DefinedProcessingInstructionProcessor</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefinedProcessingInstructionProcessor.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefinedProcessingInstructionProcessor.Accept(System.Xml.XmlNode)">
            <summary>Sets the stub of AbstractXmlNodeProcessor.Accept(XmlNode node)</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefinedProcessingInstructionProcessor.AcceptNodeTypesGet">
            <summary>Sets the stub of DefinedProcessingInstructionProcessor.get_AcceptNodeTypes()</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefinedProcessingInstructionProcessor.AcceptXmlNode">
            <summary>Sets the stub of AbstractXmlNodeProcessor.Accept(XmlNode node)</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefinedProcessingInstructionProcessor.IgnoreNode(System.Xml.XmlNode)">
            <summary>Sets the stub of AbstractXmlNodeProcessor.IgnoreNode(XmlNode node)</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefinedProcessingInstructionProcessor.IgnoreNodeXmlNode">
            <summary>Sets the stub of AbstractXmlNodeProcessor.IgnoreNode(XmlNode node)</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefinedProcessingInstructionProcessor.InitializeStub">
            <summary>Initializes a new instance of type StubDefinedProcessingInstructionProcessor</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefinedProcessingInstructionProcessor.NameGet">
            <summary>Sets the stub of DefinedProcessingInstructionProcessor.get_Name()</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefinedProcessingInstructionProcessor.Process(Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlProcessorNodeList,Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlProcessorEngine)">
            <summary>Sets the stub of DefinedProcessingInstructionProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine)</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefinedProcessingInstructionProcessor.ProcessIXmlProcessorNodeListIXmlProcessorEngine">
            <summary>Sets the stub of DefinedProcessingInstructionProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefinedProcessingInstructionProcessor.AcceptNodeTypes">
            <summary>Sets the stub of DefinedProcessingInstructionProcessor.get_AcceptNodeTypes()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefinedProcessingInstructionProcessor.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefinedProcessingInstructionProcessor.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefinedProcessingInstructionProcessor.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefinedProcessingInstructionProcessor.Name">
            <summary>Sets the stub of DefinedProcessingInstructionProcessor.get_Name()</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubEvalProcessingInstructionProcessor">
            <summary>Stub type of Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.EvalProcessingInstructionProcessor</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubEvalProcessingInstructionProcessor.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubEvalProcessingInstructionProcessor.Accept(System.Xml.XmlNode)">
            <summary>Sets the stub of AbstractXmlNodeProcessor.Accept(XmlNode node)</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubEvalProcessingInstructionProcessor.AcceptNodeTypesGet">
            <summary>Sets the stub of EvalProcessingInstructionProcessor.get_AcceptNodeTypes()</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubEvalProcessingInstructionProcessor.AcceptXmlNode">
            <summary>Sets the stub of AbstractXmlNodeProcessor.Accept(XmlNode node)</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubEvalProcessingInstructionProcessor.IgnoreNode(System.Xml.XmlNode)">
            <summary>Sets the stub of AbstractXmlNodeProcessor.IgnoreNode(XmlNode node)</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubEvalProcessingInstructionProcessor.IgnoreNodeXmlNode">
            <summary>Sets the stub of AbstractXmlNodeProcessor.IgnoreNode(XmlNode node)</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubEvalProcessingInstructionProcessor.InitializeStub">
            <summary>Initializes a new instance of type StubEvalProcessingInstructionProcessor</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubEvalProcessingInstructionProcessor.NameGet">
            <summary>Sets the stub of EvalProcessingInstructionProcessor.get_Name()</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubEvalProcessingInstructionProcessor.Process(Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlProcessorNodeList,Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlProcessorEngine)">
            <summary>Sets the stub of EvalProcessingInstructionProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine)</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubEvalProcessingInstructionProcessor.ProcessIXmlProcessorNodeListIXmlProcessorEngine">
            <summary>Sets the stub of EvalProcessingInstructionProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubEvalProcessingInstructionProcessor.AcceptNodeTypes">
            <summary>Sets the stub of EvalProcessingInstructionProcessor.get_AcceptNodeTypes()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubEvalProcessingInstructionProcessor.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubEvalProcessingInstructionProcessor.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubEvalProcessingInstructionProcessor.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubEvalProcessingInstructionProcessor.Name">
            <summary>Sets the stub of EvalProcessingInstructionProcessor.get_Name()</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubIfElementProcessor">
            <summary>Stub type of Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.IfElementProcessor</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubIfElementProcessor.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubIfElementProcessor.Accept(System.Xml.XmlNode)">
            <summary>Sets the stub of AbstractXmlNodeProcessor.Accept(XmlNode node)</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubIfElementProcessor.AcceptNodeTypesGet">
            <summary>Sets the stub of AbstractXmlNodeProcessor.get_AcceptNodeTypes()</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubIfElementProcessor.AcceptXmlNode">
            <summary>Sets the stub of AbstractXmlNodeProcessor.Accept(XmlNode node)</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubIfElementProcessor.IgnoreNode(System.Xml.XmlNode)">
            <summary>Sets the stub of AbstractXmlNodeProcessor.IgnoreNode(XmlNode node)</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubIfElementProcessor.IgnoreNodeXmlNode">
            <summary>Sets the stub of AbstractXmlNodeProcessor.IgnoreNode(XmlNode node)</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubIfElementProcessor.InitializeStub">
            <summary>Initializes a new instance of type StubIfElementProcessor</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubIfElementProcessor.NameGet">
            <summary>Sets the stub of IfElementProcessor.get_Name()</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubIfElementProcessor.Process(Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlProcessorNodeList,Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlProcessorEngine)">
            <summary>Sets the stub of IfElementProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine)</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubIfElementProcessor.ProcessIXmlProcessorNodeListIXmlProcessorEngine">
            <summary>Sets the stub of IfElementProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubIfElementProcessor.AcceptNodeTypes">
            <summary>Sets the stub of AbstractXmlNodeProcessor.get_AcceptNodeTypes()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubIfElementProcessor.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubIfElementProcessor.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubIfElementProcessor.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubIfElementProcessor.Name">
            <summary>Sets the stub of IfElementProcessor.get_Name()</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubIfProcessingInstructionProcessor">
            <summary>Stub type of Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.IfProcessingInstructionProcessor</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubIfProcessingInstructionProcessor.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubIfProcessingInstructionProcessor.Accept(System.Xml.XmlNode)">
            <summary>Sets the stub of AbstractXmlNodeProcessor.Accept(XmlNode node)</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubIfProcessingInstructionProcessor.AcceptNodeTypesGet">
            <summary>Sets the stub of IfProcessingInstructionProcessor.get_AcceptNodeTypes()</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubIfProcessingInstructionProcessor.AcceptXmlNode">
            <summary>Sets the stub of AbstractXmlNodeProcessor.Accept(XmlNode node)</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubIfProcessingInstructionProcessor.IgnoreNode(System.Xml.XmlNode)">
            <summary>Sets the stub of AbstractXmlNodeProcessor.IgnoreNode(XmlNode node)</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubIfProcessingInstructionProcessor.IgnoreNodeXmlNode">
            <summary>Sets the stub of AbstractXmlNodeProcessor.IgnoreNode(XmlNode node)</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubIfProcessingInstructionProcessor.InitializeStub">
            <summary>Initializes a new instance of type StubIfProcessingInstructionProcessor</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubIfProcessingInstructionProcessor.NameGet">
            <summary>Sets the stub of IfProcessingInstructionProcessor.get_Name()</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubIfProcessingInstructionProcessor.Process(Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlProcessorNodeList,Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlProcessorEngine)">
            <summary>Sets the stub of IfProcessingInstructionProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine)</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubIfProcessingInstructionProcessor.ProcessIXmlProcessorNodeListIXmlProcessorEngine">
            <summary>Sets the stub of IfProcessingInstructionProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubIfProcessingInstructionProcessor.AcceptNodeTypes">
            <summary>Sets the stub of IfProcessingInstructionProcessor.get_AcceptNodeTypes()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubIfProcessingInstructionProcessor.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubIfProcessingInstructionProcessor.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubIfProcessingInstructionProcessor.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubIfProcessingInstructionProcessor.Name">
            <summary>Sets the stub of IfProcessingInstructionProcessor.get_Name()</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubIncludeElementProcessor">
            <summary>Stub type of Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.IncludeElementProcessor</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubIncludeElementProcessor.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubIncludeElementProcessor.Accept(System.Xml.XmlNode)">
            <summary>Sets the stub of IncludeElementProcessor.Accept(XmlNode node)</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubIncludeElementProcessor.AcceptNodeTypesGet">
            <summary>Sets the stub of AbstractXmlNodeProcessor.get_AcceptNodeTypes()</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubIncludeElementProcessor.AcceptXmlNode">
            <summary>Sets the stub of IncludeElementProcessor.Accept(XmlNode node)</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubIncludeElementProcessor.IgnoreNode(System.Xml.XmlNode)">
            <summary>Sets the stub of AbstractXmlNodeProcessor.IgnoreNode(XmlNode node)</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubIncludeElementProcessor.IgnoreNodeXmlNode">
            <summary>Sets the stub of AbstractXmlNodeProcessor.IgnoreNode(XmlNode node)</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubIncludeElementProcessor.InitializeStub">
            <summary>Initializes a new instance of type StubIncludeElementProcessor</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubIncludeElementProcessor.NameGet">
            <summary>Sets the stub of IncludeElementProcessor.get_Name()</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubIncludeElementProcessor.Process(Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlProcessorNodeList,Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlProcessorEngine)">
            <summary>Sets the stub of IncludeElementProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine)</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubIncludeElementProcessor.ProcessIXmlProcessorNodeListIXmlProcessorEngine">
            <summary>Sets the stub of IncludeElementProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubIncludeElementProcessor.AcceptNodeTypes">
            <summary>Sets the stub of AbstractXmlNodeProcessor.get_AcceptNodeTypes()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubIncludeElementProcessor.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubIncludeElementProcessor.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubIncludeElementProcessor.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubIncludeElementProcessor.Name">
            <summary>Sets the stub of IncludeElementProcessor.get_Name()</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubPropertiesElementProcessor">
            <summary>Stub type of Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.PropertiesElementProcessor</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubPropertiesElementProcessor.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubPropertiesElementProcessor.Accept(System.Xml.XmlNode)">
            <summary>Sets the stub of AbstractXmlNodeProcessor.Accept(XmlNode node)</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubPropertiesElementProcessor.AcceptNodeTypesGet">
            <summary>Sets the stub of AbstractXmlNodeProcessor.get_AcceptNodeTypes()</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubPropertiesElementProcessor.AcceptXmlNode">
            <summary>Sets the stub of AbstractXmlNodeProcessor.Accept(XmlNode node)</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubPropertiesElementProcessor.IgnoreNode(System.Xml.XmlNode)">
            <summary>Sets the stub of AbstractXmlNodeProcessor.IgnoreNode(XmlNode node)</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubPropertiesElementProcessor.IgnoreNodeXmlNode">
            <summary>Sets the stub of AbstractXmlNodeProcessor.IgnoreNode(XmlNode node)</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubPropertiesElementProcessor.InitializeStub">
            <summary>Initializes a new instance of type StubPropertiesElementProcessor</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubPropertiesElementProcessor.NameGet">
            <summary>Sets the stub of PropertiesElementProcessor.get_Name()</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubPropertiesElementProcessor.Process(Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlProcessorNodeList,Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlProcessorEngine)">
            <summary>Sets the stub of PropertiesElementProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine)</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubPropertiesElementProcessor.ProcessIXmlProcessorNodeListIXmlProcessorEngine">
            <summary>Sets the stub of PropertiesElementProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubPropertiesElementProcessor.AcceptNodeTypes">
            <summary>Sets the stub of AbstractXmlNodeProcessor.get_AcceptNodeTypes()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubPropertiesElementProcessor.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubPropertiesElementProcessor.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubPropertiesElementProcessor.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubPropertiesElementProcessor.Name">
            <summary>Sets the stub of PropertiesElementProcessor.get_Name()</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubUndefElementProcessor">
            <summary>Stub type of Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.UndefElementProcessor</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubUndefElementProcessor.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubUndefElementProcessor.Accept(System.Xml.XmlNode)">
            <summary>Sets the stub of AbstractXmlNodeProcessor.Accept(XmlNode node)</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubUndefElementProcessor.AcceptNodeTypesGet">
            <summary>Sets the stub of AbstractXmlNodeProcessor.get_AcceptNodeTypes()</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubUndefElementProcessor.AcceptXmlNode">
            <summary>Sets the stub of AbstractXmlNodeProcessor.Accept(XmlNode node)</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubUndefElementProcessor.IgnoreNode(System.Xml.XmlNode)">
            <summary>Sets the stub of AbstractXmlNodeProcessor.IgnoreNode(XmlNode node)</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubUndefElementProcessor.IgnoreNodeXmlNode">
            <summary>Sets the stub of AbstractXmlNodeProcessor.IgnoreNode(XmlNode node)</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubUndefElementProcessor.InitializeStub">
            <summary>Initializes a new instance of type StubUndefElementProcessor</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubUndefElementProcessor.NameGet">
            <summary>Sets the stub of UndefElementProcessor.get_Name()</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubUndefElementProcessor.Process(Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlProcessorNodeList,Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlProcessorEngine)">
            <summary>Sets the stub of DefineElementProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine)</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubUndefElementProcessor.Process(System.String,Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlProcessorEngine)">
            <summary>Sets the stub of UndefElementProcessor.Process(String flag, IXmlProcessorEngine engine)</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubUndefElementProcessor.ProcessIXmlProcessorNodeListIXmlProcessorEngine">
            <summary>Sets the stub of DefineElementProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine)</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubUndefElementProcessor.ProcessStringIXmlProcessorEngine">
            <summary>Sets the stub of UndefElementProcessor.Process(String flag, IXmlProcessorEngine engine)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubUndefElementProcessor.AcceptNodeTypes">
            <summary>Sets the stub of AbstractXmlNodeProcessor.get_AcceptNodeTypes()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubUndefElementProcessor.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubUndefElementProcessor.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubUndefElementProcessor.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubUndefElementProcessor.Name">
            <summary>Sets the stub of UndefElementProcessor.get_Name()</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubUndefProcessingInstructionProcessor">
            <summary>Stub type of Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.UndefProcessingInstructionProcessor</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubUndefProcessingInstructionProcessor.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubUndefProcessingInstructionProcessor.Accept(System.Xml.XmlNode)">
            <summary>Sets the stub of AbstractXmlNodeProcessor.Accept(XmlNode node)</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubUndefProcessingInstructionProcessor.AcceptNodeTypesGet">
            <summary>Sets the stub of UndefProcessingInstructionProcessor.get_AcceptNodeTypes()</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubUndefProcessingInstructionProcessor.AcceptXmlNode">
            <summary>Sets the stub of AbstractXmlNodeProcessor.Accept(XmlNode node)</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubUndefProcessingInstructionProcessor.IgnoreNode(System.Xml.XmlNode)">
            <summary>Sets the stub of AbstractXmlNodeProcessor.IgnoreNode(XmlNode node)</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubUndefProcessingInstructionProcessor.IgnoreNodeXmlNode">
            <summary>Sets the stub of AbstractXmlNodeProcessor.IgnoreNode(XmlNode node)</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubUndefProcessingInstructionProcessor.InitializeStub">
            <summary>Initializes a new instance of type StubUndefProcessingInstructionProcessor</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubUndefProcessingInstructionProcessor.NameGet">
            <summary>Sets the stub of UndefProcessingInstructionProcessor.get_Name()</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubUndefProcessingInstructionProcessor.Process(Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlProcessorNodeList,Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlProcessorEngine)">
            <summary>Sets the stub of UndefProcessingInstructionProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine)</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubUndefProcessingInstructionProcessor.ProcessIXmlProcessorNodeListIXmlProcessorEngine">
            <summary>Sets the stub of UndefProcessingInstructionProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubUndefProcessingInstructionProcessor.AcceptNodeTypes">
            <summary>Sets the stub of UndefProcessingInstructionProcessor.get_AcceptNodeTypes()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubUndefProcessingInstructionProcessor.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubUndefProcessingInstructionProcessor.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubUndefProcessingInstructionProcessor.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubUndefProcessingInstructionProcessor.Name">
            <summary>Sets the stub of UndefProcessingInstructionProcessor.get_Name()</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubUsingElementProcessor">
            <summary>Stub type of Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.UsingElementProcessor</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubUsingElementProcessor.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubUsingElementProcessor.Accept(System.Xml.XmlNode)">
            <summary>Sets the stub of AbstractXmlNodeProcessor.Accept(XmlNode node)</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubUsingElementProcessor.AcceptNodeTypesGet">
            <summary>Sets the stub of AbstractXmlNodeProcessor.get_AcceptNodeTypes()</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubUsingElementProcessor.AcceptXmlNode">
            <summary>Sets the stub of AbstractXmlNodeProcessor.Accept(XmlNode node)</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubUsingElementProcessor.IgnoreNode(System.Xml.XmlNode)">
            <summary>Sets the stub of AbstractXmlNodeProcessor.IgnoreNode(XmlNode node)</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubUsingElementProcessor.IgnoreNodeXmlNode">
            <summary>Sets the stub of AbstractXmlNodeProcessor.IgnoreNode(XmlNode node)</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubUsingElementProcessor.InitializeStub">
            <summary>Initializes a new instance of type StubUsingElementProcessor</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubUsingElementProcessor.NameGet">
            <summary>Sets the stub of UsingElementProcessor.get_Name()</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubUsingElementProcessor.Process(Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlProcessorNodeList,Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlProcessorEngine)">
            <summary>Sets the stub of UsingElementProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine)</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubUsingElementProcessor.ProcessIXmlProcessorNodeListIXmlProcessorEngine">
            <summary>Sets the stub of UsingElementProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubUsingElementProcessor.AcceptNodeTypes">
            <summary>Sets the stub of AbstractXmlNodeProcessor.get_AcceptNodeTypes()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubUsingElementProcessor.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubUsingElementProcessor.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubUsingElementProcessor.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubUsingElementProcessor.Name">
            <summary>Sets the stub of UsingElementProcessor.get_Name()</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorEngine">
            <summary>Shim type of Castle.Windsor.Configuration.Interpreters.XmlProcessor.DefaultXmlProcessorEngine</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorEngine.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorEngine.#ctor(Castle.Windsor.Configuration.Interpreters.XmlProcessor.DefaultXmlProcessorEngine)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorEngine.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorEngine.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorEngine.Bind(Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlProcessorEngine)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorEngine.AddEnvNameAsFlagString">
            <summary>Sets the shim of DefaultXmlProcessorEngine.AddEnvNameAsFlag(String environmentName)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorEngine.AddFlagString">
            <summary>Sets the shim of DefaultXmlProcessorEngine.AddFlag(String flag)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorEngine.AddNodeProcessorType">
            <summary>Sets the shim of DefaultXmlProcessorEngine.AddNodeProcessor(Type type)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorEngine.AddPropertyXmlElement">
            <summary>Sets the shim of DefaultXmlProcessorEngine.AddProperty(XmlElement content)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorEngine.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorEngine.ConstructorString">
            <summary>Sets the shim of DefaultXmlProcessorEngine.DefaultXmlProcessorEngine(String environmentName)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorEngine.ConstructorStringIResourceSubSystem">
            <summary>Sets the shim of DefaultXmlProcessorEngine.DefaultXmlProcessorEngine(String environmentName, IResourceSubSystem resourceSubSystem)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorEngine.DispatchProcessAllIXmlProcessorNodeList">
            <summary>Sets the shim of DefaultXmlProcessorEngine.DispatchProcessAll(IXmlProcessorNodeList nodeList)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorEngine.DispatchProcessCurrentIXmlProcessorNodeList">
            <summary>Sets the shim of DefaultXmlProcessorEngine.DispatchProcessCurrent(IXmlProcessorNodeList nodeList)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorEngine.GetCanonicalFlagNameString">
            <summary>Sets the shim of DefaultXmlProcessorEngine.GetCanonicalFlagName(String flag)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorEngine.GetProcessorXmlNode">
            <summary>Sets the shim of DefaultXmlProcessorEngine.GetProcessor(XmlNode node)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorEngine.GetPropertyString">
            <summary>Sets the shim of DefaultXmlProcessorEngine.GetProperty(String key)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorEngine.GetResourceString">
            <summary>Sets the shim of DefaultXmlProcessorEngine.GetResource(String uri)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorEngine.HasFlagString">
            <summary>Sets the shim of DefaultXmlProcessorEngine.HasFlag(String flag)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorEngine.HasPropertyString">
            <summary>Sets the shim of DefaultXmlProcessorEngine.HasProperty(String name)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorEngine.HasSpecialProcessorXmlNode">
            <summary>Sets the shim of DefaultXmlProcessorEngine.HasSpecialProcessor(XmlNode node)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorEngine.PopResource">
            <summary>Sets the shim of DefaultXmlProcessorEngine.PopResource()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorEngine.PushResourceIResource">
            <summary>Sets the shim of DefaultXmlProcessorEngine.PushResource(IResource resource)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorEngine.RegisterProcessorXmlNodeTypeIXmlNodeProcessor">
            <summary>Sets the shim of DefaultXmlProcessorEngine.RegisterProcessor(XmlNodeType type, IXmlNodeProcessor processor)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorEngine.RemoveFlagString">
            <summary>Sets the shim of DefaultXmlProcessorEngine.RemoveFlag(String flag)</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorEngine.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorEngine.AllInstances.AddEnvNameAsFlagString">
            <summary>Sets the shim of DefaultXmlProcessorEngine.AddEnvNameAsFlag(String environmentName)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorEngine.AllInstances.AddFlagString">
            <summary>Sets the shim of DefaultXmlProcessorEngine.AddFlag(String flag)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorEngine.AllInstances.AddNodeProcessorType">
            <summary>Sets the shim of DefaultXmlProcessorEngine.AddNodeProcessor(Type type)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorEngine.AllInstances.AddPropertyXmlElement">
            <summary>Sets the shim of DefaultXmlProcessorEngine.AddProperty(XmlElement content)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorEngine.AllInstances.DispatchProcessAllIXmlProcessorNodeList">
            <summary>Sets the shim of DefaultXmlProcessorEngine.DispatchProcessAll(IXmlProcessorNodeList nodeList)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorEngine.AllInstances.DispatchProcessCurrentIXmlProcessorNodeList">
            <summary>Sets the shim of DefaultXmlProcessorEngine.DispatchProcessCurrent(IXmlProcessorNodeList nodeList)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorEngine.AllInstances.GetCanonicalFlagNameString">
            <summary>Sets the shim of DefaultXmlProcessorEngine.GetCanonicalFlagName(String flag)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorEngine.AllInstances.GetProcessorXmlNode">
            <summary>Sets the shim of DefaultXmlProcessorEngine.GetProcessor(XmlNode node)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorEngine.AllInstances.GetPropertyString">
            <summary>Sets the shim of DefaultXmlProcessorEngine.GetProperty(String key)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorEngine.AllInstances.GetResourceString">
            <summary>Sets the shim of DefaultXmlProcessorEngine.GetResource(String uri)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorEngine.AllInstances.HasFlagString">
            <summary>Sets the shim of DefaultXmlProcessorEngine.HasFlag(String flag)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorEngine.AllInstances.HasPropertyString">
            <summary>Sets the shim of DefaultXmlProcessorEngine.HasProperty(String name)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorEngine.AllInstances.HasSpecialProcessorXmlNode">
            <summary>Sets the shim of DefaultXmlProcessorEngine.HasSpecialProcessor(XmlNode node)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorEngine.AllInstances.PopResource">
            <summary>Sets the shim of DefaultXmlProcessorEngine.PopResource()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorEngine.AllInstances.PushResourceIResource">
            <summary>Sets the shim of DefaultXmlProcessorEngine.PushResource(IResource resource)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorEngine.AllInstances.RegisterProcessorXmlNodeTypeIXmlNodeProcessor">
            <summary>Sets the shim of DefaultXmlProcessorEngine.RegisterProcessor(XmlNodeType type, IXmlNodeProcessor processor)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorEngine.AllInstances.RemoveFlagString">
            <summary>Sets the shim of DefaultXmlProcessorEngine.RemoveFlag(String flag)</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorNodeList">
            <summary>Shim type of Castle.Windsor.Configuration.Interpreters.XmlProcessor.DefaultXmlProcessorNodeList</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorNodeList.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorNodeList.#ctor(Castle.Windsor.Configuration.Interpreters.XmlProcessor.DefaultXmlProcessorNodeList)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorNodeList.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorNodeList.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorNodeList.Bind(Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlProcessorNodeList)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorNodeList.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorNodeList.CloneNodeListXmlNodeList">
            <summary>Sets the shim of DefaultXmlProcessorNodeList.CloneNodeList(XmlNodeList nodeList)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorNodeList.ConstructorIListOfXmlNode">
            <summary>Sets the shim of DefaultXmlProcessorNodeList.DefaultXmlProcessorNodeList(IList`1&lt;XmlNode&gt; nodes)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorNodeList.ConstructorXmlNode">
            <summary>Sets the shim of DefaultXmlProcessorNodeList.DefaultXmlProcessorNodeList(XmlNode node)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorNodeList.ConstructorXmlNodeList">
            <summary>Sets the shim of DefaultXmlProcessorNodeList.DefaultXmlProcessorNodeList(XmlNodeList nodes)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorNodeList.CountGet">
            <summary>Sets the shim of DefaultXmlProcessorNodeList.get_Count()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorNodeList.CurrentGet">
            <summary>Sets the shim of DefaultXmlProcessorNodeList.get_Current()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorNodeList.CurrentPositionGet">
            <summary>Sets the shim of DefaultXmlProcessorNodeList.get_CurrentPosition()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorNodeList.CurrentPositionSetInt32">
            <summary>Sets the shim of DefaultXmlProcessorNodeList.set_CurrentPosition(Int32 value)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorNodeList.HasCurrentGet">
            <summary>Sets the shim of DefaultXmlProcessorNodeList.get_HasCurrent()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorNodeList.MoveNext">
            <summary>Sets the shim of DefaultXmlProcessorNodeList.MoveNext()</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorNodeList.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorNodeList.AllInstances.CloneNodeListXmlNodeList">
            <summary>Sets the shim of DefaultXmlProcessorNodeList.CloneNodeList(XmlNodeList nodeList)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorNodeList.AllInstances.CountGet">
            <summary>Sets the shim of DefaultXmlProcessorNodeList.get_Count()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorNodeList.AllInstances.CurrentGet">
            <summary>Sets the shim of DefaultXmlProcessorNodeList.get_Current()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorNodeList.AllInstances.CurrentPositionGet">
            <summary>Sets the shim of DefaultXmlProcessorNodeList.get_CurrentPosition()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorNodeList.AllInstances.CurrentPositionSetInt32">
            <summary>Sets the shim of DefaultXmlProcessorNodeList.set_CurrentPosition(Int32 value)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorNodeList.AllInstances.HasCurrentGet">
            <summary>Sets the shim of DefaultXmlProcessorNodeList.get_HasCurrent()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorNodeList.AllInstances.MoveNext">
            <summary>Sets the shim of DefaultXmlProcessorNodeList.MoveNext()</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimXmlProcessor">
            <summary>Shim type of Castle.Windsor.Configuration.Interpreters.XmlProcessor.XmlProcessor</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimXmlProcessor.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimXmlProcessor.#ctor(Castle.Windsor.Configuration.Interpreters.XmlProcessor.XmlProcessor)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimXmlProcessor.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimXmlProcessor.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimXmlProcessor.AddElementProcessorType">
            <summary>Sets the shim of XmlProcessor.AddElementProcessor(Type t)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimXmlProcessor.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimXmlProcessor.Constructor">
            <summary>Sets the shim of XmlProcessor.XmlProcessor()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimXmlProcessor.ConstructorString">
            <summary>Sets the shim of XmlProcessor.XmlProcessor(String environmentName)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimXmlProcessor.ConstructorStringIResourceSubSystem">
            <summary>Sets the shim of XmlProcessor.XmlProcessor(String environmentName, IResourceSubSystem resourceSubSystem)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimXmlProcessor.ProcessIResource">
            <summary>Sets the shim of XmlProcessor.Process(IResource resource)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimXmlProcessor.ProcessXmlNode">
            <summary>Sets the shim of XmlProcessor.Process(XmlNode node)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimXmlProcessor.RegisterProcessors">
            <summary>Sets the shim of XmlProcessor.RegisterProcessors()</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimXmlProcessor.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimXmlProcessor.AllInstances.AddElementProcessorType">
            <summary>Sets the shim of XmlProcessor.AddElementProcessor(Type t)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimXmlProcessor.AllInstances.ProcessIResource">
            <summary>Sets the shim of XmlProcessor.Process(IResource resource)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimXmlProcessor.AllInstances.ProcessXmlNode">
            <summary>Sets the shim of XmlProcessor.Process(XmlNode node)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimXmlProcessor.AllInstances.RegisterProcessors">
            <summary>Sets the shim of XmlProcessor.RegisterProcessors()</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimXmlProcessorException">
            <summary>Shim type of Castle.Windsor.Configuration.Interpreters.XmlProcessor.XmlProcessorException</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimXmlProcessorException.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimXmlProcessorException.#ctor(Castle.Windsor.Configuration.Interpreters.XmlProcessor.XmlProcessorException)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimXmlProcessorException.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimXmlProcessorException.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimXmlProcessorException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimXmlProcessorException.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimXmlProcessorException.ConstructorSerializationInfoStreamingContext">
            <summary>Sets the shim of XmlProcessorException.XmlProcessorException(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimXmlProcessorException.ConstructorStringException">
            <summary>Sets the shim of XmlProcessorException.XmlProcessorException(String message, Exception innerException)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimXmlProcessorException.ConstructorStringObjectArray">
            <summary>Sets the shim of XmlProcessorException.XmlProcessorException(String message, Object[] args)</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimXmlProcessorException.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubDefaultXmlProcessorEngine">
            <summary>Stub type of Castle.Windsor.Configuration.Interpreters.XmlProcessor.DefaultXmlProcessorEngine</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubDefaultXmlProcessorEngine.#ctor(System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubDefaultXmlProcessorEngine.#ctor(System.String,Castle.MicroKernel.SubSystems.Resource.IResourceSubSystem)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubDefaultXmlProcessorEngine.InitializeStub">
            <summary>Initializes a new instance of type StubDefaultXmlProcessorEngine</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubDefaultXmlProcessorEngine.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubDefaultXmlProcessorEngine.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubDefaultXmlProcessorEngine.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubDefaultXmlProcessorNodeList">
            <summary>Stub type of Castle.Windsor.Configuration.Interpreters.XmlProcessor.DefaultXmlProcessorNodeList</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubDefaultXmlProcessorNodeList.#ctor(System.Xml.XmlNode)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubDefaultXmlProcessorNodeList.#ctor(System.Xml.XmlNodeList)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubDefaultXmlProcessorNodeList.#ctor(System.Collections.Generic.IList{System.Xml.XmlNode})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubDefaultXmlProcessorNodeList.InitializeStub">
            <summary>Initializes a new instance of type StubDefaultXmlProcessorNodeList</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubDefaultXmlProcessorNodeList.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubDefaultXmlProcessorNodeList.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubDefaultXmlProcessorNodeList.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlNodeProcessor">
            <summary>Stub type of Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlNodeProcessor</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlNodeProcessor.#ctor">
            <summary>Initializes a new instance of type StubIXmlNodeProcessor</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlNodeProcessor.AcceptNodeTypesGet">
            <summary>Sets the stub of IXmlNodeProcessor.get_AcceptNodeTypes()</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlNodeProcessor.AcceptXmlNode">
            <summary>Sets the stub of IXmlNodeProcessor.Accept(XmlNode node)</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlNodeProcessor.cw::Castle#Windsor#Configuration#Interpreters#XmlProcessor#IXmlNodeProcessor#Accept(System.Xml.XmlNode)">
            <summary>Sets the stub of IXmlNodeProcessor.Accept(XmlNode node)</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlNodeProcessor.cw::Castle#Windsor#Configuration#Interpreters#XmlProcessor#IXmlNodeProcessor#Process(Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlProcessorNodeList,Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlProcessorEngine)">
            <summary>Sets the stub of IXmlNodeProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine)</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlNodeProcessor.NameGet">
            <summary>Sets the stub of IXmlNodeProcessor.get_Name()</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlNodeProcessor.ProcessIXmlProcessorNodeListIXmlProcessorEngine">
            <summary>Sets the stub of IXmlNodeProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine)</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlNodeProcessor.cw::Castle#Windsor#Configuration#Interpreters#XmlProcessor#IXmlNodeProcessor#AcceptNodeTypes">
            <summary>Sets the stub of IXmlNodeProcessor.get_AcceptNodeTypes()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlNodeProcessor.cw::Castle#Windsor#Configuration#Interpreters#XmlProcessor#IXmlNodeProcessor#Name">
            <summary>Sets the stub of IXmlNodeProcessor.get_Name()</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlProcessorEngine">
            <summary>Stub type of Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlProcessorEngine</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlProcessorEngine.#ctor">
            <summary>Initializes a new instance of type StubIXmlProcessorEngine</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlProcessorEngine.AddFlagString">
            <summary>Sets the stub of IXmlProcessorEngine.AddFlag(String flag)</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlProcessorEngine.AddNodeProcessorType">
            <summary>Sets the stub of IXmlProcessorEngine.AddNodeProcessor(Type type)</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlProcessorEngine.AddPropertyXmlElement">
            <summary>Sets the stub of IXmlProcessorEngine.AddProperty(XmlElement element)</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlProcessorEngine.cw::Castle#Windsor#Configuration#Interpreters#XmlProcessor#IXmlProcessorEngine#AddFlag(System.String)">
            <summary>Sets the stub of IXmlProcessorEngine.AddFlag(String flag)</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlProcessorEngine.cw::Castle#Windsor#Configuration#Interpreters#XmlProcessor#IXmlProcessorEngine#AddNodeProcessor(System.Type)">
            <summary>Sets the stub of IXmlProcessorEngine.AddNodeProcessor(Type type)</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlProcessorEngine.cw::Castle#Windsor#Configuration#Interpreters#XmlProcessor#IXmlProcessorEngine#AddProperty(System.Xml.XmlElement)">
            <summary>Sets the stub of IXmlProcessorEngine.AddProperty(XmlElement element)</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlProcessorEngine.cw::Castle#Windsor#Configuration#Interpreters#XmlProcessor#IXmlProcessorEngine#DispatchProcessAll(Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlProcessorNodeList)">
            <summary>Sets the stub of IXmlProcessorEngine.DispatchProcessAll(IXmlProcessorNodeList nodeList)</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlProcessorEngine.cw::Castle#Windsor#Configuration#Interpreters#XmlProcessor#IXmlProcessorEngine#DispatchProcessCurrent(Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlProcessorNodeList)">
            <summary>Sets the stub of IXmlProcessorEngine.DispatchProcessCurrent(IXmlProcessorNodeList nodeList)</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlProcessorEngine.cw::Castle#Windsor#Configuration#Interpreters#XmlProcessor#IXmlProcessorEngine#GetProperty(System.String)">
            <summary>Sets the stub of IXmlProcessorEngine.GetProperty(String name)</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlProcessorEngine.cw::Castle#Windsor#Configuration#Interpreters#XmlProcessor#IXmlProcessorEngine#GetResource(System.String)">
            <summary>Sets the stub of IXmlProcessorEngine.GetResource(String uri)</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlProcessorEngine.cw::Castle#Windsor#Configuration#Interpreters#XmlProcessor#IXmlProcessorEngine#HasFlag(System.String)">
            <summary>Sets the stub of IXmlProcessorEngine.HasFlag(String flag)</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlProcessorEngine.cw::Castle#Windsor#Configuration#Interpreters#XmlProcessor#IXmlProcessorEngine#HasProperty(System.String)">
            <summary>Sets the stub of IXmlProcessorEngine.HasProperty(String name)</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlProcessorEngine.cw::Castle#Windsor#Configuration#Interpreters#XmlProcessor#IXmlProcessorEngine#HasSpecialProcessor(System.Xml.XmlNode)">
            <summary>Sets the stub of IXmlProcessorEngine.HasSpecialProcessor(XmlNode node)</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlProcessorEngine.cw::Castle#Windsor#Configuration#Interpreters#XmlProcessor#IXmlProcessorEngine#PopResource">
            <summary>Sets the stub of IXmlProcessorEngine.PopResource()</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlProcessorEngine.cw::Castle#Windsor#Configuration#Interpreters#XmlProcessor#IXmlProcessorEngine#PushResource(Castle.Core.Resource.IResource)">
            <summary>Sets the stub of IXmlProcessorEngine.PushResource(IResource resource)</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlProcessorEngine.cw::Castle#Windsor#Configuration#Interpreters#XmlProcessor#IXmlProcessorEngine#RemoveFlag(System.String)">
            <summary>Sets the stub of IXmlProcessorEngine.RemoveFlag(String flag)</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlProcessorEngine.DispatchProcessAllIXmlProcessorNodeList">
            <summary>Sets the stub of IXmlProcessorEngine.DispatchProcessAll(IXmlProcessorNodeList nodeList)</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlProcessorEngine.DispatchProcessCurrentIXmlProcessorNodeList">
            <summary>Sets the stub of IXmlProcessorEngine.DispatchProcessCurrent(IXmlProcessorNodeList nodeList)</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlProcessorEngine.GetPropertyString">
            <summary>Sets the stub of IXmlProcessorEngine.GetProperty(String name)</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlProcessorEngine.GetResourceString">
            <summary>Sets the stub of IXmlProcessorEngine.GetResource(String uri)</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlProcessorEngine.HasFlagString">
            <summary>Sets the stub of IXmlProcessorEngine.HasFlag(String flag)</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlProcessorEngine.HasPropertyString">
            <summary>Sets the stub of IXmlProcessorEngine.HasProperty(String name)</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlProcessorEngine.HasSpecialProcessorXmlNode">
            <summary>Sets the stub of IXmlProcessorEngine.HasSpecialProcessor(XmlNode node)</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlProcessorEngine.PopResource">
            <summary>Sets the stub of IXmlProcessorEngine.PopResource()</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlProcessorEngine.PushResourceIResource">
            <summary>Sets the stub of IXmlProcessorEngine.PushResource(IResource resource)</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlProcessorEngine.RemoveFlagString">
            <summary>Sets the stub of IXmlProcessorEngine.RemoveFlag(String flag)</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlProcessorNodeList">
            <summary>Stub type of Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlProcessorNodeList</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlProcessorNodeList.#ctor">
            <summary>Initializes a new instance of type StubIXmlProcessorNodeList</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlProcessorNodeList.AttachBackingFieldToCurrentPosition">
            <summary>Attaches delegates to emulate StubIXmlProcessorNodeList.CurrentPosition as a property with a backing field.</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlProcessorNodeList.cw::Castle#Windsor#Configuration#Interpreters#XmlProcessor#IXmlProcessorNodeList#MoveNext">
            <summary>Sets the stub of IXmlProcessorNodeList.MoveNext()</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlProcessorNodeList.CountGet">
            <summary>Sets the stub of IXmlProcessorNodeList.get_Count()</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlProcessorNodeList.CurrentGet">
            <summary>Sets the stub of IXmlProcessorNodeList.get_Current()</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlProcessorNodeList.CurrentPositionGet">
            <summary>Sets the stub of IXmlProcessorNodeList.get_CurrentPosition()</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlProcessorNodeList.CurrentPositionSetInt32">
            <summary>Sets the stub of IXmlProcessorNodeList.set_CurrentPosition(Int32 value)</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlProcessorNodeList.HasCurrentGet">
            <summary>Sets the stub of IXmlProcessorNodeList.get_HasCurrent()</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlProcessorNodeList.MoveNext">
            <summary>Sets the stub of IXmlProcessorNodeList.MoveNext()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlProcessorNodeList.cw::Castle#Windsor#Configuration#Interpreters#XmlProcessor#IXmlProcessorNodeList#Count">
            <summary>Sets the stub of IXmlProcessorNodeList.get_Count()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlProcessorNodeList.cw::Castle#Windsor#Configuration#Interpreters#XmlProcessor#IXmlProcessorNodeList#Current">
            <summary>Sets the stub of IXmlProcessorNodeList.get_Current()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlProcessorNodeList.cw::Castle#Windsor#Configuration#Interpreters#XmlProcessor#IXmlProcessorNodeList#CurrentPosition">
            <summary>Sets the stub of IXmlProcessorNodeList.get_CurrentPosition()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlProcessorNodeList.cw::Castle#Windsor#Configuration#Interpreters#XmlProcessor#IXmlProcessorNodeList#HasCurrent">
            <summary>Sets the stub of IXmlProcessorNodeList.get_HasCurrent()</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubXmlProcessor">
            <summary>Stub type of Castle.Windsor.Configuration.Interpreters.XmlProcessor.XmlProcessor</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubXmlProcessor.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubXmlProcessor.#ctor(System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubXmlProcessor.#ctor(System.String,Castle.MicroKernel.SubSystems.Resource.IResourceSubSystem)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubXmlProcessor.InitializeStub">
            <summary>Initializes a new instance of type StubXmlProcessor</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubXmlProcessor.RegisterProcessors">
            <summary>Sets the stub of XmlProcessor.RegisterProcessors()</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubXmlProcessor.RegisterProcessors01">
            <summary>Sets the stub of XmlProcessor.RegisterProcessors()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubXmlProcessor.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubXmlProcessor.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubXmlProcessor.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubXmlProcessorException">
            <summary>Stub type of Castle.Windsor.Configuration.Interpreters.XmlProcessor.XmlProcessorException</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubXmlProcessorException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubXmlProcessorException.#ctor(System.String,System.Object[])">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubXmlProcessorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubXmlProcessorException.AttachBackingFieldToHelpLink">
            <summary>Attaches delegates to emulate StubXmlProcessorException.HelpLink as a property with a backing field.</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubXmlProcessorException.AttachBackingFieldToSource">
            <summary>Attaches delegates to emulate StubXmlProcessorException.Source as a property with a backing field.</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubXmlProcessorException.DataGet">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubXmlProcessorException.GetBaseException">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubXmlProcessorException.GetBaseException01">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubXmlProcessorException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubXmlProcessorException.GetObjectDataSerializationInfoStreamingContext">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubXmlProcessorException.HelpLinkGet">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubXmlProcessorException.HelpLinkSetString">
            <summary>Sets the stub of Exception.set_HelpLink(String value)</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubXmlProcessorException.InitializeStub">
            <summary>Initializes a new instance of type StubXmlProcessorException</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubXmlProcessorException.MessageGet">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubXmlProcessorException.SourceGet">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubXmlProcessorException.SourceSetString">
            <summary>Sets the stub of Exception.set_Source(String value)</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubXmlProcessorException.StackTraceGet">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubXmlProcessorException.ToString">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubXmlProcessorException.ToString01">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubXmlProcessorException.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubXmlProcessorException.Data">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubXmlProcessorException.HelpLink">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubXmlProcessorException.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubXmlProcessorException.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubXmlProcessorException.Message">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubXmlProcessorException.Source">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubXmlProcessorException.StackTrace">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.DebuggerViews.Fakes.ShimComponentDebuggerView">
            <summary>Shim type of Castle.Windsor.Diagnostics.DebuggerViews.ComponentDebuggerView</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.DebuggerViews.Fakes.ShimComponentDebuggerView.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.DebuggerViews.Fakes.ShimComponentDebuggerView.#ctor(Castle.Windsor.Diagnostics.DebuggerViews.ComponentDebuggerView)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.DebuggerViews.Fakes.ShimComponentDebuggerView.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.DebuggerViews.Fakes.ShimComponentDebuggerView.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.DebuggerViews.Fakes.ShimComponentDebuggerView.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.DebuggerViews.Fakes.ShimComponentDebuggerView.BuildForIHandlerString">
            <summary>Sets the shim of ComponentDebuggerView.BuildFor(IHandler handler, String description)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.DebuggerViews.Fakes.ShimComponentDebuggerView.BuildRawForIHandlerStringIComponentDebuggerExtensionArray">
            <summary>Sets the shim of ComponentDebuggerView.BuildRawFor(IHandler handler, String description, IComponentDebuggerExtension[] extensions)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.DebuggerViews.Fakes.ShimComponentDebuggerView.BuildRawForIHandlerStringObjectArray">
            <summary>Sets the shim of ComponentDebuggerView.BuildRawFor(IHandler handler, String description, Object[] items)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.DebuggerViews.Fakes.ShimComponentDebuggerView.ConstructorIHandlerStringIComponentDebuggerExtensionArray">
            <summary>Sets the shim of ComponentDebuggerView.ComponentDebuggerView(IHandler handler, String description, IComponentDebuggerExtension[] defaultExtension)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.DebuggerViews.Fakes.ShimComponentDebuggerView.DescriptionGet">
            <summary>Sets the shim of ComponentDebuggerView.get_Description()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.DebuggerViews.Fakes.ShimComponentDebuggerView.ExtensionsGet">
            <summary>Sets the shim of ComponentDebuggerView.get_Extensions()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.DebuggerViews.Fakes.ShimComponentDebuggerView.GetExtensionsIHandler">
            <summary>Sets the shim of ComponentDebuggerView.GetExtensions(IHandler handler)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.DebuggerViews.Fakes.ShimComponentDebuggerView.NameGet">
            <summary>Sets the shim of ComponentDebuggerView.get_Name()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.DebuggerViews.Fakes.ShimComponentDebuggerView._get_Extensionsb__0IComponentDebuggerExtension">
            <summary>Sets the shim of ComponentDebuggerView.&lt;get_Extensions&gt;b__0(IComponentDebuggerExtension e)</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.DebuggerViews.Fakes.ShimComponentDebuggerView.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.DebuggerViews.Fakes.ShimComponentDebuggerView.AllInstances.DescriptionGet">
            <summary>Sets the shim of ComponentDebuggerView.get_Description()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.DebuggerViews.Fakes.ShimComponentDebuggerView.AllInstances.ExtensionsGet">
            <summary>Sets the shim of ComponentDebuggerView.get_Extensions()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.DebuggerViews.Fakes.ShimComponentDebuggerView.AllInstances.NameGet">
            <summary>Sets the shim of ComponentDebuggerView.get_Name()</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.DebuggerViews.Fakes.ShimDebuggerViewItem">
            <summary>Shim type of Castle.Windsor.Diagnostics.DebuggerViews.DebuggerViewItem</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.DebuggerViews.Fakes.ShimDebuggerViewItem.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.DebuggerViews.Fakes.ShimDebuggerViewItem.#ctor(Castle.Windsor.Diagnostics.DebuggerViews.DebuggerViewItem)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.DebuggerViews.Fakes.ShimDebuggerViewItem.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.DebuggerViews.Fakes.ShimDebuggerViewItem.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.DebuggerViews.Fakes.ShimDebuggerViewItem.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.DebuggerViews.Fakes.ShimDebuggerViewItem.ConstructorStringObject">
            <summary>Sets the shim of DebuggerViewItem.DebuggerViewItem(String name, Object value)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.DebuggerViews.Fakes.ShimDebuggerViewItem.ConstructorStringStringObject">
            <summary>Sets the shim of DebuggerViewItem.DebuggerViewItem(String name, String description, Object value)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.DebuggerViews.Fakes.ShimDebuggerViewItem.DescriptionGet">
            <summary>Sets the shim of DebuggerViewItem.get_Description()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.DebuggerViews.Fakes.ShimDebuggerViewItem.NameGet">
            <summary>Sets the shim of DebuggerViewItem.get_Name()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.DebuggerViews.Fakes.ShimDebuggerViewItem.ValueGet">
            <summary>Sets the shim of DebuggerViewItem.get_Value()</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.DebuggerViews.Fakes.ShimDebuggerViewItem.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.DebuggerViews.Fakes.ShimDebuggerViewItem.AllInstances.DescriptionGet">
            <summary>Sets the shim of DebuggerViewItem.get_Description()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.DebuggerViews.Fakes.ShimDebuggerViewItem.AllInstances.NameGet">
            <summary>Sets the shim of DebuggerViewItem.get_Name()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.DebuggerViews.Fakes.ShimDebuggerViewItem.AllInstances.ValueGet">
            <summary>Sets the shim of DebuggerViewItem.get_Value()</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.DebuggerViews.Fakes.ShimDebuggerViewItemWithDetails">
            <summary>Shim type of Castle.Windsor.Diagnostics.DebuggerViews.DebuggerViewItemWithDetails</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.DebuggerViews.Fakes.ShimDebuggerViewItemWithDetails.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.DebuggerViews.Fakes.ShimDebuggerViewItemWithDetails.#ctor(Castle.Windsor.Diagnostics.DebuggerViews.DebuggerViewItemWithDetails)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.DebuggerViews.Fakes.ShimDebuggerViewItemWithDetails.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.DebuggerViews.Fakes.ShimDebuggerViewItemWithDetails.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.DebuggerViews.Fakes.ShimDebuggerViewItemWithDetails.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.DebuggerViews.Fakes.ShimDebuggerViewItemWithDetails.ConstructorStringStringStringObjectArray">
            <summary>Sets the shim of DebuggerViewItemWithDetails.DebuggerViewItemWithDetails(String name, String description, String details, Object[] items)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.DebuggerViews.Fakes.ShimDebuggerViewItemWithDetails.DescriptionGet">
            <summary>Sets the shim of DebuggerViewItemWithDetails.get_Description()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.DebuggerViews.Fakes.ShimDebuggerViewItemWithDetails.DetailsGet">
            <summary>Sets the shim of DebuggerViewItemWithDetails.get_Details()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.DebuggerViews.Fakes.ShimDebuggerViewItemWithDetails.DetailsSetString">
            <summary>Sets the shim of DebuggerViewItemWithDetails.set_Details(String value)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.DebuggerViews.Fakes.ShimDebuggerViewItemWithDetails.ItemsGet">
            <summary>Sets the shim of DebuggerViewItemWithDetails.get_Items()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.DebuggerViews.Fakes.ShimDebuggerViewItemWithDetails.ItemsSetObjectArray">
            <summary>Sets the shim of DebuggerViewItemWithDetails.set_Items(Object[] value)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.DebuggerViews.Fakes.ShimDebuggerViewItemWithDetails.NameGet">
            <summary>Sets the shim of DebuggerViewItemWithDetails.get_Name()</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.DebuggerViews.Fakes.ShimDebuggerViewItemWithDetails.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.DebuggerViews.Fakes.ShimDebuggerViewItemWithDetails.AllInstances.DescriptionGet">
            <summary>Sets the shim of DebuggerViewItemWithDetails.get_Description()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.DebuggerViews.Fakes.ShimDebuggerViewItemWithDetails.AllInstances.DetailsGet">
            <summary>Sets the shim of DebuggerViewItemWithDetails.get_Details()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.DebuggerViews.Fakes.ShimDebuggerViewItemWithDetails.AllInstances.DetailsSetString">
            <summary>Sets the shim of DebuggerViewItemWithDetails.set_Details(String value)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.DebuggerViews.Fakes.ShimDebuggerViewItemWithDetails.AllInstances.ItemsGet">
            <summary>Sets the shim of DebuggerViewItemWithDetails.get_Items()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.DebuggerViews.Fakes.ShimDebuggerViewItemWithDetails.AllInstances.ItemsSetObjectArray">
            <summary>Sets the shim of DebuggerViewItemWithDetails.set_Items(Object[] value)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.DebuggerViews.Fakes.ShimDebuggerViewItemWithDetails.AllInstances.NameGet">
            <summary>Sets the shim of DebuggerViewItemWithDetails.get_Name()</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.DebuggerViews.Fakes.ShimMasterDetailsDebuggerViewItem">
            <summary>Shim type of Castle.Windsor.Diagnostics.DebuggerViews.MasterDetailsDebuggerViewItem</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.DebuggerViews.Fakes.ShimMasterDetailsDebuggerViewItem.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.DebuggerViews.Fakes.ShimMasterDetailsDebuggerViewItem.#ctor(Castle.Windsor.Diagnostics.DebuggerViews.MasterDetailsDebuggerViewItem)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.DebuggerViews.Fakes.ShimMasterDetailsDebuggerViewItem.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.DebuggerViews.Fakes.ShimMasterDetailsDebuggerViewItem.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.DebuggerViews.Fakes.ShimMasterDetailsDebuggerViewItem.AMasterGet">
            <summary>Sets the shim of MasterDetailsDebuggerViewItem.get_AMaster()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.DebuggerViews.Fakes.ShimMasterDetailsDebuggerViewItem.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.DebuggerViews.Fakes.ShimMasterDetailsDebuggerViewItem.ConstructorObjectStringStringObjectArray">
            <summary>Sets the shim of MasterDetailsDebuggerViewItem.MasterDetailsDebuggerViewItem(Object master, String masterDescription, String masterName, Object[] details)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.DebuggerViews.Fakes.ShimMasterDetailsDebuggerViewItem.DetailsGet">
            <summary>Sets the shim of MasterDetailsDebuggerViewItem.get_Details()</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.DebuggerViews.Fakes.ShimMasterDetailsDebuggerViewItem.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.DebuggerViews.Fakes.ShimMasterDetailsDebuggerViewItem.AllInstances.AMasterGet">
            <summary>Sets the shim of MasterDetailsDebuggerViewItem.get_AMaster()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.DebuggerViews.Fakes.ShimMasterDetailsDebuggerViewItem.AllInstances.DetailsGet">
            <summary>Sets the shim of MasterDetailsDebuggerViewItem.get_Details()</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.DebuggerViews.Fakes.StubComponentDebuggerView">
            <summary>Stub type of Castle.Windsor.Diagnostics.DebuggerViews.ComponentDebuggerView</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.DebuggerViews.Fakes.StubComponentDebuggerView.#ctor(Castle.MicroKernel.IHandler,System.String,Castle.Windsor.Diagnostics.IComponentDebuggerExtension[])">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.DebuggerViews.Fakes.StubComponentDebuggerView.InitializeStub">
            <summary>Initializes a new instance of type StubComponentDebuggerView</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.DebuggerViews.Fakes.StubComponentDebuggerView.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.DebuggerViews.Fakes.StubComponentDebuggerView.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.DebuggerViews.Fakes.StubComponentDebuggerView.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.DebuggerViews.Fakes.StubDebuggerViewItem">
            <summary>Stub type of Castle.Windsor.Diagnostics.DebuggerViews.DebuggerViewItem</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.DebuggerViews.Fakes.StubDebuggerViewItem.#ctor(System.String,System.Object)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.DebuggerViews.Fakes.StubDebuggerViewItem.#ctor(System.String,System.String,System.Object)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.DebuggerViews.Fakes.StubDebuggerViewItem.InitializeStub">
            <summary>Initializes a new instance of type StubDebuggerViewItem</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.DebuggerViews.Fakes.StubDebuggerViewItem.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.DebuggerViews.Fakes.StubDebuggerViewItem.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.DebuggerViews.Fakes.StubDebuggerViewItem.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.DebuggerViews.Fakes.StubDebuggerViewItemWithDetails">
            <summary>Stub type of Castle.Windsor.Diagnostics.DebuggerViews.DebuggerViewItemWithDetails</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.DebuggerViews.Fakes.StubDebuggerViewItemWithDetails.#ctor(System.String,System.String,System.String,System.Object[])">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.DebuggerViews.Fakes.StubDebuggerViewItemWithDetails.InitializeStub">
            <summary>Initializes a new instance of type StubDebuggerViewItemWithDetails</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.DebuggerViews.Fakes.StubDebuggerViewItemWithDetails.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.DebuggerViews.Fakes.StubDebuggerViewItemWithDetails.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.DebuggerViews.Fakes.StubDebuggerViewItemWithDetails.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.DebuggerViews.Fakes.StubMasterDetailsDebuggerViewItem">
            <summary>Stub type of Castle.Windsor.Diagnostics.DebuggerViews.MasterDetailsDebuggerViewItem</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.DebuggerViews.Fakes.StubMasterDetailsDebuggerViewItem.#ctor(System.Object,System.String,System.String,System.Object[])">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.DebuggerViews.Fakes.StubMasterDetailsDebuggerViewItem.InitializeStub">
            <summary>Initializes a new instance of type StubMasterDetailsDebuggerViewItem</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.DebuggerViews.Fakes.StubMasterDetailsDebuggerViewItem.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.DebuggerViews.Fakes.StubMasterDetailsDebuggerViewItem.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.DebuggerViews.Fakes.StubMasterDetailsDebuggerViewItem.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimAbstractContainerDebuggerExtension">
            <summary>Shim type of Castle.Windsor.Diagnostics.Extensions.AbstractContainerDebuggerExtension</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimAbstractContainerDebuggerExtension.#ctor(Castle.Windsor.Diagnostics.Extensions.AbstractContainerDebuggerExtension)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimAbstractContainerDebuggerExtension.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimAbstractContainerDebuggerExtension.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimAbstractContainerDebuggerExtension.Bind(Castle.Windsor.Diagnostics.IContainerDebuggerExtension)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimAbstractContainerDebuggerExtension.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimAbstractContainerDebuggerExtension.Constructor">
            <summary>Sets the shim of AbstractContainerDebuggerExtension.AbstractContainerDebuggerExtension()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimAbstractContainerDebuggerExtension.DefaultComponentViewIHandler">
            <summary>Sets the shim of AbstractContainerDebuggerExtension.DefaultComponentView(IHandler handler)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimAbstractContainerDebuggerExtension.DefaultComponentViewIHandlerString">
            <summary>Sets the shim of AbstractContainerDebuggerExtension.DefaultComponentView(IHandler handler, String description)</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimAbstractContainerDebuggerExtension.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimAbstractContainerDebuggerExtension.AllInstances.DefaultComponentViewIHandler">
            <summary>Sets the shim of AbstractContainerDebuggerExtension.DefaultComponentView(IHandler handler)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimAbstractContainerDebuggerExtension.AllInstances.DefaultComponentViewIHandlerString">
            <summary>Sets the shim of AbstractContainerDebuggerExtension.DefaultComponentView(IHandler handler, String description)</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimAllComponents">
            <summary>Shim type of Castle.Windsor.Diagnostics.Extensions.AllComponents</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimAllComponents.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimAllComponents.#ctor(Castle.Windsor.Diagnostics.Extensions.AllComponents)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimAllComponents.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimAllComponents.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimAllComponents.Bind(Castle.Windsor.Diagnostics.IContainerDebuggerExtension)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimAllComponents.Attach">
            <summary>Sets the shim of AllComponents.Attach()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimAllComponents.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimAllComponents.Constructor">
            <summary>Sets the shim of AllComponents.AllComponents()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimAllComponents.InitIKernelIDiagnosticsHost">
            <summary>Sets the shim of AllComponents.Init(IKernel kernel, IDiagnosticsHost diagnosticsHost)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimAllComponents.NameGet">
            <summary>Sets the shim of AllComponents.get_Name()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimAllComponents._Attachb__0ComponentDebuggerViewComponentDebuggerView">
            <summary>Sets the shim of AllComponents.&lt;Attach&gt;b__0(ComponentDebuggerView c1, ComponentDebuggerView c2)</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimAllComponents.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimAllComponents.AllInstances.Attach">
            <summary>Sets the shim of AllComponents.Attach()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimAllComponents.AllInstances.InitIKernelIDiagnosticsHost">
            <summary>Sets the shim of AllComponents.Init(IKernel kernel, IDiagnosticsHost diagnosticsHost)</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimAllServices">
            <summary>Shim type of Castle.Windsor.Diagnostics.Extensions.AllServices</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimAllServices.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimAllServices.#ctor(Castle.Windsor.Diagnostics.Extensions.AllServices)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimAllServices.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimAllServices.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimAllServices.Bind(Castle.Windsor.Diagnostics.IContainerDebuggerExtension)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimAllServices.Attach">
            <summary>Sets the shim of AllServices.Attach()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimAllServices.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimAllServices.BuildServiceViewIEnumerableOfIHandlerString">
            <summary>Sets the shim of AllServices.BuildServiceView(IEnumerable`1&lt;IHandler&gt; handlers, String name)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimAllServices.Constructor">
            <summary>Sets the shim of AllServices.AllServices()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimAllServices.InitIKernelIDiagnosticsHost">
            <summary>Sets the shim of AllServices.Init(IKernel kernel, IDiagnosticsHost diagnosticsHost)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimAllServices._Attachb__0IGroupingOfTypeIHandler">
            <summary>Sets the shim of AllServices.&lt;Attach&gt;b__0(IGrouping`2&lt;Type,IHandler&gt; p)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimAllServices._Attachb__1DebuggerViewItemDebuggerViewItem">
            <summary>Sets the shim of AllServices.&lt;Attach&gt;b__1(DebuggerViewItem i1, DebuggerViewItem i2)</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimAllServices.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimAllServices.AllInstances.Attach">
            <summary>Sets the shim of AllServices.Attach()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimAllServices.AllInstances.BuildServiceViewIEnumerableOfIHandlerString">
            <summary>Sets the shim of AllServices.BuildServiceView(IEnumerable`1&lt;IHandler&gt; handlers, String name)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimAllServices.AllInstances.InitIKernelIDiagnosticsHost">
            <summary>Sets the shim of AllServices.Init(IKernel kernel, IDiagnosticsHost diagnosticsHost)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimAllServices.AllInstances._Attachb__0IGroupingOfTypeIHandler">
            <summary>Sets the shim of AllServices.&lt;Attach&gt;b__0(IGrouping`2&lt;Type,IHandler&gt; p)</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimDuplicatedDependenciesDebuggerExtension">
            <summary>Shim type of Castle.Windsor.Diagnostics.Extensions.DuplicatedDependenciesDebuggerExtension</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimDuplicatedDependenciesDebuggerExtension.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimDuplicatedDependenciesDebuggerExtension.#ctor(Castle.Windsor.Diagnostics.Extensions.DuplicatedDependenciesDebuggerExtension)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimDuplicatedDependenciesDebuggerExtension.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimDuplicatedDependenciesDebuggerExtension.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimDuplicatedDependenciesDebuggerExtension.Bind(Castle.Windsor.Diagnostics.IContainerDebuggerExtension)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimDuplicatedDependenciesDebuggerExtension.Attach">
            <summary>Sets the shim of DuplicatedDependenciesDebuggerExtension.Attach()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimDuplicatedDependenciesDebuggerExtension.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimDuplicatedDependenciesDebuggerExtension.BuildItemsPairOfIHandlerDependencyDuplicateArrayArray">
            <summary>Sets the shim of DuplicatedDependenciesDebuggerExtension.BuildItems(Pair`2&lt;IHandler,DependencyDuplicate[]&gt;[] results)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimDuplicatedDependenciesDebuggerExtension.ComponentWithDuplicateDependenciesViewPairOfIHandlerDependencyDuplicateArray">
            <summary>Sets the shim of DuplicatedDependenciesDebuggerExtension.ComponentWithDuplicateDependenciesView(Pair`2&lt;IHandler,DependencyDuplicate[]&gt; input)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimDuplicatedDependenciesDebuggerExtension.Constructor">
            <summary>Sets the shim of DuplicatedDependenciesDebuggerExtension.DuplicatedDependenciesDebuggerExtension()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimDuplicatedDependenciesDebuggerExtension.DescriptionDependencyModel">
            <summary>Sets the shim of DuplicatedDependenciesDebuggerExtension.Description(DependencyModel dependencyModel)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimDuplicatedDependenciesDebuggerExtension.InitIKernelIDiagnosticsHost">
            <summary>Sets the shim of DuplicatedDependenciesDebuggerExtension.Init(IKernel kernel, IDiagnosticsHost diagnosticsHost)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimDuplicatedDependenciesDebuggerExtension.MismatchViewDependencyDuplicate">
            <summary>Sets the shim of DuplicatedDependenciesDebuggerExtension.MismatchView(DependencyDuplicate input)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimDuplicatedDependenciesDebuggerExtension.NameGet">
            <summary>Sets the shim of DuplicatedDependenciesDebuggerExtension.get_Name()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimDuplicatedDependenciesDebuggerExtension._ComponentWithDuplicateDependenciesViewb__0DebuggerViewItemWithDetailsDebuggerViewItemWithDetails">
            <summary>Sets the shim of DuplicatedDependenciesDebuggerExtension.&lt;ComponentWithDuplicateDependenciesView&gt;b__0(DebuggerViewItemWithDetails c1, DebuggerViewItemWithDetails c2)</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimDuplicatedDependenciesDebuggerExtension.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimDuplicatedDependenciesDebuggerExtension.AllInstances.Attach">
            <summary>Sets the shim of DuplicatedDependenciesDebuggerExtension.Attach()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimDuplicatedDependenciesDebuggerExtension.AllInstances.BuildItemsPairOfIHandlerDependencyDuplicateArrayArray">
            <summary>Sets the shim of DuplicatedDependenciesDebuggerExtension.BuildItems(Pair`2&lt;IHandler,DependencyDuplicate[]&gt;[] results)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimDuplicatedDependenciesDebuggerExtension.AllInstances.ComponentWithDuplicateDependenciesViewPairOfIHandlerDependencyDuplicateArray">
            <summary>Sets the shim of DuplicatedDependenciesDebuggerExtension.ComponentWithDuplicateDependenciesView(Pair`2&lt;IHandler,DependencyDuplicate[]&gt; input)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimDuplicatedDependenciesDebuggerExtension.AllInstances.InitIKernelIDiagnosticsHost">
            <summary>Sets the shim of DuplicatedDependenciesDebuggerExtension.Init(IKernel kernel, IDiagnosticsHost diagnosticsHost)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimDuplicatedDependenciesDebuggerExtension.AllInstances.MismatchViewDependencyDuplicate">
            <summary>Sets the shim of DuplicatedDependenciesDebuggerExtension.MismatchView(DependencyDuplicate input)</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimFacilities">
            <summary>Shim type of Castle.Windsor.Diagnostics.Extensions.Facilities</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimFacilities.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimFacilities.#ctor(Castle.Windsor.Diagnostics.Extensions.Facilities)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimFacilities.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimFacilities.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimFacilities.Bind(Castle.Windsor.Diagnostics.IContainerDebuggerExtension)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimFacilities.Attach">
            <summary>Sets the shim of Facilities.Attach()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimFacilities.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimFacilities.Constructor">
            <summary>Sets the shim of Facilities.Facilities()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimFacilities.InitIKernelIDiagnosticsHost">
            <summary>Sets the shim of Facilities.Init(IKernel kernel, IDiagnosticsHost diagnosticsHost)</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimFacilities.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimFacilities.AllInstances.Attach">
            <summary>Sets the shim of Facilities.Attach()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimFacilities.AllInstances.InitIKernelIDiagnosticsHost">
            <summary>Sets the shim of Facilities.Init(IKernel kernel, IDiagnosticsHost diagnosticsHost)</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimPotentialLifestyleMismatches">
            <summary>Shim type of Castle.Windsor.Diagnostics.Extensions.PotentialLifestyleMismatches</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimPotentialLifestyleMismatches.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimPotentialLifestyleMismatches.#ctor(Castle.Windsor.Diagnostics.Extensions.PotentialLifestyleMismatches)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimPotentialLifestyleMismatches.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimPotentialLifestyleMismatches.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimPotentialLifestyleMismatches.Bind(Castle.Windsor.Diagnostics.IContainerDebuggerExtension)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimPotentialLifestyleMismatches.Attach">
            <summary>Sets the shim of PotentialLifestyleMismatches.Attach()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimPotentialLifestyleMismatches.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimPotentialLifestyleMismatches.Constructor">
            <summary>Sets the shim of PotentialLifestyleMismatches.PotentialLifestyleMismatches()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimPotentialLifestyleMismatches.GetKeyIHandler">
            <summary>Sets the shim of PotentialLifestyleMismatches.GetKey(IHandler root)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimPotentialLifestyleMismatches.GetMismatchMessageIHandlerArray">
            <summary>Sets the shim of PotentialLifestyleMismatches.GetMismatchMessage(IHandler[] handlers)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimPotentialLifestyleMismatches.GetNameDescriptionComponentModel">
            <summary>Sets the shim of PotentialLifestyleMismatches.GetNameDescription(ComponentModel componentModel)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimPotentialLifestyleMismatches.GetNameIHandlerArrayIHandler">
            <summary>Sets the shim of PotentialLifestyleMismatches.GetName(IHandler[] handlers, IHandler root)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimPotentialLifestyleMismatches.InitIKernelIDiagnosticsHost">
            <summary>Sets the shim of PotentialLifestyleMismatches.Init(IKernel kernel, IDiagnosticsHost diagnosticsHost)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimPotentialLifestyleMismatches.MismatchedComponentViewIHandlerArray">
            <summary>Sets the shim of PotentialLifestyleMismatches.MismatchedComponentView(IHandler[] handlers)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimPotentialLifestyleMismatches.NameGet">
            <summary>Sets the shim of PotentialLifestyleMismatches.get_Name()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimPotentialLifestyleMismatches._Attachb__0IHandlerArrayIHandlerArray">
            <summary>Sets the shim of PotentialLifestyleMismatches.&lt;Attach&gt;b__0(IHandler[] f, IHandler[] s)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimPotentialLifestyleMismatches._MismatchedComponentViewb__2IHandler">
            <summary>Sets the shim of PotentialLifestyleMismatches.&lt;MismatchedComponentView&gt;b__2(IHandler h)</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimPotentialLifestyleMismatches.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimPotentialLifestyleMismatches.AllInstances.Attach">
            <summary>Sets the shim of PotentialLifestyleMismatches.Attach()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimPotentialLifestyleMismatches.AllInstances.GetKeyIHandler">
            <summary>Sets the shim of PotentialLifestyleMismatches.GetKey(IHandler root)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimPotentialLifestyleMismatches.AllInstances.GetMismatchMessageIHandlerArray">
            <summary>Sets the shim of PotentialLifestyleMismatches.GetMismatchMessage(IHandler[] handlers)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimPotentialLifestyleMismatches.AllInstances.GetNameDescriptionComponentModel">
            <summary>Sets the shim of PotentialLifestyleMismatches.GetNameDescription(ComponentModel componentModel)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimPotentialLifestyleMismatches.AllInstances.GetNameIHandlerArrayIHandler">
            <summary>Sets the shim of PotentialLifestyleMismatches.GetName(IHandler[] handlers, IHandler root)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimPotentialLifestyleMismatches.AllInstances.InitIKernelIDiagnosticsHost">
            <summary>Sets the shim of PotentialLifestyleMismatches.Init(IKernel kernel, IDiagnosticsHost diagnosticsHost)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimPotentialLifestyleMismatches.AllInstances.MismatchedComponentViewIHandlerArray">
            <summary>Sets the shim of PotentialLifestyleMismatches.MismatchedComponentView(IHandler[] handlers)</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimPotentiallyMisconfiguredComponents">
            <summary>Shim type of Castle.Windsor.Diagnostics.Extensions.PotentiallyMisconfiguredComponents</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimPotentiallyMisconfiguredComponents.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimPotentiallyMisconfiguredComponents.#ctor(Castle.Windsor.Diagnostics.Extensions.PotentiallyMisconfiguredComponents)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimPotentiallyMisconfiguredComponents.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimPotentiallyMisconfiguredComponents.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimPotentiallyMisconfiguredComponents.Bind(Castle.Windsor.Diagnostics.IContainerDebuggerExtension)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimPotentiallyMisconfiguredComponents.Attach">
            <summary>Sets the shim of PotentiallyMisconfiguredComponents.Attach()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimPotentiallyMisconfiguredComponents.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimPotentiallyMisconfiguredComponents.Constructor">
            <summary>Sets the shim of PotentiallyMisconfiguredComponents.PotentiallyMisconfiguredComponents()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimPotentiallyMisconfiguredComponents.InitIKernelIDiagnosticsHost">
            <summary>Sets the shim of PotentiallyMisconfiguredComponents.Init(IKernel kernel, IDiagnosticsHost diagnosticsHost)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimPotentiallyMisconfiguredComponents.NameGet">
            <summary>Sets the shim of PotentiallyMisconfiguredComponents.get_Name()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimPotentiallyMisconfiguredComponents._Attachb__0IHandlerIHandler">
            <summary>Sets the shim of PotentiallyMisconfiguredComponents.&lt;Attach&gt;b__0(IHandler f, IHandler s)</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimPotentiallyMisconfiguredComponents.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimPotentiallyMisconfiguredComponents.AllInstances.Attach">
            <summary>Sets the shim of PotentiallyMisconfiguredComponents.Attach()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimPotentiallyMisconfiguredComponents.AllInstances.InitIKernelIDiagnosticsHost">
            <summary>Sets the shim of PotentiallyMisconfiguredComponents.Init(IKernel kernel, IDiagnosticsHost diagnosticsHost)</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimReleasePolicyTrackedObjects">
            <summary>Shim type of Castle.Windsor.Diagnostics.Extensions.ReleasePolicyTrackedObjects</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimReleasePolicyTrackedObjects.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimReleasePolicyTrackedObjects.#ctor(Castle.Windsor.Diagnostics.Extensions.ReleasePolicyTrackedObjects)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimReleasePolicyTrackedObjects.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimReleasePolicyTrackedObjects.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimReleasePolicyTrackedObjects.Bind(Castle.Windsor.Diagnostics.IContainerDebuggerExtension)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimReleasePolicyTrackedObjects.Attach">
            <summary>Sets the shim of ReleasePolicyTrackedObjects.Attach()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimReleasePolicyTrackedObjects.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimReleasePolicyTrackedObjects.BuildItemILookupOfIHandlerObject">
            <summary>Sets the shim of ReleasePolicyTrackedObjects.BuildItem(ILookup`2&lt;IHandler,Object&gt; results)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimReleasePolicyTrackedObjects.Constructor">
            <summary>Sets the shim of ReleasePolicyTrackedObjects.ReleasePolicyTrackedObjects()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimReleasePolicyTrackedObjects.InitIKernelIDiagnosticsHost">
            <summary>Sets the shim of ReleasePolicyTrackedObjects.Init(IKernel kernel, IDiagnosticsHost diagnosticsHost)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimReleasePolicyTrackedObjects.NameGet">
            <summary>Sets the shim of ReleasePolicyTrackedObjects.get_Name()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimReleasePolicyTrackedObjects._BuildItemb__0IGroupingOfIHandlerObject">
            <summary>Sets the shim of ReleasePolicyTrackedObjects.&lt;BuildItem&gt;b__0(IGrouping`2&lt;IHandler,Object&gt; l)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimReleasePolicyTrackedObjects._BuildItemb__1DebuggerViewItemDebuggerViewItem">
            <summary>Sets the shim of ReleasePolicyTrackedObjects.&lt;BuildItem&gt;b__1(DebuggerViewItem f, DebuggerViewItem s)</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimReleasePolicyTrackedObjects.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimReleasePolicyTrackedObjects.AllInstances.Attach">
            <summary>Sets the shim of ReleasePolicyTrackedObjects.Attach()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimReleasePolicyTrackedObjects.AllInstances.BuildItemILookupOfIHandlerObject">
            <summary>Sets the shim of ReleasePolicyTrackedObjects.BuildItem(ILookup`2&lt;IHandler,Object&gt; results)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimReleasePolicyTrackedObjects.AllInstances.InitIKernelIDiagnosticsHost">
            <summary>Sets the shim of ReleasePolicyTrackedObjects.Init(IKernel kernel, IDiagnosticsHost diagnosticsHost)</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimUsingContainerAsServiceLocator">
            <summary>Shim type of Castle.Windsor.Diagnostics.Extensions.UsingContainerAsServiceLocator</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimUsingContainerAsServiceLocator.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimUsingContainerAsServiceLocator.#ctor(Castle.Windsor.Diagnostics.Extensions.UsingContainerAsServiceLocator)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimUsingContainerAsServiceLocator.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimUsingContainerAsServiceLocator.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimUsingContainerAsServiceLocator.Bind(Castle.Windsor.Diagnostics.IContainerDebuggerExtension)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimUsingContainerAsServiceLocator.Attach">
            <summary>Sets the shim of UsingContainerAsServiceLocator.Attach()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimUsingContainerAsServiceLocator.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimUsingContainerAsServiceLocator.Constructor">
            <summary>Sets the shim of UsingContainerAsServiceLocator.UsingContainerAsServiceLocator()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimUsingContainerAsServiceLocator.InitIKernelIDiagnosticsHost">
            <summary>Sets the shim of UsingContainerAsServiceLocator.Init(IKernel kernel, IDiagnosticsHost diagnosticsHost)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimUsingContainerAsServiceLocator._Attachb__0IHandlerIHandler">
            <summary>Sets the shim of UsingContainerAsServiceLocator.&lt;Attach&gt;b__0(IHandler f, IHandler s)</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimUsingContainerAsServiceLocator.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimUsingContainerAsServiceLocator.AllInstances.Attach">
            <summary>Sets the shim of UsingContainerAsServiceLocator.Attach()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.ShimUsingContainerAsServiceLocator.AllInstances.InitIKernelIDiagnosticsHost">
            <summary>Sets the shim of UsingContainerAsServiceLocator.Init(IKernel kernel, IDiagnosticsHost diagnosticsHost)</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.Extensions.Fakes.StubAbstractContainerDebuggerExtension">
            <summary>Stub type of Castle.Windsor.Diagnostics.Extensions.AbstractContainerDebuggerExtension</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Extensions.Fakes.StubAbstractContainerDebuggerExtension.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Extensions.Fakes.StubAbstractContainerDebuggerExtension.Attach">
            <summary>Sets the stub of AbstractContainerDebuggerExtension.Attach()</summary>
        </member>
        <member name="F:Castle.Windsor.Diagnostics.Extensions.Fakes.StubAbstractContainerDebuggerExtension.Attach01">
            <summary>Sets the stub of AbstractContainerDebuggerExtension.Attach()</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Extensions.Fakes.StubAbstractContainerDebuggerExtension.Init(Castle.MicroKernel.IKernel,Castle.Windsor.Diagnostics.IDiagnosticsHost)">
            <summary>Sets the stub of AbstractContainerDebuggerExtension.Init(IKernel kernel, IDiagnosticsHost diagnosticsHost)</summary>
        </member>
        <member name="F:Castle.Windsor.Diagnostics.Extensions.Fakes.StubAbstractContainerDebuggerExtension.InitIKernelIDiagnosticsHost">
            <summary>Sets the stub of AbstractContainerDebuggerExtension.Init(IKernel kernel, IDiagnosticsHost diagnosticsHost)</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Extensions.Fakes.StubAbstractContainerDebuggerExtension.InitializeStub">
            <summary>Initializes a new instance of type StubAbstractContainerDebuggerExtension</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.StubAbstractContainerDebuggerExtension.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.StubAbstractContainerDebuggerExtension.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.StubAbstractContainerDebuggerExtension.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.Extensions.Fakes.StubAllComponents">
            <summary>Stub type of Castle.Windsor.Diagnostics.Extensions.AllComponents</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Extensions.Fakes.StubAllComponents.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Extensions.Fakes.StubAllComponents.Attach">
            <summary>Sets the stub of AllComponents.Attach()</summary>
        </member>
        <member name="F:Castle.Windsor.Diagnostics.Extensions.Fakes.StubAllComponents.Attach01">
            <summary>Sets the stub of AllComponents.Attach()</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Extensions.Fakes.StubAllComponents.Init(Castle.MicroKernel.IKernel,Castle.Windsor.Diagnostics.IDiagnosticsHost)">
            <summary>Sets the stub of AllComponents.Init(IKernel kernel, IDiagnosticsHost diagnosticsHost)</summary>
        </member>
        <member name="F:Castle.Windsor.Diagnostics.Extensions.Fakes.StubAllComponents.InitIKernelIDiagnosticsHost">
            <summary>Sets the stub of AllComponents.Init(IKernel kernel, IDiagnosticsHost diagnosticsHost)</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Extensions.Fakes.StubAllComponents.InitializeStub">
            <summary>Initializes a new instance of type StubAllComponents</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.StubAllComponents.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.StubAllComponents.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.StubAllComponents.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.Extensions.Fakes.StubAllServices">
            <summary>Stub type of Castle.Windsor.Diagnostics.Extensions.AllServices</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Extensions.Fakes.StubAllServices.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Extensions.Fakes.StubAllServices.Attach">
            <summary>Sets the stub of AllServices.Attach()</summary>
        </member>
        <member name="F:Castle.Windsor.Diagnostics.Extensions.Fakes.StubAllServices.Attach01">
            <summary>Sets the stub of AllServices.Attach()</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Extensions.Fakes.StubAllServices.Init(Castle.MicroKernel.IKernel,Castle.Windsor.Diagnostics.IDiagnosticsHost)">
            <summary>Sets the stub of AllServices.Init(IKernel kernel, IDiagnosticsHost diagnosticsHost)</summary>
        </member>
        <member name="F:Castle.Windsor.Diagnostics.Extensions.Fakes.StubAllServices.InitIKernelIDiagnosticsHost">
            <summary>Sets the stub of AllServices.Init(IKernel kernel, IDiagnosticsHost diagnosticsHost)</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Extensions.Fakes.StubAllServices.InitializeStub">
            <summary>Initializes a new instance of type StubAllServices</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.StubAllServices.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.StubAllServices.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.StubAllServices.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.Extensions.Fakes.StubDuplicatedDependenciesDebuggerExtension">
            <summary>Stub type of Castle.Windsor.Diagnostics.Extensions.DuplicatedDependenciesDebuggerExtension</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Extensions.Fakes.StubDuplicatedDependenciesDebuggerExtension.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Extensions.Fakes.StubDuplicatedDependenciesDebuggerExtension.Attach">
            <summary>Sets the stub of DuplicatedDependenciesDebuggerExtension.Attach()</summary>
        </member>
        <member name="F:Castle.Windsor.Diagnostics.Extensions.Fakes.StubDuplicatedDependenciesDebuggerExtension.Attach01">
            <summary>Sets the stub of DuplicatedDependenciesDebuggerExtension.Attach()</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Extensions.Fakes.StubDuplicatedDependenciesDebuggerExtension.Init(Castle.MicroKernel.IKernel,Castle.Windsor.Diagnostics.IDiagnosticsHost)">
            <summary>Sets the stub of DuplicatedDependenciesDebuggerExtension.Init(IKernel kernel, IDiagnosticsHost diagnosticsHost)</summary>
        </member>
        <member name="F:Castle.Windsor.Diagnostics.Extensions.Fakes.StubDuplicatedDependenciesDebuggerExtension.InitIKernelIDiagnosticsHost">
            <summary>Sets the stub of DuplicatedDependenciesDebuggerExtension.Init(IKernel kernel, IDiagnosticsHost diagnosticsHost)</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Extensions.Fakes.StubDuplicatedDependenciesDebuggerExtension.InitializeStub">
            <summary>Initializes a new instance of type StubDuplicatedDependenciesDebuggerExtension</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.StubDuplicatedDependenciesDebuggerExtension.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.StubDuplicatedDependenciesDebuggerExtension.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.StubDuplicatedDependenciesDebuggerExtension.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.Extensions.Fakes.StubFacilities">
            <summary>Stub type of Castle.Windsor.Diagnostics.Extensions.Facilities</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Extensions.Fakes.StubFacilities.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Extensions.Fakes.StubFacilities.InitializeStub">
            <summary>Initializes a new instance of type StubFacilities</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.StubFacilities.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.StubFacilities.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.StubFacilities.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.Extensions.Fakes.StubPotentialLifestyleMismatches">
            <summary>Stub type of Castle.Windsor.Diagnostics.Extensions.PotentialLifestyleMismatches</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Extensions.Fakes.StubPotentialLifestyleMismatches.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Extensions.Fakes.StubPotentialLifestyleMismatches.Attach">
            <summary>Sets the stub of PotentialLifestyleMismatches.Attach()</summary>
        </member>
        <member name="F:Castle.Windsor.Diagnostics.Extensions.Fakes.StubPotentialLifestyleMismatches.Attach01">
            <summary>Sets the stub of PotentialLifestyleMismatches.Attach()</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Extensions.Fakes.StubPotentialLifestyleMismatches.Init(Castle.MicroKernel.IKernel,Castle.Windsor.Diagnostics.IDiagnosticsHost)">
            <summary>Sets the stub of PotentialLifestyleMismatches.Init(IKernel kernel, IDiagnosticsHost diagnosticsHost)</summary>
        </member>
        <member name="F:Castle.Windsor.Diagnostics.Extensions.Fakes.StubPotentialLifestyleMismatches.InitIKernelIDiagnosticsHost">
            <summary>Sets the stub of PotentialLifestyleMismatches.Init(IKernel kernel, IDiagnosticsHost diagnosticsHost)</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Extensions.Fakes.StubPotentialLifestyleMismatches.InitializeStub">
            <summary>Initializes a new instance of type StubPotentialLifestyleMismatches</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.StubPotentialLifestyleMismatches.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.StubPotentialLifestyleMismatches.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.StubPotentialLifestyleMismatches.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.Extensions.Fakes.StubPotentiallyMisconfiguredComponents">
            <summary>Stub type of Castle.Windsor.Diagnostics.Extensions.PotentiallyMisconfiguredComponents</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Extensions.Fakes.StubPotentiallyMisconfiguredComponents.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Extensions.Fakes.StubPotentiallyMisconfiguredComponents.Attach">
            <summary>Sets the stub of PotentiallyMisconfiguredComponents.Attach()</summary>
        </member>
        <member name="F:Castle.Windsor.Diagnostics.Extensions.Fakes.StubPotentiallyMisconfiguredComponents.Attach01">
            <summary>Sets the stub of PotentiallyMisconfiguredComponents.Attach()</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Extensions.Fakes.StubPotentiallyMisconfiguredComponents.Init(Castle.MicroKernel.IKernel,Castle.Windsor.Diagnostics.IDiagnosticsHost)">
            <summary>Sets the stub of PotentiallyMisconfiguredComponents.Init(IKernel kernel, IDiagnosticsHost diagnosticsHost)</summary>
        </member>
        <member name="F:Castle.Windsor.Diagnostics.Extensions.Fakes.StubPotentiallyMisconfiguredComponents.InitIKernelIDiagnosticsHost">
            <summary>Sets the stub of PotentiallyMisconfiguredComponents.Init(IKernel kernel, IDiagnosticsHost diagnosticsHost)</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Extensions.Fakes.StubPotentiallyMisconfiguredComponents.InitializeStub">
            <summary>Initializes a new instance of type StubPotentiallyMisconfiguredComponents</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.StubPotentiallyMisconfiguredComponents.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.StubPotentiallyMisconfiguredComponents.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.StubPotentiallyMisconfiguredComponents.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.Extensions.Fakes.StubReleasePolicyTrackedObjects">
            <summary>Stub type of Castle.Windsor.Diagnostics.Extensions.ReleasePolicyTrackedObjects</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Extensions.Fakes.StubReleasePolicyTrackedObjects.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Extensions.Fakes.StubReleasePolicyTrackedObjects.Attach">
            <summary>Sets the stub of ReleasePolicyTrackedObjects.Attach()</summary>
        </member>
        <member name="F:Castle.Windsor.Diagnostics.Extensions.Fakes.StubReleasePolicyTrackedObjects.Attach01">
            <summary>Sets the stub of ReleasePolicyTrackedObjects.Attach()</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Extensions.Fakes.StubReleasePolicyTrackedObjects.Init(Castle.MicroKernel.IKernel,Castle.Windsor.Diagnostics.IDiagnosticsHost)">
            <summary>Sets the stub of ReleasePolicyTrackedObjects.Init(IKernel kernel, IDiagnosticsHost diagnosticsHost)</summary>
        </member>
        <member name="F:Castle.Windsor.Diagnostics.Extensions.Fakes.StubReleasePolicyTrackedObjects.InitIKernelIDiagnosticsHost">
            <summary>Sets the stub of ReleasePolicyTrackedObjects.Init(IKernel kernel, IDiagnosticsHost diagnosticsHost)</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Extensions.Fakes.StubReleasePolicyTrackedObjects.InitializeStub">
            <summary>Initializes a new instance of type StubReleasePolicyTrackedObjects</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.StubReleasePolicyTrackedObjects.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.StubReleasePolicyTrackedObjects.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.StubReleasePolicyTrackedObjects.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.Extensions.Fakes.StubUsingContainerAsServiceLocator">
            <summary>Stub type of Castle.Windsor.Diagnostics.Extensions.UsingContainerAsServiceLocator</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Extensions.Fakes.StubUsingContainerAsServiceLocator.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Extensions.Fakes.StubUsingContainerAsServiceLocator.Attach">
            <summary>Sets the stub of UsingContainerAsServiceLocator.Attach()</summary>
        </member>
        <member name="F:Castle.Windsor.Diagnostics.Extensions.Fakes.StubUsingContainerAsServiceLocator.Attach01">
            <summary>Sets the stub of UsingContainerAsServiceLocator.Attach()</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Extensions.Fakes.StubUsingContainerAsServiceLocator.Init(Castle.MicroKernel.IKernel,Castle.Windsor.Diagnostics.IDiagnosticsHost)">
            <summary>Sets the stub of UsingContainerAsServiceLocator.Init(IKernel kernel, IDiagnosticsHost diagnosticsHost)</summary>
        </member>
        <member name="F:Castle.Windsor.Diagnostics.Extensions.Fakes.StubUsingContainerAsServiceLocator.InitIKernelIDiagnosticsHost">
            <summary>Sets the stub of UsingContainerAsServiceLocator.Init(IKernel kernel, IDiagnosticsHost diagnosticsHost)</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Extensions.Fakes.StubUsingContainerAsServiceLocator.InitializeStub">
            <summary>Initializes a new instance of type StubUsingContainerAsServiceLocator</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.StubUsingContainerAsServiceLocator.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.StubUsingContainerAsServiceLocator.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Extensions.Fakes.StubUsingContainerAsServiceLocator.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.Fakes.ShimAllComponentsDiagnostic">
            <summary>Shim type of Castle.Windsor.Diagnostics.AllComponentsDiagnostic</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.ShimAllComponentsDiagnostic.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.ShimAllComponentsDiagnostic.#ctor(Castle.Windsor.Diagnostics.AllComponentsDiagnostic)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.ShimAllComponentsDiagnostic.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.ShimAllComponentsDiagnostic.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.ShimAllComponentsDiagnostic.Bind(Castle.Windsor.Diagnostics.IAllComponentsDiagnostic)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.ShimAllComponentsDiagnostic.Bind(Castle.Windsor.Diagnostics.IDiagnostic{Castle.MicroKernel.IHandler[]})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimAllComponentsDiagnostic.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimAllComponentsDiagnostic.ConstructorIKernel">
            <summary>Sets the shim of AllComponentsDiagnostic.AllComponentsDiagnostic(IKernel kernel)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimAllComponentsDiagnostic.Inspect">
            <summary>Sets the shim of AllComponentsDiagnostic.Inspect()</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.Fakes.ShimAllComponentsDiagnostic.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimAllComponentsDiagnostic.AllInstances.Inspect">
            <summary>Sets the shim of AllComponentsDiagnostic.Inspect()</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.Fakes.ShimAllServicesDiagnostic">
            <summary>Shim type of Castle.Windsor.Diagnostics.AllServicesDiagnostic</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.ShimAllServicesDiagnostic.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.ShimAllServicesDiagnostic.#ctor(Castle.Windsor.Diagnostics.AllServicesDiagnostic)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.ShimAllServicesDiagnostic.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.ShimAllServicesDiagnostic.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.ShimAllServicesDiagnostic.Bind(Castle.Windsor.Diagnostics.IAllServicesDiagnostic)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.ShimAllServicesDiagnostic.Bind(Castle.Windsor.Diagnostics.IDiagnostic{System.Linq.ILookup{System.Type,Castle.MicroKernel.IHandler}})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimAllServicesDiagnostic.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimAllServicesDiagnostic.ConstructorIKernel">
            <summary>Sets the shim of AllServicesDiagnostic.AllServicesDiagnostic(IKernel kernel)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimAllServicesDiagnostic.Inspect">
            <summary>Sets the shim of AllServicesDiagnostic.Inspect()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimAllServicesDiagnostic._Inspectb__0IHandler">
            <summary>Sets the shim of AllServicesDiagnostic.&lt;Inspect&gt;b__0(IHandler handler)</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.Fakes.ShimAllServicesDiagnostic.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimAllServicesDiagnostic.AllInstances.Inspect">
            <summary>Sets the shim of AllServicesDiagnostic.Inspect()</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.Fakes.ShimComponentDebuggerExtension">
            <summary>Shim type of Castle.Windsor.Diagnostics.ComponentDebuggerExtension</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.ShimComponentDebuggerExtension.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.ShimComponentDebuggerExtension.#ctor(Castle.Windsor.Diagnostics.ComponentDebuggerExtension)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.ShimComponentDebuggerExtension.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.ShimComponentDebuggerExtension.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.ShimComponentDebuggerExtension.Bind(Castle.Windsor.Diagnostics.IComponentDebuggerExtension)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimComponentDebuggerExtension.Attach">
            <summary>Sets the shim of ComponentDebuggerExtension.Attach()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimComponentDebuggerExtension.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimComponentDebuggerExtension.ConstructorObjectArray">
            <summary>Sets the shim of ComponentDebuggerExtension.ComponentDebuggerExtension(Object[] items)</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.Fakes.ShimComponentDebuggerExtension.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimComponentDebuggerExtension.AllInstances.Attach">
            <summary>Sets the shim of ComponentDebuggerExtension.Attach()</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.Fakes.ShimDefaultDiagnosticsSubSystem">
            <summary>Shim type of Castle.Windsor.Diagnostics.DefaultDiagnosticsSubSystem</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.ShimDefaultDiagnosticsSubSystem.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.ShimDefaultDiagnosticsSubSystem.#ctor(Castle.Windsor.Diagnostics.DefaultDiagnosticsSubSystem)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.ShimDefaultDiagnosticsSubSystem.AddDiagnosticOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{``0})">
            <summary>Sets the shim of DefaultDiagnosticsSubSystem.AddDiagnostic(!!0 diagnostic)</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.ShimDefaultDiagnosticsSubSystem.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.ShimDefaultDiagnosticsSubSystem.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.ShimDefaultDiagnosticsSubSystem.Bind(Castle.MicroKernel.ISubSystem)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.ShimDefaultDiagnosticsSubSystem.Bind(Castle.Windsor.Diagnostics.IContainerDebuggerExtensionHost)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.ShimDefaultDiagnosticsSubSystem.Bind(Castle.Windsor.Diagnostics.IDiagnosticsHost)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.ShimDefaultDiagnosticsSubSystem.Bind(System.Collections.IEnumerable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.ShimDefaultDiagnosticsSubSystem.Bind(System.Collections.Generic.IEnumerable{Castle.Windsor.Diagnostics.IContainerDebuggerExtension})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.ShimDefaultDiagnosticsSubSystem.GetDiagnosticOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0})">
            <summary>Sets the shim of DefaultDiagnosticsSubSystem.GetDiagnostic()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimDefaultDiagnosticsSubSystem.AddIContainerDebuggerExtension">
            <summary>Sets the shim of DefaultDiagnosticsSubSystem.Add(IContainerDebuggerExtension item)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimDefaultDiagnosticsSubSystem.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimDefaultDiagnosticsSubSystem.Constructor">
            <summary>Sets the shim of DefaultDiagnosticsSubSystem.DefaultDiagnosticsSubSystem()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimDefaultDiagnosticsSubSystem.GetEnumerator">
            <summary>Sets the shim of DefaultDiagnosticsSubSystem.GetEnumerator()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimDefaultDiagnosticsSubSystem.InitIKernelInternal">
            <summary>Sets the shim of DefaultDiagnosticsSubSystem.Init(IKernelInternal kernel)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimDefaultDiagnosticsSubSystem.InitStandardExtensions">
            <summary>Sets the shim of DefaultDiagnosticsSubSystem.InitStandardExtensions()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimDefaultDiagnosticsSubSystem.SystemCollectionsIEnumerableGetEnumerator">
            <summary>Sets the shim of DefaultDiagnosticsSubSystem.System.Collections.IEnumerable.GetEnumerator()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimDefaultDiagnosticsSubSystem.Terminate">
            <summary>Sets the shim of DefaultDiagnosticsSubSystem.Terminate()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimDefaultDiagnosticsSubSystem._Terminateb__0IDisposable">
            <summary>Sets the shim of DefaultDiagnosticsSubSystem.&lt;Terminate&gt;b__0(IDisposable e)</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.Fakes.ShimDefaultDiagnosticsSubSystem.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.ShimDefaultDiagnosticsSubSystem.AllInstances.AddDiagnosticOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{Castle.Windsor.Diagnostics.DefaultDiagnosticsSubSystem,``0})">
            <summary>Sets the shim of DefaultDiagnosticsSubSystem.AddDiagnostic(!!0 diagnostic)</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.ShimDefaultDiagnosticsSubSystem.AllInstances.GetDiagnosticOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.Windsor.Diagnostics.DefaultDiagnosticsSubSystem,``0})">
            <summary>Sets the shim of DefaultDiagnosticsSubSystem.GetDiagnostic()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimDefaultDiagnosticsSubSystem.AllInstances.AddIContainerDebuggerExtension">
            <summary>Sets the shim of DefaultDiagnosticsSubSystem.Add(IContainerDebuggerExtension item)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimDefaultDiagnosticsSubSystem.AllInstances.GetEnumerator">
            <summary>Sets the shim of DefaultDiagnosticsSubSystem.GetEnumerator()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimDefaultDiagnosticsSubSystem.AllInstances.InitIKernelInternal">
            <summary>Sets the shim of DefaultDiagnosticsSubSystem.Init(IKernelInternal kernel)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimDefaultDiagnosticsSubSystem.AllInstances.InitStandardExtensions">
            <summary>Sets the shim of DefaultDiagnosticsSubSystem.InitStandardExtensions()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimDefaultDiagnosticsSubSystem.AllInstances.SystemCollectionsIEnumerableGetEnumerator">
            <summary>Sets the shim of DefaultDiagnosticsSubSystem.System.Collections.IEnumerable.GetEnumerator()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimDefaultDiagnosticsSubSystem.AllInstances.Terminate">
            <summary>Sets the shim of DefaultDiagnosticsSubSystem.Terminate()</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.Fakes.ShimDependencyDuplicate">
            <summary>Shim type of Castle.Windsor.Diagnostics.DependencyDuplicate</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.ShimDependencyDuplicate.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.ShimDependencyDuplicate.#ctor(Castle.Windsor.Diagnostics.DependencyDuplicate)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.ShimDependencyDuplicate.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.ShimDependencyDuplicate.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimDependencyDuplicate.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimDependencyDuplicate.ConstructorDependencyModelDependencyModelDependencyDuplicationReason">
            <summary>Sets the shim of DependencyDuplicate.DependencyDuplicate(DependencyModel dependency1, DependencyModel dependency2, DependencyDuplicationReason reason)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimDependencyDuplicate.Dependency1Get">
            <summary>Sets the shim of DependencyDuplicate.get_Dependency1()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimDependencyDuplicate.Dependency1SetDependencyModel">
            <summary>Sets the shim of DependencyDuplicate.set_Dependency1(DependencyModel value)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimDependencyDuplicate.Dependency2Get">
            <summary>Sets the shim of DependencyDuplicate.get_Dependency2()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimDependencyDuplicate.Dependency2SetDependencyModel">
            <summary>Sets the shim of DependencyDuplicate.set_Dependency2(DependencyModel value)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimDependencyDuplicate.EqualsDependencyDuplicate">
            <summary>Sets the shim of DependencyDuplicate.Equals(DependencyDuplicate other)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimDependencyDuplicate.EqualsObject">
            <summary>Sets the shim of DependencyDuplicate.Equals(Object obj)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimDependencyDuplicate.GetHashCode">
            <summary>Sets the shim of DependencyDuplicate.GetHashCode()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimDependencyDuplicate.ReasonGet">
            <summary>Sets the shim of DependencyDuplicate.get_Reason()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimDependencyDuplicate.ReasonSetDependencyDuplicationReason">
            <summary>Sets the shim of DependencyDuplicate.set_Reason(DependencyDuplicationReason value)</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.Fakes.ShimDependencyDuplicate.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimDependencyDuplicate.AllInstances.Dependency1Get">
            <summary>Sets the shim of DependencyDuplicate.get_Dependency1()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimDependencyDuplicate.AllInstances.Dependency1SetDependencyModel">
            <summary>Sets the shim of DependencyDuplicate.set_Dependency1(DependencyModel value)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimDependencyDuplicate.AllInstances.Dependency2Get">
            <summary>Sets the shim of DependencyDuplicate.get_Dependency2()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimDependencyDuplicate.AllInstances.Dependency2SetDependencyModel">
            <summary>Sets the shim of DependencyDuplicate.set_Dependency2(DependencyModel value)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimDependencyDuplicate.AllInstances.EqualsDependencyDuplicate">
            <summary>Sets the shim of DependencyDuplicate.Equals(DependencyDuplicate other)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimDependencyDuplicate.AllInstances.EqualsObject">
            <summary>Sets the shim of DependencyDuplicate.Equals(Object obj)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimDependencyDuplicate.AllInstances.GetHashCode01">
            <summary>Sets the shim of DependencyDuplicate.GetHashCode()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimDependencyDuplicate.AllInstances.ReasonGet">
            <summary>Sets the shim of DependencyDuplicate.get_Reason()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimDependencyDuplicate.AllInstances.ReasonSetDependencyDuplicationReason">
            <summary>Sets the shim of DependencyDuplicate.set_Reason(DependencyDuplicationReason value)</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.Fakes.ShimDuplicatedDependenciesDiagnostic">
            <summary>Shim type of Castle.Windsor.Diagnostics.DuplicatedDependenciesDiagnostic</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.ShimDuplicatedDependenciesDiagnostic.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.ShimDuplicatedDependenciesDiagnostic.#ctor(Castle.Windsor.Diagnostics.DuplicatedDependenciesDiagnostic)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.ShimDuplicatedDependenciesDiagnostic.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.ShimDuplicatedDependenciesDiagnostic.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.ShimDuplicatedDependenciesDiagnostic.Bind(Castle.Windsor.Diagnostics.IDuplicatedDependenciesDiagnostic)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.ShimDuplicatedDependenciesDiagnostic.Bind(Castle.Windsor.Diagnostics.IDiagnostic{Castle.Core.Pair{Castle.MicroKernel.IHandler,Castle.Windsor.Diagnostics.DependencyDuplicate[]}[]})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimDuplicatedDependenciesDiagnostic.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimDuplicatedDependenciesDiagnostic.CollectDuplicatesBetweenConstructorParametersConstructorCandidateCollectionICollectionOfDependencyDuplicate">
            <summary>Sets the shim of DuplicatedDependenciesDiagnostic.CollectDuplicatesBetweenConstructorParameters(ConstructorCandidateCollection constructors, ICollection`1&lt;DependencyDuplicate&gt; duplicates)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimDuplicatedDependenciesDiagnostic.CollectDuplicatesBetweenDependencyModelArrayICollectionOfDependencyDuplicate">
            <summary>Sets the shim of DuplicatedDependenciesDiagnostic.CollectDuplicatesBetween(DependencyModel[] array, ICollection`1&lt;DependencyDuplicate&gt; duplicates)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimDuplicatedDependenciesDiagnostic.CollectDuplicatesBetweenPropertiesAndConstructorsConstructorCandidateCollectionDependencyModelArrayICollectionOfDependencyDuplicate">
            <summary>Sets the shim of DuplicatedDependenciesDiagnostic.CollectDuplicatesBetweenPropertiesAndConstructors(ConstructorCandidateCollection constructors, DependencyModel[] properties, ICollection`1&lt;DependencyDuplicate&gt; duplicates)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimDuplicatedDependenciesDiagnostic.CollectDuplicatesBetweenPropertiesDependencyModelArrayICollectionOfDependencyDuplicate">
            <summary>Sets the shim of DuplicatedDependenciesDiagnostic.CollectDuplicatesBetweenProperties(DependencyModel[] properties, ICollection`1&lt;DependencyDuplicate&gt; duplicates)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimDuplicatedDependenciesDiagnostic.ConstructorIKernel">
            <summary>Sets the shim of DuplicatedDependenciesDiagnostic.DuplicatedDependenciesDiagnostic(IKernel kernel)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimDuplicatedDependenciesDiagnostic.DescribeStringBuilderDependencyModel">
            <summary>Sets the shim of DuplicatedDependenciesDiagnostic.Describe(StringBuilder details, DependencyModel dependency)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimDuplicatedDependenciesDiagnostic.FindDuplicateDependenciesForIHandler">
            <summary>Sets the shim of DuplicatedDependenciesDiagnostic.FindDuplicateDependenciesFor(IHandler handler)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimDuplicatedDependenciesDiagnostic.GetDetailsDependencyDuplicate">
            <summary>Sets the shim of DuplicatedDependenciesDiagnostic.GetDetails(DependencyDuplicate duplicates)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimDuplicatedDependenciesDiagnostic.Inspect">
            <summary>Sets the shim of DuplicatedDependenciesDiagnostic.Inspect()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimDuplicatedDependenciesDiagnostic.IsDuplicateDependencyModelDependencyModel">
            <summary>Sets the shim of DuplicatedDependenciesDiagnostic.IsDuplicate(DependencyModel foo, DependencyModel bar)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimDuplicatedDependenciesDiagnostic._FindDuplicateDependenciesForb__0PropertySet">
            <summary>Sets the shim of DuplicatedDependenciesDiagnostic.&lt;FindDuplicateDependenciesFor&gt;b__0(PropertySet p)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimDuplicatedDependenciesDiagnostic._FindDuplicateDependenciesForb__1DependencyModel">
            <summary>Sets the shim of DuplicatedDependenciesDiagnostic.&lt;FindDuplicateDependenciesFor&gt;b__1(DependencyModel d)</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.Fakes.ShimDuplicatedDependenciesDiagnostic.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimDuplicatedDependenciesDiagnostic.AllInstances.CollectDuplicatesBetweenConstructorParametersConstructorCandidateCollectionICollectionOfDependencyDuplicate">
            <summary>Sets the shim of DuplicatedDependenciesDiagnostic.CollectDuplicatesBetweenConstructorParameters(ConstructorCandidateCollection constructors, ICollection`1&lt;DependencyDuplicate&gt; duplicates)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimDuplicatedDependenciesDiagnostic.AllInstances.CollectDuplicatesBetweenDependencyModelArrayICollectionOfDependencyDuplicate">
            <summary>Sets the shim of DuplicatedDependenciesDiagnostic.CollectDuplicatesBetween(DependencyModel[] array, ICollection`1&lt;DependencyDuplicate&gt; duplicates)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimDuplicatedDependenciesDiagnostic.AllInstances.CollectDuplicatesBetweenPropertiesAndConstructorsConstructorCandidateCollectionDependencyModelArrayICollectionOfDependencyDuplicate">
            <summary>Sets the shim of DuplicatedDependenciesDiagnostic.CollectDuplicatesBetweenPropertiesAndConstructors(ConstructorCandidateCollection constructors, DependencyModel[] properties, ICollection`1&lt;DependencyDuplicate&gt; duplicates)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimDuplicatedDependenciesDiagnostic.AllInstances.CollectDuplicatesBetweenPropertiesDependencyModelArrayICollectionOfDependencyDuplicate">
            <summary>Sets the shim of DuplicatedDependenciesDiagnostic.CollectDuplicatesBetweenProperties(DependencyModel[] properties, ICollection`1&lt;DependencyDuplicate&gt; duplicates)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimDuplicatedDependenciesDiagnostic.AllInstances.FindDuplicateDependenciesForIHandler">
            <summary>Sets the shim of DuplicatedDependenciesDiagnostic.FindDuplicateDependenciesFor(IHandler handler)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimDuplicatedDependenciesDiagnostic.AllInstances.GetDetailsDependencyDuplicate">
            <summary>Sets the shim of DuplicatedDependenciesDiagnostic.GetDetails(DependencyDuplicate duplicates)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimDuplicatedDependenciesDiagnostic.AllInstances.Inspect">
            <summary>Sets the shim of DuplicatedDependenciesDiagnostic.Inspect()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimDuplicatedDependenciesDiagnostic.AllInstances.IsDuplicateDependencyModelDependencyModel">
            <summary>Sets the shim of DuplicatedDependenciesDiagnostic.IsDuplicate(DependencyModel foo, DependencyModel bar)</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.Fakes.ShimNullPerformanceCounter">
            <summary>Shim type of Castle.Windsor.Diagnostics.NullPerformanceCounter</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.ShimNullPerformanceCounter.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.ShimNullPerformanceCounter.#ctor(Castle.Windsor.Diagnostics.NullPerformanceCounter)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.ShimNullPerformanceCounter.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.ShimNullPerformanceCounter.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.ShimNullPerformanceCounter.Bind(Castle.Windsor.Diagnostics.ITrackedComponentsPerformanceCounter)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimNullPerformanceCounter.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimNullPerformanceCounter.Constructor">
            <summary>Sets the shim of NullPerformanceCounter.NullPerformanceCounter()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimNullPerformanceCounter.DecrementTrackedInstancesCount">
            <summary>Sets the shim of NullPerformanceCounter.DecrementTrackedInstancesCount()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimNullPerformanceCounter.IncrementTrackedInstancesCount">
            <summary>Sets the shim of NullPerformanceCounter.IncrementTrackedInstancesCount()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimNullPerformanceCounter.StaticConstructor">
            <summary>Sets the shim of NullPerformanceCounter.NullPerformanceCounter()</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.Fakes.ShimNullPerformanceCounter.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimNullPerformanceCounter.AllInstances.DecrementTrackedInstancesCount">
            <summary>Sets the shim of NullPerformanceCounter.DecrementTrackedInstancesCount()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimNullPerformanceCounter.AllInstances.IncrementTrackedInstancesCount">
            <summary>Sets the shim of NullPerformanceCounter.IncrementTrackedInstancesCount()</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.Fakes.ShimPerformanceMetricsFactory">
            <summary>Shim type of Castle.Windsor.Diagnostics.PerformanceMetricsFactory</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.ShimPerformanceMetricsFactory.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.ShimPerformanceMetricsFactory.#ctor(Castle.Windsor.Diagnostics.PerformanceMetricsFactory)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.ShimPerformanceMetricsFactory.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.ShimPerformanceMetricsFactory.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.ShimPerformanceMetricsFactory.Bind(Castle.Windsor.Diagnostics.IPerformanceMetricsFactory)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimPerformanceMetricsFactory.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimPerformanceMetricsFactory.BuildInstancesTrackedByReleasePolicyCounterString">
            <summary>Sets the shim of PerformanceMetricsFactory.BuildInstancesTrackedByReleasePolicyCounter(String name)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimPerformanceMetricsFactory.Constructor">
            <summary>Sets the shim of PerformanceMetricsFactory.PerformanceMetricsFactory()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimPerformanceMetricsFactory.CreateInstancesTrackedByReleasePolicyCounterString">
            <summary>Sets the shim of PerformanceMetricsFactory.CreateInstancesTrackedByReleasePolicyCounter(String name)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimPerformanceMetricsFactory.CreateWindsorCategoryAndCounters">
            <summary>Sets the shim of PerformanceMetricsFactory.CreateWindsorCategoryAndCounters()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimPerformanceMetricsFactory.Initialize">
            <summary>Sets the shim of PerformanceMetricsFactory.Initialize()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimPerformanceMetricsFactory.InitializedSuccessfullyGet">
            <summary>Sets the shim of PerformanceMetricsFactory.get_InitializedSuccessfully()</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.Fakes.ShimPerformanceMetricsFactory.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimPerformanceMetricsFactory.AllInstances.BuildInstancesTrackedByReleasePolicyCounterString">
            <summary>Sets the shim of PerformanceMetricsFactory.BuildInstancesTrackedByReleasePolicyCounter(String name)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimPerformanceMetricsFactory.AllInstances.CreateInstancesTrackedByReleasePolicyCounterString">
            <summary>Sets the shim of PerformanceMetricsFactory.CreateInstancesTrackedByReleasePolicyCounter(String name)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimPerformanceMetricsFactory.AllInstances.CreateWindsorCategoryAndCounters">
            <summary>Sets the shim of PerformanceMetricsFactory.CreateWindsorCategoryAndCounters()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimPerformanceMetricsFactory.AllInstances.Initialize">
            <summary>Sets the shim of PerformanceMetricsFactory.Initialize()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimPerformanceMetricsFactory.AllInstances.InitializedSuccessfullyGet">
            <summary>Sets the shim of PerformanceMetricsFactory.get_InitializedSuccessfully()</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.Fakes.ShimPotentialLifestyleMismatchesDiagnostic">
            <summary>Shim type of Castle.Windsor.Diagnostics.PotentialLifestyleMismatchesDiagnostic</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.ShimPotentialLifestyleMismatchesDiagnostic.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.ShimPotentialLifestyleMismatchesDiagnostic.#ctor(Castle.Windsor.Diagnostics.PotentialLifestyleMismatchesDiagnostic)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.ShimPotentialLifestyleMismatchesDiagnostic.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.ShimPotentialLifestyleMismatchesDiagnostic.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.ShimPotentialLifestyleMismatchesDiagnostic.Bind(Castle.Windsor.Diagnostics.IPotentialLifestyleMismatchesDiagnostic)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.ShimPotentialLifestyleMismatchesDiagnostic.Bind(Castle.Windsor.Diagnostics.IDiagnostic{Castle.MicroKernel.IHandler[][]})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimPotentialLifestyleMismatchesDiagnostic.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimPotentialLifestyleMismatchesDiagnostic.ConstructorIKernel">
            <summary>Sets the shim of PotentialLifestyleMismatchesDiagnostic.PotentialLifestyleMismatchesDiagnostic(IKernel kernel)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimPotentialLifestyleMismatchesDiagnostic.Inspect">
            <summary>Sets the shim of PotentialLifestyleMismatchesDiagnostic.Inspect()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimPotentialLifestyleMismatchesDiagnostic.IsSingletonIHandler">
            <summary>Sets the shim of PotentialLifestyleMismatchesDiagnostic.IsSingleton(IHandler component)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimPotentialLifestyleMismatchesDiagnostic._Inspectb__0IHandler">
            <summary>Sets the shim of PotentialLifestyleMismatchesDiagnostic.&lt;Inspect&gt;b__0(IHandler h)</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.Fakes.ShimPotentialLifestyleMismatchesDiagnostic.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimPotentialLifestyleMismatchesDiagnostic.AllInstances.Inspect">
            <summary>Sets the shim of PotentialLifestyleMismatchesDiagnostic.Inspect()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimPotentialLifestyleMismatchesDiagnostic.AllInstances.IsSingletonIHandler">
            <summary>Sets the shim of PotentialLifestyleMismatchesDiagnostic.IsSingleton(IHandler component)</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.Fakes.ShimPotentiallyMisconfiguredComponentsDiagnostic">
            <summary>Shim type of Castle.Windsor.Diagnostics.PotentiallyMisconfiguredComponentsDiagnostic</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.ShimPotentiallyMisconfiguredComponentsDiagnostic.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.ShimPotentiallyMisconfiguredComponentsDiagnostic.#ctor(Castle.Windsor.Diagnostics.PotentiallyMisconfiguredComponentsDiagnostic)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.ShimPotentiallyMisconfiguredComponentsDiagnostic.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.ShimPotentiallyMisconfiguredComponentsDiagnostic.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.ShimPotentiallyMisconfiguredComponentsDiagnostic.Bind(Castle.Windsor.Diagnostics.IPotentiallyMisconfiguredComponentsDiagnostic)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.ShimPotentiallyMisconfiguredComponentsDiagnostic.Bind(Castle.Windsor.Diagnostics.IDiagnostic{Castle.MicroKernel.IHandler[]})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimPotentiallyMisconfiguredComponentsDiagnostic.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimPotentiallyMisconfiguredComponentsDiagnostic.ConstructorIKernel">
            <summary>Sets the shim of PotentiallyMisconfiguredComponentsDiagnostic.PotentiallyMisconfiguredComponentsDiagnostic(IKernel kernel)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimPotentiallyMisconfiguredComponentsDiagnostic.Inspect">
            <summary>Sets the shim of PotentiallyMisconfiguredComponentsDiagnostic.Inspect()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimPotentiallyMisconfiguredComponentsDiagnostic.IsWaitingForDependenciesIHandler">
            <summary>Sets the shim of PotentiallyMisconfiguredComponentsDiagnostic.IsWaitingForDependencies(IHandler handler)</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.Fakes.ShimPotentiallyMisconfiguredComponentsDiagnostic.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimPotentiallyMisconfiguredComponentsDiagnostic.AllInstances.Inspect">
            <summary>Sets the shim of PotentiallyMisconfiguredComponentsDiagnostic.Inspect()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimPotentiallyMisconfiguredComponentsDiagnostic.AllInstances.IsWaitingForDependenciesIHandler">
            <summary>Sets the shim of PotentiallyMisconfiguredComponentsDiagnostic.IsWaitingForDependencies(IHandler handler)</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.Fakes.ShimTrackedComponentsDiagnostic">
            <summary>Shim type of Castle.Windsor.Diagnostics.TrackedComponentsDiagnostic</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.ShimTrackedComponentsDiagnostic.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.ShimTrackedComponentsDiagnostic.#ctor(Castle.Windsor.Diagnostics.TrackedComponentsDiagnostic)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.ShimTrackedComponentsDiagnostic.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.ShimTrackedComponentsDiagnostic.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.ShimTrackedComponentsDiagnostic.Bind(Castle.Windsor.Diagnostics.ITrackedComponentsDiagnostic)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.ShimTrackedComponentsDiagnostic.Bind(Castle.Windsor.Diagnostics.IDiagnostic{System.Linq.ILookup{Castle.MicroKernel.IHandler,System.Object}})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimTrackedComponentsDiagnostic.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimTrackedComponentsDiagnostic.Constructor">
            <summary>Sets the shim of TrackedComponentsDiagnostic.TrackedComponentsDiagnostic()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimTrackedComponentsDiagnostic.Inspect">
            <summary>Sets the shim of TrackedComponentsDiagnostic.Inspect()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimTrackedComponentsDiagnostic.TrackedInstancesRequestedAddEventHandlerOfTrackedInstancesEventArgs">
            <summary>Sets the shim of TrackedComponentsDiagnostic.add_TrackedInstancesRequested(EventHandler`1&lt;TrackedInstancesEventArgs&gt; value)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimTrackedComponentsDiagnostic.TrackedInstancesRequestedRemoveEventHandlerOfTrackedInstancesEventArgs">
            <summary>Sets the shim of TrackedComponentsDiagnostic.remove_TrackedInstancesRequested(EventHandler`1&lt;TrackedInstancesEventArgs&gt; value)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimTrackedComponentsDiagnostic._Inspectb__0Burden">
            <summary>Sets the shim of TrackedComponentsDiagnostic.&lt;Inspect&gt;b__0(Burden k)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimTrackedComponentsDiagnostic._Inspectb__1Burden">
            <summary>Sets the shim of TrackedComponentsDiagnostic.&lt;Inspect&gt;b__1(Burden b)</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.Fakes.ShimTrackedComponentsDiagnostic.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimTrackedComponentsDiagnostic.AllInstances.Inspect">
            <summary>Sets the shim of TrackedComponentsDiagnostic.Inspect()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimTrackedComponentsDiagnostic.AllInstances.TrackedInstancesRequestedAddEventHandlerOfTrackedInstancesEventArgs">
            <summary>Sets the shim of TrackedComponentsDiagnostic.add_TrackedInstancesRequested(EventHandler`1&lt;TrackedInstancesEventArgs&gt; value)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimTrackedComponentsDiagnostic.AllInstances.TrackedInstancesRequestedRemoveEventHandlerOfTrackedInstancesEventArgs">
            <summary>Sets the shim of TrackedComponentsDiagnostic.remove_TrackedInstancesRequested(EventHandler`1&lt;TrackedInstancesEventArgs&gt; value)</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.Fakes.ShimTrackedComponentsPerformanceCounterWrapper">
            <summary>Shim type of Castle.Windsor.Diagnostics.TrackedComponentsPerformanceCounterWrapper</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.ShimTrackedComponentsPerformanceCounterWrapper.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.ShimTrackedComponentsPerformanceCounterWrapper.#ctor(Castle.Windsor.Diagnostics.TrackedComponentsPerformanceCounterWrapper)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.ShimTrackedComponentsPerformanceCounterWrapper.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.ShimTrackedComponentsPerformanceCounterWrapper.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.ShimTrackedComponentsPerformanceCounterWrapper.Bind(Castle.Windsor.Diagnostics.ITrackedComponentsPerformanceCounter)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.ShimTrackedComponentsPerformanceCounterWrapper.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimTrackedComponentsPerformanceCounterWrapper.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimTrackedComponentsPerformanceCounterWrapper.ConstructorPerformanceCounter">
            <summary>Sets the shim of TrackedComponentsPerformanceCounterWrapper.TrackedComponentsPerformanceCounterWrapper(PerformanceCounter counter)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimTrackedComponentsPerformanceCounterWrapper.DecrementTrackedInstancesCount">
            <summary>Sets the shim of TrackedComponentsPerformanceCounterWrapper.DecrementTrackedInstancesCount()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimTrackedComponentsPerformanceCounterWrapper.Dispose">
            <summary>Sets the shim of TrackedComponentsPerformanceCounterWrapper.Dispose()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimTrackedComponentsPerformanceCounterWrapper.IncrementTrackedInstancesCount">
            <summary>Sets the shim of TrackedComponentsPerformanceCounterWrapper.IncrementTrackedInstancesCount()</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.Fakes.ShimTrackedComponentsPerformanceCounterWrapper.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimTrackedComponentsPerformanceCounterWrapper.AllInstances.DecrementTrackedInstancesCount">
            <summary>Sets the shim of TrackedComponentsPerformanceCounterWrapper.DecrementTrackedInstancesCount()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimTrackedComponentsPerformanceCounterWrapper.AllInstances.Dispose">
            <summary>Sets the shim of TrackedComponentsPerformanceCounterWrapper.Dispose()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimTrackedComponentsPerformanceCounterWrapper.AllInstances.IncrementTrackedInstancesCount">
            <summary>Sets the shim of TrackedComponentsPerformanceCounterWrapper.IncrementTrackedInstancesCount()</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.Fakes.ShimTrackedInstancesEventArgs">
            <summary>Shim type of Castle.Windsor.Diagnostics.TrackedInstancesEventArgs</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.ShimTrackedInstancesEventArgs.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.ShimTrackedInstancesEventArgs.#ctor(Castle.Windsor.Diagnostics.TrackedInstancesEventArgs)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.ShimTrackedInstancesEventArgs.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.ShimTrackedInstancesEventArgs.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimTrackedInstancesEventArgs.AddRangeIEnumerableOfBurden">
            <summary>Sets the shim of TrackedInstancesEventArgs.AddRange(IEnumerable`1&lt;Burden&gt; burden)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimTrackedInstancesEventArgs.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimTrackedInstancesEventArgs.Constructor">
            <summary>Sets the shim of TrackedInstancesEventArgs.TrackedInstancesEventArgs()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimTrackedInstancesEventArgs.ItemsGet">
            <summary>Sets the shim of TrackedInstancesEventArgs.get_Items()</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.Fakes.ShimTrackedInstancesEventArgs.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimTrackedInstancesEventArgs.AllInstances.AddRangeIEnumerableOfBurden">
            <summary>Sets the shim of TrackedInstancesEventArgs.AddRange(IEnumerable`1&lt;Burden&gt; burden)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimTrackedInstancesEventArgs.AllInstances.ItemsGet">
            <summary>Sets the shim of TrackedInstancesEventArgs.get_Items()</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.Fakes.ShimUsingContainerAsServiceLocatorDiagnostic">
            <summary>Shim type of Castle.Windsor.Diagnostics.UsingContainerAsServiceLocatorDiagnostic</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.ShimUsingContainerAsServiceLocatorDiagnostic.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.ShimUsingContainerAsServiceLocatorDiagnostic.#ctor(Castle.Windsor.Diagnostics.UsingContainerAsServiceLocatorDiagnostic)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.ShimUsingContainerAsServiceLocatorDiagnostic.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.ShimUsingContainerAsServiceLocatorDiagnostic.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.ShimUsingContainerAsServiceLocatorDiagnostic.Bind(Castle.Windsor.Diagnostics.IUsingContainerAsServiceLocatorDiagnostic)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.ShimUsingContainerAsServiceLocatorDiagnostic.Bind(Castle.Windsor.Diagnostics.IDiagnostic{Castle.MicroKernel.IHandler[]})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimUsingContainerAsServiceLocatorDiagnostic.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimUsingContainerAsServiceLocatorDiagnostic.ConstructorIKernel">
            <summary>Sets the shim of UsingContainerAsServiceLocatorDiagnostic.UsingContainerAsServiceLocatorDiagnostic(IKernel kernel)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimUsingContainerAsServiceLocatorDiagnostic.HasDependencyOnTheContainerIHandler">
            <summary>Sets the shim of UsingContainerAsServiceLocatorDiagnostic.HasDependencyOnTheContainer(IHandler handler)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimUsingContainerAsServiceLocatorDiagnostic.Inspect">
            <summary>Sets the shim of UsingContainerAsServiceLocatorDiagnostic.Inspect()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimUsingContainerAsServiceLocatorDiagnostic.StaticConstructor">
            <summary>Sets the shim of UsingContainerAsServiceLocatorDiagnostic.UsingContainerAsServiceLocatorDiagnostic()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimUsingContainerAsServiceLocatorDiagnostic._HasDependencyOnTheContainerb__5DependencyModel">
            <summary>Sets the shim of UsingContainerAsServiceLocatorDiagnostic.&lt;HasDependencyOnTheContainer&gt;b__5(DependencyModel d)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimUsingContainerAsServiceLocatorDiagnostic._Inspectb__0IHandler">
            <summary>Sets the shim of UsingContainerAsServiceLocatorDiagnostic.&lt;Inspect&gt;b__0(IHandler h)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimUsingContainerAsServiceLocatorDiagnostic._cctorb__aIHandler">
            <summary>Sets the shim of UsingContainerAsServiceLocatorDiagnostic.&lt;.cctor&gt;b__a(IHandler h)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimUsingContainerAsServiceLocatorDiagnostic._cctorb__bIHandler">
            <summary>Sets the shim of UsingContainerAsServiceLocatorDiagnostic.&lt;.cctor&gt;b__b(IHandler h)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimUsingContainerAsServiceLocatorDiagnostic._cctorb__cType">
            <summary>Sets the shim of UsingContainerAsServiceLocatorDiagnostic.&lt;.cctor&gt;b__c(Type s)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimUsingContainerAsServiceLocatorDiagnostic._cctorb__dIHandler">
            <summary>Sets the shim of UsingContainerAsServiceLocatorDiagnostic.&lt;.cctor&gt;b__d(IHandler h)</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.Fakes.ShimUsingContainerAsServiceLocatorDiagnostic.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimUsingContainerAsServiceLocatorDiagnostic.AllInstances.HasDependencyOnTheContainerIHandler">
            <summary>Sets the shim of UsingContainerAsServiceLocatorDiagnostic.HasDependencyOnTheContainer(IHandler handler)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.ShimUsingContainerAsServiceLocatorDiagnostic.AllInstances.Inspect">
            <summary>Sets the shim of UsingContainerAsServiceLocatorDiagnostic.Inspect()</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.Fakes.StubAllComponentsDiagnostic">
            <summary>Stub type of Castle.Windsor.Diagnostics.AllComponentsDiagnostic</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.StubAllComponentsDiagnostic.#ctor(Castle.MicroKernel.IKernel)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.StubAllComponentsDiagnostic.InitializeStub">
            <summary>Initializes a new instance of type StubAllComponentsDiagnostic</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.StubAllComponentsDiagnostic.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.StubAllComponentsDiagnostic.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.StubAllComponentsDiagnostic.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.Fakes.StubAllServicesDiagnostic">
            <summary>Stub type of Castle.Windsor.Diagnostics.AllServicesDiagnostic</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.StubAllServicesDiagnostic.#ctor(Castle.MicroKernel.IKernel)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.StubAllServicesDiagnostic.InitializeStub">
            <summary>Initializes a new instance of type StubAllServicesDiagnostic</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.StubAllServicesDiagnostic.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.StubAllServicesDiagnostic.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.StubAllServicesDiagnostic.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.Fakes.StubComponentDebuggerExtension">
            <summary>Stub type of Castle.Windsor.Diagnostics.ComponentDebuggerExtension</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.StubComponentDebuggerExtension.#ctor(System.Object[])">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.StubComponentDebuggerExtension.InitializeStub">
            <summary>Initializes a new instance of type StubComponentDebuggerExtension</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.StubComponentDebuggerExtension.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.StubComponentDebuggerExtension.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.StubComponentDebuggerExtension.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.Fakes.StubDefaultDiagnosticsSubSystem">
            <summary>Stub type of Castle.Windsor.Diagnostics.DefaultDiagnosticsSubSystem</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.StubDefaultDiagnosticsSubSystem.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.StubDefaultDiagnosticsSubSystem.Init(Castle.MicroKernel.IKernelInternal)">
            <summary>Sets the stub of DefaultDiagnosticsSubSystem.Init(IKernelInternal kernel)</summary>
        </member>
        <member name="F:Castle.Windsor.Diagnostics.Fakes.StubDefaultDiagnosticsSubSystem.InitIKernelInternal">
            <summary>Sets the stub of DefaultDiagnosticsSubSystem.Init(IKernelInternal kernel)</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.StubDefaultDiagnosticsSubSystem.InitStandardExtensions">
            <summary>Sets the stub of DefaultDiagnosticsSubSystem.InitStandardExtensions()</summary>
        </member>
        <member name="F:Castle.Windsor.Diagnostics.Fakes.StubDefaultDiagnosticsSubSystem.InitStandardExtensions01">
            <summary>Sets the stub of DefaultDiagnosticsSubSystem.InitStandardExtensions()</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.StubDefaultDiagnosticsSubSystem.InitializeLifetimeService">
            <summary>Sets the stub of AbstractSubSystem.InitializeLifetimeService()</summary>
        </member>
        <member name="F:Castle.Windsor.Diagnostics.Fakes.StubDefaultDiagnosticsSubSystem.InitializeLifetimeService01">
            <summary>Sets the stub of AbstractSubSystem.InitializeLifetimeService()</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.StubDefaultDiagnosticsSubSystem.InitializeStub">
            <summary>Initializes a new instance of type StubDefaultDiagnosticsSubSystem</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.StubDefaultDiagnosticsSubSystem.Terminate">
            <summary>Sets the stub of DefaultDiagnosticsSubSystem.Terminate()</summary>
        </member>
        <member name="F:Castle.Windsor.Diagnostics.Fakes.StubDefaultDiagnosticsSubSystem.Terminate01">
            <summary>Sets the stub of DefaultDiagnosticsSubSystem.Terminate()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.StubDefaultDiagnosticsSubSystem.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.StubDefaultDiagnosticsSubSystem.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.StubDefaultDiagnosticsSubSystem.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.Fakes.StubDependencyDuplicate">
            <summary>Stub type of Castle.Windsor.Diagnostics.DependencyDuplicate</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.StubDependencyDuplicate.#ctor(Castle.Core.DependencyModel,Castle.Core.DependencyModel,Castle.Windsor.Diagnostics.DependencyDuplicationReason)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.StubDependencyDuplicate.Equals(System.Object)">
            <summary>Sets the stub of DependencyDuplicate.Equals(Object obj)</summary>
        </member>
        <member name="F:Castle.Windsor.Diagnostics.Fakes.StubDependencyDuplicate.EqualsObject">
            <summary>Sets the stub of DependencyDuplicate.Equals(Object obj)</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.StubDependencyDuplicate.GetHashCode">
            <summary>Sets the stub of DependencyDuplicate.GetHashCode()</summary>
        </member>
        <member name="F:Castle.Windsor.Diagnostics.Fakes.StubDependencyDuplicate.GetHashCode01">
            <summary>Sets the stub of DependencyDuplicate.GetHashCode()</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.StubDependencyDuplicate.InitializeStub">
            <summary>Initializes a new instance of type StubDependencyDuplicate</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.StubDependencyDuplicate.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.StubDependencyDuplicate.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.StubDependencyDuplicate.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.Fakes.StubDuplicatedDependenciesDiagnostic">
            <summary>Stub type of Castle.Windsor.Diagnostics.DuplicatedDependenciesDiagnostic</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.StubDuplicatedDependenciesDiagnostic.#ctor(Castle.MicroKernel.IKernel)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.StubDuplicatedDependenciesDiagnostic.InitializeStub">
            <summary>Initializes a new instance of type StubDuplicatedDependenciesDiagnostic</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.StubDuplicatedDependenciesDiagnostic.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.StubDuplicatedDependenciesDiagnostic.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.StubDuplicatedDependenciesDiagnostic.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.Fakes.StubIAllComponentsDiagnostic">
            <summary>Stub type of Castle.Windsor.Diagnostics.IAllComponentsDiagnostic</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.StubIAllComponentsDiagnostic.#ctor">
            <summary>Initializes a new instance of type StubIAllComponentsDiagnostic</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.StubIAllComponentsDiagnostic.cw::Castle#Windsor#Diagnostics#IDiagnostic{Castle#MicroKernel#IHandler[]}#Inspect">
            <summary>Sets the stub of IDiagnostic`1.Inspect()</summary>
        </member>
        <member name="F:Castle.Windsor.Diagnostics.Fakes.StubIAllComponentsDiagnostic.Inspect">
            <summary>Sets the stub of IDiagnostic`1.Inspect()</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.Fakes.StubIAllServicesDiagnostic">
            <summary>Stub type of Castle.Windsor.Diagnostics.IAllServicesDiagnostic</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.StubIAllServicesDiagnostic.#ctor">
            <summary>Initializes a new instance of type StubIAllServicesDiagnostic</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.StubIAllServicesDiagnostic.cw::Castle#Windsor#Diagnostics#IDiagnostic{System#Linq#ILookup{System#Type@Castle#MicroKernel#IHandler}}#Inspect">
            <summary>Sets the stub of IDiagnostic`1.Inspect()</summary>
        </member>
        <member name="F:Castle.Windsor.Diagnostics.Fakes.StubIAllServicesDiagnostic.Inspect">
            <summary>Sets the stub of IDiagnostic`1.Inspect()</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.Fakes.StubIComponentDebuggerExtension">
            <summary>Stub type of Castle.Windsor.Diagnostics.IComponentDebuggerExtension</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.StubIComponentDebuggerExtension.#ctor">
            <summary>Initializes a new instance of type StubIComponentDebuggerExtension</summary>
        </member>
        <member name="F:Castle.Windsor.Diagnostics.Fakes.StubIComponentDebuggerExtension.Attach">
            <summary>Sets the stub of IComponentDebuggerExtension.Attach()</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.StubIComponentDebuggerExtension.cw::Castle#Windsor#Diagnostics#IComponentDebuggerExtension#Attach">
            <summary>Sets the stub of IComponentDebuggerExtension.Attach()</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.Fakes.StubIContainerDebuggerExtension">
            <summary>Stub type of Castle.Windsor.Diagnostics.IContainerDebuggerExtension</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.StubIContainerDebuggerExtension.#ctor">
            <summary>Initializes a new instance of type StubIContainerDebuggerExtension</summary>
        </member>
        <member name="F:Castle.Windsor.Diagnostics.Fakes.StubIContainerDebuggerExtension.Attach">
            <summary>Sets the stub of IContainerDebuggerExtension.Attach()</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.StubIContainerDebuggerExtension.cw::Castle#Windsor#Diagnostics#IContainerDebuggerExtension#Attach">
            <summary>Sets the stub of IContainerDebuggerExtension.Attach()</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.StubIContainerDebuggerExtension.cw::Castle#Windsor#Diagnostics#IContainerDebuggerExtension#Init(Castle.MicroKernel.IKernel,Castle.Windsor.Diagnostics.IDiagnosticsHost)">
            <summary>Sets the stub of IContainerDebuggerExtension.Init(IKernel kernel, IDiagnosticsHost diagnosticsHost)</summary>
        </member>
        <member name="F:Castle.Windsor.Diagnostics.Fakes.StubIContainerDebuggerExtension.InitIKernelIDiagnosticsHost">
            <summary>Sets the stub of IContainerDebuggerExtension.Init(IKernel kernel, IDiagnosticsHost diagnosticsHost)</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.Fakes.StubIContainerDebuggerExtensionHost">
            <summary>Stub type of Castle.Windsor.Diagnostics.IContainerDebuggerExtensionHost</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.StubIContainerDebuggerExtensionHost.#ctor">
            <summary>Initializes a new instance of type StubIContainerDebuggerExtensionHost</summary>
        </member>
        <member name="F:Castle.Windsor.Diagnostics.Fakes.StubIContainerDebuggerExtensionHost.AddIContainerDebuggerExtension">
            <summary>Sets the stub of IContainerDebuggerExtensionHost.Add(IContainerDebuggerExtension extension)</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.StubIContainerDebuggerExtensionHost.cw::Castle#Windsor#Diagnostics#IContainerDebuggerExtensionHost#Add(Castle.Windsor.Diagnostics.IContainerDebuggerExtension)">
            <summary>Sets the stub of IContainerDebuggerExtensionHost.Add(IContainerDebuggerExtension extension)</summary>
        </member>
        <member name="F:Castle.Windsor.Diagnostics.Fakes.StubIContainerDebuggerExtensionHost.GetEnumerator">
            <summary>Sets the stub of IEnumerable`1.GetEnumerator()</summary>
        </member>
        <member name="F:Castle.Windsor.Diagnostics.Fakes.StubIContainerDebuggerExtensionHost.GetEnumerator01">
            <summary>Sets the stub of IEnumerable.GetEnumerator()</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.StubIContainerDebuggerExtensionHost.global::System#Collections#Generic#IEnumerable{Castle#Windsor#Diagnostics#IContainerDebuggerExtension}#GetEnumerator">
            <summary>Sets the stub of IEnumerable`1.GetEnumerator()</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.StubIContainerDebuggerExtensionHost.global::System#Collections#IEnumerable#GetEnumerator">
            <summary>Sets the stub of IEnumerable.GetEnumerator()</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.Fakes.StubIDiagnostic`1">
            <summary>Stub type of Castle.Windsor.Diagnostics.IDiagnostic`1</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.StubIDiagnostic`1.#ctor">
            <summary>Initializes a new instance of type StubIDiagnostic</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.StubIDiagnostic`1.cw::Castle#Windsor#Diagnostics#IDiagnostic{T}#Inspect">
            <summary>Sets the stub of IDiagnostic`1.Inspect()</summary>
        </member>
        <member name="F:Castle.Windsor.Diagnostics.Fakes.StubIDiagnostic`1.Inspect">
            <summary>Sets the stub of IDiagnostic`1.Inspect()</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.Fakes.StubIDiagnosticsHost">
            <summary>Stub type of Castle.Windsor.Diagnostics.IDiagnosticsHost</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.StubIDiagnosticsHost.#ctor">
            <summary>Initializes a new instance of type StubIDiagnosticsHost</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.StubIDiagnosticsHost.AddDiagnosticOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{``0})">
            <summary>Sets stubs of AddDiagnostic(!!0 diagnostic)</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.StubIDiagnosticsHost.cw::Castle#Windsor#Diagnostics#IDiagnosticsHost#AddDiagnostic``1(``0)">
            <summary>Sets the stub of IDiagnosticsHost.AddDiagnostic(!!0 diagnostic)</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.StubIDiagnosticsHost.cw::Castle#Windsor#Diagnostics#IDiagnosticsHost#GetDiagnostic``1">
            <summary>Sets the stub of IDiagnosticsHost.GetDiagnostic()</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.StubIDiagnosticsHost.GetDiagnosticOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0})">
            <summary>Sets stubs of GetDiagnostic()</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.Fakes.StubIDiagnosticsInspector`2">
            <summary>Stub type of Castle.Windsor.Diagnostics.IDiagnosticsInspector`2</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.StubIDiagnosticsInspector`2.#ctor">
            <summary>Initializes a new instance of type StubIDiagnosticsInspector</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.StubIDiagnosticsInspector`2.cw::Castle#Windsor#Diagnostics#IDiagnosticsInspector{TData@TContext}#Inspect(`0,`1)">
            <summary>Sets the stub of IDiagnosticsInspector`2.Inspect(!0 data, !1 context)</summary>
        </member>
        <member name="F:Castle.Windsor.Diagnostics.Fakes.StubIDiagnosticsInspector`2.InspectT0T1">
            <summary>Sets the stub of IDiagnosticsInspector`2.Inspect(!0 data, !1 context)</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.Fakes.StubIDiagnosticsSource`1">
            <summary>Stub type of Castle.Windsor.Diagnostics.IDiagnosticsSource`1</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.StubIDiagnosticsSource`1.#ctor">
            <summary>Initializes a new instance of type StubIDiagnosticsSource</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.StubIDiagnosticsSource`1.cw::Castle#Windsor#Diagnostics#IDiagnosticsSource{TResult}#Inspect(Castle.MicroKernel.IKernel)">
            <summary>Sets the stub of IDiagnosticsSource`1.Inspect(IKernel kernel)</summary>
        </member>
        <member name="F:Castle.Windsor.Diagnostics.Fakes.StubIDiagnosticsSource`1.InspectIKernel">
            <summary>Sets the stub of IDiagnosticsSource`1.Inspect(IKernel kernel)</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.Fakes.StubIDuplicatedDependenciesDiagnostic">
            <summary>Stub type of Castle.Windsor.Diagnostics.IDuplicatedDependenciesDiagnostic</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.StubIDuplicatedDependenciesDiagnostic.#ctor">
            <summary>Initializes a new instance of type StubIDuplicatedDependenciesDiagnostic</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.StubIDuplicatedDependenciesDiagnostic.cw::Castle#Windsor#Diagnostics#IDiagnostic{Castle#Core#Pair{Castle#MicroKernel#IHandler@Castle#Windsor#Diagnostics#DependencyDuplicate[]}[]}#Inspect">
            <summary>Sets the stub of IDiagnostic`1.Inspect()</summary>
        </member>
        <member name="F:Castle.Windsor.Diagnostics.Fakes.StubIDuplicatedDependenciesDiagnostic.Inspect">
            <summary>Sets the stub of IDiagnostic`1.Inspect()</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.Fakes.StubIExposeDiagnostics`1">
            <summary>Stub type of Castle.Windsor.Diagnostics.IExposeDiagnostics`1</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.StubIExposeDiagnostics`1.#ctor">
            <summary>Initializes a new instance of type StubIExposeDiagnostics</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.StubIExposeDiagnostics`1.cw::Castle#Windsor#Diagnostics#IExposeDiagnostics{TData}#Visit``1(Castle.Windsor.Diagnostics.IDiagnosticsInspector{`0,``0},``0)">
            <summary>Sets the stub of IExposeDiagnostics`1.Visit(IDiagnosticsInspector`2&lt;!0,!!0&gt; inspector, !!0 context)</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.StubIExposeDiagnostics`1.VisitOf1IDiagnosticsInspectorOfT0M0M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{Castle.Windsor.Diagnostics.IDiagnosticsInspector{`0,``0},``0})">
            <summary>Sets stubs of Visit(IDiagnosticsInspector`2&lt;!0,!!0&gt; inspector, !!0 context)</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.Fakes.StubIPerformanceMetricsFactory">
            <summary>Stub type of Castle.Windsor.Diagnostics.IPerformanceMetricsFactory</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.StubIPerformanceMetricsFactory.#ctor">
            <summary>Initializes a new instance of type StubIPerformanceMetricsFactory</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.StubIPerformanceMetricsFactory.cw::Castle#Windsor#Diagnostics#IPerformanceMetricsFactory#CreateInstancesTrackedByReleasePolicyCounter(System.String)">
            <summary>Sets the stub of IPerformanceMetricsFactory.CreateInstancesTrackedByReleasePolicyCounter(String name)</summary>
        </member>
        <member name="F:Castle.Windsor.Diagnostics.Fakes.StubIPerformanceMetricsFactory.CreateInstancesTrackedByReleasePolicyCounterString">
            <summary>Sets the stub of IPerformanceMetricsFactory.CreateInstancesTrackedByReleasePolicyCounter(String name)</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.Fakes.StubIPotentialLifestyleMismatchesDiagnostic">
            <summary>Stub type of Castle.Windsor.Diagnostics.IPotentialLifestyleMismatchesDiagnostic</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.StubIPotentialLifestyleMismatchesDiagnostic.#ctor">
            <summary>Initializes a new instance of type StubIPotentialLifestyleMismatchesDiagnostic</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.StubIPotentialLifestyleMismatchesDiagnostic.cw::Castle#Windsor#Diagnostics#IDiagnostic{Castle#MicroKernel#IHandler[][]}#Inspect">
            <summary>Sets the stub of IDiagnostic`1.Inspect()</summary>
        </member>
        <member name="F:Castle.Windsor.Diagnostics.Fakes.StubIPotentialLifestyleMismatchesDiagnostic.Inspect">
            <summary>Sets the stub of IDiagnostic`1.Inspect()</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.Fakes.StubIPotentiallyMisconfiguredComponentsDiagnostic">
            <summary>Stub type of Castle.Windsor.Diagnostics.IPotentiallyMisconfiguredComponentsDiagnostic</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.StubIPotentiallyMisconfiguredComponentsDiagnostic.#ctor">
            <summary>Initializes a new instance of type StubIPotentiallyMisconfiguredComponentsDiagnostic</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.StubIPotentiallyMisconfiguredComponentsDiagnostic.cw::Castle#Windsor#Diagnostics#IDiagnostic{Castle#MicroKernel#IHandler[]}#Inspect">
            <summary>Sets the stub of IDiagnostic`1.Inspect()</summary>
        </member>
        <member name="F:Castle.Windsor.Diagnostics.Fakes.StubIPotentiallyMisconfiguredComponentsDiagnostic.Inspect">
            <summary>Sets the stub of IDiagnostic`1.Inspect()</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.Fakes.StubITrackedComponentsDiagnostic">
            <summary>Stub type of Castle.Windsor.Diagnostics.ITrackedComponentsDiagnostic</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.StubITrackedComponentsDiagnostic.#ctor">
            <summary>Initializes a new instance of type StubITrackedComponentsDiagnostic</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.StubITrackedComponentsDiagnostic.cw::Castle#Windsor#Diagnostics#IDiagnostic{System#Linq#ILookup{Castle#MicroKernel#IHandler@System#Object}}#Inspect">
            <summary>Sets the stub of IDiagnostic`1.Inspect()</summary>
        </member>
        <member name="F:Castle.Windsor.Diagnostics.Fakes.StubITrackedComponentsDiagnostic.Inspect">
            <summary>Sets the stub of IDiagnostic`1.Inspect()</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.Fakes.StubITrackedComponentsPerformanceCounter">
            <summary>Stub type of Castle.Windsor.Diagnostics.ITrackedComponentsPerformanceCounter</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.StubITrackedComponentsPerformanceCounter.#ctor">
            <summary>Initializes a new instance of type StubITrackedComponentsPerformanceCounter</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.StubITrackedComponentsPerformanceCounter.cw::Castle#Windsor#Diagnostics#ITrackedComponentsPerformanceCounter#DecrementTrackedInstancesCount">
            <summary>Sets the stub of ITrackedComponentsPerformanceCounter.DecrementTrackedInstancesCount()</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.StubITrackedComponentsPerformanceCounter.cw::Castle#Windsor#Diagnostics#ITrackedComponentsPerformanceCounter#IncrementTrackedInstancesCount">
            <summary>Sets the stub of ITrackedComponentsPerformanceCounter.IncrementTrackedInstancesCount()</summary>
        </member>
        <member name="F:Castle.Windsor.Diagnostics.Fakes.StubITrackedComponentsPerformanceCounter.DecrementTrackedInstancesCount">
            <summary>Sets the stub of ITrackedComponentsPerformanceCounter.DecrementTrackedInstancesCount()</summary>
        </member>
        <member name="F:Castle.Windsor.Diagnostics.Fakes.StubITrackedComponentsPerformanceCounter.IncrementTrackedInstancesCount">
            <summary>Sets the stub of ITrackedComponentsPerformanceCounter.IncrementTrackedInstancesCount()</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.Fakes.StubIUsingContainerAsServiceLocatorDiagnostic">
            <summary>Stub type of Castle.Windsor.Diagnostics.IUsingContainerAsServiceLocatorDiagnostic</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.StubIUsingContainerAsServiceLocatorDiagnostic.#ctor">
            <summary>Initializes a new instance of type StubIUsingContainerAsServiceLocatorDiagnostic</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.StubIUsingContainerAsServiceLocatorDiagnostic.cw::Castle#Windsor#Diagnostics#IDiagnostic{Castle#MicroKernel#IHandler[]}#Inspect">
            <summary>Sets the stub of IDiagnostic`1.Inspect()</summary>
        </member>
        <member name="F:Castle.Windsor.Diagnostics.Fakes.StubIUsingContainerAsServiceLocatorDiagnostic.Inspect">
            <summary>Sets the stub of IDiagnostic`1.Inspect()</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.Fakes.StubPerformanceMetricsFactory">
            <summary>Stub type of Castle.Windsor.Diagnostics.PerformanceMetricsFactory</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.StubPerformanceMetricsFactory.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.StubPerformanceMetricsFactory.InitializeStub">
            <summary>Initializes a new instance of type StubPerformanceMetricsFactory</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.StubPerformanceMetricsFactory.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.StubPerformanceMetricsFactory.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.StubPerformanceMetricsFactory.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.Fakes.StubPotentialLifestyleMismatchesDiagnostic">
            <summary>Stub type of Castle.Windsor.Diagnostics.PotentialLifestyleMismatchesDiagnostic</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.StubPotentialLifestyleMismatchesDiagnostic.#ctor(Castle.MicroKernel.IKernel)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.StubPotentialLifestyleMismatchesDiagnostic.InitializeStub">
            <summary>Initializes a new instance of type StubPotentialLifestyleMismatchesDiagnostic</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.StubPotentialLifestyleMismatchesDiagnostic.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.StubPotentialLifestyleMismatchesDiagnostic.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.StubPotentialLifestyleMismatchesDiagnostic.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.Fakes.StubPotentiallyMisconfiguredComponentsDiagnostic">
            <summary>Stub type of Castle.Windsor.Diagnostics.PotentiallyMisconfiguredComponentsDiagnostic</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.StubPotentiallyMisconfiguredComponentsDiagnostic.#ctor(Castle.MicroKernel.IKernel)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.StubPotentiallyMisconfiguredComponentsDiagnostic.InitializeStub">
            <summary>Initializes a new instance of type StubPotentiallyMisconfiguredComponentsDiagnostic</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.StubPotentiallyMisconfiguredComponentsDiagnostic.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.StubPotentiallyMisconfiguredComponentsDiagnostic.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.StubPotentiallyMisconfiguredComponentsDiagnostic.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.Fakes.StubTrackedComponentsDiagnostic">
            <summary>Stub type of Castle.Windsor.Diagnostics.TrackedComponentsDiagnostic</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.StubTrackedComponentsDiagnostic.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.StubTrackedComponentsDiagnostic.InitializeStub">
            <summary>Initializes a new instance of type StubTrackedComponentsDiagnostic</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.StubTrackedComponentsDiagnostic.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.StubTrackedComponentsDiagnostic.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.StubTrackedComponentsDiagnostic.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.Fakes.StubTrackedComponentsPerformanceCounterWrapper">
            <summary>Stub type of Castle.Windsor.Diagnostics.TrackedComponentsPerformanceCounterWrapper</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.StubTrackedComponentsPerformanceCounterWrapper.#ctor(System.Diagnostics.PerformanceCounter)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.StubTrackedComponentsPerformanceCounterWrapper.InitializeStub">
            <summary>Initializes a new instance of type StubTrackedComponentsPerformanceCounterWrapper</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.StubTrackedComponentsPerformanceCounterWrapper.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.StubTrackedComponentsPerformanceCounterWrapper.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.StubTrackedComponentsPerformanceCounterWrapper.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.Fakes.StubTrackedInstancesEventArgs">
            <summary>Stub type of Castle.Windsor.Diagnostics.TrackedInstancesEventArgs</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.StubTrackedInstancesEventArgs.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.StubTrackedInstancesEventArgs.InitializeStub">
            <summary>Initializes a new instance of type StubTrackedInstancesEventArgs</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.StubTrackedInstancesEventArgs.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.StubTrackedInstancesEventArgs.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.StubTrackedInstancesEventArgs.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.Fakes.StubUsingContainerAsServiceLocatorDiagnostic">
            <summary>Stub type of Castle.Windsor.Diagnostics.UsingContainerAsServiceLocatorDiagnostic</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.StubUsingContainerAsServiceLocatorDiagnostic.#ctor(Castle.MicroKernel.IKernel)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Fakes.StubUsingContainerAsServiceLocatorDiagnostic.InitializeStub">
            <summary>Initializes a new instance of type StubUsingContainerAsServiceLocatorDiagnostic</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.StubUsingContainerAsServiceLocatorDiagnostic.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.StubUsingContainerAsServiceLocatorDiagnostic.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Fakes.StubUsingContainerAsServiceLocatorDiagnostic.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.Helpers.Fakes.ShimDefaultComponentViewBuilder">
            <summary>Shim type of Castle.Windsor.Diagnostics.Helpers.DefaultComponentViewBuilder</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Helpers.Fakes.ShimDefaultComponentViewBuilder.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Helpers.Fakes.ShimDefaultComponentViewBuilder.#ctor(Castle.Windsor.Diagnostics.Helpers.DefaultComponentViewBuilder)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Helpers.Fakes.ShimDefaultComponentViewBuilder.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Helpers.Fakes.ShimDefaultComponentViewBuilder.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Helpers.Fakes.ShimDefaultComponentViewBuilder.Bind(Castle.Windsor.Diagnostics.IComponentDebuggerExtension)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Helpers.Fakes.ShimDefaultComponentViewBuilder.Attach">
            <summary>Sets the shim of DefaultComponentViewBuilder.Attach()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Helpers.Fakes.ShimDefaultComponentViewBuilder.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Helpers.Fakes.ShimDefaultComponentViewBuilder.ConstructorIHandler">
            <summary>Sets the shim of DefaultComponentViewBuilder.DefaultComponentViewBuilder(IHandler handler)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Helpers.Fakes.ShimDefaultComponentViewBuilder.GetImplementation">
            <summary>Sets the shim of DefaultComponentViewBuilder.GetImplementation()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Helpers.Fakes.ShimDefaultComponentViewBuilder.GetStatus">
            <summary>Sets the shim of DefaultComponentViewBuilder.GetStatus()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Helpers.Fakes.ShimDefaultComponentViewBuilder.GetStatusDetailsIExposeDependencyInfo">
            <summary>Sets the shim of DefaultComponentViewBuilder.GetStatusDetails(IExposeDependencyInfo info)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Helpers.Fakes.ShimDefaultComponentViewBuilder.HasInterceptors">
            <summary>Sets the shim of DefaultComponentViewBuilder.HasInterceptors()</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.Helpers.Fakes.ShimDefaultComponentViewBuilder.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Helpers.Fakes.ShimDefaultComponentViewBuilder.AllInstances.Attach">
            <summary>Sets the shim of DefaultComponentViewBuilder.Attach()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Helpers.Fakes.ShimDefaultComponentViewBuilder.AllInstances.GetImplementation">
            <summary>Sets the shim of DefaultComponentViewBuilder.GetImplementation()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Helpers.Fakes.ShimDefaultComponentViewBuilder.AllInstances.GetStatus">
            <summary>Sets the shim of DefaultComponentViewBuilder.GetStatus()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Helpers.Fakes.ShimDefaultComponentViewBuilder.AllInstances.GetStatusDetailsIExposeDependencyInfo">
            <summary>Sets the shim of DefaultComponentViewBuilder.GetStatusDetails(IExposeDependencyInfo info)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Helpers.Fakes.ShimDefaultComponentViewBuilder.AllInstances.HasInterceptors">
            <summary>Sets the shim of DefaultComponentViewBuilder.HasInterceptors()</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.Helpers.Fakes.ShimDescriptionUtil">
            <summary>Shim type of Castle.Windsor.Diagnostics.Helpers.DescriptionUtil</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Helpers.Fakes.ShimDescriptionUtil.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Helpers.Fakes.ShimDescriptionUtil.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Helpers.Fakes.ShimDescriptionUtil.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Helpers.Fakes.ShimDescriptionUtil.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Helpers.Fakes.ShimDescriptionUtil.GetComponentNameIHandler">
            <summary>Sets the shim of DescriptionUtil.GetComponentName(IHandler handler)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Helpers.Fakes.ShimDescriptionUtil.GetLifestyleDescriptionComponentModel">
            <summary>Sets the shim of DescriptionUtil.GetLifestyleDescription(ComponentModel componentModel)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Helpers.Fakes.ShimDescriptionUtil.GetLifestyleDescriptionLongComponentModel">
            <summary>Sets the shim of DescriptionUtil.GetLifestyleDescriptionLong(ComponentModel componentModel)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Helpers.Fakes.ShimDescriptionUtil.GetServicesDescriptionIHandler">
            <summary>Sets the shim of DescriptionUtil.GetServicesDescription(IHandler handler)</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.Helpers.Fakes.StubDefaultComponentViewBuilder">
            <summary>Stub type of Castle.Windsor.Diagnostics.Helpers.DefaultComponentViewBuilder</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Helpers.Fakes.StubDefaultComponentViewBuilder.#ctor(Castle.MicroKernel.IHandler)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Helpers.Fakes.StubDefaultComponentViewBuilder.InitializeStub">
            <summary>Initializes a new instance of type StubDefaultComponentViewBuilder</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Helpers.Fakes.StubDefaultComponentViewBuilder.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Helpers.Fakes.StubDefaultComponentViewBuilder.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Helpers.Fakes.StubDefaultComponentViewBuilder.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.Inspectors.Fakes.ShimTrackedObjects">
            <summary>Shim type of Castle.Windsor.Diagnostics.Inspectors.TrackedObjects</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Inspectors.Fakes.ShimTrackedObjects.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Inspectors.Fakes.ShimTrackedObjects.#ctor(Castle.Windsor.Diagnostics.Inspectors.TrackedObjects)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Inspectors.Fakes.ShimTrackedObjects.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Inspectors.Fakes.ShimTrackedObjects.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Inspectors.Fakes.ShimTrackedObjects.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Inspectors.Fakes.ShimTrackedObjects.ConstructorBurdenArrayIReleasePolicyArray">
            <summary>Sets the shim of TrackedObjects.TrackedObjects(Burden[] trackedObjects, IReleasePolicy[] subScopes)</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Inspectors.Fakes.ShimTrackedObjects.SubScopesGet">
            <summary>Sets the shim of TrackedObjects.get_SubScopes()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Inspectors.Fakes.ShimTrackedObjects.TrackedObjectBurdensGet">
            <summary>Sets the shim of TrackedObjects.get_TrackedObjectBurdens()</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.Inspectors.Fakes.ShimTrackedObjects.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Inspectors.Fakes.ShimTrackedObjects.AllInstances.SubScopesGet">
            <summary>Sets the shim of TrackedObjects.get_SubScopes()</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Inspectors.Fakes.ShimTrackedObjects.AllInstances.TrackedObjectBurdensGet">
            <summary>Sets the shim of TrackedObjects.get_TrackedObjectBurdens()</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.Inspectors.Fakes.StubITrackedObjectsInspector">
            <summary>Stub type of Castle.Windsor.Diagnostics.Inspectors.ITrackedObjectsInspector</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Inspectors.Fakes.StubITrackedObjectsInspector.#ctor">
            <summary>Initializes a new instance of type StubITrackedObjectsInspector</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Inspectors.Fakes.StubITrackedObjectsInspector.cw::Castle#Windsor#Diagnostics#IDiagnosticsSource{System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{Castle#MicroKernel#IHandler@System#Object[]}}}#Inspect(Castle.MicroKernel.IKernel)">
            <summary>Sets the stub of IDiagnosticsSource`1.Inspect(IKernel kernel)</summary>
        </member>
        <member name="F:Castle.Windsor.Diagnostics.Inspectors.Fakes.StubITrackedObjectsInspector.InspectIKernel">
            <summary>Sets the stub of IDiagnosticsSource`1.Inspect(IKernel kernel)</summary>
        </member>
        <member name="T:Castle.Windsor.Diagnostics.Inspectors.Fakes.StubTrackedObjects">
            <summary>Stub type of Castle.Windsor.Diagnostics.Inspectors.TrackedObjects</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Inspectors.Fakes.StubTrackedObjects.#ctor(Castle.MicroKernel.Burden[],Castle.MicroKernel.IReleasePolicy[])">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Windsor.Diagnostics.Inspectors.Fakes.StubTrackedObjects.InitializeStub">
            <summary>Initializes a new instance of type StubTrackedObjects</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Inspectors.Fakes.StubTrackedObjects.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Inspectors.Fakes.StubTrackedObjects.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Windsor.Diagnostics.Inspectors.Fakes.StubTrackedObjects.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.Windsor.Fakes.ShimWindsorContainer">
            <summary>Shim type of Castle.Windsor.WindsorContainer</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.ShimWindsorContainer.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.ShimWindsorContainer.#ctor(Castle.Windsor.WindsorContainer)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.ShimWindsorContainer.AddComponentLifeStyleOf1LifestyleType``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.Core.LifestyleType,Castle.Windsor.IWindsorContainer})">
            <summary>Sets the shim of WindsorContainer.AddComponentLifeStyle(LifestyleType lifestyle)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.ShimWindsorContainer.AddComponentLifeStyleOf1StringLifestyleType``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,Castle.Core.LifestyleType,Castle.Windsor.IWindsorContainer})">
            <summary>Sets the shim of WindsorContainer.AddComponentLifeStyle(String key, LifestyleType lifestyle)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.ShimWindsorContainer.AddComponentLifeStyleOf2LifestyleType``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.Core.LifestyleType,Castle.Windsor.IWindsorContainer})">
            <summary>Sets the shim of WindsorContainer.AddComponentLifeStyle(LifestyleType lifestyle)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.ShimWindsorContainer.AddComponentLifeStyleOf2StringLifestyleType``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,Castle.Core.LifestyleType,Castle.Windsor.IWindsorContainer})">
            <summary>Sets the shim of WindsorContainer.AddComponentLifeStyle(String key, LifestyleType lifestyle)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.ShimWindsorContainer.AddComponentOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.Windsor.IWindsorContainer})">
            <summary>Sets the shim of WindsorContainer.AddComponent()</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.ShimWindsorContainer.AddComponentOf1String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,Castle.Windsor.IWindsorContainer})">
            <summary>Sets the shim of WindsorContainer.AddComponent(String key)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.ShimWindsorContainer.AddComponentOf2``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.Windsor.IWindsorContainer})">
            <summary>Sets the shim of WindsorContainer.AddComponent()</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.ShimWindsorContainer.AddComponentOf2String``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,Castle.Windsor.IWindsorContainer})">
            <summary>Sets the shim of WindsorContainer.AddComponent(String key)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.ShimWindsorContainer.AddComponentPropertiesOf2IDictionary``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.IDictionary,Castle.Windsor.IWindsorContainer})">
            <summary>Sets the shim of WindsorContainer.AddComponentProperties(IDictionary extendedProperties)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.ShimWindsorContainer.AddComponentPropertiesOf2StringIDictionary``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,System.Collections.IDictionary,Castle.Windsor.IWindsorContainer})">
            <summary>Sets the shim of WindsorContainer.AddComponentProperties(String key, IDictionary extendedProperties)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.ShimWindsorContainer.AddComponentWithPropertiesOf1IDictionary``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.IDictionary,Castle.Windsor.IWindsorContainer})">
            <summary>Sets the shim of WindsorContainer.AddComponentWithProperties(IDictionary extendedProperties)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.ShimWindsorContainer.AddComponentWithPropertiesOf1StringIDictionary``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,System.Collections.IDictionary,Castle.Windsor.IWindsorContainer})">
            <summary>Sets the shim of WindsorContainer.AddComponentWithProperties(String key, IDictionary extendedProperties)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.ShimWindsorContainer.AddFacilityOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.Windsor.IWindsorContainer})">
            <summary>Sets the shim of WindsorContainer.AddFacility()</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.ShimWindsorContainer.AddFacilityOf1ActionOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Action{``0},Castle.Windsor.IWindsorContainer})">
            <summary>Sets the shim of WindsorContainer.AddFacility(Action`1&lt;!!0&gt; onCreate)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.ShimWindsorContainer.AddFacilityOf1String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,Castle.Windsor.IWindsorContainer})">
            <summary>Sets the shim of WindsorContainer.AddFacility(String idInConfiguration)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.ShimWindsorContainer.AddFacilityOf1StringActionOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,System.Action{``0},Castle.Windsor.IWindsorContainer})">
            <summary>Sets the shim of WindsorContainer.AddFacility(String idInConfiguration, Action`1&lt;!!0&gt; configureFacility)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.ShimWindsorContainer.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.ShimWindsorContainer.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.ShimWindsorContainer.Bind(Castle.Windsor.IWindsorContainer)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.ShimWindsorContainer.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.ShimWindsorContainer.ResolveAllOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0[]})">
            <summary>Sets the shim of WindsorContainer.ResolveAll()</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.ShimWindsorContainer.ResolveAllOf1IDictionary``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.IDictionary,``0[]})">
            <summary>Sets the shim of WindsorContainer.ResolveAll(IDictionary arguments)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.ShimWindsorContainer.ResolveAllOf1Object``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Object,``0[]})">
            <summary>Sets the shim of WindsorContainer.ResolveAll(Object argumentsAsAnonymousType)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.ShimWindsorContainer.ResolveOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0})">
            <summary>Sets the shim of WindsorContainer.Resolve()</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.ShimWindsorContainer.ResolveOf1IDictionary``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.IDictionary,``0})">
            <summary>Sets the shim of WindsorContainer.Resolve(IDictionary arguments)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.ShimWindsorContainer.ResolveOf1Object``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Object,``0})">
            <summary>Sets the shim of WindsorContainer.Resolve(Object argumentsAsAnonymousType)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.ShimWindsorContainer.ResolveOf1String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,``0})">
            <summary>Sets the shim of WindsorContainer.Resolve(String key)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.ShimWindsorContainer.ResolveOf1StringIDictionary``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,System.Collections.IDictionary,``0})">
            <summary>Sets the shim of WindsorContainer.Resolve(String key, IDictionary arguments)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.ShimWindsorContainer.ResolveOf1StringObject``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,System.Object,``0})">
            <summary>Sets the shim of WindsorContainer.Resolve(String key, Object argumentsAsAnonymousType)</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.AddChildContainerIWindsorContainer">
            <summary>Sets the shim of WindsorContainer.AddChildContainer(IWindsorContainer childContainer)</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.AddComponentLifeStyleStringTypeLifestyleType">
            <summary>Sets the shim of WindsorContainer.AddComponentLifeStyle(String key, Type classType, LifestyleType lifestyle)</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.AddComponentLifeStyleStringTypeTypeLifestyleType">
            <summary>Sets the shim of WindsorContainer.AddComponentLifeStyle(String key, Type serviceType, Type classType, LifestyleType lifestyle)</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.AddComponentStringType">
            <summary>Sets the shim of WindsorContainer.AddComponent(String key, Type classType)</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.AddComponentStringTypeType">
            <summary>Sets the shim of WindsorContainer.AddComponent(String key, Type serviceType, Type classType)</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.AddComponentWithPropertiesStringTypeIDictionary">
            <summary>Sets the shim of WindsorContainer.AddComponentWithProperties(String key, Type classType, IDictionary extendedProperties)</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.AddComponentWithPropertiesStringTypeTypeIDictionary">
            <summary>Sets the shim of WindsorContainer.AddComponentWithProperties(String key, Type serviceType, Type classType, IDictionary extendedProperties)</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.AddFacilityIFacility">
            <summary>Sets the shim of WindsorContainer.AddFacility(IFacility facility)</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.AddFacilityStringIFacility">
            <summary>Sets the shim of WindsorContainer.AddFacility(String idInConfiguration, IFacility facility)</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.Constructor">
            <summary>Sets the shim of WindsorContainer.WindsorContainer()</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.ConstructorIConfigurationInterpreter">
            <summary>Sets the shim of WindsorContainer.WindsorContainer(IConfigurationInterpreter interpreter)</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.ConstructorIConfigurationInterpreterIEnvironmentInfo">
            <summary>Sets the shim of WindsorContainer.WindsorContainer(IConfigurationInterpreter interpreter, IEnvironmentInfo environmentInfo)</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.ConstructorIConfigurationStore">
            <summary>Sets the shim of WindsorContainer.WindsorContainer(IConfigurationStore store)</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.ConstructorIKernelIComponentsInstaller">
            <summary>Sets the shim of WindsorContainer.WindsorContainer(IKernel kernel, IComponentsInstaller installer)</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.ConstructorIProxyFactory">
            <summary>Sets the shim of WindsorContainer.WindsorContainer(IProxyFactory proxyFactory)</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.ConstructorIWindsorContainerIConfigurationInterpreter">
            <summary>Sets the shim of WindsorContainer.WindsorContainer(IWindsorContainer parent, IConfigurationInterpreter interpreter)</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.ConstructorString">
            <summary>Sets the shim of WindsorContainer.WindsorContainer(String configurationUri)</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.ConstructorStringIKernelIComponentsInstaller">
            <summary>Sets the shim of WindsorContainer.WindsorContainer(String name, IKernel kernel, IComponentsInstaller installer)</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.ConstructorStringIWindsorContainerIConfigurationInterpreter">
            <summary>Sets the shim of WindsorContainer.WindsorContainer(String name, IWindsorContainer parent, IConfigurationInterpreter interpreter)</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.Dispose">
            <summary>Sets the shim of WindsorContainer.Dispose()</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.GetChildContainerString">
            <summary>Sets the shim of WindsorContainer.GetChildContainer(String name)</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.GetInterpreterString">
            <summary>Sets the shim of WindsorContainer.GetInterpreter(String configurationUri)</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.InstallIWindsorInstallerArray">
            <summary>Sets the shim of WindsorContainer.Install(IWindsorInstaller[] installers)</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.InstallIWindsorInstallerArrayDefaultComponentInstaller">
            <summary>Sets the shim of WindsorContainer.Install(IWindsorInstaller[] installers, DefaultComponentInstaller scope)</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.InstallerGet">
            <summary>Sets the shim of WindsorContainer.get_Installer()</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.ItemGetString">
            <summary>Sets the shim of WindsorContainer.get_Item(String key)</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.ItemGetType">
            <summary>Sets the shim of WindsorContainer.get_Item(Type service)</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.KernelGet">
            <summary>Sets the shim of WindsorContainer.get_Kernel()</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.NameGet">
            <summary>Sets the shim of WindsorContainer.get_Name()</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.ParentGet">
            <summary>Sets the shim of WindsorContainer.get_Parent()</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.ParentSetIWindsorContainer">
            <summary>Sets the shim of WindsorContainer.set_Parent(IWindsorContainer value)</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.RegisterIRegistrationArray">
            <summary>Sets the shim of WindsorContainer.Register(IRegistration[] registrations)</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.ReleaseObject">
            <summary>Sets the shim of WindsorContainer.Release(Object instance)</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.RemoveChildContainerIWindsorContainer">
            <summary>Sets the shim of WindsorContainer.RemoveChildContainer(IWindsorContainer childContainer)</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.ResolveAllType">
            <summary>Sets the shim of WindsorContainer.ResolveAll(Type service)</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.ResolveAllTypeIDictionary">
            <summary>Sets the shim of WindsorContainer.ResolveAll(Type service, IDictionary arguments)</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.ResolveAllTypeObject">
            <summary>Sets the shim of WindsorContainer.ResolveAll(Type service, Object argumentsAsAnonymousType)</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.ResolveStringIDictionary">
            <summary>Sets the shim of WindsorContainer.Resolve(String key, IDictionary arguments)</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.ResolveStringObject">
            <summary>Sets the shim of WindsorContainer.Resolve(String key, Object argumentsAsAnonymousType)</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.ResolveStringType">
            <summary>Sets the shim of WindsorContainer.Resolve(String key, Type service)</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.ResolveStringTypeIDictionary">
            <summary>Sets the shim of WindsorContainer.Resolve(String key, Type service, IDictionary arguments)</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.ResolveStringTypeObject">
            <summary>Sets the shim of WindsorContainer.Resolve(String key, Type service, Object argumentsAsAnonymousType)</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.ResolveType">
            <summary>Sets the shim of WindsorContainer.Resolve(Type service)</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.ResolveTypeIDictionary">
            <summary>Sets the shim of WindsorContainer.Resolve(Type service, IDictionary arguments)</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.ResolveTypeObject">
            <summary>Sets the shim of WindsorContainer.Resolve(Type service, Object argumentsAsAnonymousType)</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.RunInstaller">
            <summary>Sets the shim of WindsorContainer.RunInstaller()</summary>
        </member>
        <member name="T:Castle.Windsor.Fakes.ShimWindsorContainer.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.ShimWindsorContainer.AllInstances.AddComponentLifeStyleOf1LifestyleType``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.Windsor.WindsorContainer,Castle.Core.LifestyleType,Castle.Windsor.IWindsorContainer})">
            <summary>Sets the shim of WindsorContainer.AddComponentLifeStyle(LifestyleType lifestyle)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.ShimWindsorContainer.AllInstances.AddComponentLifeStyleOf1StringLifestyleType``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.Windsor.WindsorContainer,System.String,Castle.Core.LifestyleType,Castle.Windsor.IWindsorContainer})">
            <summary>Sets the shim of WindsorContainer.AddComponentLifeStyle(String key, LifestyleType lifestyle)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.ShimWindsorContainer.AllInstances.AddComponentLifeStyleOf2LifestyleType``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.Windsor.WindsorContainer,Castle.Core.LifestyleType,Castle.Windsor.IWindsorContainer})">
            <summary>Sets the shim of WindsorContainer.AddComponentLifeStyle(LifestyleType lifestyle)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.ShimWindsorContainer.AllInstances.AddComponentLifeStyleOf2StringLifestyleType``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.Windsor.WindsorContainer,System.String,Castle.Core.LifestyleType,Castle.Windsor.IWindsorContainer})">
            <summary>Sets the shim of WindsorContainer.AddComponentLifeStyle(String key, LifestyleType lifestyle)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.ShimWindsorContainer.AllInstances.AddComponentOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.Windsor.WindsorContainer,Castle.Windsor.IWindsorContainer})">
            <summary>Sets the shim of WindsorContainer.AddComponent()</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.ShimWindsorContainer.AllInstances.AddComponentOf1String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.Windsor.WindsorContainer,System.String,Castle.Windsor.IWindsorContainer})">
            <summary>Sets the shim of WindsorContainer.AddComponent(String key)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.ShimWindsorContainer.AllInstances.AddComponentOf2``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.Windsor.WindsorContainer,Castle.Windsor.IWindsorContainer})">
            <summary>Sets the shim of WindsorContainer.AddComponent()</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.ShimWindsorContainer.AllInstances.AddComponentOf2String``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.Windsor.WindsorContainer,System.String,Castle.Windsor.IWindsorContainer})">
            <summary>Sets the shim of WindsorContainer.AddComponent(String key)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.ShimWindsorContainer.AllInstances.AddComponentPropertiesOf2IDictionary``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.Windsor.WindsorContainer,System.Collections.IDictionary,Castle.Windsor.IWindsorContainer})">
            <summary>Sets the shim of WindsorContainer.AddComponentProperties(IDictionary extendedProperties)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.ShimWindsorContainer.AllInstances.AddComponentPropertiesOf2StringIDictionary``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.Windsor.WindsorContainer,System.String,System.Collections.IDictionary,Castle.Windsor.IWindsorContainer})">
            <summary>Sets the shim of WindsorContainer.AddComponentProperties(String key, IDictionary extendedProperties)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.ShimWindsorContainer.AllInstances.AddComponentWithPropertiesOf1IDictionary``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.Windsor.WindsorContainer,System.Collections.IDictionary,Castle.Windsor.IWindsorContainer})">
            <summary>Sets the shim of WindsorContainer.AddComponentWithProperties(IDictionary extendedProperties)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.ShimWindsorContainer.AllInstances.AddComponentWithPropertiesOf1StringIDictionary``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.Windsor.WindsorContainer,System.String,System.Collections.IDictionary,Castle.Windsor.IWindsorContainer})">
            <summary>Sets the shim of WindsorContainer.AddComponentWithProperties(String key, IDictionary extendedProperties)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.ShimWindsorContainer.AllInstances.AddFacilityOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.Windsor.WindsorContainer,Castle.Windsor.IWindsorContainer})">
            <summary>Sets the shim of WindsorContainer.AddFacility()</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.ShimWindsorContainer.AllInstances.AddFacilityOf1ActionOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.Windsor.WindsorContainer,System.Action{``0},Castle.Windsor.IWindsorContainer})">
            <summary>Sets the shim of WindsorContainer.AddFacility(Action`1&lt;!!0&gt; onCreate)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.ShimWindsorContainer.AllInstances.AddFacilityOf1String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.Windsor.WindsorContainer,System.String,Castle.Windsor.IWindsorContainer})">
            <summary>Sets the shim of WindsorContainer.AddFacility(String idInConfiguration)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.ShimWindsorContainer.AllInstances.AddFacilityOf1StringActionOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.Windsor.WindsorContainer,System.String,System.Action{``0},Castle.Windsor.IWindsorContainer})">
            <summary>Sets the shim of WindsorContainer.AddFacility(String idInConfiguration, Action`1&lt;!!0&gt; configureFacility)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.ShimWindsorContainer.AllInstances.ResolveAllOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.Windsor.WindsorContainer,``0[]})">
            <summary>Sets the shim of WindsorContainer.ResolveAll()</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.ShimWindsorContainer.AllInstances.ResolveAllOf1IDictionary``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.Windsor.WindsorContainer,System.Collections.IDictionary,``0[]})">
            <summary>Sets the shim of WindsorContainer.ResolveAll(IDictionary arguments)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.ShimWindsorContainer.AllInstances.ResolveAllOf1Object``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.Windsor.WindsorContainer,System.Object,``0[]})">
            <summary>Sets the shim of WindsorContainer.ResolveAll(Object argumentsAsAnonymousType)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.ShimWindsorContainer.AllInstances.ResolveOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.Windsor.WindsorContainer,``0})">
            <summary>Sets the shim of WindsorContainer.Resolve()</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.ShimWindsorContainer.AllInstances.ResolveOf1IDictionary``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.Windsor.WindsorContainer,System.Collections.IDictionary,``0})">
            <summary>Sets the shim of WindsorContainer.Resolve(IDictionary arguments)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.ShimWindsorContainer.AllInstances.ResolveOf1Object``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.Windsor.WindsorContainer,System.Object,``0})">
            <summary>Sets the shim of WindsorContainer.Resolve(Object argumentsAsAnonymousType)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.ShimWindsorContainer.AllInstances.ResolveOf1String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.Windsor.WindsorContainer,System.String,``0})">
            <summary>Sets the shim of WindsorContainer.Resolve(String key)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.ShimWindsorContainer.AllInstances.ResolveOf1StringIDictionary``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.Windsor.WindsorContainer,System.String,System.Collections.IDictionary,``0})">
            <summary>Sets the shim of WindsorContainer.Resolve(String key, IDictionary arguments)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.ShimWindsorContainer.AllInstances.ResolveOf1StringObject``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.Windsor.WindsorContainer,System.String,System.Object,``0})">
            <summary>Sets the shim of WindsorContainer.Resolve(String key, Object argumentsAsAnonymousType)</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.AllInstances.AddChildContainerIWindsorContainer">
            <summary>Sets the shim of WindsorContainer.AddChildContainer(IWindsorContainer childContainer)</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.AllInstances.AddComponentLifeStyleStringTypeLifestyleType">
            <summary>Sets the shim of WindsorContainer.AddComponentLifeStyle(String key, Type classType, LifestyleType lifestyle)</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.AllInstances.AddComponentLifeStyleStringTypeTypeLifestyleType">
            <summary>Sets the shim of WindsorContainer.AddComponentLifeStyle(String key, Type serviceType, Type classType, LifestyleType lifestyle)</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.AllInstances.AddComponentStringType">
            <summary>Sets the shim of WindsorContainer.AddComponent(String key, Type classType)</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.AllInstances.AddComponentStringTypeType">
            <summary>Sets the shim of WindsorContainer.AddComponent(String key, Type serviceType, Type classType)</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.AllInstances.AddComponentWithPropertiesStringTypeIDictionary">
            <summary>Sets the shim of WindsorContainer.AddComponentWithProperties(String key, Type classType, IDictionary extendedProperties)</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.AllInstances.AddComponentWithPropertiesStringTypeTypeIDictionary">
            <summary>Sets the shim of WindsorContainer.AddComponentWithProperties(String key, Type serviceType, Type classType, IDictionary extendedProperties)</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.AllInstances.AddFacilityIFacility">
            <summary>Sets the shim of WindsorContainer.AddFacility(IFacility facility)</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.AllInstances.AddFacilityStringIFacility">
            <summary>Sets the shim of WindsorContainer.AddFacility(String idInConfiguration, IFacility facility)</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.AllInstances.Dispose">
            <summary>Sets the shim of WindsorContainer.Dispose()</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.AllInstances.GetChildContainerString">
            <summary>Sets the shim of WindsorContainer.GetChildContainer(String name)</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.AllInstances.GetInterpreterString">
            <summary>Sets the shim of WindsorContainer.GetInterpreter(String configurationUri)</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.AllInstances.InstallIWindsorInstallerArray">
            <summary>Sets the shim of WindsorContainer.Install(IWindsorInstaller[] installers)</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.AllInstances.InstallIWindsorInstallerArrayDefaultComponentInstaller">
            <summary>Sets the shim of WindsorContainer.Install(IWindsorInstaller[] installers, DefaultComponentInstaller scope)</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.AllInstances.InstallerGet">
            <summary>Sets the shim of WindsorContainer.get_Installer()</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.AllInstances.ItemGetString">
            <summary>Sets the shim of WindsorContainer.get_Item(String key)</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.AllInstances.ItemGetType">
            <summary>Sets the shim of WindsorContainer.get_Item(Type service)</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.AllInstances.KernelGet">
            <summary>Sets the shim of WindsorContainer.get_Kernel()</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.AllInstances.NameGet">
            <summary>Sets the shim of WindsorContainer.get_Name()</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.AllInstances.ParentGet">
            <summary>Sets the shim of WindsorContainer.get_Parent()</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.AllInstances.ParentSetIWindsorContainer">
            <summary>Sets the shim of WindsorContainer.set_Parent(IWindsorContainer value)</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.AllInstances.RegisterIRegistrationArray">
            <summary>Sets the shim of WindsorContainer.Register(IRegistration[] registrations)</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.AllInstances.ReleaseObject">
            <summary>Sets the shim of WindsorContainer.Release(Object instance)</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.AllInstances.RemoveChildContainerIWindsorContainer">
            <summary>Sets the shim of WindsorContainer.RemoveChildContainer(IWindsorContainer childContainer)</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.AllInstances.ResolveAllType">
            <summary>Sets the shim of WindsorContainer.ResolveAll(Type service)</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.AllInstances.ResolveAllTypeIDictionary">
            <summary>Sets the shim of WindsorContainer.ResolveAll(Type service, IDictionary arguments)</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.AllInstances.ResolveAllTypeObject">
            <summary>Sets the shim of WindsorContainer.ResolveAll(Type service, Object argumentsAsAnonymousType)</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.AllInstances.ResolveStringIDictionary">
            <summary>Sets the shim of WindsorContainer.Resolve(String key, IDictionary arguments)</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.AllInstances.ResolveStringObject">
            <summary>Sets the shim of WindsorContainer.Resolve(String key, Object argumentsAsAnonymousType)</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.AllInstances.ResolveStringType">
            <summary>Sets the shim of WindsorContainer.Resolve(String key, Type service)</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.AllInstances.ResolveStringTypeIDictionary">
            <summary>Sets the shim of WindsorContainer.Resolve(String key, Type service, IDictionary arguments)</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.AllInstances.ResolveStringTypeObject">
            <summary>Sets the shim of WindsorContainer.Resolve(String key, Type service, Object argumentsAsAnonymousType)</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.AllInstances.ResolveType">
            <summary>Sets the shim of WindsorContainer.Resolve(Type service)</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.AllInstances.ResolveTypeIDictionary">
            <summary>Sets the shim of WindsorContainer.Resolve(Type service, IDictionary arguments)</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.AllInstances.ResolveTypeObject">
            <summary>Sets the shim of WindsorContainer.Resolve(Type service, Object argumentsAsAnonymousType)</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.AllInstances.RunInstaller">
            <summary>Sets the shim of WindsorContainer.RunInstaller()</summary>
        </member>
        <member name="T:Castle.Windsor.Fakes.ShimWindsorServiceProvider">
            <summary>Shim type of Castle.Windsor.WindsorServiceProvider</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.ShimWindsorServiceProvider.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.ShimWindsorServiceProvider.#ctor(Castle.Windsor.WindsorServiceProvider)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.ShimWindsorServiceProvider.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.ShimWindsorServiceProvider.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.ShimWindsorServiceProvider.Bind(Castle.Core.IServiceProviderEx)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.ShimWindsorServiceProvider.Bind(System.IServiceProvider)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.ShimWindsorServiceProvider.GetServiceOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0})">
            <summary>Sets the shim of WindsorServiceProvider.GetService()</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorServiceProvider.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorServiceProvider.ConstructorIWindsorContainer">
            <summary>Sets the shim of WindsorServiceProvider.WindsorServiceProvider(IWindsorContainer container)</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorServiceProvider.GetServiceType">
            <summary>Sets the shim of WindsorServiceProvider.GetService(Type serviceType)</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorServiceProvider.KernelGet">
            <summary>Sets the shim of WindsorServiceProvider.get_Kernel()</summary>
        </member>
        <member name="T:Castle.Windsor.Fakes.ShimWindsorServiceProvider.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.ShimWindsorServiceProvider.AllInstances.GetServiceOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.Windsor.WindsorServiceProvider,``0})">
            <summary>Sets the shim of WindsorServiceProvider.GetService()</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorServiceProvider.AllInstances.GetServiceType">
            <summary>Sets the shim of WindsorServiceProvider.GetService(Type serviceType)</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorServiceProvider.AllInstances.KernelGet">
            <summary>Sets the shim of WindsorServiceProvider.get_Kernel()</summary>
        </member>
        <member name="T:Castle.Windsor.Fakes.StubIComponentsInstaller">
            <summary>Stub type of Castle.Windsor.IComponentsInstaller</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIComponentsInstaller.#ctor">
            <summary>Initializes a new instance of type StubIComponentsInstaller</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIComponentsInstaller.cw::Castle#Windsor#IComponentsInstaller#SetUp(Castle.Windsor.IWindsorContainer,Castle.MicroKernel.SubSystems.Configuration.IConfigurationStore)">
            <summary>Sets the stub of IComponentsInstaller.SetUp(IWindsorContainer container, IConfigurationStore store)</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubIComponentsInstaller.SetUpIWindsorContainerIConfigurationStore">
            <summary>Sets the stub of IComponentsInstaller.SetUp(IWindsorContainer container, IConfigurationStore store)</summary>
        </member>
        <member name="T:Castle.Windsor.Fakes.StubIContainerAccessor">
            <summary>Stub type of Castle.Windsor.IContainerAccessor</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIContainerAccessor.#ctor">
            <summary>Initializes a new instance of type StubIContainerAccessor</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubIContainerAccessor.ContainerGet">
            <summary>Sets the stub of IContainerAccessor.get_Container()</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.StubIContainerAccessor.cw::Castle#Windsor#IContainerAccessor#Container">
            <summary>Sets the stub of IContainerAccessor.get_Container()</summary>
        </member>
        <member name="T:Castle.Windsor.Fakes.StubIEnvironmentInfo">
            <summary>Stub type of Castle.Windsor.IEnvironmentInfo</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIEnvironmentInfo.#ctor">
            <summary>Initializes a new instance of type StubIEnvironmentInfo</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIEnvironmentInfo.cw::Castle#Windsor#IEnvironmentInfo#GetEnvironmentName">
            <summary>Sets the stub of IEnvironmentInfo.GetEnvironmentName()</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubIEnvironmentInfo.GetEnvironmentName">
            <summary>Sets the stub of IEnvironmentInfo.GetEnvironmentName()</summary>
        </member>
        <member name="T:Castle.Windsor.Fakes.StubIWindsorContainer">
            <summary>Stub type of Castle.Windsor.IWindsorContainer</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.#ctor">
            <summary>Initializes a new instance of type StubIWindsorContainer</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubIWindsorContainer.AddChildContainerIWindsorContainer">
            <summary>Sets the stub of IWindsorContainer.AddChildContainer(IWindsorContainer childContainer)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.AddComponentLifeStyleOf1LifestyleType``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.Core.LifestyleType,Castle.Windsor.IWindsorContainer})">
            <summary>Sets stubs of AddComponentLifeStyle(LifestyleType lifestyle)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.AddComponentLifeStyleOf1StringLifestyleType``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,Castle.Core.LifestyleType,Castle.Windsor.IWindsorContainer})">
            <summary>Sets stubs of AddComponentLifeStyle(String key, LifestyleType lifestyle)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.AddComponentLifeStyleOf2LifestyleType``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.Core.LifestyleType,Castle.Windsor.IWindsorContainer})">
            <summary>Sets stubs of AddComponentLifeStyle(LifestyleType lifestyle)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.AddComponentLifeStyleOf2StringLifestyleType``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,Castle.Core.LifestyleType,Castle.Windsor.IWindsorContainer})">
            <summary>Sets stubs of AddComponentLifeStyle(String key, LifestyleType lifestyle)</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubIWindsorContainer.AddComponentLifeStyleStringTypeLifestyleType">
            <summary>Sets the stub of IWindsorContainer.AddComponentLifeStyle(String key, Type classType, LifestyleType lifestyle)</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubIWindsorContainer.AddComponentLifeStyleStringTypeTypeLifestyleType">
            <summary>Sets the stub of IWindsorContainer.AddComponentLifeStyle(String key, Type serviceType, Type classType, LifestyleType lifestyle)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.AddComponentOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.Windsor.IWindsorContainer})">
            <summary>Sets stubs of AddComponent()</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.AddComponentOf1String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,Castle.Windsor.IWindsorContainer})">
            <summary>Sets stubs of AddComponent(String key)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.AddComponentOf2``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.Windsor.IWindsorContainer})">
            <summary>Sets stubs of AddComponent()</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.AddComponentOf2String``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,Castle.Windsor.IWindsorContainer})">
            <summary>Sets stubs of AddComponent(String key)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.AddComponentPropertiesOf2IDictionary``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.IDictionary,Castle.Windsor.IWindsorContainer})">
            <summary>Sets stubs of AddComponentProperties(IDictionary extendedProperties)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.AddComponentPropertiesOf2StringIDictionary``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,System.Collections.IDictionary,Castle.Windsor.IWindsorContainer})">
            <summary>Sets stubs of AddComponentProperties(String key, IDictionary extendedProperties)</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubIWindsorContainer.AddComponentStringType">
            <summary>Sets the stub of IWindsorContainer.AddComponent(String key, Type classType)</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubIWindsorContainer.AddComponentStringTypeType">
            <summary>Sets the stub of IWindsorContainer.AddComponent(String key, Type serviceType, Type classType)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.AddComponentWithPropertiesOf1IDictionary``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.IDictionary,Castle.Windsor.IWindsorContainer})">
            <summary>Sets stubs of AddComponentWithProperties(IDictionary extendedProperties)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.AddComponentWithPropertiesOf1StringIDictionary``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,System.Collections.IDictionary,Castle.Windsor.IWindsorContainer})">
            <summary>Sets stubs of AddComponentWithProperties(String key, IDictionary extendedProperties)</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubIWindsorContainer.AddComponentWithPropertiesStringTypeIDictionary">
            <summary>Sets the stub of IWindsorContainer.AddComponentWithProperties(String key, Type classType, IDictionary extendedProperties)</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubIWindsorContainer.AddComponentWithPropertiesStringTypeTypeIDictionary">
            <summary>Sets the stub of IWindsorContainer.AddComponentWithProperties(String key, Type serviceType, Type classType, IDictionary extendedProperties)</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubIWindsorContainer.AddFacilityIFacility">
            <summary>Sets the stub of IWindsorContainer.AddFacility(IFacility facility)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.AddFacilityOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.Windsor.IWindsorContainer})">
            <summary>Sets stubs of AddFacility()</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.AddFacilityOf1ActionOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Action{``0},Castle.Windsor.IWindsorContainer})">
            <summary>Sets stubs of AddFacility(Action`1&lt;!!0&gt; onCreate)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.AddFacilityOf1String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,Castle.Windsor.IWindsorContainer})">
            <summary>Sets stubs of AddFacility(String idInConfiguration)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.AddFacilityOf1StringActionOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,System.Action{``0},Castle.Windsor.IWindsorContainer})">
            <summary>Sets stubs of AddFacility(String idInConfiguration, Action`1&lt;!!0&gt; configureFacility)</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubIWindsorContainer.AddFacilityStringIFacility">
            <summary>Sets the stub of IWindsorContainer.AddFacility(String idInConfiguration, IFacility facility)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.AttachBackingFieldToParent">
            <summary>Attaches delegates to emulate StubIWindsorContainer.Parent as a property with a backing field.</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.cw::Castle#Windsor#IWindsorContainer#AddChildContainer(Castle.Windsor.IWindsorContainer)">
            <summary>Sets the stub of IWindsorContainer.AddChildContainer(IWindsorContainer childContainer)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.cw::Castle#Windsor#IWindsorContainer#AddComponent``1">
            <summary>Sets the stub of IWindsorContainer.AddComponent()</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.cw::Castle#Windsor#IWindsorContainer#AddComponent``2">
            <summary>Sets the stub of IWindsorContainer.AddComponent()</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.cw::Castle#Windsor#IWindsorContainer#AddComponent``1(System.String)">
            <summary>Sets the stub of IWindsorContainer.AddComponent(String key)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.cw::Castle#Windsor#IWindsorContainer#AddComponent``2(System.String)">
            <summary>Sets the stub of IWindsorContainer.AddComponent(String key)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.cw::Castle#Windsor#IWindsorContainer#AddComponent(System.String,System.Type)">
            <summary>Sets the stub of IWindsorContainer.AddComponent(String key, Type classType)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.cw::Castle#Windsor#IWindsorContainer#AddComponent(System.String,System.Type,System.Type)">
            <summary>Sets the stub of IWindsorContainer.AddComponent(String key, Type serviceType, Type classType)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.cw::Castle#Windsor#IWindsorContainer#AddComponentLifeStyle``1(Castle.Core.LifestyleType)">
            <summary>Sets the stub of IWindsorContainer.AddComponentLifeStyle(LifestyleType lifestyle)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.cw::Castle#Windsor#IWindsorContainer#AddComponentLifeStyle``2(Castle.Core.LifestyleType)">
            <summary>Sets the stub of IWindsorContainer.AddComponentLifeStyle(LifestyleType lifestyle)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.cw::Castle#Windsor#IWindsorContainer#AddComponentLifeStyle``1(System.String,Castle.Core.LifestyleType)">
            <summary>Sets the stub of IWindsorContainer.AddComponentLifeStyle(String key, LifestyleType lifestyle)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.cw::Castle#Windsor#IWindsorContainer#AddComponentLifeStyle``2(System.String,Castle.Core.LifestyleType)">
            <summary>Sets the stub of IWindsorContainer.AddComponentLifeStyle(String key, LifestyleType lifestyle)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.cw::Castle#Windsor#IWindsorContainer#AddComponentLifeStyle(System.String,System.Type,Castle.Core.LifestyleType)">
            <summary>Sets the stub of IWindsorContainer.AddComponentLifeStyle(String key, Type classType, LifestyleType lifestyle)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.cw::Castle#Windsor#IWindsorContainer#AddComponentLifeStyle(System.String,System.Type,System.Type,Castle.Core.LifestyleType)">
            <summary>Sets the stub of IWindsorContainer.AddComponentLifeStyle(String key, Type serviceType, Type classType, LifestyleType lifestyle)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.cw::Castle#Windsor#IWindsorContainer#AddComponentProperties``2(System.Collections.IDictionary)">
            <summary>Sets the stub of IWindsorContainer.AddComponentProperties(IDictionary extendedProperties)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.cw::Castle#Windsor#IWindsorContainer#AddComponentProperties``2(System.String,System.Collections.IDictionary)">
            <summary>Sets the stub of IWindsorContainer.AddComponentProperties(String key, IDictionary extendedProperties)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.cw::Castle#Windsor#IWindsorContainer#AddComponentWithProperties``1(System.Collections.IDictionary)">
            <summary>Sets the stub of IWindsorContainer.AddComponentWithProperties(IDictionary extendedProperties)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.cw::Castle#Windsor#IWindsorContainer#AddComponentWithProperties``1(System.String,System.Collections.IDictionary)">
            <summary>Sets the stub of IWindsorContainer.AddComponentWithProperties(String key, IDictionary extendedProperties)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.cw::Castle#Windsor#IWindsorContainer#AddComponentWithProperties(System.String,System.Type,System.Collections.IDictionary)">
            <summary>Sets the stub of IWindsorContainer.AddComponentWithProperties(String key, Type classType, IDictionary extendedProperties)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.cw::Castle#Windsor#IWindsorContainer#AddComponentWithProperties(System.String,System.Type,System.Type,System.Collections.IDictionary)">
            <summary>Sets the stub of IWindsorContainer.AddComponentWithProperties(String key, Type serviceType, Type classType, IDictionary extendedProperties)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.cw::Castle#Windsor#IWindsorContainer#AddFacility``1">
            <summary>Sets the stub of IWindsorContainer.AddFacility()</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.cw::Castle#Windsor#IWindsorContainer#AddFacility(Castle.MicroKernel.IFacility)">
            <summary>Sets the stub of IWindsorContainer.AddFacility(IFacility facility)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.cw::Castle#Windsor#IWindsorContainer#AddFacility``1(System.String)">
            <summary>Sets the stub of IWindsorContainer.AddFacility(String idInConfiguration)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.cw::Castle#Windsor#IWindsorContainer#AddFacility``1(System.Action{``0})">
            <summary>Sets the stub of IWindsorContainer.AddFacility(Action`1&lt;!!0&gt; onCreate)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.cw::Castle#Windsor#IWindsorContainer#AddFacility(System.String,Castle.MicroKernel.IFacility)">
            <summary>Sets the stub of IWindsorContainer.AddFacility(String idInConfiguration, IFacility facility)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.cw::Castle#Windsor#IWindsorContainer#AddFacility``1(System.String,System.Action{``0})">
            <summary>Sets the stub of IWindsorContainer.AddFacility(String idInConfiguration, Action`1&lt;!!0&gt; configureFacility)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.cw::Castle#Windsor#IWindsorContainer#GetChildContainer(System.String)">
            <summary>Sets the stub of IWindsorContainer.GetChildContainer(String name)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.cw::Castle#Windsor#IWindsorContainer#Install(Castle.MicroKernel.Registration.IWindsorInstaller[])">
            <summary>Sets the stub of IWindsorContainer.Install(IWindsorInstaller[] installers)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.cw::Castle#Windsor#IWindsorContainer#Register(Castle.MicroKernel.Registration.IRegistration[])">
            <summary>Sets the stub of IWindsorContainer.Register(IRegistration[] registrations)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.cw::Castle#Windsor#IWindsorContainer#Release(System.Object)">
            <summary>Sets the stub of IWindsorContainer.Release(Object instance)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.cw::Castle#Windsor#IWindsorContainer#RemoveChildContainer(Castle.Windsor.IWindsorContainer)">
            <summary>Sets the stub of IWindsorContainer.RemoveChildContainer(IWindsorContainer childContainer)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.cw::Castle#Windsor#IWindsorContainer#Resolve(System.Type)">
            <summary>Sets the stub of IWindsorContainer.Resolve(Type service)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.cw::Castle#Windsor#IWindsorContainer#Resolve(System.String,System.Type)">
            <summary>Sets the stub of IWindsorContainer.Resolve(String key, Type service)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.cw::Castle#Windsor#IWindsorContainer#Resolve(System.String,System.Collections.IDictionary)">
            <summary>Sets the stub of IWindsorContainer.Resolve(String key, IDictionary arguments)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.cw::Castle#Windsor#IWindsorContainer#Resolve``1">
            <summary>Sets the stub of IWindsorContainer.Resolve()</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.cw::Castle#Windsor#IWindsorContainer#Resolve``1(System.Object)">
            <summary>Sets the stub of IWindsorContainer.Resolve(Object argumentsAsAnonymousType)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.cw::Castle#Windsor#IWindsorContainer#Resolve(System.String,System.Type,System.Object)">
            <summary>Sets the stub of IWindsorContainer.Resolve(String key, Type service, Object argumentsAsAnonymousType)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.cw::Castle#Windsor#IWindsorContainer#Resolve(System.Type,System.Object)">
            <summary>Sets the stub of IWindsorContainer.Resolve(Type service, Object argumentsAsAnonymousType)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.cw::Castle#Windsor#IWindsorContainer#Resolve``1(System.String)">
            <summary>Sets the stub of IWindsorContainer.Resolve(String key)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.cw::Castle#Windsor#IWindsorContainer#Resolve``1(System.Collections.IDictionary)">
            <summary>Sets the stub of IWindsorContainer.Resolve(IDictionary arguments)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.cw::Castle#Windsor#IWindsorContainer#Resolve``1(System.String,System.Object)">
            <summary>Sets the stub of IWindsorContainer.Resolve(String key, Object argumentsAsAnonymousType)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.cw::Castle#Windsor#IWindsorContainer#Resolve``1(System.String,System.Collections.IDictionary)">
            <summary>Sets the stub of IWindsorContainer.Resolve(String key, IDictionary arguments)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.cw::Castle#Windsor#IWindsorContainer#Resolve(System.String,System.Object)">
            <summary>Sets the stub of IWindsorContainer.Resolve(String key, Object argumentsAsAnonymousType)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.cw::Castle#Windsor#IWindsorContainer#Resolve(System.Type,System.Collections.IDictionary)">
            <summary>Sets the stub of IWindsorContainer.Resolve(Type service, IDictionary arguments)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.cw::Castle#Windsor#IWindsorContainer#Resolve(System.String,System.Type,System.Collections.IDictionary)">
            <summary>Sets the stub of IWindsorContainer.Resolve(String key, Type service, IDictionary arguments)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.cw::Castle#Windsor#IWindsorContainer#ResolveAll``1">
            <summary>Sets the stub of IWindsorContainer.ResolveAll()</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.cw::Castle#Windsor#IWindsorContainer#ResolveAll(System.Type)">
            <summary>Sets the stub of IWindsorContainer.ResolveAll(Type service)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.cw::Castle#Windsor#IWindsorContainer#ResolveAll(System.Type,System.Object)">
            <summary>Sets the stub of IWindsorContainer.ResolveAll(Type service, Object argumentsAsAnonymousType)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.cw::Castle#Windsor#IWindsorContainer#ResolveAll``1(System.Collections.IDictionary)">
            <summary>Sets the stub of IWindsorContainer.ResolveAll(IDictionary arguments)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.cw::Castle#Windsor#IWindsorContainer#ResolveAll``1(System.Object)">
            <summary>Sets the stub of IWindsorContainer.ResolveAll(Object argumentsAsAnonymousType)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.cw::Castle#Windsor#IWindsorContainer#ResolveAll(System.Type,System.Collections.IDictionary)">
            <summary>Sets the stub of IWindsorContainer.ResolveAll(Type service, IDictionary arguments)</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubIWindsorContainer.Dispose">
            <summary>Sets the stub of IDisposable.Dispose()</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubIWindsorContainer.GetChildContainerString">
            <summary>Sets the stub of IWindsorContainer.GetChildContainer(String name)</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubIWindsorContainer.InstallIWindsorInstallerArray">
            <summary>Sets the stub of IWindsorContainer.Install(IWindsorInstaller[] installers)</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubIWindsorContainer.ItemGetString">
            <summary>Sets the stub of IWindsorContainer.get_Item(String key)</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubIWindsorContainer.ItemGetType">
            <summary>Sets the stub of IWindsorContainer.get_Item(Type service)</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubIWindsorContainer.KernelGet">
            <summary>Sets the stub of IWindsorContainer.get_Kernel()</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubIWindsorContainer.NameGet">
            <summary>Sets the stub of IWindsorContainer.get_Name()</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubIWindsorContainer.ParentGet">
            <summary>Sets the stub of IWindsorContainer.get_Parent()</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubIWindsorContainer.ParentSetIWindsorContainer">
            <summary>Sets the stub of IWindsorContainer.set_Parent(IWindsorContainer value)</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubIWindsorContainer.RegisterIRegistrationArray">
            <summary>Sets the stub of IWindsorContainer.Register(IRegistration[] registrations)</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubIWindsorContainer.ReleaseObject">
            <summary>Sets the stub of IWindsorContainer.Release(Object instance)</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubIWindsorContainer.RemoveChildContainerIWindsorContainer">
            <summary>Sets the stub of IWindsorContainer.RemoveChildContainer(IWindsorContainer childContainer)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.ResolveAllOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0[]})">
            <summary>Sets stubs of ResolveAll()</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.ResolveAllOf1IDictionary``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.IDictionary,``0[]})">
            <summary>Sets stubs of ResolveAll(IDictionary arguments)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.ResolveAllOf1Object``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Object,``0[]})">
            <summary>Sets stubs of ResolveAll(Object argumentsAsAnonymousType)</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubIWindsorContainer.ResolveAllType">
            <summary>Sets the stub of IWindsorContainer.ResolveAll(Type service)</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubIWindsorContainer.ResolveAllTypeIDictionary">
            <summary>Sets the stub of IWindsorContainer.ResolveAll(Type service, IDictionary arguments)</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubIWindsorContainer.ResolveAllTypeObject">
            <summary>Sets the stub of IWindsorContainer.ResolveAll(Type service, Object argumentsAsAnonymousType)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.ResolveOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0})">
            <summary>Sets stubs of Resolve()</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.ResolveOf1IDictionary``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.IDictionary,``0})">
            <summary>Sets stubs of Resolve(IDictionary arguments)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.ResolveOf1Object``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Object,``0})">
            <summary>Sets stubs of Resolve(Object argumentsAsAnonymousType)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.ResolveOf1String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,``0})">
            <summary>Sets stubs of Resolve(String key)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.ResolveOf1StringIDictionary``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,System.Collections.IDictionary,``0})">
            <summary>Sets stubs of Resolve(String key, IDictionary arguments)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.ResolveOf1StringObject``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,System.Object,``0})">
            <summary>Sets stubs of Resolve(String key, Object argumentsAsAnonymousType)</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubIWindsorContainer.ResolveStringIDictionary">
            <summary>Sets the stub of IWindsorContainer.Resolve(String key, IDictionary arguments)</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubIWindsorContainer.ResolveStringObject">
            <summary>Sets the stub of IWindsorContainer.Resolve(String key, Object argumentsAsAnonymousType)</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubIWindsorContainer.ResolveStringType">
            <summary>Sets the stub of IWindsorContainer.Resolve(String key, Type service)</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubIWindsorContainer.ResolveStringTypeIDictionary">
            <summary>Sets the stub of IWindsorContainer.Resolve(String key, Type service, IDictionary arguments)</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubIWindsorContainer.ResolveStringTypeObject">
            <summary>Sets the stub of IWindsorContainer.Resolve(String key, Type service, Object argumentsAsAnonymousType)</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubIWindsorContainer.ResolveType">
            <summary>Sets the stub of IWindsorContainer.Resolve(Type service)</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubIWindsorContainer.ResolveTypeIDictionary">
            <summary>Sets the stub of IWindsorContainer.Resolve(Type service, IDictionary arguments)</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubIWindsorContainer.ResolveTypeObject">
            <summary>Sets the stub of IWindsorContainer.Resolve(Type service, Object argumentsAsAnonymousType)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.global::System#IDisposable#Dispose">
            <summary>Sets the stub of IDisposable.Dispose()</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.StubIWindsorContainer.Castle#Windsor#IWindsorContainer#Item(System.String)">
            <summary>Sets the stub of IWindsorContainer.get_Item(String key)</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.StubIWindsorContainer.Castle#Windsor#IWindsorContainer#Item(System.Type)">
            <summary>Sets the stub of IWindsorContainer.get_Item(Type service)</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.StubIWindsorContainer.cw::Castle#Windsor#IWindsorContainer#Kernel">
            <summary>Sets the stub of IWindsorContainer.get_Kernel()</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.StubIWindsorContainer.cw::Castle#Windsor#IWindsorContainer#Name">
            <summary>Sets the stub of IWindsorContainer.get_Name()</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.StubIWindsorContainer.cw::Castle#Windsor#IWindsorContainer#Parent">
            <summary>Sets the stub of IWindsorContainer.get_Parent()</summary>
        </member>
        <member name="T:Castle.Windsor.Fakes.StubWindsorContainer">
            <summary>Stub type of Castle.Windsor.WindsorContainer</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubWindsorContainer.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubWindsorContainer.#ctor(Castle.MicroKernel.IProxyFactory)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubWindsorContainer.#ctor(Castle.MicroKernel.SubSystems.Configuration.IConfigurationStore)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubWindsorContainer.#ctor(Castle.Windsor.Configuration.IConfigurationInterpreter)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubWindsorContainer.#ctor(System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubWindsorContainer.#ctor(Castle.MicroKernel.IKernel,Castle.Windsor.IComponentsInstaller)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubWindsorContainer.#ctor(Castle.Windsor.IWindsorContainer,Castle.Windsor.Configuration.IConfigurationInterpreter)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubWindsorContainer.#ctor(Castle.Windsor.Configuration.IConfigurationInterpreter,Castle.Windsor.IEnvironmentInfo)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubWindsorContainer.#ctor(System.String,Castle.MicroKernel.IKernel,Castle.Windsor.IComponentsInstaller)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubWindsorContainer.#ctor(System.String,Castle.Windsor.IWindsorContainer,Castle.Windsor.Configuration.IConfigurationInterpreter)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubWindsorContainer.AddChildContainer(Castle.Windsor.IWindsorContainer)">
            <summary>Sets the stub of WindsorContainer.AddChildContainer(IWindsorContainer childContainer)</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubWindsorContainer.AddChildContainerIWindsorContainer">
            <summary>Sets the stub of WindsorContainer.AddChildContainer(IWindsorContainer childContainer)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubWindsorContainer.AddComponent(System.String,System.Type)">
            <summary>Sets the stub of WindsorContainer.AddComponent(String key, Type classType)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubWindsorContainer.AddComponent(System.String,System.Type,System.Type)">
            <summary>Sets the stub of WindsorContainer.AddComponent(String key, Type serviceType, Type classType)</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubWindsorContainer.AddComponentStringType">
            <summary>Sets the stub of WindsorContainer.AddComponent(String key, Type classType)</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubWindsorContainer.AddComponentStringTypeType">
            <summary>Sets the stub of WindsorContainer.AddComponent(String key, Type serviceType, Type classType)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubWindsorContainer.AddComponentWithProperties(System.String,System.Type,System.Collections.IDictionary)">
            <summary>Sets the stub of WindsorContainer.AddComponentWithProperties(String key, Type classType, IDictionary extendedProperties)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubWindsorContainer.AddComponentWithProperties(System.String,System.Type,System.Type,System.Collections.IDictionary)">
            <summary>Sets the stub of WindsorContainer.AddComponentWithProperties(String key, Type serviceType, Type classType, IDictionary extendedProperties)</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubWindsorContainer.AddComponentWithPropertiesStringTypeIDictionary">
            <summary>Sets the stub of WindsorContainer.AddComponentWithProperties(String key, Type classType, IDictionary extendedProperties)</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubWindsorContainer.AddComponentWithPropertiesStringTypeTypeIDictionary">
            <summary>Sets the stub of WindsorContainer.AddComponentWithProperties(String key, Type serviceType, Type classType, IDictionary extendedProperties)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubWindsorContainer.AddFacility(System.String,Castle.MicroKernel.IFacility)">
            <summary>Sets the stub of WindsorContainer.AddFacility(String idInConfiguration, IFacility facility)</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubWindsorContainer.AddFacilityStringIFacility">
            <summary>Sets the stub of WindsorContainer.AddFacility(String idInConfiguration, IFacility facility)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubWindsorContainer.AttachBackingFieldToParent">
            <summary>Attaches delegates to emulate StubWindsorContainer.Parent as a property with a backing field.</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubWindsorContainer.Dispose">
            <summary>Sets the stub of WindsorContainer.Dispose()</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubWindsorContainer.Dispose01">
            <summary>Sets the stub of WindsorContainer.Dispose()</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubWindsorContainer.InitializeStub">
            <summary>Initializes a new instance of type StubWindsorContainer</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubWindsorContainer.ItemGetString">
            <summary>Sets the stub of WindsorContainer.get_Item(String key)</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubWindsorContainer.ItemGetType">
            <summary>Sets the stub of WindsorContainer.get_Item(Type service)</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubWindsorContainer.KernelGet">
            <summary>Sets the stub of WindsorContainer.get_Kernel()</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubWindsorContainer.ParentGet">
            <summary>Sets the stub of WindsorContainer.get_Parent()</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubWindsorContainer.ParentSetIWindsorContainer">
            <summary>Sets the stub of WindsorContainer.set_Parent(IWindsorContainer value)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubWindsorContainer.Release(System.Object)">
            <summary>Sets the stub of WindsorContainer.Release(Object instance)</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubWindsorContainer.ReleaseObject">
            <summary>Sets the stub of WindsorContainer.Release(Object instance)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubWindsorContainer.RemoveChildContainer(Castle.Windsor.IWindsorContainer)">
            <summary>Sets the stub of WindsorContainer.RemoveChildContainer(IWindsorContainer childContainer)</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubWindsorContainer.RemoveChildContainerIWindsorContainer">
            <summary>Sets the stub of WindsorContainer.RemoveChildContainer(IWindsorContainer childContainer)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubWindsorContainer.Resolve``1(System.String)">
            <summary>Sets the stub of WindsorContainer.Resolve(String key)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubWindsorContainer.Resolve``1(System.String,System.Object)">
            <summary>Sets the stub of WindsorContainer.Resolve(String key, Object argumentsAsAnonymousType)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubWindsorContainer.Resolve``1(System.String,System.Collections.IDictionary)">
            <summary>Sets the stub of WindsorContainer.Resolve(String key, IDictionary arguments)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubWindsorContainer.Resolve(System.Type)">
            <summary>Sets the stub of WindsorContainer.Resolve(Type service)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubWindsorContainer.Resolve(System.String,System.Type)">
            <summary>Sets the stub of WindsorContainer.Resolve(String key, Type service)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubWindsorContainer.Resolve(System.Type,System.Object)">
            <summary>Sets the stub of WindsorContainer.Resolve(Type service, Object argumentsAsAnonymousType)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubWindsorContainer.Resolve(System.Type,System.Collections.IDictionary)">
            <summary>Sets the stub of WindsorContainer.Resolve(Type service, IDictionary arguments)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubWindsorContainer.Resolve(System.String,System.Type,System.Object)">
            <summary>Sets the stub of WindsorContainer.Resolve(String key, Type service, Object argumentsAsAnonymousType)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubWindsorContainer.Resolve(System.String,System.Type,System.Collections.IDictionary)">
            <summary>Sets the stub of WindsorContainer.Resolve(String key, Type service, IDictionary arguments)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubWindsorContainer.ResolveOf1String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,``0})">
            <summary>Sets stubs of Resolve(String key)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubWindsorContainer.ResolveOf1StringIDictionary``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,System.Collections.IDictionary,``0})">
            <summary>Sets stubs of Resolve(String key, IDictionary arguments)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubWindsorContainer.ResolveOf1StringObject``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,System.Object,``0})">
            <summary>Sets stubs of Resolve(String key, Object argumentsAsAnonymousType)</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubWindsorContainer.ResolveStringType">
            <summary>Sets the stub of WindsorContainer.Resolve(String key, Type service)</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubWindsorContainer.ResolveStringTypeIDictionary">
            <summary>Sets the stub of WindsorContainer.Resolve(String key, Type service, IDictionary arguments)</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubWindsorContainer.ResolveStringTypeObject">
            <summary>Sets the stub of WindsorContainer.Resolve(String key, Type service, Object argumentsAsAnonymousType)</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubWindsorContainer.ResolveType">
            <summary>Sets the stub of WindsorContainer.Resolve(Type service)</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubWindsorContainer.ResolveTypeIDictionary">
            <summary>Sets the stub of WindsorContainer.Resolve(Type service, IDictionary arguments)</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubWindsorContainer.ResolveTypeObject">
            <summary>Sets the stub of WindsorContainer.Resolve(Type service, Object argumentsAsAnonymousType)</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubWindsorContainer.RunInstaller">
            <summary>Sets the stub of WindsorContainer.RunInstaller()</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubWindsorContainer.RunInstaller01">
            <summary>Sets the stub of WindsorContainer.RunInstaller()</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.StubWindsorContainer.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.StubWindsorContainer.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.StubWindsorContainer.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.StubWindsorContainer.Item(System.String)">
            <summary>Sets the stub of WindsorContainer.get_Item(String key)</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.StubWindsorContainer.Item(System.Type)">
            <summary>Sets the stub of WindsorContainer.get_Item(Type service)</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.StubWindsorContainer.Kernel">
            <summary>Sets the stub of WindsorContainer.get_Kernel()</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.StubWindsorContainer.Parent">
            <summary>Sets the stub of WindsorContainer.get_Parent()</summary>
        </member>
        <member name="T:Castle.Windsor.Fakes.StubWindsorServiceProvider">
            <summary>Stub type of Castle.Windsor.WindsorServiceProvider</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubWindsorServiceProvider.#ctor(Castle.Windsor.IWindsorContainer)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubWindsorServiceProvider.InitializeStub">
            <summary>Initializes a new instance of type StubWindsorServiceProvider</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.StubWindsorServiceProvider.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.StubWindsorServiceProvider.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.StubWindsorServiceProvider.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.Windsor.Installer.Fakes.ShimAssemblyInstaller">
            <summary>Shim type of Castle.Windsor.Installer.AssemblyInstaller</summary>
        </member>
        <member name="M:Castle.Windsor.Installer.Fakes.ShimAssemblyInstaller.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Windsor.Installer.Fakes.ShimAssemblyInstaller.#ctor(Castle.Windsor.Installer.AssemblyInstaller)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Windsor.Installer.Fakes.ShimAssemblyInstaller.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Installer.Fakes.ShimAssemblyInstaller.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Installer.Fakes.ShimAssemblyInstaller.Bind(Castle.MicroKernel.Registration.IWindsorInstaller)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.ShimAssemblyInstaller.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.ShimAssemblyInstaller.ConstructorAssemblyInstallerFactory">
            <summary>Sets the shim of AssemblyInstaller.AssemblyInstaller(Assembly assembly, InstallerFactory factory)</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.ShimAssemblyInstaller.FilterInstallerTypesIEnumerableOfType">
            <summary>Sets the shim of AssemblyInstaller.FilterInstallerTypes(IEnumerable`1&lt;Type&gt; types)</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.ShimAssemblyInstaller.InstallIWindsorContainerIConfigurationStore">
            <summary>Sets the shim of AssemblyInstaller.Install(IWindsorContainer container, IConfigurationStore store)</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.ShimAssemblyInstaller._FilterInstallerTypesb__0Type">
            <summary>Sets the shim of AssemblyInstaller.&lt;FilterInstallerTypes&gt;b__0(Type t)</summary>
        </member>
        <member name="T:Castle.Windsor.Installer.Fakes.ShimAssemblyInstaller.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.ShimAssemblyInstaller.AllInstances.FilterInstallerTypesIEnumerableOfType">
            <summary>Sets the shim of AssemblyInstaller.FilterInstallerTypes(IEnumerable`1&lt;Type&gt; types)</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.ShimAssemblyInstaller.AllInstances.InstallIWindsorContainerIConfigurationStore">
            <summary>Sets the shim of AssemblyInstaller.Install(IWindsorContainer container, IConfigurationStore store)</summary>
        </member>
        <member name="T:Castle.Windsor.Installer.Fakes.ShimCompositeInstaller">
            <summary>Shim type of Castle.Windsor.Installer.CompositeInstaller</summary>
        </member>
        <member name="M:Castle.Windsor.Installer.Fakes.ShimCompositeInstaller.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Windsor.Installer.Fakes.ShimCompositeInstaller.#ctor(Castle.Windsor.Installer.CompositeInstaller)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Windsor.Installer.Fakes.ShimCompositeInstaller.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Installer.Fakes.ShimCompositeInstaller.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Installer.Fakes.ShimCompositeInstaller.Bind(Castle.MicroKernel.Registration.IWindsorInstaller)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.ShimCompositeInstaller.AddIWindsorInstaller">
            <summary>Sets the shim of CompositeInstaller.Add(IWindsorInstaller instance)</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.ShimCompositeInstaller.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.ShimCompositeInstaller.Constructor">
            <summary>Sets the shim of CompositeInstaller.CompositeInstaller()</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.ShimCompositeInstaller.InstallIWindsorContainerIConfigurationStore">
            <summary>Sets the shim of CompositeInstaller.Install(IWindsorContainer container, IConfigurationStore store)</summary>
        </member>
        <member name="T:Castle.Windsor.Installer.Fakes.ShimCompositeInstaller.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.ShimCompositeInstaller.AllInstances.AddIWindsorInstaller">
            <summary>Sets the shim of CompositeInstaller.Add(IWindsorInstaller instance)</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.ShimCompositeInstaller.AllInstances.InstallIWindsorContainerIConfigurationStore">
            <summary>Sets the shim of CompositeInstaller.Install(IWindsorContainer container, IConfigurationStore store)</summary>
        </member>
        <member name="T:Castle.Windsor.Installer.Fakes.ShimConfiguration">
            <summary>Shim type of Castle.Windsor.Installer.Configuration</summary>
        </member>
        <member name="M:Castle.Windsor.Installer.Fakes.ShimConfiguration.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Windsor.Installer.Fakes.ShimConfiguration.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Installer.Fakes.ShimConfiguration.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.ShimConfiguration.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.ShimConfiguration.FromAppConfig">
            <summary>Sets the shim of Configuration.FromAppConfig()</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.ShimConfiguration.FromXmlFileString">
            <summary>Sets the shim of Configuration.FromXmlFile(String file)</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.ShimConfiguration.FromXmlIResource">
            <summary>Sets the shim of Configuration.FromXml(IResource resource)</summary>
        </member>
        <member name="T:Castle.Windsor.Installer.Fakes.ShimConfigurationInstaller">
            <summary>Shim type of Castle.Windsor.Installer.ConfigurationInstaller</summary>
        </member>
        <member name="M:Castle.Windsor.Installer.Fakes.ShimConfigurationInstaller.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Windsor.Installer.Fakes.ShimConfigurationInstaller.#ctor(Castle.Windsor.Installer.ConfigurationInstaller)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Windsor.Installer.Fakes.ShimConfigurationInstaller.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Installer.Fakes.ShimConfigurationInstaller.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Installer.Fakes.ShimConfigurationInstaller.Bind(Castle.MicroKernel.Registration.IWindsorInstaller)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.ShimConfigurationInstaller.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.ShimConfigurationInstaller.CastleMicroKernelRegistrationIWindsorInstallerInstallIWindsorContainerIConfigurationStore">
            <summary>Sets the shim of ConfigurationInstaller.Castle.MicroKernel.Registration.IWindsorInstaller.Install(IWindsorContainer container, IConfigurationStore store)</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.ShimConfigurationInstaller.ConstructorIConfigurationInterpreter">
            <summary>Sets the shim of ConfigurationInstaller.ConfigurationInstaller(IConfigurationInterpreter interpreter)</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.ShimConfigurationInstaller.EnvironmentEnvironmentDelegate">
            <summary>Sets the shim of ConfigurationInstaller.Environment(EnvironmentDelegate environment)</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.ShimConfigurationInstaller.EnvironmentString">
            <summary>Sets the shim of ConfigurationInstaller.Environment(String environmentName)</summary>
        </member>
        <member name="T:Castle.Windsor.Installer.Fakes.ShimConfigurationInstaller.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.ShimConfigurationInstaller.AllInstances.CastleMicroKernelRegistrationIWindsorInstallerInstallIWindsorContainerIConfigurationStore">
            <summary>Sets the shim of ConfigurationInstaller.Castle.MicroKernel.Registration.IWindsorInstaller.Install(IWindsorContainer container, IConfigurationStore store)</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.ShimConfigurationInstaller.AllInstances.EnvironmentEnvironmentDelegate">
            <summary>Sets the shim of ConfigurationInstaller.Environment(EnvironmentDelegate environment)</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.ShimConfigurationInstaller.AllInstances.EnvironmentString">
            <summary>Sets the shim of ConfigurationInstaller.Environment(String environmentName)</summary>
        </member>
        <member name="T:Castle.Windsor.Installer.Fakes.ShimDefaultComponentInstaller">
            <summary>Shim type of Castle.Windsor.Installer.DefaultComponentInstaller</summary>
        </member>
        <member name="M:Castle.Windsor.Installer.Fakes.ShimDefaultComponentInstaller.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Windsor.Installer.Fakes.ShimDefaultComponentInstaller.#ctor(Castle.Windsor.Installer.DefaultComponentInstaller)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Windsor.Installer.Fakes.ShimDefaultComponentInstaller.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Installer.Fakes.ShimDefaultComponentInstaller.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Installer.Fakes.ShimDefaultComponentInstaller.Bind(Castle.Windsor.IComponentsInstaller)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.ShimDefaultComponentInstaller.AddInstallerDictionaryOfTypeIWindsorInstallerType">
            <summary>Sets the shim of DefaultComponentInstaller.AddInstaller(Dictionary`2&lt;Type,IWindsorInstaller&gt; cache, Type type)</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.ShimDefaultComponentInstaller.AddInstallerIConfigurationDictionaryOfTypeIWindsorInstallerIConversionManagerICollectionOfAssembly">
            <summary>Sets the shim of DefaultComponentInstaller.AddInstaller(IConfiguration installer, Dictionary`2&lt;Type,IWindsorInstaller&gt; cache, IConversionManager conversionManager, ICollection`1&lt;Assembly&gt; assemblies)</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.ShimDefaultComponentInstaller.AssertImplementsServiceIConfigurationTypeType">
            <summary>Sets the shim of DefaultComponentInstaller.AssertImplementsService(IConfiguration id, Type service, Type implementation)</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.ShimDefaultComponentInstaller.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.ShimDefaultComponentInstaller.CollectAdditionalServicesIConfigurationIConversionManagerICollectionOfType">
            <summary>Sets the shim of DefaultComponentInstaller.CollectAdditionalServices(IConfiguration component, IConversionManager converter, ICollection`1&lt;Type&gt; services)</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.ShimDefaultComponentInstaller.Constructor">
            <summary>Sets the shim of DefaultComponentInstaller.DefaultComponentInstaller()</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.ShimDefaultComponentInstaller.GetAssemblyInstallersDictionaryOfTypeIWindsorInstallerAssembly">
            <summary>Sets the shim of DefaultComponentInstaller.GetAssemblyInstallers(Dictionary`2&lt;Type,IWindsorInstaller&gt; cache, Assembly assembly)</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.ShimDefaultComponentInstaller.GetNameCastleComponentAttributeIConfiguration">
            <summary>Sets the shim of DefaultComponentInstaller.GetName(CastleComponentAttribute defaults, IConfiguration component)</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.ShimDefaultComponentInstaller.GetTypeIConversionManagerString">
            <summary>Sets the shim of DefaultComponentInstaller.GetType(IConversionManager converter, String typeName)</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.ShimDefaultComponentInstaller.InstallerTypesIEnumerableOfType">
            <summary>Sets the shim of DefaultComponentInstaller.InstallerTypes(IEnumerable`1&lt;Type&gt; types)</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.ShimDefaultComponentInstaller.IsInstallerType">
            <summary>Sets the shim of DefaultComponentInstaller.IsInstaller(Type type)</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.ShimDefaultComponentInstaller.SetUpChildContainersIConfigurationArrayIWindsorContainer">
            <summary>Sets the shim of DefaultComponentInstaller.SetUpChildContainers(IConfiguration[] configurations, IWindsorContainer parentContainer)</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.ShimDefaultComponentInstaller.SetUpComponentsIConfigurationArrayIWindsorContainerIConversionManager">
            <summary>Sets the shim of DefaultComponentInstaller.SetUpComponents(IConfiguration[] configurations, IWindsorContainer container, IConversionManager converter)</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.ShimDefaultComponentInstaller.SetUpFacilitiesIConfigurationArrayIWindsorContainerIConversionManager">
            <summary>Sets the shim of DefaultComponentInstaller.SetUpFacilities(IConfiguration[] configurations, IWindsorContainer container, IConversionManager converter)</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.ShimDefaultComponentInstaller.SetUpIWindsorContainerIConfigurationStore">
            <summary>Sets the shim of DefaultComponentInstaller.SetUp(IWindsorContainer container, IConfigurationStore store)</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.ShimDefaultComponentInstaller.SetUpInstallersIConfigurationArrayIWindsorContainerIConversionManager">
            <summary>Sets the shim of DefaultComponentInstaller.SetUpInstallers(IConfiguration[] installers, IWindsorContainer container, IConversionManager converter)</summary>
        </member>
        <member name="T:Castle.Windsor.Installer.Fakes.ShimDefaultComponentInstaller.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.ShimDefaultComponentInstaller.AllInstances.AddInstallerDictionaryOfTypeIWindsorInstallerType">
            <summary>Sets the shim of DefaultComponentInstaller.AddInstaller(Dictionary`2&lt;Type,IWindsorInstaller&gt; cache, Type type)</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.ShimDefaultComponentInstaller.AllInstances.AddInstallerIConfigurationDictionaryOfTypeIWindsorInstallerIConversionManagerICollectionOfAssembly">
            <summary>Sets the shim of DefaultComponentInstaller.AddInstaller(IConfiguration installer, Dictionary`2&lt;Type,IWindsorInstaller&gt; cache, IConversionManager conversionManager, ICollection`1&lt;Assembly&gt; assemblies)</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.ShimDefaultComponentInstaller.AllInstances.AssertImplementsServiceIConfigurationTypeType">
            <summary>Sets the shim of DefaultComponentInstaller.AssertImplementsService(IConfiguration id, Type service, Type implementation)</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.ShimDefaultComponentInstaller.AllInstances.CollectAdditionalServicesIConfigurationIConversionManagerICollectionOfType">
            <summary>Sets the shim of DefaultComponentInstaller.CollectAdditionalServices(IConfiguration component, IConversionManager converter, ICollection`1&lt;Type&gt; services)</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.ShimDefaultComponentInstaller.AllInstances.GetAssemblyInstallersDictionaryOfTypeIWindsorInstallerAssembly">
            <summary>Sets the shim of DefaultComponentInstaller.GetAssemblyInstallers(Dictionary`2&lt;Type,IWindsorInstaller&gt; cache, Assembly assembly)</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.ShimDefaultComponentInstaller.AllInstances.GetTypeIConversionManagerString">
            <summary>Sets the shim of DefaultComponentInstaller.GetType(IConversionManager converter, String typeName)</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.ShimDefaultComponentInstaller.AllInstances.InstallerTypesIEnumerableOfType">
            <summary>Sets the shim of DefaultComponentInstaller.InstallerTypes(IEnumerable`1&lt;Type&gt; types)</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.ShimDefaultComponentInstaller.AllInstances.IsInstallerType">
            <summary>Sets the shim of DefaultComponentInstaller.IsInstaller(Type type)</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.ShimDefaultComponentInstaller.AllInstances.SetUpComponentsIConfigurationArrayIWindsorContainerIConversionManager">
            <summary>Sets the shim of DefaultComponentInstaller.SetUpComponents(IConfiguration[] configurations, IWindsorContainer container, IConversionManager converter)</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.ShimDefaultComponentInstaller.AllInstances.SetUpFacilitiesIConfigurationArrayIWindsorContainerIConversionManager">
            <summary>Sets the shim of DefaultComponentInstaller.SetUpFacilities(IConfiguration[] configurations, IWindsorContainer container, IConversionManager converter)</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.ShimDefaultComponentInstaller.AllInstances.SetUpIWindsorContainerIConfigurationStore">
            <summary>Sets the shim of DefaultComponentInstaller.SetUp(IWindsorContainer container, IConfigurationStore store)</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.ShimDefaultComponentInstaller.AllInstances.SetUpInstallersIConfigurationArrayIWindsorContainerIConversionManager">
            <summary>Sets the shim of DefaultComponentInstaller.SetUpInstallers(IConfiguration[] installers, IWindsorContainer container, IConversionManager converter)</summary>
        </member>
        <member name="T:Castle.Windsor.Installer.Fakes.ShimFromAssembly">
            <summary>Shim type of Castle.Windsor.Installer.FromAssembly</summary>
        </member>
        <member name="M:Castle.Windsor.Installer.Fakes.ShimFromAssembly.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Windsor.Installer.Fakes.ShimFromAssembly.#ctor(Castle.Windsor.Installer.FromAssembly)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Windsor.Installer.Fakes.ShimFromAssembly.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Installer.Fakes.ShimFromAssembly.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Installer.Fakes.ShimFromAssembly.ContainingOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.MicroKernel.Registration.IWindsorInstaller})">
            <summary>Sets the shim of FromAssembly.Containing()</summary>
        </member>
        <member name="M:Castle.Windsor.Installer.Fakes.ShimFromAssembly.ContainingOf1InstallerFactory``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.Windsor.Installer.InstallerFactory,Castle.MicroKernel.Registration.IWindsorInstaller})">
            <summary>Sets the shim of FromAssembly.Containing(InstallerFactory installerFactory)</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.ShimFromAssembly.ApplicationAssembliesAssemblyInstallerFactory">
            <summary>Sets the shim of FromAssembly.ApplicationAssemblies(Assembly rootAssembly, InstallerFactory installerFactory)</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.ShimFromAssembly.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.ShimFromAssembly.Constructor">
            <summary>Sets the shim of FromAssembly.FromAssembly()</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.ShimFromAssembly.ContainingType">
            <summary>Sets the shim of FromAssembly.Containing(Type type)</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.ShimFromAssembly.ContainingTypeInstallerFactory">
            <summary>Sets the shim of FromAssembly.Containing(Type type, InstallerFactory installerFactory)</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.ShimFromAssembly.InDirectoryAssemblyFilter">
            <summary>Sets the shim of FromAssembly.InDirectory(AssemblyFilter filter)</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.ShimFromAssembly.InDirectoryAssemblyFilterInstallerFactory">
            <summary>Sets the shim of FromAssembly.InDirectory(AssemblyFilter filter, InstallerFactory installerFactory)</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.ShimFromAssembly.InThisApplication">
            <summary>Sets the shim of FromAssembly.InThisApplication()</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.ShimFromAssembly.InThisApplicationInstallerFactory">
            <summary>Sets the shim of FromAssembly.InThisApplication(InstallerFactory installerFactory)</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.ShimFromAssembly.InstanceAssembly">
            <summary>Sets the shim of FromAssembly.Instance(Assembly assembly)</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.ShimFromAssembly.InstanceAssemblyInstallerFactory">
            <summary>Sets the shim of FromAssembly.Instance(Assembly assembly, InstallerFactory installerFactory)</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.ShimFromAssembly.NamedString">
            <summary>Sets the shim of FromAssembly.Named(String assemblyName)</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.ShimFromAssembly.NamedStringInstallerFactory">
            <summary>Sets the shim of FromAssembly.Named(String assemblyName, InstallerFactory installerFactory)</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.ShimFromAssembly.This">
            <summary>Sets the shim of FromAssembly.This()</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.ShimFromAssembly.ThisInstallerFactory">
            <summary>Sets the shim of FromAssembly.This(InstallerFactory installerFactory)</summary>
        </member>
        <member name="T:Castle.Windsor.Installer.Fakes.ShimFromAssembly.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="T:Castle.Windsor.Installer.Fakes.ShimInstallerFactory">
            <summary>Shim type of Castle.Windsor.Installer.InstallerFactory</summary>
        </member>
        <member name="M:Castle.Windsor.Installer.Fakes.ShimInstallerFactory.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Windsor.Installer.Fakes.ShimInstallerFactory.#ctor(Castle.Windsor.Installer.InstallerFactory)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Windsor.Installer.Fakes.ShimInstallerFactory.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Installer.Fakes.ShimInstallerFactory.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.ShimInstallerFactory.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.ShimInstallerFactory.Constructor">
            <summary>Sets the shim of InstallerFactory.InstallerFactory()</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.ShimInstallerFactory.CreateInstanceType">
            <summary>Sets the shim of InstallerFactory.CreateInstance(Type installerType)</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.ShimInstallerFactory.SelectIEnumerableOfType">
            <summary>Sets the shim of InstallerFactory.Select(IEnumerable`1&lt;Type&gt; installerTypes)</summary>
        </member>
        <member name="T:Castle.Windsor.Installer.Fakes.ShimInstallerFactory.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.ShimInstallerFactory.AllInstances.CreateInstanceType">
            <summary>Sets the shim of InstallerFactory.CreateInstance(Type installerType)</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.ShimInstallerFactory.AllInstances.SelectIEnumerableOfType">
            <summary>Sets the shim of InstallerFactory.Select(IEnumerable`1&lt;Type&gt; installerTypes)</summary>
        </member>
        <member name="T:Castle.Windsor.Installer.Fakes.StubAssemblyInstaller">
            <summary>Stub type of Castle.Windsor.Installer.AssemblyInstaller</summary>
        </member>
        <member name="M:Castle.Windsor.Installer.Fakes.StubAssemblyInstaller.#ctor(System.Reflection.Assembly,Castle.Windsor.Installer.InstallerFactory)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Windsor.Installer.Fakes.StubAssemblyInstaller.InitializeStub">
            <summary>Initializes a new instance of type StubAssemblyInstaller</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.StubAssemblyInstaller.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.StubAssemblyInstaller.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.StubAssemblyInstaller.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.Windsor.Installer.Fakes.StubCompositeInstaller">
            <summary>Stub type of Castle.Windsor.Installer.CompositeInstaller</summary>
        </member>
        <member name="M:Castle.Windsor.Installer.Fakes.StubCompositeInstaller.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Windsor.Installer.Fakes.StubCompositeInstaller.InitializeStub">
            <summary>Initializes a new instance of type StubCompositeInstaller</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.StubCompositeInstaller.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.StubCompositeInstaller.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.StubCompositeInstaller.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.Windsor.Installer.Fakes.StubConfigurationInstaller">
            <summary>Stub type of Castle.Windsor.Installer.ConfigurationInstaller</summary>
        </member>
        <member name="M:Castle.Windsor.Installer.Fakes.StubConfigurationInstaller.#ctor(Castle.Windsor.Configuration.IConfigurationInterpreter)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Windsor.Installer.Fakes.StubConfigurationInstaller.InitializeStub">
            <summary>Initializes a new instance of type StubConfigurationInstaller</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.StubConfigurationInstaller.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.StubConfigurationInstaller.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.StubConfigurationInstaller.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.Windsor.Installer.Fakes.StubDefaultComponentInstaller">
            <summary>Stub type of Castle.Windsor.Installer.DefaultComponentInstaller</summary>
        </member>
        <member name="M:Castle.Windsor.Installer.Fakes.StubDefaultComponentInstaller.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Windsor.Installer.Fakes.StubDefaultComponentInstaller.InitializeStub">
            <summary>Initializes a new instance of type StubDefaultComponentInstaller</summary>
        </member>
        <member name="M:Castle.Windsor.Installer.Fakes.StubDefaultComponentInstaller.SetUpComponents(Castle.Core.Configuration.IConfiguration[],Castle.Windsor.IWindsorContainer,Castle.MicroKernel.SubSystems.Conversion.IConversionManager)">
            <summary>Sets the stub of DefaultComponentInstaller.SetUpComponents(IConfiguration[] configurations, IWindsorContainer container, IConversionManager converter)</summary>
        </member>
        <member name="F:Castle.Windsor.Installer.Fakes.StubDefaultComponentInstaller.SetUpComponentsIConfigurationArrayIWindsorContainerIConversionManager">
            <summary>Sets the stub of DefaultComponentInstaller.SetUpComponents(IConfiguration[] configurations, IWindsorContainer container, IConversionManager converter)</summary>
        </member>
        <member name="M:Castle.Windsor.Installer.Fakes.StubDefaultComponentInstaller.SetUpFacilities(Castle.Core.Configuration.IConfiguration[],Castle.Windsor.IWindsorContainer,Castle.MicroKernel.SubSystems.Conversion.IConversionManager)">
            <summary>Sets the stub of DefaultComponentInstaller.SetUpFacilities(IConfiguration[] configurations, IWindsorContainer container, IConversionManager converter)</summary>
        </member>
        <member name="F:Castle.Windsor.Installer.Fakes.StubDefaultComponentInstaller.SetUpFacilitiesIConfigurationArrayIWindsorContainerIConversionManager">
            <summary>Sets the stub of DefaultComponentInstaller.SetUpFacilities(IConfiguration[] configurations, IWindsorContainer container, IConversionManager converter)</summary>
        </member>
        <member name="M:Castle.Windsor.Installer.Fakes.StubDefaultComponentInstaller.SetUpInstallers(Castle.Core.Configuration.IConfiguration[],Castle.Windsor.IWindsorContainer,Castle.MicroKernel.SubSystems.Conversion.IConversionManager)">
            <summary>Sets the stub of DefaultComponentInstaller.SetUpInstallers(IConfiguration[] installers, IWindsorContainer container, IConversionManager converter)</summary>
        </member>
        <member name="F:Castle.Windsor.Installer.Fakes.StubDefaultComponentInstaller.SetUpInstallersIConfigurationArrayIWindsorContainerIConversionManager">
            <summary>Sets the stub of DefaultComponentInstaller.SetUpInstallers(IConfiguration[] installers, IWindsorContainer container, IConversionManager converter)</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.StubDefaultComponentInstaller.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.StubDefaultComponentInstaller.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.StubDefaultComponentInstaller.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.Windsor.Installer.Fakes.StubFromAssembly">
            <summary>Stub type of Castle.Windsor.Installer.FromAssembly</summary>
        </member>
        <member name="M:Castle.Windsor.Installer.Fakes.StubFromAssembly.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Windsor.Installer.Fakes.StubFromAssembly.InitializeStub">
            <summary>Initializes a new instance of type StubFromAssembly</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.StubFromAssembly.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.StubFromAssembly.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.StubFromAssembly.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.Windsor.Installer.Fakes.StubInstallerFactory">
            <summary>Stub type of Castle.Windsor.Installer.InstallerFactory</summary>
        </member>
        <member name="M:Castle.Windsor.Installer.Fakes.StubInstallerFactory.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Windsor.Installer.Fakes.StubInstallerFactory.CreateInstance(System.Type)">
            <summary>Sets the stub of InstallerFactory.CreateInstance(Type installerType)</summary>
        </member>
        <member name="F:Castle.Windsor.Installer.Fakes.StubInstallerFactory.CreateInstanceType">
            <summary>Sets the stub of InstallerFactory.CreateInstance(Type installerType)</summary>
        </member>
        <member name="M:Castle.Windsor.Installer.Fakes.StubInstallerFactory.InitializeStub">
            <summary>Initializes a new instance of type StubInstallerFactory</summary>
        </member>
        <member name="M:Castle.Windsor.Installer.Fakes.StubInstallerFactory.Select(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>Sets the stub of InstallerFactory.Select(IEnumerable`1&lt;Type&gt; installerTypes)</summary>
        </member>
        <member name="F:Castle.Windsor.Installer.Fakes.StubInstallerFactory.SelectIEnumerableOfType">
            <summary>Sets the stub of InstallerFactory.Select(IEnumerable`1&lt;Type&gt; installerTypes)</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.StubInstallerFactory.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.StubInstallerFactory.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.StubInstallerFactory.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.Windsor.Proxy.Fakes.ShimAbstractProxyFactory">
            <summary>Shim type of Castle.Windsor.Proxy.AbstractProxyFactory</summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.Fakes.ShimAbstractProxyFactory.#ctor(Castle.Windsor.Proxy.AbstractProxyFactory)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.Fakes.ShimAbstractProxyFactory.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.Fakes.ShimAbstractProxyFactory.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.Fakes.ShimAbstractProxyFactory.Bind(Castle.MicroKernel.IProxyFactory)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimAbstractProxyFactory.AddInterceptorSelectorIModelInterceptorsSelector">
            <summary>Sets the shim of AbstractProxyFactory.AddInterceptorSelector(IModelInterceptorsSelector selector)</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimAbstractProxyFactory.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimAbstractProxyFactory.Constructor">
            <summary>Sets the shim of AbstractProxyFactory.AbstractProxyFactory()</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimAbstractProxyFactory.GetInterceptorsForComponentModel">
            <summary>Sets the shim of AbstractProxyFactory.GetInterceptorsFor(ComponentModel model)</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimAbstractProxyFactory.ObtainInterceptorsIKernelComponentModelCreationContext">
            <summary>Sets the shim of AbstractProxyFactory.ObtainInterceptors(IKernel kernel, ComponentModel model, CreationContext context)</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimAbstractProxyFactory.SetOnBehalfAwareIOnBehalfAwareComponentModel">
            <summary>Sets the shim of AbstractProxyFactory.SetOnBehalfAware(IOnBehalfAware onBehalfAware, ComponentModel target)</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimAbstractProxyFactory.ShouldCreateProxyComponentModel">
            <summary>Sets the shim of AbstractProxyFactory.ShouldCreateProxy(ComponentModel model)</summary>
        </member>
        <member name="T:Castle.Windsor.Proxy.Fakes.ShimAbstractProxyFactory.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimAbstractProxyFactory.AllInstances.AddInterceptorSelectorIModelInterceptorsSelector">
            <summary>Sets the shim of AbstractProxyFactory.AddInterceptorSelector(IModelInterceptorsSelector selector)</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimAbstractProxyFactory.AllInstances.GetInterceptorsForComponentModel">
            <summary>Sets the shim of AbstractProxyFactory.GetInterceptorsFor(ComponentModel model)</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimAbstractProxyFactory.AllInstances.ObtainInterceptorsIKernelComponentModelCreationContext">
            <summary>Sets the shim of AbstractProxyFactory.ObtainInterceptors(IKernel kernel, ComponentModel model, CreationContext context)</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimAbstractProxyFactory.AllInstances.ShouldCreateProxyComponentModel">
            <summary>Sets the shim of AbstractProxyFactory.ShouldCreateProxy(ComponentModel model)</summary>
        </member>
        <member name="T:Castle.Windsor.Proxy.Fakes.ShimDefaultProxyFactory">
            <summary>Shim type of Castle.Windsor.Proxy.DefaultProxyFactory</summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.Fakes.ShimDefaultProxyFactory.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.Fakes.ShimDefaultProxyFactory.#ctor(Castle.Windsor.Proxy.DefaultProxyFactory)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.Fakes.ShimDefaultProxyFactory.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.Fakes.ShimDefaultProxyFactory.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.Fakes.ShimDefaultProxyFactory.Bind(Castle.MicroKernel.IProxyFactory)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.Fakes.ShimDefaultProxyFactory.Bind(System.Runtime.Serialization.IDeserializationCallback)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimDefaultProxyFactory.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimDefaultProxyFactory.Constructor">
            <summary>Sets the shim of DefaultProxyFactory.DefaultProxyFactory()</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimDefaultProxyFactory.ConstructorBoolean">
            <summary>Sets the shim of DefaultProxyFactory.DefaultProxyFactory(Boolean disableSignedModule)</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimDefaultProxyFactory.ConstructorProxyGenerator">
            <summary>Sets the shim of DefaultProxyFactory.DefaultProxyFactory(ProxyGenerator generator)</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimDefaultProxyFactory.CreateIKernelObjectComponentModelCreationContextObjectArray">
            <summary>Sets the shim of DefaultProxyFactory.Create(IKernel kernel, Object target, ComponentModel model, CreationContext context, Object[] constructorArguments)</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimDefaultProxyFactory.CreateIProxyFactoryExtensionIKernelComponentModelCreationContextObjectArray">
            <summary>Sets the shim of DefaultProxyFactory.Create(IProxyFactoryExtension customFactory, IKernel kernel, ComponentModel model, CreationContext context, Object[] constructorArguments)</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimDefaultProxyFactory.CreateProxyGenerationOptionsFromProxyOptionsIKernelCreationContextComponentModel">
            <summary>Sets the shim of DefaultProxyFactory.CreateProxyGenerationOptionsFrom(ProxyOptions proxyOptions, IKernel kernel, CreationContext context, ComponentModel model)</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimDefaultProxyFactory.CustomizeOptionsProxyGenerationOptionsIKernelComponentModelObjectArray">
            <summary>Sets the shim of DefaultProxyFactory.CustomizeOptions(ProxyGenerationOptions options, IKernel kernel, ComponentModel model, Object[] arguments)</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimDefaultProxyFactory.CustomizeProxyObjectProxyGenerationOptionsIKernelComponentModel">
            <summary>Sets the shim of DefaultProxyFactory.CustomizeProxy(Object proxy, ProxyGenerationOptions options, IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimDefaultProxyFactory.OnDeserializationObject">
            <summary>Sets the shim of DefaultProxyFactory.OnDeserialization(Object sender)</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimDefaultProxyFactory.ReleaseHookProxyGenerationOptionsIKernel">
            <summary>Sets the shim of DefaultProxyFactory.ReleaseHook(ProxyGenerationOptions proxyGenOptions, IKernel kernel)</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimDefaultProxyFactory.RequiresTargetInstanceIKernelComponentModel">
            <summary>Sets the shim of DefaultProxyFactory.RequiresTargetInstance(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimDefaultProxyFactory._Createb__0Type">
            <summary>Sets the shim of DefaultProxyFactory.&lt;Create&gt;b__0(Type s)</summary>
        </member>
        <member name="T:Castle.Windsor.Proxy.Fakes.ShimDefaultProxyFactory.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimDefaultProxyFactory.AllInstances.CreateIKernelObjectComponentModelCreationContextObjectArray">
            <summary>Sets the shim of DefaultProxyFactory.Create(IKernel kernel, Object target, ComponentModel model, CreationContext context, Object[] constructorArguments)</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimDefaultProxyFactory.AllInstances.CreateIProxyFactoryExtensionIKernelComponentModelCreationContextObjectArray">
            <summary>Sets the shim of DefaultProxyFactory.Create(IProxyFactoryExtension customFactory, IKernel kernel, ComponentModel model, CreationContext context, Object[] constructorArguments)</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimDefaultProxyFactory.AllInstances.CustomizeOptionsProxyGenerationOptionsIKernelComponentModelObjectArray">
            <summary>Sets the shim of DefaultProxyFactory.CustomizeOptions(ProxyGenerationOptions options, IKernel kernel, ComponentModel model, Object[] arguments)</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimDefaultProxyFactory.AllInstances.CustomizeProxyObjectProxyGenerationOptionsIKernelComponentModel">
            <summary>Sets the shim of DefaultProxyFactory.CustomizeProxy(Object proxy, ProxyGenerationOptions options, IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimDefaultProxyFactory.AllInstances.OnDeserializationObject">
            <summary>Sets the shim of DefaultProxyFactory.OnDeserialization(Object sender)</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimDefaultProxyFactory.AllInstances.ReleaseHookProxyGenerationOptionsIKernel">
            <summary>Sets the shim of DefaultProxyFactory.ReleaseHook(ProxyGenerationOptions proxyGenOptions, IKernel kernel)</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimDefaultProxyFactory.AllInstances.RequiresTargetInstanceIKernelComponentModel">
            <summary>Sets the shim of DefaultProxyFactory.RequiresTargetInstance(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="T:Castle.Windsor.Proxy.Fakes.StubAbstractProxyFactory">
            <summary>Stub type of Castle.Windsor.Proxy.AbstractProxyFactory</summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.Fakes.StubAbstractProxyFactory.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.Fakes.StubAbstractProxyFactory.Create(Castle.MicroKernel.IKernel,System.Object,Castle.Core.ComponentModel,Castle.MicroKernel.Context.CreationContext,System.Object[])">
            <summary>Sets the stub of AbstractProxyFactory.Create(IKernel kernel, Object instance, ComponentModel model, CreationContext context, Object[] constructorArguments)</summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.Fakes.StubAbstractProxyFactory.Create(Castle.MicroKernel.IProxyFactoryExtension,Castle.MicroKernel.IKernel,Castle.Core.ComponentModel,Castle.MicroKernel.Context.CreationContext,System.Object[])">
            <summary>Sets the stub of AbstractProxyFactory.Create(IProxyFactoryExtension customFactory, IKernel kernel, ComponentModel model, CreationContext context, Object[] constructorArguments)</summary>
        </member>
        <member name="F:Castle.Windsor.Proxy.Fakes.StubAbstractProxyFactory.CreateIKernelObjectComponentModelCreationContextObjectArray">
            <summary>Sets the stub of AbstractProxyFactory.Create(IKernel kernel, Object instance, ComponentModel model, CreationContext context, Object[] constructorArguments)</summary>
        </member>
        <member name="F:Castle.Windsor.Proxy.Fakes.StubAbstractProxyFactory.CreateIProxyFactoryExtensionIKernelComponentModelCreationContextObjectArray">
            <summary>Sets the stub of AbstractProxyFactory.Create(IProxyFactoryExtension customFactory, IKernel kernel, ComponentModel model, CreationContext context, Object[] constructorArguments)</summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.Fakes.StubAbstractProxyFactory.InitializeStub">
            <summary>Initializes a new instance of type StubAbstractProxyFactory</summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.Fakes.StubAbstractProxyFactory.RequiresTargetInstance(Castle.MicroKernel.IKernel,Castle.Core.ComponentModel)">
            <summary>Sets the stub of AbstractProxyFactory.RequiresTargetInstance(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="F:Castle.Windsor.Proxy.Fakes.StubAbstractProxyFactory.RequiresTargetInstanceIKernelComponentModel">
            <summary>Sets the stub of AbstractProxyFactory.RequiresTargetInstance(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.StubAbstractProxyFactory.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.StubAbstractProxyFactory.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.StubAbstractProxyFactory.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Castle.Windsor.Proxy.Fakes.StubDefaultProxyFactory">
            <summary>Stub type of Castle.Windsor.Proxy.DefaultProxyFactory</summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.Fakes.StubDefaultProxyFactory.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.Fakes.StubDefaultProxyFactory.#ctor(Castle.DynamicProxy.ProxyGenerator)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.Fakes.StubDefaultProxyFactory.#ctor(System.Boolean)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.Fakes.StubDefaultProxyFactory.Create(Castle.MicroKernel.IKernel,System.Object,Castle.Core.ComponentModel,Castle.MicroKernel.Context.CreationContext,System.Object[])">
            <summary>Sets the stub of DefaultProxyFactory.Create(IKernel kernel, Object target, ComponentModel model, CreationContext context, Object[] constructorArguments)</summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.Fakes.StubDefaultProxyFactory.Create(Castle.MicroKernel.IProxyFactoryExtension,Castle.MicroKernel.IKernel,Castle.Core.ComponentModel,Castle.MicroKernel.Context.CreationContext,System.Object[])">
            <summary>Sets the stub of DefaultProxyFactory.Create(IProxyFactoryExtension customFactory, IKernel kernel, ComponentModel model, CreationContext context, Object[] constructorArguments)</summary>
        </member>
        <member name="F:Castle.Windsor.Proxy.Fakes.StubDefaultProxyFactory.CreateIKernelObjectComponentModelCreationContextObjectArray">
            <summary>Sets the stub of DefaultProxyFactory.Create(IKernel kernel, Object target, ComponentModel model, CreationContext context, Object[] constructorArguments)</summary>
        </member>
        <member name="F:Castle.Windsor.Proxy.Fakes.StubDefaultProxyFactory.CreateIProxyFactoryExtensionIKernelComponentModelCreationContextObjectArray">
            <summary>Sets the stub of DefaultProxyFactory.Create(IProxyFactoryExtension customFactory, IKernel kernel, ComponentModel model, CreationContext context, Object[] constructorArguments)</summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.Fakes.StubDefaultProxyFactory.CustomizeOptions(Castle.DynamicProxy.ProxyGenerationOptions,Castle.MicroKernel.IKernel,Castle.Core.ComponentModel,System.Object[])">
            <summary>Sets the stub of DefaultProxyFactory.CustomizeOptions(ProxyGenerationOptions options, IKernel kernel, ComponentModel model, Object[] arguments)</summary>
        </member>
        <member name="F:Castle.Windsor.Proxy.Fakes.StubDefaultProxyFactory.CustomizeOptionsProxyGenerationOptionsIKernelComponentModelObjectArray">
            <summary>Sets the stub of DefaultProxyFactory.CustomizeOptions(ProxyGenerationOptions options, IKernel kernel, ComponentModel model, Object[] arguments)</summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.Fakes.StubDefaultProxyFactory.CustomizeProxy(System.Object,Castle.DynamicProxy.ProxyGenerationOptions,Castle.MicroKernel.IKernel,Castle.Core.ComponentModel)">
            <summary>Sets the stub of DefaultProxyFactory.CustomizeProxy(Object proxy, ProxyGenerationOptions options, IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="F:Castle.Windsor.Proxy.Fakes.StubDefaultProxyFactory.CustomizeProxyObjectProxyGenerationOptionsIKernelComponentModel">
            <summary>Sets the stub of DefaultProxyFactory.CustomizeProxy(Object proxy, ProxyGenerationOptions options, IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.Fakes.StubDefaultProxyFactory.InitializeStub">
            <summary>Initializes a new instance of type StubDefaultProxyFactory</summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.Fakes.StubDefaultProxyFactory.RequiresTargetInstance(Castle.MicroKernel.IKernel,Castle.Core.ComponentModel)">
            <summary>Sets the stub of DefaultProxyFactory.RequiresTargetInstance(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="F:Castle.Windsor.Proxy.Fakes.StubDefaultProxyFactory.RequiresTargetInstanceIKernelComponentModel">
            <summary>Sets the stub of DefaultProxyFactory.RequiresTargetInstance(IKernel kernel, ComponentModel model)</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.StubDefaultProxyFactory.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.StubDefaultProxyFactory.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.StubDefaultProxyFactory.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.Delegates.CastleWindsorDelegates">
            <summary>Contains custom delegates used for the stubs and shims of Castle.Windsor</summary>
        </member>
    </members>
</doc>
